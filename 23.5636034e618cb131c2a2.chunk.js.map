{"version":3,"sources":["webpack:///./src/lib/appManagers/appStateManager.ts"],"names":["STATE_VERSION","version","STATE_INIT","allDialogsLoaded","pinnedOrders","contactsList","updates","filters","maxSeenMsgId","stateCreatedTime","Date","now","recentEmoji","topPeers","recentSearch","authState","_","hiddenPinnedMessages","settings","messagesTextSize","sendShortcut","animationsEnabled","autoDownload","contacts","private","groups","channels","autoPlay","gifs","videos","stickers","suggest","loop","emoji","big","themes","name","background","type","blur","slug","highlightningColor","color","theme","notifications","sound","keepSigned","ALL_KEYS","Object","keys","REFRESH_KEYS","REFRESH_KEYS_WEEK","AppStateManager","super","log","neededPeers","Map","singlePeerMap","storages","users","chats","dialogs","storagesResults","storage","this","loadSavedState","loaded","console","time","Promise","resolve","storagesKeys","storagesPromises","map","key","getAll","promises","get","concat","all","then","arr","state","i","length","value","undefined","pushToState","splice","auth","shift","shiftedWebKAuth","push","values","dcID","baseDcId","id","obj","forEach","idx","set","localStorage","getItem","JSON","parse","err","getFromCache","error","dispatchEvent","r","s","hasOwnProperty","nightTheme","find","t","missingKey","timeEnd","catch","first","split","direct","peerId","limit","has","Set","add","keepPeerSingle","existsPeerId","delete","size","appStateManager"],"mappings":"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","file":"23.5636034e618cb131c2a2.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Dialog } from './appMessagesManager';\nimport type { UserAuth } from '../mtproto/mtproto_config';\nimport type { User } from './appUsersManager';\nimport type { AuthState } from '../../types';\nimport type FiltersStorage from '../storages/filters';\nimport type DialogsStorage from '../storages/dialogs';\nimport EventListenerBase from '../../helpers/eventListenerBase';\nimport rootScope from '../rootScope';\nimport stateStorage from '../stateStorage';\nimport { logger } from '../logger';\nimport { copy, setDeepProperty, validateInitObject } from '../../helpers/object';\nimport App from '../../config/app';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\nimport AppStorage from '../storage';\nimport { Chat } from '../../layer';\nimport { isMobile } from '../../helpers/userAgent';\nimport DATABASE_STATE from '../../config/databases/state';\nimport sessionStorage from '../sessionStorage';\n\nconst REFRESH_EVERY = 24 * 60 * 60 * 1000; // 1 day\nconst REFRESH_EVERY_WEEK = 24 * 60 * 60 * 1000 * 7; // 7 days\nconst STATE_VERSION = App.version;\n\nexport type Background = {\n  type: 'color' | 'image' | 'default',\n  blur: boolean,\n  highlightningColor?: string,\n  color?: string,\n  slug?: string,\n};\n\nexport type Theme = {\n  name: 'day' | 'night' | 'system',\n  background: Background\n};\n\nexport type State = {\n  allDialogsLoaded: DialogsStorage['allDialogsLoaded'],\n  pinnedOrders: DialogsStorage['pinnedOrders'],\n  contactsList: number[],\n  updates: Partial<{\n    seq: number,\n    pts: number,\n    date: number\n  }>,\n  filters: FiltersStorage['filters'],\n  maxSeenMsgId: number,\n  stateCreatedTime: number,\n  recentEmoji: string[],\n  topPeers: number[],\n  recentSearch: number[],\n  version: typeof STATE_VERSION,\n  authState: AuthState,\n  hiddenPinnedMessages: {[peerId: string]: number},\n  settings: {\n    messagesTextSize: number,\n    sendShortcut: 'enter' | 'ctrlEnter',\n    animationsEnabled: boolean,\n    autoDownload: {\n      contacts: boolean\n      private: boolean\n      groups: boolean\n      channels: boolean\n    },\n    autoPlay: {\n      gifs: boolean,\n      videos: boolean\n    },\n    stickers: {\n      suggest: boolean,\n      loop: boolean\n    },\n    emoji: {\n      suggest: boolean,\n      big: boolean\n    },\n    background?: Background, // ! DEPRECATED\n    themes: Theme[],\n    theme: Theme['name'],\n    notifications: {\n      sound: boolean\n    },\n    nightTheme?: boolean, // ! DEPRECATED\n  },\n  keepSigned: boolean\n};\n\nexport const STATE_INIT: State = {\n  allDialogsLoaded: {},\n  pinnedOrders: {},\n  contactsList: [],\n  updates: {},\n  filters: {},\n  maxSeenMsgId: 0,\n  stateCreatedTime: Date.now(),\n  recentEmoji: [],\n  topPeers: [],\n  recentSearch: [],\n  version: STATE_VERSION,\n  authState: {\n    _: isMobile ? 'authStateSignIn' : 'authStateSignQr'\n  },\n  hiddenPinnedMessages: {},\n  settings: {\n    messagesTextSize: 16,\n    sendShortcut: 'enter',\n    animationsEnabled: true,\n    autoDownload: {\n      contacts: true,\n      private: true,\n      groups: true,\n      channels: true\n    },\n    autoPlay: {\n      gifs: true,\n      videos: true\n    },\n    stickers: {\n      suggest: true,\n      loop: true\n    },\n    emoji: {\n      suggest: true,\n      big: true\n    },\n    themes: [{\n      name: 'day',\n      background: {\n        type: 'image',\n        blur: false,\n        slug: 'ByxGo2lrMFAIAAAAmkJxZabh8eM', // * new blurred camomile,\n        highlightningColor: 'hsla(85.5319, 36.9171%, 40.402%, 0.4)'\n      }\n    }, {\n      name: 'night',\n      background: {\n        type: 'color',\n        blur: false,\n        color: '#0f0f0f',\n        highlightningColor: 'hsla(0, 0%, 3.82353%, 0.4)'\n      }\n    }],\n    theme: 'system',\n    notifications: {\n      sound: false\n    }\n  },\n  keepSigned: true\n};\n\nconst ALL_KEYS = Object.keys(STATE_INIT) as any as Array<keyof State>;\n\nconst REFRESH_KEYS = ['contactsList', 'stateCreatedTime',\n  'maxSeenMsgId', 'filters', 'topPeers'] as any as Array<keyof State>;\n\nconst REFRESH_KEYS_WEEK = ['dialogs', 'allDialogsLoaded', 'updates', 'pinnedOrders'] as any as Array<keyof State>;\n\nexport class AppStateManager extends EventListenerBase<{\n  save: (state: State) => Promise<void>,\n  peerNeeded: (peerId: number) => void,\n  peerUnneeded: (peerId: number) => void,\n}> {\n  public static STATE_INIT = STATE_INIT;\n  private loaded: Promise<State>;\n  private log = logger('STATE'/* , LogLevels.error */);\n\n  private state: State;\n\n  private neededPeers: Map<number, Set<string>> = new Map();\n  private singlePeerMap: Map<string, number> = new Map();\n\n  public storages = {\n    users: new AppStorage<Record<number, User>, typeof DATABASE_STATE>(DATABASE_STATE, 'users'),\n    chats: new AppStorage<Record<number, Chat>, typeof DATABASE_STATE>(DATABASE_STATE, 'chats'),\n    dialogs: new AppStorage<Record<number, Dialog>, typeof DATABASE_STATE>(DATABASE_STATE, 'dialogs')\n  };\n\n  public storagesResults: {[key in keyof AppStateManager['storages']]: any[]} = {} as any;\n\n  public storage = stateStorage;\n\n  constructor() {\n    super();\n    this.loadSavedState();\n  }\n\n  public loadSavedState(): Promise<State> {\n    if(this.loaded) return this.loaded;\n    console.time('load state');\n    this.loaded = new Promise((resolve) => {\n      const storagesKeys = Object.keys(this.storages) as Array<keyof AppStateManager['storages']>;\n      const storagesPromises: Promise<any>[] = storagesKeys.map(key => this.storages[key].getAll());\n\n      const promises: Promise<any>[] = ALL_KEYS.map(key => stateStorage.get(key))\n      .concat(sessionStorage.get('user_auth'))\n      .concat(stateStorage.get('user_auth' as any)) // support old webk format\n      .concat(storagesPromises);\n\n      Promise.all(promises).then(async(arr) => {\n        /* const self = this;\n        const skipHandleKeys = new Set(['isProxy', 'filters', 'drafts']);\n        const getHandler = (path?: string) => {\n          return {\n            get(target: any, key: any) {\n              if(key === 'isProxy') {\n                return true;\n              }\n\n              const prop = target[key];\n\n              if(prop !== undefined && !skipHandleKeys.has(key) && !prop.isProxy && typeof(prop) === 'object') {\n                target[key] = new Proxy(prop, getHandler(path || key));\n                return target[key];\n              }\n              \n              return prop;\n            },\n            set(target: any, key: any, value: any) {\n              console.log('Setting', target, `.${key} to equal`, value, path);\n          \n              target[key] = value;\n\n              // @ts-ignore\n              self.pushToState(path || key, path ? self.state[path] : value, false);\n\n              return true;\n            }\n          };\n        }; */\n\n        let state: State = this.state = {} as any;\n\n        // ! then can't store false values\n        for(let i = 0, length = ALL_KEYS.length; i < length; ++i) {\n          const key = ALL_KEYS[i];\n          const value = arr[i];\n          if(value !== undefined) {\n            // @ts-ignore\n            state[key] = value;\n          } else {\n            this.pushToState(key, copy(STATE_INIT[key]));\n          }\n        }\n\n        arr.splice(0, ALL_KEYS.length);\n\n        // * Read auth\n        let auth = arr.shift() as UserAuth | number;\n        let shiftedWebKAuth = arr.shift() as UserAuth | number;\n        if(!auth && shiftedWebKAuth) { // support old webk auth\n          auth = shiftedWebKAuth;\n          const keys: string[] = ['dc', 'server_time_offset', 'xt_instance'];\n          for(let i = 1; i <= 5; ++i) {\n            keys.push(`dc${i}_server_salt`);\n            keys.push(`dc${i}_auth_key`);\n          }\n\n          const values = await Promise.all(keys.map(key => stateStorage.get(key as any)));\n          keys.push('user_auth');\n          values.push(typeof(auth) === 'number' ? {dcID: values[0] || App.baseDcId, id: auth} : auth);\n\n          let obj: any = {};\n          keys.forEach((key, idx) => {\n            obj[key] = values[idx];\n          });\n\n          await sessionStorage.set(obj);\n        }\n        \n        if(!auth) { // try to read Webogram's session from localStorage\n          try {\n            const keys = Object.keys(localStorage);\n            for(let i = 0; i < keys.length; ++i) {\n              const key = keys[i];\n              let value: any;\n              try {\n                value = localStorage.getItem(key);\n                value = JSON.parse(value);\n              } catch(err) {\n                //console.error(err);\n              }\n\n              sessionStorage.set({\n                [key as any]: value\n              });\n            }\n\n            auth = sessionStorage.getFromCache('user_auth');\n          } catch(err) {\n            this.log.error('localStorage import error', err);\n          }\n        }\n\n        if(auth) {\n          // ! Warning ! DON'T delete this\n          state.authState = {_: 'authStateSignedIn'};\n          rootScope.dispatchEvent('user_auth', typeof(auth) === 'number' ? {dcID: 0, id: auth} : auth); // * support old version\n        }\n\n        // * Read storages\n        for(let i = 0, length = storagesKeys.length; i < length; ++i) {\n          this.storagesResults[storagesKeys[i]] = arr[i] as any;\n        }\n\n        arr.splice(0, storagesKeys.length);\n\n        const time = Date.now();\n        if((state.stateCreatedTime + REFRESH_EVERY) < time) {\n          if(DEBUG) {\n            this.log('will refresh state', state.stateCreatedTime, time);\n          }\n\n          const r = (keys: typeof REFRESH_KEYS) => {\n            keys.forEach(key => {\n              this.pushToState(key, copy(STATE_INIT[key]));\n  \n              // @ts-ignore\n              const s = this.storagesResults[key];\n              if(s && s.length) {\n                s.length = 0;\n              }\n            });\n          };\n          \n          r(REFRESH_KEYS);\n\n          if((state.stateCreatedTime + REFRESH_EVERY_WEEK) < time) {\n            if(DEBUG) {\n              this.log('will refresh updates');\n            }\n\n            r(REFRESH_KEYS_WEEK);\n          }\n        }\n        \n        //state = this.state = new Proxy(state, getHandler());\n\n        // * support old version\n        if(!state.settings.hasOwnProperty('theme') && state.settings.hasOwnProperty('nightTheme')) {\n          state.settings.theme = state.settings.nightTheme ? 'night' : 'day';\n          this.pushToState('settings', state.settings);\n        }\n\n        // * support old version\n        if(!state.settings.hasOwnProperty('themes') && state.settings.background) {\n          state.settings.themes = copy(STATE_INIT.settings.themes);\n          const theme = state.settings.themes.find(t => t.name === state.settings.theme);\n          if(theme) {\n            theme.background = state.settings.background;\n            this.pushToState('settings', state.settings);\n          }\n        }\n\n        validateInitObject(STATE_INIT, state, (missingKey) => {\n          // @ts-ignore\n          this.pushToState(missingKey, state[missingKey]);\n        });\n\n        if(state.version !== STATE_VERSION) {\n          this.pushToState('version', STATE_VERSION);\n        }\n\n        // ! probably there is better place for it\n        rootScope.settings = state.settings;\n\n        if(DEBUG) {\n          this.log('state res', state, copy(state));\n        }\n        \n        //return resolve();\n\n        console.timeEnd('load state');\n        resolve(state);\n      }).catch(resolve);\n    });\n\n    return this.loaded;\n  }\n\n  public getState() {\n    return this.state === undefined ? this.loadSavedState() : Promise.resolve(this.state);\n  }\n\n  public setByKey(key: string, value: any) {\n    setDeepProperty(this.state, key, value);\n    rootScope.dispatchEvent('settings_updated', {key, value});\n\n    const first = key.split('.')[0];\n    // @ts-ignore\n    this.pushToState(first, this.state[first]);\n  }\n\n  public pushToState<T extends keyof State>(key: T, value: State[T], direct = true) {\n    if(direct) {\n      this.state[key] = value;\n    }\n\n    this.storage.set({\n      [key]: value\n    });\n  }\n\n  public requestPeer(peerId: number, type: string, limit?: number) {\n    let set = this.neededPeers.get(peerId);\n    if(set && set.has(type)) {\n      return;\n    }\n\n    if(!set) {\n      set = new Set();\n      this.neededPeers.set(peerId, set);\n    }\n\n    set.add(type);\n    this.dispatchEvent('peerNeeded', peerId);\n\n    if(limit !== undefined) {\n      this.keepPeerSingle(peerId, type);\n    }\n  }\n\n  public isPeerNeeded(peerId: number) {\n    return this.neededPeers.has(peerId);\n  }\n\n  public keepPeerSingle(peerId: number, type: string) {\n    const existsPeerId = this.singlePeerMap.get(type);\n    if(existsPeerId && existsPeerId !== peerId && this.neededPeers.has(existsPeerId)) {\n      const set = this.neededPeers.get(existsPeerId);\n      set.delete(type);\n\n      if(!set.size) {\n        this.neededPeers.delete(existsPeerId);\n        this.dispatchEvent('peerUnneeded', existsPeerId);\n      }\n    }\n\n    if(peerId) {\n      this.singlePeerMap.set(type, peerId);\n    }\n  }\n\n  /* public resetState() {\n    for(let i in this.state) {\n      // @ts-ignore\n      this.state[i] = false;\n    }\n    sessionStorage.set(this.state).then(() => {\n      location.reload();\n    });\n  } */\n}\n\n//console.trace('appStateManager include');\n\nconst appStateManager = new AppStateManager();\nMOUNT_CLASS_TO.appStateManager = appStateManager;\nexport default appStateManager;\n"],"sourceRoot":""}