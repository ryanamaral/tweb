{"version":3,"sources":["webpack:///./src/helpers/dom/toggleDisability.ts","webpack:///./src/pages/pageIm.ts","webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/components/monkeys/password.ts"],"names":["toggleDisability","elements","disable","forEach","el","setAttribute","removeAttribute","page","pushToState","_","then","m","default","broadcast","requestedServerLanguage","getCacheLangPack","langPack","local","getLangPack","lang_code","Promise","resolve","window","requestAnimationFrame","finally","passwordManager","invokeApi","result","settings","this","getState","state","currentHashPromise","newHashPromise","params","password","new_settings","hint","email","currentPassword","computeSRP","newAlgo","new_algo","salt1","Uint8Array","length","randomize","set","newPassword","all","hashes","new_password_hash","options","inputCheckPassword","auth","saveApiUser","user","setUserAuth","id","code","LoginPage","element","document","body","querySelector","className","container","createElement","imageDiv","title","titleLangKey","append","subtitle","subtitleLangKey","withInputWrapper","inputWrapper","PasswordInputField","super","plainText","passwordVisible","onVisibilityClick","e","toggleVisible","classList","toggle","input","type","onVisibilityClickAdditional","autocomplete","stealthy","add","tabIndex","parentElement","prepend","insertBefore","cloneNode","nextSibling","addEventListener","passwordInput","btnNext","btnNextI18n","IntlElement","key","passwordInputField","label","name","getStateInterval","setInterval","_state","wrapEmojiText","setLabel","onSubmit","value","update","preloader","check","response","clearInterval","mount","monkey","remove","catch","err","select","size","isMobile","load","focus","PasswordMonkey","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","width","height","noCache","_animation","animation","currentFrame","direction","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame"],"mappings":"4FAMe,SAASA,EAAiBC,EAAyBC,GAOhE,OANGA,EACDD,EAASE,QAAQC,GAAMA,EAAGC,aAAa,WAAY,SAEnDJ,EAASE,QAAQC,GAAMA,EAAGE,gBAAgB,aAGrC,IAAMN,EAAiBC,GAAWC,GAb3C,mC,gCCAA,0C,sSAsFA,MAAMK,EAAO,IAAI,IAAK,cAAc,EAzEjB,KAEjB,UAAgBC,YAAY,YAAa,CAACC,EAAG,sBAI7C,uCAA2BC,KAAKC,IAC9BA,EAAEC,QAAQC,UAAU,cAGlB,UAAKC,yBACP,UAAKC,mBAAmBL,KAAKM,IACxBA,EAASC,OACV,UAAKC,YAAYF,EAASG,aAKhC,cACO,IAAIC,QAAeC,IACxBC,OAAOC,sBAAsB,KACX,yEACRC,QAAQ,IAAW,OAAD,6BAExBH,cAkDO,a,gCCvFf,2BAoHA,MAAMI,EAAkB,IAlGjB,MACE,WACL,OAAO,IAAWC,UAAU,uBAAuBhB,KAAMiB,GAChDA,GAIJ,eAAeC,EAKlB,IAIF,OAAOC,KAAKC,WAAWpB,KAAKqB,IAC1B,IAAIC,EACAC,EACJ,MAAMC,EAAwC,CAC5CC,SAAU,KACVC,aAAc,CACZ3B,EAAG,gCACH4B,KAAMT,EAASS,KACfC,MAAOV,EAASU,QAKlBN,EADCJ,EAASW,gBACW,IAAWC,WAAWZ,EAASW,gBAAiBR,GAEhDX,QAAQC,QAAQ,CACnCZ,EAAG,4BAKP,MAAMgC,EAAUV,EAAMW,SAChBC,EAAQ,IAAIC,WAAWH,EAAQE,MAAME,OAAS,IAWpD,OAVAF,EAAMG,YACNH,EAAMI,IAAIN,EAAQE,MAAO,GACzBF,EAAQE,MAAQA,EAGdV,EADCL,EAASoB,YACO,IAAWR,WAAWZ,EAASoB,YAAajB,GAAO,GAEnDX,QAAQC,QAAQ,IAAIuB,YAGhCxB,QAAQ6B,IAAI,CAACjB,EAAoBC,IAAiBvB,KAAMwC,IAC7DhB,EAAOC,SAAWe,EAAO,GACzBhB,EAAOE,aAAaM,SAAWD,EAC/BP,EAAOE,aAAae,kBAAoBD,EAAO,GAExC,IAAWxB,UAAU,iCAAkCQ,OAK7D,MAAMC,EAAkBJ,EAAwBqB,EAAe,IACpE,OAAO,IAAWZ,WAAWL,EAAUJ,GAAOrB,KAAM2C,GAE3C,IAAW3B,UAAU,qBAAsB,CAChDS,SAAUkB,GACTD,GAAS1C,KAAK4C,IACD,uBAAXA,EAAK7C,IACN,IAAgB8C,YAAYD,EAAKE,MACjC,IAAWC,YAAYH,EAAKE,KAAKE,KAG5BJ,KAKN,qBAAqBK,GAC1B,OAAO,IAAWjC,UAAU,+BAAgC,CAACiC,SAGxD,sBACL,OAAO,IAAWjC,UAAU,+BAGvB,sBACL,OAAO,IAAWA,UAAU,iCAehC,IAAeD,gBAAkBA,EAClB,O,gCCtHf,8CAQe,MAAMmC,EAQnB,YAAYR,GAMVvB,KAAKgC,QAAUC,SAASC,KAAKC,cAAc,IAAMZ,EAAQa,WAIzDpC,KAAKqC,UAAYJ,SAASK,cAAc,OACxCtC,KAAKqC,UAAUD,UAAY,yBAE3BpC,KAAKuC,SAAWN,SAASK,cAAc,OACvCtC,KAAKuC,SAASH,UAAY,aAE1BpC,KAAKwC,MAAQP,SAASK,cAAc,MACjCf,EAAQkB,cACTzC,KAAKwC,MAAME,OAAO,eAAKnB,EAAQkB,eAGjCzC,KAAK2C,SAAWV,SAASK,cAAc,KACvCtC,KAAK2C,SAASP,UAAY,WACvBb,EAAQqB,iBACT5C,KAAK2C,SAASD,OAAO,eAAKnB,EAAQqB,kBAGpC5C,KAAKqC,UAAUK,OAAO1C,KAAKuC,SAAUvC,KAAKwC,MAAOxC,KAAK2C,UAEnDpB,EAAQsB,mBACT7C,KAAK8C,aAAeb,SAASK,cAAc,OAC3CtC,KAAK8C,aAAaV,UAAY,gBAC9BpC,KAAKqC,UAAUK,OAAO1C,KAAK8C,eAG7B9C,KAAKgC,QAAQU,OAAO1C,KAAKqC,c,gCCnD7B,sDASe,MAAMU,UAA2B,IAK9C,YAAYxB,EAA6B,IACvCyB,MAAM,OAAD,QACHC,WAAW,GACR1B,IAPA,KAAA2B,iBAAkB,EAsClB,KAAAC,kBAAqBC,IAC1B,YAAYA,GACZpD,KAAKkD,iBAAmBlD,KAAKkD,gBAE7BlD,KAAKqD,cAAcC,UAAUC,OAAO,aAAcvD,KAAKkD,iBACtDlD,KAAKwD,MAA2BC,KAAOzD,KAAKkD,gBAAkB,OAAS,WACxElD,KAAK0D,6BAA+B1D,KAAK0D,+BAlCzC,MAAMF,EAAQxD,KAAKwD,MACnBA,EAAMC,KAAO,WACbD,EAAMhF,aAAa,WAAY,IAC/BgF,EAAMG,aAAe,MAQrB,MAAMC,EAAW3B,SAASK,cAAc,SACxCsB,EAASN,UAAUO,IAAI,YACvBD,EAASE,UAAY,EACrBF,EAASH,KAAO,WAChBD,EAAMO,cAAcC,QAAQJ,GAC5BJ,EAAMO,cAAcE,aAAaL,EAASM,YAAaV,EAAMW,aAE7D,MAAMd,EAAgBrD,KAAKqD,cAAgBpB,SAASK,cAAc,QAClEe,EAAcC,UAAUO,IAAI,iBAAkB,SAE9C7D,KAAKqC,UAAUiB,UAAUO,IAAI,wBAC7B7D,KAAKqC,UAAUK,OAAOW,GAEtBA,EAAce,iBAAiB,QAASpE,KAAKmD,mBAC7CE,EAAce,iBAAiB,WAAYpE,KAAKmD,sB,gCC7CpD,mJA0BA,IAAIkB,EAkHJ,MAAM3F,EAAO,IAAI,IAAK,iBAAiB,EAhHpB,KACjB,MAAMA,EAAO,IAAI,IAAU,CACzB0D,UAAW,gBACXS,kBAAkB,EAClBJ,aAAc,uBACdG,gBAAiB,4BAGb0B,EAAU,YAAO,iCACjBC,EAAc,IAAI,UAAKC,YAAY,CAACC,IAAK,eAE/CH,EAAQ5B,OAAO6B,EAAYvC,SAE3B,MAAM0C,EAAqB,IAAI,IAAmB,CAChDC,MAAO,gBACPC,KAAM,aAOR,IAAIC,EAJJR,EAAgBK,EAAmBlB,MAEnC9E,EAAKoE,aAAaJ,OAAOgC,EAAmBrC,UAAWiC,GAIvD,IAiBIpE,EAjBAD,EAAW,KAET4E,IACFA,EAAmBpF,OAAOqF,YAAY7E,EAAU,MAGlC,IAAgBA,WAAWpB,KAAKkG,IAC9C7E,EAAQ6E,EAEL7E,EAAMM,KACP,YAAekE,EAAmBC,MAAO,YAAW,IAAkBK,cAAc9E,EAAMM,QAE1FkE,EAAmBO,cAOzB,MAAMC,EAAY9B,IAKhB,GAJGA,GACD,YAAYA,IAGViB,EAAcc,MAAMnE,OAEtB,YADAqD,EAAcf,UAAUO,IAAI,SAI9B,MAAMN,EAAS,YAAiB,CAACc,EAAeC,IAAU,GAC1D,IAAIa,EAAQd,EAAcc,MAE1BZ,EAAYa,OAAO,CAACX,IAAK,eACzB,MAAMY,EAAY,YAAaf,GAE/B,IAAgBgB,MAAMH,EAAOjF,GAAOrB,KAAM0G,IAGxC,OAAOA,EAAS3G,GACd,IAAK,qBACH4G,cAAcX,GACd,UAAOY,QACJC,GAAQA,EAAOC,SAClB,MACF,QACErB,EAAQ7F,gBAAgB,YACxB8F,EAAYa,OAAO,CAACX,IAAKc,EAAS3G,IAClCyG,EAAUM,YAGbC,MAAOC,IACRtC,IACAmB,EAAmBlB,MAAMF,UAAUO,IAAI,SAEhCgC,EAAIpC,KAGPc,EAAYa,OAAO,CAACX,IAAK,0BACzBJ,EAAcyB,SAIlBT,EAAUM,SAEV1F,OAIJ,YAAiBqE,EAASY,GAE1Bb,EAAcD,iBAAiB,YAAY,SAAehB,GAIxD,GAHApD,KAAKsD,UAAUqC,OAAO,SACtBpB,EAAYa,OAAO,CAACX,IAAK,eAEZ,UAAVrB,EAAEqB,IACH,OAAOS,OAIX,MAAMa,EAAO,IAAWC,SAAW,IAAM,IACnCN,EAAS,IAAI,IAAehB,EAAoBqB,GAEtD,OADArH,EAAK6D,SAASG,OAAOgD,EAAOrD,WACrB9C,QAAQ6B,IAAI,CACjBsE,EAAOO,OACPhG,OAIuD,KAAM,KAE7DoE,EAAc6B,QAGhB,UAAgBvH,YAAY,YAAa,CAACC,EAAG,wBAGhC,a,gCCpJf,8CASe,MAAMuH,EAMnB,YAAsBzB,EAAkDqB,GAAlD,KAAArB,qBAAkD,KAAAqB,OAHjE,KAAAK,UAAY,EAIjBpG,KAAKqC,UAAYJ,SAASK,cAAc,OACxCtC,KAAKqC,UAAUiB,UAAUO,IAAI,yBAGxB,OACL,OAAG7D,KAAKqG,YAAoBrG,KAAKqG,YAC1BrG,KAAKqG,YAAc,IAAaC,qBAAqB,CAC1DjE,UAAWrC,KAAKqC,UAChBkE,MAAM,EACNC,UAAU,EACVC,MAAOzG,KAAK+F,KACZW,OAAQ1G,KAAK+F,KACbY,SAAS,GAER,2CAA2C9H,KAAK+H,IAEjD5G,KAAK6G,UAAYD,EACjB5G,KAAK6G,UAAUzC,iBAAiB,aAAc0C,KAGX,IAA7B9G,KAAK6G,UAAUE,WAAmBD,GAAgB9G,KAAKoG,YAC1B,IAA9BpG,KAAK6G,UAAUE,WAAoBD,GAAgB9G,KAAKoG,aACvDpG,KAAK6G,UAAUG,SAAS,GACxBhH,KAAK6G,UAAUI,WAIrBjH,KAAK0E,mBAAmBhB,4BAA8B,KACjD1D,KAAK0E,mBAAmBxB,iBACzBlD,KAAK6G,UAAUK,aAAa,GAC5BlH,KAAK6G,UAAUM,SAAW,EAC1BnH,KAAKoG,UAAY,GACjBpG,KAAK6G,UAAUO,SAEfpH,KAAK6G,UAAUK,cAAc,GAC7BlH,KAAK6G,UAAUM,SAAW,GAC1BnH,KAAKoG,UAAY,EACjBpG,KAAK6G,UAAUO,SAIZ,IAAaC,kBAAkBT,KAInC,SACF5G,KAAK6G,WACN7G,KAAK6G,UAAUlB","file":"16.7d198046ad11838885e7.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function toggleDisability(elements: HTMLElement[], disable: boolean) {\r\n  if(disable) {\r\n    elements.forEach(el => el.setAttribute('disabled', 'true'));\r\n  } else {\r\n    elements.forEach(el => el.removeAttribute('disabled'));\r\n  }\r\n\r\n  return () => toggleDisability(elements, !disable);\r\n}\r\n","//import {stackBlurImage} from '../lib/StackBlur';\r\n//import appStateManager from \"../lib/appManagers/appStateManager\";\r\n/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport blurActiveElement from \"../helpers/dom/blurActiveElement\";\r\nimport appStateManager from \"../lib/appManagers/appStateManager\";\r\nimport I18n from \"../lib/langPack\";\r\nimport Page from \"./page\";\r\n\r\nlet onFirstMount = () => {\r\n  //return;\r\n  appStateManager.pushToState('authState', {_: 'authStateSignedIn'});\r\n  // ! TOO SLOW\r\n  /* appStateManager.saveState(); */\r\n\r\n  import('../lib/rootScope').then(m => {\r\n    m.default.broadcast('im_mount');\r\n  });\r\n\r\n  if(!I18n.requestedServerLanguage) {\r\n    I18n.getCacheLangPack().then(langPack => {\r\n      if(langPack.local) {\r\n        I18n.getLangPack(langPack.lang_code);\r\n      }\r\n    });\r\n  }\r\n\r\n  blurActiveElement();\r\n  return new Promise<void>((resolve) => {\r\n    window.requestAnimationFrame(() => {\r\n      const promise = import('../lib/appManagers/appDialogsManager');\r\n      promise.finally(async() => {\r\n        //alert('pageIm!');\r\n        resolve();\r\n    \r\n        //AudioContext && global.navigator && global.navigator.mediaDevices && global.navigator.mediaDevices.getUserMedia && global.WebAssembly;\r\n    \r\n        /* // @ts-ignore\r\n        var AudioContext = globalThis.AudioContext || globalThis.webkitAudioContext;\r\n        alert('AudioContext:' + typeof(AudioContext));\r\n        // @ts-ignore\r\n        alert('global.navigator:' + typeof(navigator));\r\n        alert('navigator.mediaDevices:' + typeof(navigator.mediaDevices));\r\n        alert('navigator.mediaDevices.getUserMedia:' + typeof(navigator.mediaDevices?.getUserMedia));\r\n        alert('global.WebAssembly:' + typeof(WebAssembly)); */\r\n    \r\n        //(Array.from(document.getElementsByClassName('rp')) as HTMLElement[]).forEach(el => ripple(el));\r\n      });\r\n    });\r\n  });\r\n\r\n  //let promise = /* Promise.resolve() */.then(() => {//import('../lib/services').then(services => {\r\n    /* fetch('assets/img/camomile.jpg')\r\n    .then(res => res.blob())\r\n    .then(blob => {\r\n      let img = new Image();\r\n      let url = URL.createObjectURL(blob);\r\n      img.src = url;\r\n      img.onload = () => {\r\n        let id = 'chat-background-canvas';\r\n        var canvas  = document.getElementById(id) as HTMLCanvasElement;\r\n        //URL.revokeObjectURL(url);\r\n  \r\n        let elements = ['.chat-container'].map(selector => {\r\n          return document.querySelector(selector) as HTMLDivElement;\r\n        });\r\n  \r\n        stackBlurImage(img, id, 15, 0);\r\n  \r\n        canvas.toBlob(blob => {\r\n          //let dataUrl = canvas.toDataURL('image/jpeg', 1);\r\n          let dataUrl = URL.createObjectURL(blob);\r\n  \r\n          elements.forEach(el => {\r\n            el.style.backgroundImage = 'url(' + dataUrl + ')';\r\n          });\r\n        }, 'image/jpeg', 1);\r\n      };\r\n    }); */\r\n  //});\r\n};\r\n\r\nconst page = new Page('page-chats', false, onFirstMount);\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountPasswordInputSettings, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport type CryptoWorkerMethods from '../crypto/crypto_methods';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport appUsersManager from '../appManagers/appUsersManager';\r\nimport apiManager from './mtprotoworker';\r\n//import { computeCheck } from \"../crypto/srp\";\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: ReturnType<CryptoWorkerMethods['computeSRP']>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.computeSRP(settings.currentPassword, state);\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.computeSRP(settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.computeSRP(password, state).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          appUsersManager.saveApiUser(auth.user);\r\n          apiManager.setUserAuth(auth.user.id);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.autocomplete = 'off';\r\n    /* input.readOnly = true;\r\n\r\n    input.addEventListener('focus', () => {\r\n      input.removeAttribute('readonly');\r\n    }, {once: true}); */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport pageIm from './pageIm';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\r\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\r\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          pageIm.mount();\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: Promise<void>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}