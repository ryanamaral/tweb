{"version":3,"sources":["webpack:///./src/components/inputField.ts","webpack:///./src/components/scrollable.ts","webpack:///./src/helpers/random.ts","webpack:///./src/components/checkboxField.ts","webpack:///./src/helpers/dom/findUpTag.ts","webpack:///./src/lib/filemanager.ts","webpack:///./src/lib/cacheStorage.ts"],"names":["init","document","addEventListener","e","target","hasAttribute","parentElement","preventDefault","text","originalEvent","clipboardData","getData","entities","parseEntities","filter","_","wrapRichText","noLinks","wrappingDraft","window","execCommand","InputState","options","this","container","createElement","classList","add","maxLength","showLengthOn","Math","round","placeholder","name","plainText","input","processInput","label","labelText","innerHTML","firstElementChild","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","wasInputFakeClientHeight","showScrollDebounced","remove","setAttribute","className","undefined","border","append","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","value","length","diff","isError","toggle","select","textContent","labelOptions","scrollHeight","clientHeight","style","height","setValueSilently","event","Event","bubbles","cancelable","dispatchEvent","fireFakeInput","originalValue","silent","wrapDraftText","state","Error","Valid","setState","ScrollableBase","el","logPrefix","onScrollMeasure","isHeavyAnimationInProgress","needCheckAfterAnimation","log","Array","from","children","forEach","c","onScroll","passive","capture","cancelAnimationFrame","element","position","margin","maxDistance","forceDirection","forceDuration","axis","Scrollable","onScrollOffset","withPaddingContainer","super","onAdditionalScroll","onScrolledTop","onScrolledBottom","lastScrollTop","lastScrollDirection","loadedAll","top","bottom","splitUp","requestAnimationFrame","scrollTop","checkForTriggers","maxScrollTop","setListeners","elements","padding","prepend","offsetHeight","getDistanceToEnd","y","ScrollableX","splitCount","scrollHorizontally","deltaX","scrollWidth","clientWidth","scrollLeft","deltaY","nextRandomInt","maxValue","floor","random","randomLong","CheckboxField","restriction","disabled","toggleDisability","span","type","id","checked","stateKey","getState","then","stateValue","stateValues","indexOf","setByKey","textArgs","box","checkSvg","createElementNS","setAttributeNS","use","bg","withRipple","withHover","disable","findUpTag","tag","closest","blobSupported","fileWriter","bytes","Blob","Promise","resolve","reject","fileReader","FileReader","onload","arrayBuffer","result","arr","Uint8Array","write","readAsArrayBuffer","mimeType","saveFileCallback","blobParts","part","push","truncate","finalize","saveToStorage","blob","dbName","useStorage","test","openDatabase","STORAGES","openDbPromise","caches","open","entryName","timeoutOperation","cache","delete","response","put","fileName","save","Response","method","match","callback","rejected","timeout","setTimeout","res","err","clearTimeout","fakeWriter","getFakeFileWriter","saveFile","enabled","all","map","storage","deleteAll"],"mappings":"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","file":"6.ddd66130ca3b39122a9e.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { getRichValue, isInputEmpty } from \"../helpers/dom\";\r\nimport { debounce } from \"../helpers/schedulers\";\r\nimport { checkRTL } from \"../helpers/string\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!(e.target as HTMLElement).hasAttribute('contenteditable') && !(e.target as HTMLElement).parentElement.hasAttribute('contenteditable')) {\r\n      return;\r\n    }\r\n    //console.log('document paste');\r\n\r\n    //console.log('messageInput paste');\r\n\r\n    e.preventDefault();\r\n    // @ts-ignore\r\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n    let entities = RichTextProcessor.parseEntities(text);\r\n    //console.log('messageInput paste', text, entities);\r\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    //text = RichTextProcessor.wrapEmojiText(text);\r\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\r\n\r\n    // console.log('messageInput paste after', text);\r\n\r\n    // @ts-ignore\r\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\r\n\r\n    // @ts-ignore\r\n    //console.log('paste text', text, );\r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: true\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  protected wasInputFakeClientHeight: number;\r\n  protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    if(options.maxLength) {\r\n      options.showLengthOn = Math.round(options.maxLength / 3);\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        this.wasInputFakeClientHeight = 0;\r\n        this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input)].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if((this.input as HTMLInputElement).value) { // * avoid selecting whole empty field on iOS devices\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput() {\r\n    const {scrollHeight, clientHeight} = this.inputFake;\r\n    if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    }\r\n\r\n    this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.height = scrollHeight ? scrollHeight + 'px' : '';\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input);\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    const event = new Event('input', {bubbles: true, cancelable: true});\r\n    this.input.dispatchEvent(event);\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && this.value !== this.originalValue;\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { isTouchSupported } from \"../helpers/touchSupport\";\r\nimport { logger, LogTypes } from \"../lib/logger\";\r\nimport fastSmoothScroll, { FocusDirection } from \"../helpers/fastSmoothScroll\";\r\nimport useHeavyAnimationCheck from \"../hooks/useHeavyAnimationCheck\";\r\nimport { cancelEvent } from \"../helpers/dom\";\r\n/*\r\nvar el = $0;\r\nvar height = 0;\r\nvar checkUp = false;\r\n\r\ndo {\r\n  height += el.scrollHeight;\r\n} while(el = (checkUp ? el.previousElementSibling : el.nextElementSibling));\r\nconsole.log(height);\r\n*/\r\n\r\n/*\r\nArray.from($0.querySelectorAll('.bubble-content')).forEach(_el => {\r\n\t//_el.style.display = '';\t\r\n\t//return;\r\n\r\n\tlet el = _el.parentElement;\r\n\tlet height = el.scrollHeight;\r\n\tlet width = el.scrollWidth;\r\n\tel.style.width = width + 'px';\r\n\tel.style.height = height + 'px';\r\n\t_el.style.display = 'none';\r\n});\r\n*/\r\n\r\n/* const scrollables: Map<HTMLElement, Scrollable> = new Map();\r\nconst scrollsIntersector = new IntersectionObserver(entries => {\r\n  for(let entry of entries) {\r\n    const scrollable = scrollables.get(entry.target as HTMLElement);\r\n\r\n    if(entry.isIntersecting) {\r\n      scrollable.isVisible = true;\r\n    } else {\r\n      scrollable.isVisible = false;\r\n\r\n      if(!isInDOM(entry.target)) {\r\n        scrollsIntersector.unobserve(scrollable.container);\r\n        scrollables.delete(scrollable.container);\r\n      }\r\n    }\r\n  }\r\n}); */\r\n\r\nexport class ScrollableBase {\r\n  protected log: ReturnType<typeof logger>;\r\n\r\n  public onScrollMeasure: number = 0;\r\n  protected onScroll: () => void;\r\n\r\n  public isHeavyAnimationInProgress = false;\r\n  protected needCheckAfterAnimation = false;\r\n\r\n  constructor(public el: HTMLElement, logPrefix = '', public container: HTMLElement = document.createElement('div')) {\r\n    this.container.classList.add('scrollable');\r\n\r\n    this.log = logger('SCROLL' + (logPrefix ? '-' + logPrefix : ''), LogTypes.Error);\r\n\r\n    if(el) {\r\n      Array.from(el.children).forEach(c => this.container.append(c));\r\n\r\n      el.append(this.container);\r\n    }\r\n    //this.onScroll();\r\n  }\r\n\r\n  protected setListeners() {\r\n    window.addEventListener('resize', this.onScroll, {passive: true});\r\n    this.container.addEventListener('scroll', this.onScroll, {passive: true, capture: true});\r\n\r\n    useHeavyAnimationCheck(() => {\r\n      this.isHeavyAnimationInProgress = true;\r\n\r\n      if(this.onScrollMeasure) {\r\n        this.needCheckAfterAnimation = true;\r\n        window.cancelAnimationFrame(this.onScrollMeasure);\r\n      }\r\n    }, () => {\r\n      this.isHeavyAnimationInProgress = false;\r\n\r\n      if(this.needCheckAfterAnimation) {\r\n        this.onScroll();\r\n        this.needCheckAfterAnimation = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  public append(element: HTMLElement) {\r\n    this.container.append(element);\r\n  }\r\n\r\n  public scrollIntoViewNew(\r\n    element: HTMLElement,\r\n    position: ScrollLogicalPosition,\r\n    margin?: number,\r\n    maxDistance?: number,\r\n    forceDirection?: FocusDirection,\r\n    forceDuration?: number,\r\n    axis?: 'x' | 'y'\r\n  ) {\r\n    //return Promise.resolve();\r\n    return fastSmoothScroll(this.container, element, position, margin, maxDistance, forceDirection, forceDuration, axis);\r\n  }\r\n}\r\n\r\nexport type SliceSides = 'top' | 'bottom';\r\nexport type SliceSidesContainer = {[k in SliceSides]: boolean};\r\n\r\nexport default class Scrollable extends ScrollableBase {\r\n  public splitUp: HTMLElement;\r\n  public padding: HTMLElement;\r\n  \r\n  public onAdditionalScroll: () => void = null;\r\n  public onScrolledTop: () => void = null;\r\n  public onScrolledBottom: () => void = null;\r\n  \r\n  public lastScrollTop: number = 0;\r\n  public lastScrollDirection: number = 0;\r\n\r\n  public loadedAll: SliceSidesContainer = {top: true, bottom: false};\r\n\r\n  constructor(el: HTMLElement, logPrefix = '', public onScrollOffset = 300, withPaddingContainer?: boolean) {\r\n    super(el, logPrefix);\r\n\r\n    /* if(withPaddingContainer) {\r\n      this.padding = document.createElement('div');\r\n      this.padding.classList.add('scrollable-padding');\r\n      Array.from(this.container.children).forEach(c => this.padding.append(c));\r\n      this.container.append(this.padding);\r\n    } */\r\n\r\n    this.container.classList.add('scrollable-y');\r\n    this.setListeners();\r\n  }\r\n\r\n  public setVirtualContainer(el?: HTMLElement) {\r\n    this.splitUp = el;\r\n    this.log('setVirtualContainer:', el, this);\r\n  }\r\n\r\n  public onScroll = () => {\r\n    //if(this.debug) {\r\n      //this.log('onScroll call', this.onScrollMeasure);\r\n    //}\r\n\r\n    //return;\r\n\r\n    if(this.isHeavyAnimationInProgress) {\r\n      if(this.onScrollMeasure) {\r\n        window.cancelAnimationFrame(this.onScrollMeasure);\r\n      }\r\n\r\n      this.needCheckAfterAnimation = true;\r\n      return;\r\n    }\r\n\r\n    //if(this.onScrollMeasure || ((this.scrollLocked || (!this.onScrolledTop && !this.onScrolledBottom)) && !this.splitUp && !this.onAdditionalScroll)) return;\r\n    if((!this.onScrolledTop && !this.onScrolledBottom) && !this.splitUp && !this.onAdditionalScroll) return;\r\n    if(this.onScrollMeasure) window.cancelAnimationFrame(this.onScrollMeasure);\r\n    this.onScrollMeasure = window.requestAnimationFrame(() => {\r\n      this.onScrollMeasure = 0;\r\n\r\n      const scrollTop = this.container.scrollTop;\r\n      this.lastScrollDirection = this.lastScrollTop === scrollTop ? 0 : (this.lastScrollTop < scrollTop ? 1 : -1); // * 1 - bottom, -1 - top\r\n      this.lastScrollTop = scrollTop;\r\n\r\n      if(this.onAdditionalScroll && this.lastScrollDirection !== 0) {\r\n        this.onAdditionalScroll();\r\n      }\r\n      \r\n      if(this.checkForTriggers) {\r\n        this.checkForTriggers();\r\n      }\r\n    });\r\n  };\r\n\r\n  public checkForTriggers = () => {\r\n    if((!this.onScrolledTop && !this.onScrolledBottom)) return;\r\n\r\n    if(this.isHeavyAnimationInProgress) {\r\n      this.onScroll();\r\n      return;\r\n    }\r\n\r\n    const scrollHeight = this.container.scrollHeight;\r\n    if(!scrollHeight) { // незачем вызывать триггеры если блок пустой или не виден\r\n      return;\r\n    }\r\n\r\n    const clientHeight = this.container.clientHeight;\r\n    const maxScrollTop = scrollHeight - clientHeight;\r\n    const scrollTop = this.lastScrollTop;\r\n\r\n    //this.log('checkForTriggers:', scrollTop, maxScrollTop);\r\n\r\n    if(this.onScrolledTop && scrollTop <= this.onScrollOffset && this.lastScrollDirection <= 0/* && direction === -1 */) {\r\n      this.onScrolledTop();\r\n    }\r\n\r\n    if(this.onScrolledBottom && (maxScrollTop - scrollTop) <= this.onScrollOffset && this.lastScrollDirection >= 0/* && direction === 1 */) {\r\n      this.onScrolledBottom();\r\n    }\r\n  };\r\n\r\n  public prepend(...elements: HTMLElement[]) {\r\n    (this.splitUp || this.padding || this.container).prepend(...elements);\r\n  }\r\n\r\n  public append(...elements: HTMLElement[]) {\r\n    (this.splitUp || this.padding || this.container).append(...elements);\r\n  }\r\n\r\n  public getDistanceToEnd() {\r\n    return this.scrollHeight - Math.round(this.scrollTop + this.container.offsetHeight);\r\n  }\r\n\r\n  get isScrolledDown() {\r\n    return this.getDistanceToEnd() <= 1;\r\n  }\r\n\r\n  set scrollTop(y: number) {\r\n    this.container.scrollTop = y;\r\n  }\r\n  \r\n  get scrollTop() {\r\n    //this.log.trace('get scrollTop');\r\n    return this.container.scrollTop;\r\n  }\r\n  \r\n  get scrollHeight() {\r\n    return this.container.scrollHeight;\r\n  }\r\n}\r\n\r\nexport class ScrollableX extends ScrollableBase {\r\n  constructor(el: HTMLElement, logPrefix = '', public onScrollOffset = 300, public splitCount = 15, public container: HTMLElement = document.createElement('div')) {\r\n    super(el, logPrefix, container);\r\n\r\n    this.container.classList.add('scrollable-x');\r\n\r\n    if(!isTouchSupported) {\r\n      const scrollHorizontally = (e: any) => {\r\n        if(!e.deltaX && this.container.scrollWidth > this.container.clientWidth) {\r\n          this.container.scrollLeft += e.deltaY / 4;\r\n          cancelEvent(e);\r\n        }\r\n      };\r\n      \r\n      this.container.addEventListener('wheel', scrollHorizontally, {passive: false});\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport function nextRandomInt(maxValue: number) {\r\n  return Math.floor(Math.random() * maxValue);\r\n}\r\n\r\nexport function randomLong() {\r\n  return '' + nextRandomInt(0xFFFFFFFF) + nextRandomInt(0xFFFFFF);\r\n  //return '' + parseInt(nextRandomInt(0xFFFFFFFF).toString(16) + nextRandomInt(0xFFFFFFFF).toString(16), 16);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport appStateManager from \"../lib/appManagers/appStateManager\";\r\nimport { getDeepProperty } from \"../helpers/object\";\r\nimport { ripple } from \"./ripple\";\r\nimport { LangPackKey, _i18n } from \"../lib/langPack\";\r\n\r\nexport type CheckboxFieldOptions = {\r\n  text?: LangPackKey,\r\n  textArgs?: any[],\r\n  name?: string, \r\n  round?: boolean, \r\n  toggle?: boolean,\r\n  stateKey?: string,\r\n  stateValues?: any[],\r\n  disabled?: boolean,\r\n  checked?: boolean,\r\n  restriction?: boolean,\r\n  withRipple?: boolean,\r\n  withHover?: boolean,\r\n};\r\nexport default class CheckboxField {\r\n  public input: HTMLInputElement;\r\n  public label: HTMLLabelElement;\r\n  public span: HTMLSpanElement;\r\n\r\n  constructor(options: CheckboxFieldOptions = {}) {\r\n    const label = this.label = document.createElement('label');\r\n    label.classList.add('checkbox-field');\r\n\r\n    if(options.restriction) {\r\n      label.classList.add('checkbox-field-restriction');\r\n    }\r\n\r\n    if(options.round) {\r\n      label.classList.add('checkbox-field-round');\r\n    }\r\n\r\n    if(options.disabled) {\r\n      this.toggleDisability(true);\r\n    }\r\n\r\n    const input = this.input = document.createElement('input');\r\n    input.type = 'checkbox';\r\n    if(options.name) {\r\n      input.id = 'input-' + options.name;\r\n    }\r\n\r\n    if(options.checked) {\r\n      input.checked = true;\r\n    }\r\n\r\n    if(options.stateKey) {\r\n      appStateManager.getState().then(state => {\r\n        const stateValue = getDeepProperty(state, options.stateKey);\r\n        let checked: boolean;\r\n        if(options.stateValues) {\r\n          checked = options.stateValues.indexOf(stateValue) === 1;\r\n        } else {\r\n          checked = stateValue;\r\n        }\r\n\r\n        this.setValueSilently(checked);\r\n\r\n        input.addEventListener('change', () => {\r\n          let value: any;\r\n          if(options.stateValues) {\r\n            value = options.stateValues[input.checked ? 1 : 0];\r\n          } else {\r\n            value = input.checked;\r\n          }\r\n\r\n          appStateManager.setByKey(options.stateKey, value);\r\n        });\r\n      });\r\n    }\r\n\r\n    let span: HTMLSpanElement;\r\n    if(options.text) {\r\n      span = this.span = document.createElement('span');\r\n      span.classList.add('checkbox-caption');\r\n      _i18n(span, options.text, options.textArgs);\r\n    } else {\r\n      label.classList.add('checkbox-without-caption');\r\n    }\r\n\r\n    label.append(input);\r\n\r\n    if(options.toggle) {\r\n      label.classList.add('checkbox-field-toggle');\r\n\r\n      const toggle = document.createElement('div');\r\n      toggle.classList.add('checkbox-toggle');\r\n      label.append(toggle);\r\n    } else {\r\n      const box = document.createElement('div');\r\n      box.classList.add('checkbox-box');\r\n  \r\n      const checkSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n      checkSvg.classList.add('checkbox-box-check');\r\n      checkSvg.setAttributeNS(null, 'viewBox', '0 0 24 24');\r\n      const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n      use.setAttributeNS(null, 'href', '#check');\r\n      use.setAttributeNS(null, 'x', '-1');\r\n      checkSvg.append(use);\r\n  \r\n      const bg = document.createElement('div');\r\n      bg.classList.add('checkbox-box-background');\r\n  \r\n      const border = document.createElement('div');\r\n      border.classList.add('checkbox-box-border');\r\n  \r\n      box.append(border, bg, checkSvg);\r\n  \r\n      label.append(box);\r\n    }\r\n\r\n    if(span) {\r\n      label.append(span);\r\n    }\r\n\r\n    if(options.withRipple) {\r\n      label.classList.add('checkbox-ripple', 'hover-effect');\r\n      ripple(label, undefined, undefined, true);\r\n      //label.prepend(input);\r\n    } else if(options.withHover) {\r\n      label.classList.add('hover-effect');\r\n    }\r\n  }\r\n\r\n  get checked() {\r\n    return this.input.checked;\r\n  }\r\n\r\n  set checked(checked: boolean) {\r\n    this.setValueSilently(checked);\r\n\r\n    const event = new Event('change', {bubbles: true, cancelable: true});\r\n    this.input.dispatchEvent(event);\r\n  }\r\n\r\n  public setValueSilently(checked: boolean) {\r\n    this.input.checked = checked;\r\n  }\r\n\r\n  public toggleDisability(disable: boolean) {\r\n    this.label.classList.toggle('checkbox-disabled', disable);\r\n    return () => this.toggleDisability(!disable);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpTag(el: any, tag: string): HTMLElement {\r\n  return el.closest(tag);\r\n  /* if(el.tagName === tag) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.tagName === tag) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { blobConstruct } from \"../helpers/blob\";\r\n\r\nexport class FileManager {\r\n  public blobSupported = true;\r\n  \r\n  constructor() {\r\n    try {\r\n      blobConstruct([], '');\r\n    } catch(e) {\r\n      this.blobSupported = false;\r\n    }\r\n  }\r\n  \r\n  public isAvailable() {\r\n    return this.blobSupported;\r\n  }\r\n  \r\n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\r\n    if(bytes instanceof Blob) { // is file bytes\r\n      return new Promise((resolve, reject) => {\r\n        let fileReader = new FileReader();\r\n        fileReader.onload = function(event) {\r\n          let arrayBuffer = event.target.result as ArrayBuffer;\r\n          \r\n          let arr = new Uint8Array(arrayBuffer);\r\n          \r\n          fileWriter.write(arr).then(resolve, reject);\r\n        };\r\n        \r\n        fileReader.readAsArrayBuffer(bytes);\r\n      });\r\n    } else {\r\n      return fileWriter.write(bytes);\r\n    }\r\n  }\r\n\r\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\r\n    const blobParts: Array<Uint8Array | string> = [];\r\n    const fakeFileWriter = {\r\n      write: async(part: Uint8Array | string) => {\r\n        if(!this.blobSupported) {\r\n          throw false;\r\n        }\r\n        \r\n        blobParts.push(part);\r\n      },\r\n      truncate: () => {\r\n        blobParts.length = 0;\r\n      },\r\n      finalize: (saveToStorage = true) => {\r\n        const blob = blobConstruct(blobParts, mimeType);\r\n\r\n        if(saveToStorage && saveFileCallback) {\r\n          saveFileCallback(blob);\r\n        }\r\n        \r\n        return blob;\r\n      }\r\n    };\r\n    \r\n    return fakeFileWriter;\r\n  }\r\n}\r\n\r\nexport default new FileManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport FileManager from './filemanager';\r\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\r\n//import { logger } from './polyfill';\r\n\r\nexport default class CacheStorageController {\r\n  private static STORAGES: CacheStorageController[] = [];\r\n  //public dbName = 'cachedFiles';\r\n  private openDbPromise: Promise<Cache>;\r\n\r\n  private useStorage = true;\r\n\r\n  //private log: ReturnType<typeof logger> = logger('CS');\r\n\r\n  constructor(private dbName: string) {\r\n    if(Modes.test) {\r\n      this.dbName += '_test';\r\n    }\r\n    \r\n    this.openDatabase();\r\n    CacheStorageController.STORAGES.push(this);\r\n  }\r\n\r\n  private openDatabase(): Promise<Cache> {\r\n    if(this.openDbPromise) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    return this.openDbPromise = caches.open(this.dbName);\r\n  }\r\n\r\n  public delete(entryName: string) {\r\n    return this.timeoutOperation((cache) => {\r\n      return cache.delete('/' + entryName);\r\n    });\r\n  }\r\n\r\n  public deleteAll() {\r\n    return caches.delete(this.dbName);\r\n  }\r\n\r\n  public save(entryName: string, response: Response) {\r\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\r\n\r\n    return this.timeoutOperation((cache) => {\r\n      return cache.put('/' + entryName, response);\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\r\n\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct(blob) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, new Response(blob)).then(() => {\r\n      return blob as Blob;\r\n    });\r\n  }\r\n\r\n  /* public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\r\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\r\n\r\n    /* if(method === 'blob') {\r\n      return Promise.reject();\r\n    } */\r\n\r\n    // const str = `get fileName: ${fileName}`;\r\n    // console.time(str);\r\n    return this.timeoutOperation(async(cache) => {\r\n      const response = await cache.match('/' + fileName);\r\n\r\n      if(!response || !cache) {\r\n        //console.warn('getFile:', response, fileName);\r\n        throw 'NO_ENTRY_FOUND';\r\n      }\r\n   \r\n      const promise = response[method]();\r\n      // promise.then(() => {\r\n      //   console.timeEnd(str);\r\n      // });\r\n      return promise;\r\n    });\r\n  }\r\n\r\n  private timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\r\n    return new Promise<T>(async(resolve, reject) => {\r\n      let rejected = false;\r\n      const timeout = setTimeout(() => {\r\n        reject();\r\n        //console.warn('CACHESTORAGE TIMEOUT');\r\n        rejected = true;\r\n      }, 15e3);\r\n\r\n      try {\r\n        const cache = await this.openDatabase();\r\n        if(!cache) {\r\n          throw 'no cache?';\r\n        }\r\n\r\n        const res = await callback(cache);\r\n\r\n        if(rejected) return;\r\n        resolve(res);\r\n      } catch(err) {\r\n        reject(err);\r\n      }\r\n\r\n      clearTimeout(timeout);\r\n    });\r\n  }\r\n\r\n  public getFileWriter(fileName: string, mimeType: string) {\r\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        return storage.deleteAll();\r\n      }\r\n    }));\r\n  }\r\n}\r\n\r\n//const cacheStorage = new CacheStorageController(); \r\n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\r\n//export default cacheStorage;\r\n"],"sourceRoot":""}