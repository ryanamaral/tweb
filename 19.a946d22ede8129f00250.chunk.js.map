{"version":3,"sources":["webpack:///./src/lib/rootScope.ts","webpack:///./src/helpers/eventListenerBase.ts","webpack:///./src/config/modes.ts","webpack:///./src/config/debug.ts"],"names":["RootScope","super","_overlayIsActive","myId","idle","isIDLE","focusPromise","Promise","resolve","focusResolve","connectionStatus","peerId","broadcast","name","detail","this","dispatchEvent","on","callback","once","addEventListener","off","removeEventListener","e","status","darkModeMediaQuery","window","matchMedia","checkDarkMode","systemTheme","matches","setTheme","isNight","getTheme","colorScheme","document","head","querySelector","setAttribute","documentElement","classList","toggle","value","settings","theme","themes","find","t","rootScope","EventListenerBase","reuseResults","_constructor","listeners","listenerResults","hasOwnProperty","push","obj","i","findAndSplice","l","args","arr","slice","forEach","listener","findIndex","Modes","test","location","search","indexOf","debug","http","ssl","multipleConnections","asServiceWorker","DEBUG","MOUNT_CLASS_TO","self"],"mappings":"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","file":"19.a946d22ede8129f00250.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Message, StickerSet, Update, NotifyPeer, PeerNotifySettings, ConstructorDeclMap } from \"../layer\";\nimport type { MyDocument } from \"./appManagers/appDocsManager\";\nimport type { AppMessagesManager, Dialog, MessagesStorage } from \"./appManagers/appMessagesManager\";\nimport type { Poll, PollResults } from \"./appManagers/appPollsManager\";\nimport type { MyDialogFilter } from \"./storages/filters\";\nimport type { ConnectionStatusChange } from \"../types\";\nimport type { UserTyping } from \"./appManagers/appChatsManager\";\nimport type Chat from \"../components/chat/chat\";\nimport type { UserAuth } from \"./mtproto/mtproto_config\";\nimport type { State, Theme } from \"./appManagers/appStateManager\";\nimport type { MyDraftMessage } from \"./appManagers/appDraftsManager\";\nimport EventListenerBase from \"../helpers/eventListenerBase\";\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\n\nexport type BroadcastEvents = {\n  'user_update': number,\n  'user_auth': UserAuth,\n  'peer_changed': number,\n  'peer_changing': Chat,\n  'peer_pinned_messages': {peerId: number, mids?: number[], pinned?: boolean, unpinAll?: true},\n  'peer_pinned_hidden': {peerId: number, maxId: number},\n  'peer_typings': {peerId: number, typings: UserTyping[]},\n  'peer_block': {peerId: number, blocked: boolean},\n  'peer_title_edit': number,\n  'peer_bio_edit': number,\n\n  'filter_delete': MyDialogFilter,\n  'filter_update': MyDialogFilter,\n  'filter_order': number[],\n  \n  'dialog_draft': {peerId: number, draft: MyDraftMessage | undefined, index: number},\n  'dialog_unread': {peerId: number},\n  'dialog_flush': {peerId: number},\n  'dialog_drop': {peerId: number, dialog?: Dialog},\n  'dialog_migrate': {migrateFrom: number, migrateTo: number},\n  //'dialog_top': Dialog,\n  'dialog_notify_settings': Dialog,\n  'dialogs_multiupdate': {[peerId: string]: Dialog},\n  'dialogs_archived_unread': {count: number},\n  \n  'history_append': {storage: MessagesStorage, peerId: number, mid: number},\n  'history_update': {storage: MessagesStorage, peerId: number, mid: number},\n  'history_reply_markup': {peerId: number},\n  'history_multiappend': AppMessagesManager['newMessagesToHandle'],\n  'history_delete': {peerId: number, msgs: {[mid: number]: true}},\n  'history_forbidden': number,\n  'history_reload': number,\n  'history_focus': {peerId: number, mid?: number},\n  //'history_request': void,\n  \n  'message_edit': {storage: MessagesStorage, peerId: number, mid: number},\n  'message_views': {mid: number, views: number},\n  'message_sent': {storage: MessagesStorage, tempId: number, tempMessage: any, mid: number},\n  'messages_pending': void,\n  'messages_read': void,\n  'messages_downloaded': {peerId: number, mids: number[]},\n  'messages_media_read': {peerId: number, mids: number[]},\n\n  'replies_updated': Message.message,\n\n  'scheduled_new': {peerId: number, mid: number},\n  'scheduled_delete': {peerId: number, mids: number[]},\n\n  'album_edit': {peerId: number, groupId: string, deletedMids: number[]},\n\n  'stickers_installed': StickerSet.stickerSet,\n  'stickers_deleted': StickerSet.stickerSet,\n\n  'audio_play': {doc: MyDocument, mid: number, peerId: number},\n  'audio_pause': void,\n  \n  'state_synchronized': number,\n  'state_synchronizing': number,\n  \n  'contacts_update': number,\n  'avatar_update': number,\n  'chat_full_update': number,\n  'poll_update': {poll: Poll, results: PollResults},\n  'chat_update': number,\n  //'channel_settings': {channelId: number},\n  'webpage_updated': {id: string, msgs: number[]},\n\n  'download_progress': any,\n  'connection_status_change': ConnectionStatusChange,\n  'settings_updated': {key: string, value: any},\n  'draft_updated': {peerId: number, threadId: number, draft: MyDraftMessage | undefined},\n\n  'event-heavy-animation-start': void,\n  'event-heavy-animation-end': void,\n\n  'im_mount': void,\n  'im_tab_change': number,\n\n  'idle': boolean,\n\n  'overlay_toggle': boolean,\n\n  'background_change': void,\n\n  'privacy_update': Update.updatePrivacy,\n\n  'notify_settings': Update.updateNotifySettings,\n  'notify_peer_type_settings': {key: Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings},\n\n  'language_change': void,\n  \n  'theme_change': void,\n};\n\nexport class RootScope extends EventListenerBase<{\n  [name in Update['_']]: (update: ConstructorDeclMap[name]) => void\n} & {\n  [name in keyof BroadcastEvents]: (e: BroadcastEvents[name]) => void\n}> {\n  private _overlayIsActive: boolean = false;\n  public myId = 0;\n  public idle = {\n    isIDLE: true,\n    focusPromise: Promise.resolve(),\n    focusResolve: () => {}\n  };\n  public connectionStatus: {[name: string]: ConnectionStatusChange} = {};\n  public settings: State['settings'];\n  public peerId = 0;\n  public systemTheme: Theme['name'];\n\n  constructor() {\n    super();\n\n    this.on('peer_changed', (peerId) => {\n      this.peerId = peerId;\n    });\n\n    this.on('user_auth', (e) => {\n      this.myId = e;\n    });\n\n    this.on('connection_status_change', (e) => {\n      const status = e;\n      this.connectionStatus[e.name] = status;\n    });\n\n    this.on('idle', (isIDLE) => {\n      if(isIDLE) {\n        this.idle.focusPromise = new Promise((resolve) => {\n          this.idle.focusResolve = resolve;\n        });\n      } else {\n        this.idle.focusResolve();\n      }\n    });\n  }\n\n  public setThemeListener() {\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const checkDarkMode = () => {\n      //const theme = this.getTheme();\n      this.systemTheme = darkModeMediaQuery.matches ? 'night' : 'day';\n      //const newTheme = this.getTheme();\n\n      if(this.myId) {\n        this.broadcast('theme_change');\n      } else {\n        this.setTheme();\n      }\n    };\n    darkModeMediaQuery.addEventListener('change', checkDarkMode);\n    checkDarkMode();\n  }\n\n  public setTheme() {\n    const isNight = this.getTheme().name === 'night';\n    const colorScheme = document.head.querySelector('[name=\"color-scheme\"]');\n    if(colorScheme) {\n      colorScheme.setAttribute('content', isNight ? 'dark' : 'light');\n    }\n\n    document.documentElement.classList.toggle('night', isNight);\n  }\n\n  get overlayIsActive() {\n    return this._overlayIsActive;\n  }\n\n  set overlayIsActive(value: boolean) {\n    this._overlayIsActive = value;\n    this.broadcast('overlay_toggle', value);\n  }\n\n  public getTheme(name: Theme['name'] = this.settings.theme === 'system' ? this.systemTheme : this.settings.theme) {\n    return this.settings.themes.find(t => t.name === name);\n  }\n\n  public broadcast = <T extends keyof BroadcastEvents>(name: T, detail?: BroadcastEvents[T]) => {\n    /* //if(DEBUG) {\n      if(name !== 'user_update') {\n        console.debug('Broadcasting ' + name + ' event, with args:', detail);\n      }\n    //} */\n\n    this.dispatchEvent(name, detail);\n  };\n\n  public on = <T extends keyof BroadcastEvents>(name: T, callback: (e: BroadcastEvents[T]) => any, once?: true) => {\n    super.addEventListener(name, callback, once);\n  };\n\n  public addEventListener = this.on;\n\n  public off = <T extends keyof BroadcastEvents>(name: T, callback: (e: BroadcastEvents[T]) => any) => {\n    super.removeEventListener(name, callback);\n  };\n\n  public removeEventListener = this.off;\n}\n\nconst rootScope = new RootScope();\nMOUNT_CLASS_TO.rootScope = rootScope;\nexport default rootScope;\n\n/* rootScope.addEventListener('album_edit', (e) => {\n  \n});\n\nrootScope.addEventListener<'album_edit'>('album_edit', (e) => {\n  \n}); */\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n//import { MOUNT_CLASS_TO } from \"../config/debug\";\nimport type { ArgumentTypes, SuperReturnType } from \"../types\";\n\n// class EventSystem {\n//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();\n\n//   add(target: any, event: any, listener: any) {\n//     let listeners = this.wm.get(target);\n//     if (listeners === undefined) {\n//         listeners = {};\n//     }\n//     let listenersForEvent = listeners[event];\n//     if (listenersForEvent === undefined) {\n//         listenersForEvent = new Set();\n//     }\n//     listenersForEvent.add(listener);\n//     listeners[event] = listenersForEvent;\n//     //target.addEventListener(event, listener);\n//     this.wm.set(target, listeners);\n//   };\n\n//   remove(target: any, event: any, listener: any) {\n//     let listeners = this.wm.get(target);\n//     if (!listeners) return;\n//     let listenersForEvent = listeners[event];\n//     if (!listenersForEvent) return;\n//     listenersForEvent.delete(listener);\n//   };\n  \n//   /* fire(target, event) {\n//      let listeners = this.wm.get(target);\n//      if (!listeners) return;\n//      let listenersForEvent = listeners[event];\n//      if (!listenersForEvent) return;\n//      for (let handler of handlers) {\n//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. \n//      }\n//   }; */\n// }\n\n// console.log = () => {};\n\n// const e = new EventSystem();\n// MOUNT_CLASS_TO.e = e;\n\n/**\n * Better not to remove listeners during setting\n * Should add listener callback only once\n */\nexport default class EventListenerBase<Listeners extends {[name: string]: Function}> {\n  protected listeners: Partial<{\n    [k in keyof Listeners]: Array<{callback: Listeners[k], once?: boolean}>\n  }>;\n  protected listenerResults: Partial<{\n    [k in keyof Listeners]: ArgumentTypes<Listeners[k]>\n  }>;\n\n  private reuseResults: boolean;\n\n  constructor(reuseResults?: boolean) {\n    this._constructor(reuseResults);\n  }\n\n  public _constructor(reuseResults = false): any {\n    this.reuseResults = reuseResults;\n    this.listeners = {};\n    this.listenerResults = {};\n  }\n\n  public addEventListener(name: keyof Listeners, callback: Listeners[typeof name], once?: boolean) {\n    if(this.listenerResults.hasOwnProperty(name)) {\n      callback(...this.listenerResults[name]);\n      \n      if(once) {\n        return;\n      }\n    }\n    \n    (this.listeners[name] ?? (this.listeners[name] = [])).push({callback, once});\n    //e.add(this, name, {callback, once});\n  }\n\n  public addMultipleEventsListeners(obj: {\n    [name in keyof Listeners]?: Listeners[name]\n  }) {\n    for(const i in obj) {\n      this.addEventListener(i, obj[i]);\n    }\n  }\n\n  public removeEventListener(name: keyof Listeners, callback: Listeners[typeof name]) {\n    if(this.listeners[name]) {\n      this.listeners[name].findAndSplice(l => l.callback === callback);\n    }\n    //e.remove(this, name, callback);\n  }\n\n  // * must be protected, but who cares\n  public dispatchEvent(name: keyof Listeners, ...args: ArgumentTypes<Listeners[typeof name]>) {\n    if(this.reuseResults) {\n      this.listenerResults[name] = args;\n    }\n\n    const arr: Array<SuperReturnType<Listeners[typeof name]>> = [];\n\n    /* let a = e.wm.get(this)[name];\n    if(!a) return arr;\n    const listeners = [...a]; */\n    const listeners = this.listeners[name];\n    if(listeners) {\n      // ! this one will guarantee execution even if delete another listener during setting\n      const left = listeners.slice();\n      left.forEach((listener: any) => {\n        const index = listeners.findIndex((l: any) => l.callback === listener.callback);\n        if(index === -1) {\n          return;\n        }\n\n        arr.push(listener.callback(...args));\n\n        if(listener.once) {\n          this.removeEventListener(name, listener.callback);\n        }\n      });\n\n      /* for(let i = 0, length = listeners.length; i < length; ++i) {\n        const listener = listeners[i];\n        arr.push(listener.callback(...args));\n\n        if(listener.once) {\n          listeners.splice(i, 1);\n          --i;\n          --length;\n        }\n      } */\n    }\n\n    return arr;\n  }\n\n  public cleanup() {\n    this.listeners = {}; \n    this.listenerResults = {};\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nconst Modes = {\n  test: location.search.indexOf('test=1') > 0/*  || true */,\n  debug: location.search.indexOf('debug=1') > 0,\n  http: false, //location.search.indexOf('http=1') > 0,\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\n  multipleConnections: true,\n  asServiceWorker: false\n};\n\n                  \n                             \n          \n\nexport default Modes;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport Modes from \"./modes\";\n\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\nexport default DEBUG;\n\n//let m = DEBUG;\n/* if(!DEBUG) {\n  ctx.sandpitTurtle = () => {\n    //if(!m) {\n      for(let i in MOUNT_CLASS_TO) {\n        ctx[i] = MOUNT_CLASS_TO[i];\n      }\n      //m = true;\n    //}\n  \n    //DEBUG = !DEBUG;\n  };\n} */\n\n/* export const superDebug = (object: any, key: string) => {\n  var d = object[key];\n  var beforeStr = '', afterStr = '';\n  for(var r of d) {\n    beforeStr += r.before.hex + '\\n';\n    afterStr += r.after.hex + '\\n';\n  }\n\n  beforeStr = beforeStr.trim();\n  afterStr = afterStr.trim();\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\n\n  var dada = (name: string, str: string) => {\n    var a = document.createElement('a');\n    a.target = '_blank';\n    a.download = name + '.txt';\n    a.href = URL.createObjectURL(new Blob([str], {\n      type: 'text/plain'\n    }));\n    document.body.append(a);\n    a.click();\n  };\n\n  dada(key + '_' + 'before', beforeStr);\n  dada(key + '_' + 'after', afterStr);\n}\n\nMOUNT_CLASS_TO.superDebug = superDebug; */\n"],"sourceRoot":""}