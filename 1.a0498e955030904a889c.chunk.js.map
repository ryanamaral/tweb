{"version":3,"sources":["webpack:///./src/lib/appManagers/appStateManager.ts","webpack:///./src/helpers/object.ts","webpack:///./src/lib/logger.ts","webpack:///./src/hooks/useHeavyAnimationCheck.ts","webpack:///./src/lib/sessionStorage.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/config/database.ts","webpack:///./src/lib/idb.ts","webpack:///./src/lib/storage.ts"],"names":["STATE_VERSION","version","STATE_INIT","dialogs","allDialogsLoaded","chats","users","messages","contactsList","updates","filters","maxSeenMsgId","stateCreatedTime","Date","now","recentEmoji","topPeers","recentSearch","authState","_","hiddenPinnedMessages","settings","messagesTextSize","sendShortcut","animationsEnabled","autoDownload","contacts","private","groups","channels","autoPlay","gifs","videos","stickers","suggest","loop","themes","name","background","type","blur","slug","highlightningColor","color","theme","notifications","sound","keepSigned","drafts","ALL_KEYS","Object","keys","REFRESH_KEYS","AppStateManager","super","log","tempId","this","loadSavedState","loaded","Promise","resolve","all","concat","map","key","get","then","arr","state","forEach","idx","value","undefined","time","length","peerId","hasOwnProperty","find","t","nightTheme","auth","broadcast","id","catch","finally","setInterval","saveState","savePromise","dispatchEvent","set","peer","container","i","location","reload","appStateManager","copy","obj","getTime","Array","isArray","el","clonedObj","constructor","prop","deepEqual","x","y","ok","tx","every","defineNotNumerableProperties","names","props","writable","configurable","out","defineProperties","getObjectKeysAndSort","object","sort","ids","a","b","safeReplaceObject","wasObject","newObject","safeReplaceArrayInObject","v","isObject","getDeepProperty","splitted","split","o","setDeepProperty","slice","join","pop","validateInitObject","initObject","currentObject","safeAssign","fromObject","LogLevels","_logTimer","dT","toFixed","logger","prefix","level","warn","error","Log","args","console","info","trace","debug","setPrefix","_prefix","isAnimating","heavyAnimationPromise","promisesInQueue","bind","dispatchHeavyAnimationEvent","promise","timeout","promises","filter","Boolean","perf","performance","race","getHeavyAnimationPromise","handleAnimationStart","handleAnimationEnd","listenerSetter","add","addEventListener","remove","removeManual","removeEventListener","sessionStorage","storeName","appStorage","readBlobAsText","blob","reader","FileReader","e","srcElement","result","readAsText","blobConstruct","blobParts","mimeType","safeMimeType","indexOf","blobSafeMimeType","Blob","bb","BlobBuilder","blobPart","append","getBlob","test","stores","options","storageIsAvailable","openDatabase","createNew","openDbPromise","request","indexedDB","open","Error","message","reject","finished","setTimeout","onerror","onsuccess","event","db","calledNew","onclose","onabort","transaction","target","close","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","objectStore","delete","clearTimeout","clear","handleError","save","oncomplete","put","fileName","err","getAll","storageOptions","cache","useStorage","updateKeys","Set","storage","STORAGES","push","saveThrottled","from","values","getFromCache","includes","onlyLocal","setToCache","saveLocal","deleteAll","enabled"],"mappings":"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","file":"1.a0498e955030904a889c.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { Dialog } from './appMessagesManager';\r\nimport type { UserAuth } from '../mtproto/mtproto_config';\r\nimport type { AppUsersManager } from './appUsersManager';\r\nimport type { AppChatsManager } from './appChatsManager';\r\nimport type { AuthState } from '../../types';\r\nimport type FiltersStorage from '../storages/filters';\r\nimport type DialogsStorage from '../storages/dialogs';\r\nimport type { AppDraftsManager } from './appDraftsManager';\r\nimport EventListenerBase from '../../helpers/eventListenerBase';\r\nimport rootScope from '../rootScope';\r\nimport sessionStorage from '../sessionStorage';\r\nimport { logger } from '../logger';\r\nimport { copy, setDeepProperty, validateInitObject } from '../../helpers/object';\r\nimport { getHeavyAnimationPromise } from '../../hooks/useHeavyAnimationCheck';\r\nimport App from '../../config/app';\r\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\r\n\r\nconst REFRESH_EVERY = 24 * 60 * 60 * 1000; // 1 day\r\nconst STATE_VERSION = App.version;\r\n\r\nexport type Background = {\r\n  type: 'color' | 'image' | 'default',\r\n  blur: boolean,\r\n  highlightningColor?: string,\r\n  color?: string,\r\n  slug?: string,\r\n};\r\n\r\nexport type Theme = {\r\n  name: 'day' | 'night',\r\n  background: Background\r\n};\r\n\r\nexport type State = Partial<{\r\n  dialogs: Dialog[],\r\n  allDialogsLoaded: DialogsStorage['allDialogsLoaded'],\r\n  chats: {[peerId: string]: ReturnType<AppChatsManager['getChat']>},\r\n  users: {[peerId: string]: ReturnType<AppUsersManager['getUser']>},\r\n  messages: any[],\r\n  contactsList: number[],\r\n  updates: Partial<{\r\n    seq: number,\r\n    pts: number,\r\n    date: number\r\n  }>,\r\n  filters: FiltersStorage['filters'],\r\n  maxSeenMsgId: number,\r\n  stateCreatedTime: number,\r\n  recentEmoji: string[],\r\n  topPeers: number[],\r\n  recentSearch: number[],\r\n  version: typeof STATE_VERSION,\r\n  authState: AuthState,\r\n  hiddenPinnedMessages: {[peerId: string]: number},\r\n  settings: {\r\n    messagesTextSize: number,\r\n    sendShortcut: 'enter' | 'ctrlEnter',\r\n    animationsEnabled: boolean,\r\n    autoDownload: {\r\n      contacts: boolean\r\n      private: boolean\r\n      groups: boolean\r\n      channels: boolean\r\n    },\r\n    autoPlay: {\r\n      gifs: boolean,\r\n      videos: boolean\r\n    },\r\n    stickers: {\r\n      suggest: boolean,\r\n      loop: boolean\r\n    },\r\n    background?: Background, // ! DEPRECATED\r\n    themes: Theme[],\r\n    theme: Theme['name'],\r\n    notifications: {\r\n      sound: boolean\r\n    },\r\n    nightTheme?: boolean, // ! DEPRECATED\r\n  },\r\n  keepSigned: boolean,\r\n  drafts: AppDraftsManager['drafts']\r\n}>;\r\n\r\nexport const STATE_INIT: State = {\r\n  dialogs: [],\r\n  allDialogsLoaded: {},\r\n  chats: {},\r\n  users: {},\r\n  messages: [],\r\n  contactsList: [],\r\n  updates: {},\r\n  filters: {},\r\n  maxSeenMsgId: 0,\r\n  stateCreatedTime: Date.now(),\r\n  recentEmoji: [],\r\n  topPeers: [],\r\n  recentSearch: [],\r\n  version: STATE_VERSION,\r\n  authState: {\r\n    _: 'authStateSignIn'\r\n  },\r\n  hiddenPinnedMessages: {},\r\n  settings: {\r\n    messagesTextSize: 16,\r\n    sendShortcut: 'enter',\r\n    animationsEnabled: true,\r\n    autoDownload: {\r\n      contacts: true,\r\n      private: true,\r\n      groups: true,\r\n      channels: true\r\n    },\r\n    autoPlay: {\r\n      gifs: true,\r\n      videos: true\r\n    },\r\n    stickers: {\r\n      suggest: true,\r\n      loop: true\r\n    },\r\n    themes: [{\r\n      name: 'day',\r\n      background: {\r\n        type: 'image',\r\n        blur: false,\r\n        slug: 'ByxGo2lrMFAIAAAAmkJxZabh8eM', // * new blurred camomile,\r\n        highlightningColor: 'hsla(85.5319, 36.9171%, 40.402%, 0.4)'\r\n      }\r\n    }, {\r\n      name: 'night',\r\n      background: {\r\n        type: 'color',\r\n        blur: false,\r\n        color: '#0f0f0f',\r\n        highlightningColor: 'hsla(0, 0%, 3.82353%, 0.4)'\r\n      }\r\n    }],\r\n    theme: 'day',\r\n    notifications: {\r\n      sound: false\r\n    }\r\n  },\r\n  keepSigned: true,\r\n  drafts: {}\r\n};\r\n\r\nconst ALL_KEYS = Object.keys(STATE_INIT) as any as Array<keyof State>;\r\n\r\nconst REFRESH_KEYS = ['dialogs', 'allDialogsLoaded', 'messages', 'contactsList', 'stateCreatedTime',\r\n  'updates', 'maxSeenMsgId', 'filters', 'topPeers'] as any as Array<keyof State>;\r\n\r\nexport class AppStateManager extends EventListenerBase<{\r\n  save: (state: State) => Promise<void>\r\n}> {\r\n  public static STATE_INIT = STATE_INIT;\r\n  public loaded: Promise<State>;\r\n  private log = logger('STATE'/* , LogLevels.error */);\r\n\r\n  private state: State;\r\n  private savePromise: Promise<void>;\r\n  private tempId = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.loadSavedState();\r\n  }\r\n\r\n  public loadSavedState() {\r\n    if(this.loaded) return this.loaded;\r\n    //console.time('load state');\r\n    return this.loaded = new Promise((resolve) => {\r\n      Promise.all(ALL_KEYS.concat('user_auth' as any).map(key => sessionStorage.get(key))).then((arr) => {\r\n        let state: State = {};\r\n\r\n        // ! then can't store false values\r\n        ALL_KEYS.forEach((key, idx) => {\r\n          const value = arr[idx];\r\n          if(value !== undefined) {\r\n            // @ts-ignore\r\n            state[key] = value;\r\n          } else {\r\n            // @ts-ignore\r\n            state[key] = copy(STATE_INIT[key]);\r\n          }\r\n        });\r\n\r\n        const time = Date.now();\r\n        /* if(state.version !== STATE_VERSION) {\r\n          state = copy(STATE_INIT);\r\n        } else  */if((state.stateCreatedTime + REFRESH_EVERY) < time/*  || true *//*  && false */) {\r\n          if(DEBUG) {\r\n            this.log('will refresh state', state.stateCreatedTime, time);\r\n          }\r\n          \r\n          REFRESH_KEYS.forEach(key => {\r\n            // @ts-ignore\r\n            state[key] = copy(STATE_INIT[key]);\r\n          });\r\n\r\n          const users: typeof state['users'] = {}, chats: typeof state['chats'] = {};\r\n          if(state.recentSearch?.length) {\r\n            state.recentSearch.forEach(peerId => {\r\n              if(peerId < 0) chats[peerId] = state.chats[peerId];\r\n              else users[peerId] = state.users[peerId];\r\n            });\r\n          }\r\n\r\n          state.users = users;\r\n          state.chats = chats;\r\n        }\r\n\r\n        if(!state.settings.hasOwnProperty('themes') && state.settings.background) {\r\n          const theme = STATE_INIT.settings.themes.find(t => t.name === STATE_INIT.settings.theme);\r\n          if(theme) {\r\n            theme.background = copy(state.settings.background);\r\n          }\r\n        }\r\n\r\n        if(!state.settings.hasOwnProperty('theme') && state.settings.hasOwnProperty('nightTheme')) {\r\n          state.settings.theme = state.settings.nightTheme ? 'night' : 'day';\r\n        }\r\n\r\n        validateInitObject(STATE_INIT, state);\r\n\r\n        this.state = state;\r\n        this.state.version = STATE_VERSION;\r\n\r\n        // ! probably there is better place for it\r\n        rootScope.settings = this.state.settings;\r\n\r\n        if(DEBUG) {\r\n          this.log('state res', state, copy(state));\r\n        }\r\n        \r\n        //return resolve();\r\n\r\n        const auth: UserAuth = arr[arr.length - 1] as any;\r\n        if(auth) {\r\n          // ! Warning ! DON'T delete this\r\n          this.state.authState = {_: 'authStateSignedIn'};\r\n          rootScope.broadcast('user_auth', typeof(auth) !== 'number' ? (auth as any).id : auth); // * support old version\r\n        }\r\n        \r\n        //console.timeEnd('load state');\r\n        resolve(this.state);\r\n      }).catch(resolve).finally(() => {\r\n        setInterval(() => {\r\n          this.tempId++;\r\n          this.saveState();\r\n        }, 10000);\r\n      });\r\n    });\r\n  }\r\n\r\n  public getState() {\r\n    return this.state === undefined ? this.loadSavedState() : Promise.resolve(this.state);\r\n  }\r\n\r\n  public saveState() {\r\n    if(this.state === undefined || this.savePromise) return;\r\n\r\n    //return;\r\n\r\n    const tempId = this.tempId;\r\n    this.savePromise = getHeavyAnimationPromise().then(() => {\r\n      return Promise.all(this.dispatchEvent('save', this.state))\r\n      .then(() => getHeavyAnimationPromise())\r\n      .then(() => sessionStorage.set(this.state))\r\n      .then(() => {\r\n        this.savePromise = null;\r\n  \r\n        if(this.tempId !== tempId) {\r\n          this.saveState();\r\n        }\r\n      });\r\n    });\r\n    //let perf = performance.now();\r\n    \r\n    //this.log('saveState: event time:', performance.now() - perf);\r\n\r\n    //const pinnedOrders = appMessagesManager.dialogsStorage.pinnedOrders;\r\n\r\n    //perf = performance.now();\r\n    \r\n    //this.log('saveState: storage set time:', performance.now() - perf);\r\n  }\r\n\r\n  public setByKey(key: string, value: any) {\r\n    setDeepProperty(this.state, key, value);\r\n    rootScope.broadcast('settings_updated', {key, value});\r\n  }\r\n\r\n  public pushToState<T extends keyof State>(key: T, value: State[T]) {\r\n    this.state[key] = value;\r\n  }\r\n\r\n  public setPeer(peerId: number, peer: any) {\r\n    const container = peerId > 0 ? this.state.users : this.state.chats;\r\n    if(container.hasOwnProperty(peerId)) return;\r\n    container[peerId] = peer;\r\n  }\r\n\r\n  public resetState() {\r\n    for(let i in this.state) {\r\n      // @ts-ignore\r\n      this.state[i] = false;\r\n    }\r\n    sessionStorage.set(this.state).then(() => {\r\n      location.reload();\r\n    });\r\n  }\r\n}\r\n\r\n//console.trace('appStateManager include');\r\n\r\nconst appStateManager = new AppStateManager();\r\nMOUNT_CLASS_TO.appStateManager = appStateManager;\r\nexport default appStateManager;","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function copy<T>(obj: T): T {\r\n  //in case of premitives\r\n  if(obj === null || typeof(obj) !== \"object\") {\r\n    return obj;\r\n  }\r\n \r\n  //date objects should be \r\n  if(obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n \r\n  //handle Array\r\n  if(Array.isArray(obj)) {\r\n    // @ts-ignore\r\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\r\n    return clonedArr;\r\n  }\r\n \r\n  //lastly, handle objects\r\n  // @ts-ignore\r\n  let clonedObj = new obj.constructor();\r\n  for(var prop in obj){\r\n    if(obj.hasOwnProperty(prop)) {\r\n      clonedObj[prop] = copy(obj[prop]);\r\n    }\r\n  }\r\n  return clonedObj;\r\n}\r\n\r\nexport function deepEqual(x: any, y: any): boolean {\r\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\r\n  return x && y && tx === 'object' && tx === ty ? (\r\n    ok(x).length === ok(y).length &&\r\n      ok(x).every(key => deepEqual(x[key], y[key]))\r\n  ) : (x === y);\r\n}\r\n\r\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\r\n  //const perf = performance.now();\r\n  const props = {writable: true, configurable: true};\r\n  const out: {[name: string]: typeof props} = {};\r\n  names.forEach(name => {\r\n    if(obj[name] === undefined) {\r\n      out[name] = props;\r\n    }\r\n  });\r\n  Object.defineProperties(obj, out);\r\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\r\n}\r\n\r\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\r\n  if(!object) return [];\r\n  const ids = Object.keys(object).map(i => +i);\r\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\r\n  else return ids.sort((a, b) => b - a);\r\n}\r\n\r\nexport function safeReplaceObject(wasObject: any, newObject: any) {\r\n  if(!wasObject) {\r\n    return newObject;\r\n  }\r\n\r\n  for(var key in wasObject) {\r\n    if(!newObject.hasOwnProperty(key)) {\r\n      delete wasObject[key];\r\n    }\r\n  }\r\n\r\n  for(var key in newObject) {\r\n    //if (newObject.hasOwnProperty(key)) { // useless\r\n      wasObject[key] = newObject[key];\r\n    //}\r\n  }\r\n  \r\n  return wasObject;\r\n}\r\n\r\n/**\r\n * Will be used for FILE_REFERENCE_EXPIRED\r\n * @param key \r\n * @param wasObject \r\n * @param newObject \r\n */\r\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\r\n  if('byteLength' in newObject[key]) { // Uint8Array\r\n    newObject[key] = [...newObject[key]];\r\n  }\r\n\r\n  if(wasObject && wasObject[key] !== newObject[key]) {\r\n    wasObject[key].length = newObject[key].length;\r\n    (newObject[key] as any[]).forEach((v, i) => {\r\n      wasObject[key][i] = v;\r\n    });\r\n\r\n    /* wasObject[key].set(newObject[key]); */\r\n    newObject[key] = wasObject[key];\r\n  }\r\n}\r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\nexport function getDeepProperty(object: any, key: string) {\r\n  const splitted = key.split('.');\r\n  let o: any = object;\r\n  splitted.forEach(key => {\r\n    if(!key) {\r\n      return;\r\n    }\r\n    \r\n    // @ts-ignore\r\n    o = o[key];\r\n  });\r\n  \r\n  return o;\r\n}\r\n\r\nexport function setDeepProperty(object: any, key: string, value: any) {\r\n  const splitted = key.split('.');\r\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\r\n}\r\n\r\nexport function validateInitObject(initObject: any, currentObject: any) {\r\n  for(const i in initObject) {\r\n    if(typeof(currentObject[i]) !== typeof(initObject[i])) {\r\n      currentObject[i] = copy(initObject[i]);\r\n    } else if(isObject(initObject[i])) {\r\n      validateInitObject(initObject[i], currentObject[i]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function safeAssign(object: any, fromObject: any) {\r\n  if(!fromObject) return;\r\n  \r\n  for(let i in fromObject) {\r\n    if(fromObject[i] !== undefined) {\r\n      object[i] = fromObject[i];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\n\r\nexport enum LogLevels {\r\n  log = 1,\r\n  warn = 2,\r\n  error = 4,\r\n  debug = 8\r\n};\r\n\r\nconst _logTimer = Date.now();\r\nfunction dT() {\r\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\r\n}\r\n\r\nexport function logger(prefix: string, level = LogLevels.log | LogLevels.warn | LogLevels.error) {\r\n  if(!DEBUG/*  || true */) {\r\n    level = LogLevels.error;\r\n  }\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  function Log(...args: any[]) {\r\n    return level & LogLevels.log && console.log(dT(), prefix, ...args);\r\n  }\r\n  \r\n  Log.warn = function(...args: any[]) {\r\n    return level & LogLevels.warn && console.warn(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.info = function(...args: any[]) {\r\n    return level & LogLevels.log && console.info(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.error = function(...args: any[]) {\r\n    return level & LogLevels.error && console.error(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.trace = function(...args: any[]) {\r\n    return level & LogLevels.log && console.trace(dT(), prefix, ...args);\r\n  };\r\n\r\n  /* Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\r\n  }; */\r\n\r\n  Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.debug(dT(), prefix, ...args);\r\n  };\r\n\r\n  Log.setPrefix = function(_prefix: string) {\r\n    prefix = '[' + _prefix + ']:';\r\n  };\r\n\r\n  Log.setPrefix(prefix);\r\n  \r\n  return Log;\r\n};","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// * Jolly Cobra's useHeavyAnimationCheck.ts, patched\r\n\r\n//import { useEffect } from '../lib/teact/teact';\r\nimport { AnyToVoidFunction } from '../types';\r\nimport ListenerSetter from '../helpers/listenerSetter';\r\nimport { CancellablePromise, deferredPromise } from '../helpers/cancellablePromise';\r\nimport { pause } from '../helpers/schedulers';\r\nimport rootScope from '../lib/rootScope';\r\nimport DEBUG from '../config/debug';\r\n\r\nconst ANIMATION_START_EVENT = 'event-heavy-animation-start';\r\nconst ANIMATION_END_EVENT = 'event-heavy-animation-end';\r\n\r\nlet isAnimating = false;\r\nlet heavyAnimationPromise: CancellablePromise<void> = Promise.resolve();\r\nlet promisesInQueue = 0;\r\n\r\nconst log = console.log.bind(console.log, '[HEAVY-ANIMATION]:');\r\n\r\nexport const dispatchHeavyAnimationEvent = (promise: Promise<any>, timeout?: number) => {\r\n  if(!isAnimating) {\r\n    heavyAnimationPromise = deferredPromise<void>();\r\n    rootScope.broadcast(ANIMATION_START_EVENT);\r\n    isAnimating = true;\r\n    DEBUG && log('start');\r\n  }\r\n  \r\n  ++promisesInQueue;\r\n  DEBUG && log('attach promise, length:', promisesInQueue, timeout);\r\n\r\n  const promises = [\r\n    timeout !== undefined ? pause(timeout) : undefined,\r\n    promise.finally(() => {})\r\n  ].filter(Boolean);\r\n\r\n  const perf = performance.now();\r\n  Promise.race(promises).then(() => {\r\n    --promisesInQueue;\r\n    DEBUG && log('promise end, length:', promisesInQueue, performance.now() - perf);\r\n    if(!promisesInQueue) {\r\n      isAnimating = false;\r\n      promisesInQueue = 0;\r\n      rootScope.broadcast(ANIMATION_END_EVENT);\r\n      heavyAnimationPromise.resolve();\r\n\r\n      DEBUG && log('end');\r\n    }\r\n  });\r\n\r\n  return heavyAnimationPromise;\r\n};\r\n\r\nexport const getHeavyAnimationPromise = () => heavyAnimationPromise;\r\n\r\nexport default (\r\n  handleAnimationStart: AnyToVoidFunction,\r\n  handleAnimationEnd: AnyToVoidFunction,\r\n  listenerSetter?: ListenerSetter\r\n) => {\r\n  //useEffect(() => {\r\n    if(isAnimating) {\r\n      handleAnimationStart();\r\n    }\r\n\r\n    const add = listenerSetter ? listenerSetter.add.bind(listenerSetter, rootScope) : rootScope.addEventListener.bind(rootScope);\r\n    const remove = listenerSetter ? listenerSetter.removeManual.bind(listenerSetter, rootScope) : rootScope.removeEventListener.bind(rootScope);\r\n    add(ANIMATION_START_EVENT, handleAnimationStart);\r\n    add(ANIMATION_END_EVENT, handleAnimationEnd);\r\n\r\n    return () => {\r\n      remove(ANIMATION_END_EVENT, handleAnimationEnd);\r\n      remove(ANIMATION_START_EVENT, handleAnimationStart);\r\n    };\r\n  //}, [handleAnimationEnd, handleAnimationStart]);\r\n};\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatSavedPosition } from './appManagers/appImManager';\r\nimport type { State } from './appManagers/appStateManager';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport { LangPackDifference } from '../layer';\r\nimport AppStorage from './storage';\r\n\r\nconst sessionStorage = new AppStorage<{\r\n  dc: number,\r\n  user_auth: number,\r\n  dc1_auth_key: any,\r\n  dc2_auth_key: any,\r\n  dc3_auth_key: any,\r\n  dc4_auth_key: any,\r\n  dc5_auth_key: any,\r\n  max_seen_msg: number,\r\n  server_time_offset: number,\r\n\r\n  chatPositions: {\r\n    [peerId_threadId: string]: ChatSavedPosition\r\n  },\r\n  langPack: LangPackDifference\r\n} & State>({\r\n  storeName: 'session'\r\n});\r\nMOUNT_CLASS_TO.appStorage = sessionStorage;\r\nexport default sessionStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport const readBlobAsText = (blob: Blob) => {\r\n  return new Promise<string>(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', (e) => {\r\n      // @ts-ignore\r\n      resolve(e.srcElement.result);\r\n    });\r\n    reader.readAsText(blob);\r\n  });\r\n};\r\n\r\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\r\n  let blob;\r\n  const safeMimeType = blobSafeMimeType(mimeType);\r\n  try {\r\n    blob = new Blob(blobParts, {type: safeMimeType});\r\n  } catch(e) {\r\n    // @ts-ignore\r\n    let bb = new BlobBuilder;\r\n    blobParts.forEach((blobPart: any) => {\r\n      bb.append(blobPart);\r\n    });\r\n    blob = bb.getBlob(safeMimeType);\r\n  }\r\n  return blob;\r\n}\r\n\r\nexport function blobSafeMimeType(mimeType: string) {\r\n  if([\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/bmp',\r\n    'video/mp4',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'audio/ogg',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'application/json'\r\n  ].indexOf(mimeType) === -1) {\r\n    return 'application/octet-stream';\r\n  }\r\n\r\n  return mimeType;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { IDBStore } from \"../lib/idb\";\r\nimport Modes from \"./modes\";\r\n\r\nexport type DatabaseStoreName = 'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs';\r\nexport type DatabaseStore = Omit<IDBStore, 'name'> & {name: DatabaseStoreName};\r\nconst Database = {\r\n  name: 'tweb' + (Modes.test ? '_test' : ''),\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }] as DatabaseStore[],\r\n};\r\n\r\nexport default Database;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Database from '../config/database';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport { safeAssign } from '../helpers/object';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nexport default class IDBStorage {\r\n  //public static STORAGES: IDBStorage[] = [];\r\n  public openDbPromise: Promise<IDBDatabase>;\r\n  public storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger> = logger('IDB');\r\n  \r\n  public name: string = Database.name;\r\n  public version: number = Database.version;\r\n  public stores: IDBStore[] = Database.stores;\r\n\r\n  public storeName: string;\r\n\r\n  constructor(options: IDBOptions) {\r\n    safeAssign(this, options);\r\n\r\n    this.openDatabase(true);\r\n\r\n    //IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        throw new Error();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', error.message)\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string): Promise<void> {\r\n    //return Promise.resolve();\r\n    return this.openDatabase().then((db) => {\r\n      try {\r\n        //this.log('delete: `' + entryName + '`');\r\n        var objectStore = db.transaction([this.storeName], 'readwrite')\r\n          .objectStore(this.storeName);\r\n\r\n        var request = objectStore.delete(entryName);\r\n      } catch(error) {\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          this.log.error('delete: request not finished!', entryName, request);\r\n          resolve();\r\n        }, 3000);\r\n\r\n        request.onsuccess = (event) => {\r\n          //this.log('delete: deleted file', event);\r\n          resolve();\r\n          clearTimeout(timeout);\r\n        };\r\n  \r\n        request.onerror = (error) => {\r\n          reject(error);\r\n          clearTimeout(timeout);\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  public deleteAll() {\r\n    return this.openDatabase().then((db) => {\r\n      //this.log('deleteAll');\r\n\r\n      try {\r\n        const transaction = db.transaction([this.storeName], 'readwrite');\r\n\r\n        const objectStore = transaction.objectStore(this.storeName);\r\n        var request = objectStore.clear();\r\n      } catch(error) {\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      return new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          this.log.error('deleteAll: request not finished', request);\r\n        }, 3000);\r\n\r\n        request.onsuccess = (event) => {\r\n          resolve();\r\n          clearTimeout(timeout);\r\n        };\r\n  \r\n        request.onerror = (error) => {\r\n          reject(error);\r\n          clearTimeout(timeout);\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    return this.openDatabase().then((db) => {\r\n      //this.log('save:', entryName, value);\r\n\r\n      const handleError = (error: Error) => {\r\n        this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n        if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n          setTimeout(() => {\r\n            this.save(entryName, value);\r\n          }, 2e3);\r\n        } else {\r\n          //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n        }\r\n      };\r\n\r\n      return new Promise<void>((resolve, reject) => {\r\n        try {\r\n          const transaction = db.transaction([this.storeName], 'readwrite');\r\n  \r\n          transaction.onerror = (e) => {\r\n            handleError(transaction.error);\r\n            reject(transaction.error);\r\n            clearTimeout(timeout);\r\n          };\r\n  \r\n          transaction.oncomplete = (e) => {\r\n            //this.log('save: transaction complete:', entryName);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          };\r\n\r\n          const timeout = setTimeout(() => {\r\n            this.log.error('save: transaction not finished', entryName, transaction);\r\n          }, 10000);\r\n  \r\n          /* transaction.addEventListener('abort', (e) => {\r\n            //handleError();\r\n            this.log.error('IndexedDB: save transaction abort!', transaction.error);\r\n          }); */\r\n  \r\n          const objectStore = transaction.objectStore(this.storeName);\r\n\r\n          if(!Array.isArray(entryName)) {\r\n            entryName = [].concat(entryName);\r\n            value = [].concat(value);\r\n          }\r\n\r\n          for(let i = 0, length = entryName.length; i < length; ++i) {\r\n            const request = objectStore.put(value[i], entryName[i]);\r\n            request.onerror = (error) => {\r\n              reject(transaction.error);\r\n              clearTimeout(timeout);\r\n            };\r\n          }\r\n        } catch(error) {\r\n          handleError(error);\r\n          reject(error);\r\n          \r\n          /* this.storageIsAvailable = false;\r\n          throw error; */\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string): Promise<T> {\r\n    //return Promise.reject();\r\n    return this.openDatabase().then((db) => {\r\n      //this.log('get pre:', fileName);\r\n\r\n      try {\r\n        const transaction = db.transaction([this.storeName], 'readonly');\r\n        /* transaction.onabort = (e) => {\r\n          this.log.error('get transaction onabort?', e);\r\n        }; */\r\n        const objectStore = transaction.objectStore(this.storeName);\r\n        var request = objectStore.get(entryName);\r\n        \r\n        //this.log.log('IDB get:', fileName, request);\r\n      } catch(err) {\r\n        this.log.error('get error:', err, entryName, request, request.error);\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          this.log.error('get request not finished!', entryName, request);\r\n          reject();\r\n        }, 3000);\r\n\r\n        request.onsuccess = function(event) {\r\n          const result = request.result;\r\n          if(result === undefined) {\r\n            reject('NO_ENTRY_FOUND');\r\n          } /* else if(typeof result === 'string' &&\r\n            result.substr(0, 5) === 'data:') {\r\n            resolve(dataUrlToBlob(result));\r\n          }  */else {\r\n            resolve(result);\r\n          }\r\n\r\n          clearTimeout(timeout);\r\n        }\r\n  \r\n        request.onerror = () => {\r\n          clearTimeout(timeout);\r\n          reject();\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.openDatabase().then((db) => {\r\n      //this.log('getAll pre:', fileName);\r\n\r\n      try {\r\n        const transaction = db.transaction([this.storeName], 'readonly');\r\n        /* transaction.onabort = (e) => {\r\n          this.log.error('getAll transaction onabort?', e);\r\n        }; */\r\n        const objectStore = transaction.objectStore(this.storeName);\r\n        var request = objectStore.getAll();\r\n        \r\n        //this.log.log('IDB getAll:', fileName, request);\r\n      } catch(err) {\r\n        this.log.error('getAll error:', err, request, request.error);\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          this.log.error('getAll request not finished!', request);\r\n          reject();\r\n        }, 3000);\r\n\r\n        request.onsuccess = function(event) {\r\n          const result = request.result;\r\n          if(result === undefined) {\r\n            reject('NO_ENTRY_FOUND');\r\n          } /* else if(typeof result === 'string' &&\r\n            result.substr(0, 5) === 'data:') {\r\n            resolve(dataUrlToBlob(result));\r\n          }  */else {\r\n            resolve(result);\r\n          }\r\n\r\n          clearTimeout(timeout);\r\n        }\r\n  \r\n        request.onerror = () => {\r\n          clearTimeout(timeout);\r\n          reject();\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { DatabaseStore, DatabaseStoreName } from \"../config/database\";\r\nimport { throttle } from \"../helpers/schedulers\";\r\nimport IDBStorage, { IDBOptions } from \"./idb\";\r\n\r\nexport default class AppStorage<Storage extends Record<string, any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\r\n  private static STORAGES: AppStorage<any>[] = [];\r\n  private storage: IDBStorage;//new CacheStorageController('session');\r\n\r\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage = true;\r\n  private updateKeys: Set<keyof Storage> = new Set();\r\n  private saveThrottled: () => void;\r\n\r\n  constructor(storageOptions: Omit<IDBOptions, 'storeName' | 'stores'> & {stores?: DatabaseStore[], storeName: DatabaseStoreName}) {\r\n    this.storage = new IDBStorage(storageOptions);\r\n\r\n    AppStorage.STORAGES.push(this);\r\n\r\n    this.saveThrottled = throttle(async() => {\r\n      const keys = Array.from(this.updateKeys.values()) as string[];\r\n      this.updateKeys.clear();\r\n\r\n      try {\r\n        //console.log('setItem: will set', key/* , value */);\r\n        //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\r\n        //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\r\n        await this.storage.save(keys, keys.map(key => this.cache[key]));\r\n        //console.log('setItem: have set', key/* , value */);\r\n      } catch(e) {\r\n        //this.useCS = false;\r\n        console.error('[AS]: set error:', e, keys/* , value */);\r\n      }\r\n    }, 50, false);\r\n  }\r\n\r\n  public getCache() {\r\n    return this.cache;\r\n  }\r\n\r\n  public getFromCache(key: keyof Storage) {\r\n    return this.cache[key];\r\n  }\r\n\r\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async get(key: keyof Storage): Promise<Storage[typeof key]> {\r\n    if(this.cache.hasOwnProperty(key)) {\r\n      return this.getFromCache(key);\r\n    } else if(this.useStorage) {\r\n      let value: any;\r\n      try {\r\n        value = await this.storage.get(key as string);\r\n        //console.log('[AS]: get result:', key, value);\r\n        //value = JSON.parse(value);\r\n      } catch(e) {\r\n        if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(e)) {\r\n          this.useStorage = false;\r\n          console.error('[AS]: get error:', e, key, value);\r\n        }\r\n      }\r\n\r\n      return this.cache[key] = value;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public async set(obj: Partial<Storage>, onlyLocal = false) {\r\n    //console.log('storageSetValue', obj, callback, arguments);\r\n\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.setToCache(key, value);\r\n\r\n        // let perf = /* DEBUG */false ? performance.now() : 0;\r\n        // value = JSON.stringify(value);\r\n\r\n        // if(perf) {\r\n        //   let elapsedTime = performance.now() - perf;\r\n        //   if(elapsedTime > 10) {\r\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\r\n        //   }\r\n        // }\r\n        \r\n        /* perf = performance.now();\r\n        value = stringify(value);\r\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\r\n\r\n        if(this.useStorage && !onlyLocal) {\r\n          this.updateKeys.add(key);\r\n          this.saveThrottled();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async remove(key: keyof Storage, saveLocal = false) {\r\n    /* if(!this.cache.hasOwnProperty(key)) {\r\n      return;\r\n    } */\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    if(this.useStorage) {\r\n      try {\r\n        await this.storage.delete(key as string);\r\n      } catch(e) {\r\n        this.useStorage = false;\r\n        console.error('[AS]: remove error:', e);\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    return this.storage.deleteAll();\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        storage.updateKeys.clear();\r\n        return storage.clear();\r\n      } else {\r\n        return storage.set(storage.cache);\r\n      }\r\n    }));\r\n  }\r\n}\r\n"],"sourceRoot":""}