{"version":3,"sources":["webpack:///./src/lib/polyfill.ts","webpack:///./src/helpers/random.ts","webpack:///./src/helpers/bytes.ts"],"names":["Object","defineProperty","Uint8Array","prototype","get","this","set","str","enumerable","configurable","randomize","i","length","concat","args","toJSON","Array","findAndSplice","verify","index","findIndex","splice","undefined","String","toHHMMSS","leadZero","sec_num","parseInt","hours","Math","floor","minutes","seconds","Promise","finally","fn","onFinally","callback","resolve","then","result","reason","reject","nextRandomInt","maxValue","random","randomLong","bytesToHex","bytes","arr","push","toString","join","bytesFromHex","hexString","len","start","charAt","substr","bytesToBase64","mod3","nLen","nUint24","nIdx","fromCharCode","uint6ToBase64","replace","nUint6","bytesCmp","bytes1","bytes2","convertToArrayBuffer","ArrayBuffer","buffer","byteLength","BYTES_PER_ELEMENT","bufferConcats","forEach","b","tmp","lastLength"],"mappings":"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","file":"20.da43ef20a386e9d7b8a6.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { bytesToHex, bytesFromHex, bufferConcats } from '../helpers/bytes';\nimport { nextRandomInt } from '../helpers/random';\n\n//export const secureRandom = new SecureRandom();\n\nObject.defineProperty(Uint8Array.prototype, 'hex', {\n  get: function(): string {\n    return bytesToHex([...this]);\n  },\n  \n  set: function(str: string) {\n    this.set(bytesFromHex(str));\n  },\n  enumerable: true,\n  configurable: true\n});\n\nUint8Array.prototype.randomize = function() {\n  //secureRandom.nextBytes(this);\n  for(let i = 0; i < this.length; ++i) {\n    this[i] = nextRandomInt(255);\n  }\n  return this;\n};\n\nUint8Array.prototype.concat = function(...args: Array<Uint8Array | ArrayBuffer | number[]>) {\n  return bufferConcats(this, ...args);\n};\n\n/* Uint8Array.prototype.toString = function() {\n  return String.fromCharCode.apply(null, [...this]);\n}; */\n\nUint8Array.prototype.toJSON = function() {\n  return [...this];\n  //return {type: 'bytes', value: [...this]};\n};\n\nArray.prototype.findAndSplice = function<T>(verify: (value: T, index?: number, array?: Array<T>) => boolean) {\n  let index = this.findIndex(verify);\n  return index !== -1 ? this.splice(index, 1)[0] : undefined;\n};\n\nString.prototype.toHHMMSS = function(leadZero = false) {\n  const sec_num = parseInt(this + '', 10);\n  const hours = Math.floor(sec_num / 3600);\n  let minutes: any = Math.floor((sec_num - (hours * 3600)) / 60);\n  let seconds: any = sec_num - (hours * 3600) - (minutes * 60);\n  \n  if(hours) leadZero = true;\n  if(minutes < 10) minutes = leadZero ? \"0\" + minutes : minutes;\n  if(seconds < 10) seconds = \"0\" + seconds;\n  return (hours ? /* ('0' + hours).slice(-2) */hours + ':' : '') + minutes + ':' + seconds;\n};\n\n/* Promise.prototype.finally = Promise.prototype.finally || {\n  finally(fn: () => any) {\n    const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);\n    return this.then(\n      result => onFinally(() => result),\n      reason => onFinally(() => Promise.reject(reason))\n    );\n  }\n}.finally; */\nPromise.prototype.finally = Promise.prototype.finally || function<T>(this: Promise<T>, fn: () => any) {\n  const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);\n  return this.then(\n    result => onFinally(() => result),\n    reason => onFinally(() => Promise.reject(reason))\n  );\n};\n\ndeclare global {\n  interface Uint8Array {\n    hex: string;\n    randomize: () => Uint8Array,\n    concat: (...args: Array<Uint8Array | ArrayBuffer | number[]>) => Uint8Array,\n    //toString: () => string,\n    toJSON: () => number[],\n    //toJSON: () => {type: 'bytes', value: number[]},\n  }\n  \n  interface Array<T> {\n    findAndSplice(verify: (value: T, index?: number, array?: Array<T>) => boolean): T;\n  }\n  \n  interface String {\n    toHHMMSS(leadZero?: boolean): string;\n  }\n\n  interface Promise<T> {\n    finally: (onfinally?: () => void) => Promise<T>;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport function nextRandomInt(maxValue: number) {\n  return Math.floor(Math.random() * maxValue);\n}\n\nexport function randomLong() {\n  return '' + nextRandomInt(0xFFFFFFFF) + nextRandomInt(0xFFFFFF);\n  //return '' + parseInt(nextRandomInt(0xFFFFFFFF).toString(16) + nextRandomInt(0xFFFFFFFF).toString(16), 16);\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport function bytesToHex(bytes: ArrayLike<number>) {\n  bytes = bytes || [];\n  let arr: string[] = [];\n  for(let i = 0; i < bytes.length; ++i) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16));\n  }\n  return arr.join('');\n}\n\nexport function bytesFromHex(hexString: string) {\n  const len = hexString.length;\n  let start = 0;\n  let bytes: number[] = [];\n\n  if(len % 2) { // read 0x581 as 0x0581\n    bytes.push(parseInt(hexString.charAt(0), 16));\n    ++start;\n  }\n\n  for(let i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16));\n  }\n\n  return bytes;\n}\n\nexport function bytesToBase64(bytes: number[] | Uint8Array) {\n  let mod3: number;\n  let result = '';\n\n  for(let nLen = bytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; ++nIdx) {\n    mod3 = nIdx % 3;\n    nUint24 |= bytes[nIdx] << (16 >>> mod3 & 24);\n    if(mod3 === 2 || nLen - nIdx === 1) {\n      result += String.fromCharCode(\n        uint6ToBase64(nUint24 >>> 18 & 63),\n        uint6ToBase64(nUint24 >>> 12 & 63),\n        uint6ToBase64(nUint24 >>> 6 & 63),\n        uint6ToBase64(nUint24 & 63)\n      );\n      nUint24 = 0;\n    }\n  }\n\n  return result.replace(/A(?=A$|$)/g, '=');\n}\n\nexport function uint6ToBase64(nUint6: number) {\n  return nUint6 < 26\n    ? nUint6 + 65\n    : nUint6 < 52\n      ? nUint6 + 71\n      : nUint6 < 62\n        ? nUint6 - 4\n        : nUint6 === 62\n          ? 43\n          : nUint6 === 63\n            ? 47\n            : 65\n}\n\nexport function bytesCmp(bytes1: number[] | Uint8Array, bytes2: number[] | Uint8Array) {\n  const len = bytes1.length;\n  if(len !== bytes2.length) {\n    return false;\n  }\n\n  for(let i = 0; i < len; ++i) {\n    if(bytes1[i] !== bytes2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function bytesXor(bytes1: number[] | Uint8Array, bytes2: number[] | Uint8Array) {\n  const len = bytes1.length;\n  const bytes: number[] = [];\n\n  for(let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i];\n  }\n\n  return bytes;\n}\n\nexport function bytesToArrayBuffer(b: number[]) {\n  return (new Uint8Array(b)).buffer;\n}\n\nexport function convertToArrayBuffer(bytes: any | ArrayBuffer | Uint8Array) {\n  // Be careful with converting subarrays!!\n  if(bytes instanceof ArrayBuffer) {\n    return bytes;\n  }\n  if(bytes.buffer !== undefined &&\n    bytes.buffer.byteLength === bytes.length * bytes.BYTES_PER_ELEMENT) {\n    return bytes.buffer;\n  }\n  return bytesToArrayBuffer(bytes);\n}\n\nexport function convertToUint8Array(bytes: Uint8Array | ArrayBuffer | number[] | string): Uint8Array {\n  if((bytes as Uint8Array).buffer !== undefined) {\n    return bytes as Uint8Array;\n  } else if(typeof(bytes) === 'string') {\n    return new TextEncoder().encode(bytes);\n  }\n\n  return new Uint8Array(bytes);\n}\n\nexport function bytesFromArrayBuffer(buffer: ArrayBuffer) {\n  const len = buffer.byteLength;\n  const byteView = new Uint8Array(buffer);\n  const bytes: number[] = [];\n\n  for(let i = 0; i < len; ++i) {\n    bytes[i] = byteView[i];\n  }\n\n  return bytes;\n}\n\nexport function bufferConcat(buffer1: any, buffer2: any) {\n  const l1 = buffer1.byteLength || buffer1.length;\n  const l2 = buffer2.byteLength || buffer2.length;\n  const tmp = new Uint8Array(l1 + l2);\n  tmp.set(buffer1 instanceof ArrayBuffer ? new Uint8Array(buffer1) : buffer1, 0);\n  tmp.set(buffer2 instanceof ArrayBuffer ? new Uint8Array(buffer2) : buffer2, l1);\n\n  return tmp.buffer;\n}\n\nexport function bufferConcats(...args: any[]) {\n  let length = 0;\n  args.forEach(b => length += b.byteLength || b.length);\n\n  const tmp = new Uint8Array(length);\n  \n  let lastLength = 0;\n  args.forEach(b => {\n    tmp.set(b instanceof ArrayBuffer ? new Uint8Array(b) : b, lastLength);\n    lastLength += b.byteLength || b.length;\n  });\n\n  return tmp/* .buffer */;\n}\n\nexport function bytesFromWordss(input: Uint32Array) {\n  const o: number[] = [];\n  for(let i = 0, length = input.length * 4; i < length; ++i) {\n    o.push((input[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff);\n  }\n\n  return o;\n}\n\nexport function bytesToWordss(input: ArrayBuffer | Uint8Array) {\n  let bytes: Uint8Array;\n  if(input instanceof ArrayBuffer) bytes = new Uint8Array(input);\n  else bytes = input;\n\n  const words: number[] = [];\n  for(let i = 0, len = bytes.length; i < len; ++i) {\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8);\n  }\n\n  return new Uint32Array(words);\n}\n\n// * https://stackoverflow.com/a/52827031\n/* export const isBigEndian = (() => {\n  const array = new Uint8Array(4);\n  const view = new Uint32Array(array.buffer);\n  return !((view[0] = 1) & array[0]);\n})(); */\n"],"sourceRoot":""}