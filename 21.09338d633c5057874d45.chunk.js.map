{"version":3,"sources":["webpack:///./src/helpers/string.ts"],"names":["limitSymbols","str","length","limitFrom","trim","slice","escapeRegExp","replace","encodeEntities","value","charCodeAt","splitStringByLength","maxLength","lastSliceStartIndex","arrayIndex","out","cut","end","part","_arrayIndex","forEach","lastIndex","index","indexOf","partLength","checkRTL","s","RegExp","test","convertInputKeyToKey","inputKey","toLowerCase","convertKeyToInputKey","key","toUpperCase","capitalizeFirstLetter","string","charAt"],"mappings":"sFAUO,SAASA,EAAaC,EAAaC,EAAgBC,EAAYD,EAAS,IAM7E,OALAD,EAAMA,EAAIG,QACHF,OAASC,IACdF,EAAMA,EAAII,MAAM,EAAGH,GAAoC,OAGlDD,EAIF,SAASK,EAAaL,GAC3B,OAAOA,EACJM,QAAQ,sBAAuB,QAC/BA,QAAQ,KAAM,SAGZ,SAASC,EAAeC,GAC7B,OAAOA,EAAMF,QAAQ,KAAM,SAASA,QAAQ,kCAAoCE,GAGvE,MAAyB,MAFvBA,EAAMC,WAAW,GAEJ,QADZD,EAAMC,WAAW,GACqB,OAAU,OAAW,KACpEH,QAAQ,iBAAmBE,GACrB,KAAOA,EAAMC,WAAW,GAAK,KACnCH,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAGlC,SAASI,EAAoBV,EAAaW,GAC/C,GAAGX,EAAIC,OAASU,EAAW,MAAO,CAACX,GACnC,IAAIC,EAAS,EAAGW,EAAsB,EAAGC,EAAa,EACtD,MACMC,EAAgB,GAEhBC,EAAOC,IACX,IAAIC,EAAOjB,EAAII,MAAMQ,EAAqBI,GAC1C,MAAME,EAAcL,IACpB,GAAGI,EAAKhB,OAASU,EAAW,CAETD,EADEO,EAAKb,MAAMO,GACqBA,GAC1CQ,QAAQF,IACfH,EAAID,KAAgBI,IAGtBA,EAAOA,EAAKb,MAAM,EAAGO,GAGvBC,EAAsBI,EACtBf,EAAS,EACTa,EAAII,IAAgBJ,EAAII,IAAgB,IAAMD,GAGhD,IAAIG,EAAY,EAChB,OAAG,CACD,IAAIC,EAAQrB,EAAIsB,QAvBA,IAuBmBF,GACnC,IAAc,IAAXC,EAAc,CACZD,IAAepB,EAAIC,OAAS,GAC7Bc,IAGF,MAGFM,GAhCgB,IAgCGpB,OAEnB,MAAMsB,EAAaF,EAAQD,EACvBnB,EAASsB,EAAcZ,GACzBI,EAAId,GAGNmB,EAAYC,EACZpB,GAAUsB,EAGZ,OAAOT,EAlFT,gRAsFO,MAAMU,EAAYC,GAGL,IAAIC,OAAO,kDAEVC,KAAKF,GAKnB,SAASG,EAAqBC,GACnC,MAAM7B,EAAM6B,EAASvB,QAAQ,QAAS,IACtC,OAAQN,EAAI,GAAG8B,cAAgB9B,EAAII,MAAM,GAGpC,SAAS2B,EAAqBC,GAGnC,OADAA,EAAM,SADNA,EAAMA,EAAI,GAAGC,cAAgBD,EAAI5B,MAAM,IAKlC,SAAS8B,EAAsBC,GACpC,OAAOA,EAAOC,OAAO,GAAGH,cAAgBE,EAAO/B,MAAM","file":"21.09338d633c5057874d45.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n/* export function stringMiddleOverflow(str: string, maxLength: number) {\n  return str.length > maxLength ? str.slice(0, maxLength / 2 | 0) + '...' + str.slice(-Math.round(maxLength / 2)) : str; \n} */\n\nexport function limitSymbols(str: string, length: number, limitFrom = length + 10) {\n  str = str.trim();\n  if(str.length > limitFrom) {\n    str = str.slice(0, length)/* .replace(/\\s*$/, '') */ + '...';\n  }\n\n  return str;\n}\n\n// credits to https://github.com/sindresorhus/escape-string-regexp/blob/master/index.js\nexport function escapeRegExp(str: string) {\n  return str\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n    .replace(/-/g, '\\\\x2d');\n}\n\nexport function encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;').replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, (value) => {\n    var hi = value.charCodeAt(0);\n    var low = value.charCodeAt(1);\n    return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n  }).replace(/([^\\#-~| |!])/g, (value) => { // non-alphanumeric\n    return '&#' + value.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nexport function splitStringByLength(str: string, maxLength: number) {\n  if(str.length < maxLength) return [str];\n  let length = 0, lastSliceStartIndex = 0, arrayIndex = 0;\n  const delimiter = ' ';//'\\n';\n  const out: string[] = [];\n\n  const cut = (end?: number) => {\n    let part = str.slice(lastSliceStartIndex, end);\n    const _arrayIndex = arrayIndex++;\n    if(part.length > maxLength) {\n      let overflowPart = part.slice(maxLength);\n      const splitted = splitStringByLength(overflowPart, maxLength);\n      splitted.forEach(part => {\n        out[arrayIndex++] = part;\n      });\n\n      part = part.slice(0, maxLength);\n    }\n\n    lastSliceStartIndex = end;\n    length = 0;\n    out[_arrayIndex] = (out[_arrayIndex] || '') + part;\n  };\n\n  let lastIndex = 0;\n  do {\n    let index = str.indexOf(delimiter, lastIndex);\n    if(index === -1) {\n      if(lastIndex !== (str.length - 1)) {\n        cut();\n      }\n\n      break;\n    }\n\n    index += delimiter.length;\n\n    const partLength = index - lastIndex;\n    if((length + partLength) > maxLength) {\n      cut(length);\n    }\n    \n    lastIndex = index;\n    length += partLength;\n  } while(true);\n\n  return out;\n}\n\n// https://stackoverflow.com/a/14824756\nexport const checkRTL = (s: string) => {           \n  const ltrChars  = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF'+'\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF',\n    rtlChars      = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC',\n    rtlDirCheck   = new RegExp('^[^'+ltrChars+']*['+rtlChars+']');\n\n  return rtlDirCheck.test(s);\n};\n\n//(window as any).checkRTL = checkRTL;\n\nexport function convertInputKeyToKey(inputKey: string) {\n  const str = inputKey.replace('input', '');\n  return (str[0].toLowerCase() + str.slice(1)) as string;\n}\n\nexport function convertKeyToInputKey(key: string) {\n  key = key[0].toUpperCase() + key.slice(1);\n  key = 'input' + key;\n  return key;\n}\n\nexport function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n"],"sourceRoot":""}