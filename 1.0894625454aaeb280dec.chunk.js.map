{"version":3,"sources":["webpack:///./src/lib/appManagers/appStateManager.ts","webpack:///./src/helpers/object.ts","webpack:///./src/lib/logger.ts","webpack:///./src/hooks/useHeavyAnimationCheck.ts","webpack:///./src/lib/sessionStorage.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/config/database.ts","webpack:///./src/lib/idb.ts","webpack:///./src/lib/storage.ts"],"names":["STATE_VERSION","version","STATE_INIT","dialogs","allDialogsLoaded","chats","users","messages","contactsList","updates","filters","maxSeenMsgId","stateCreatedTime","Date","now","recentEmoji","topPeers","recentSearch","authState","_","hiddenPinnedMessages","settings","messagesTextSize","sendShortcut","animationsEnabled","autoDownload","contacts","private","groups","channels","autoPlay","gifs","videos","stickers","suggest","loop","background","type","blur","slug","highlightningColor","notifications","sound","nightTheme","drafts","ALL_KEYS","Object","keys","REFRESH_KEYS","AppStateManager","super","log","tempId","this","loadSavedState","loaded","Promise","resolve","all","concat","map","key","get","then","arr","state","forEach","idx","value","undefined","time","length","peerId","auth","broadcast","id","catch","finally","setInterval","saveState","savePromise","dispatchEvent","set","peer","container","hasOwnProperty","i","location","reload","appStateManager","copy","obj","getTime","Array","isArray","el","clonedObj","constructor","prop","deepEqual","x","y","ok","tx","every","defineNotNumerableProperties","names","props","writable","configurable","out","name","defineProperties","getObjectKeysAndSort","object","sort","ids","a","b","safeReplaceObject","wasObject","newObject","charAt","safeReplaceArrayInObject","v","isObject","getDeepProperty","splitted","split","o","setDeepProperty","slice","join","pop","validateInitObject","initObject","currentObject","safeAssign","fromObject","LogLevels","_logTimer","dT","toFixed","logger","prefix","level","warn","error","Log","args","console","info","trace","debug","setPrefix","_prefix","isAnimating","heavyAnimationPromise","promisesInQueue","bind","dispatchHeavyAnimationEvent","promise","timeout","promises","filter","Boolean","perf","performance","race","getHeavyAnimationPromise","handleAnimationStart","handleAnimationEnd","listenerSetter","add","addEventListener","remove","removeManual","removeEventListener","sessionStorage","storeName","appStorage","readBlobAsText","blob","reader","FileReader","e","srcElement","result","readAsText","blobConstruct","blobParts","mimeType","safeMimeType","indexOf","blobSafeMimeType","Blob","bb","BlobBuilder","blobPart","append","getBlob","test","stores","options","storageIsAvailable","openDatabase","createNew","openDbPromise","request","indexedDB","open","Error","message","reject","finished","setTimeout","onerror","onsuccess","event","db","calledNew","onclose","onabort","transaction","target","close","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","objectStore","delete","clearTimeout","clear","handleError","save","put","fileName","err","storageOptions","cache","useStorage","storage","getFromCache","onlyLocal","setToCache","saveLocal","deleteAll"],"mappings":"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","file":"1.0894625454aaeb280dec.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Dialog } from './appMessagesManager';\nimport type { UserAuth } from '../mtproto/mtproto_config';\nimport type { AppUsersManager } from './appUsersManager';\nimport type { AppChatsManager } from './appChatsManager';\nimport type { AuthState } from '../../types';\nimport type FiltersStorage from '../storages/filters';\nimport type DialogsStorage from '../storages/dialogs';\nimport type { AppDraftsManager } from './appDraftsManager';\nimport EventListenerBase from '../../helpers/eventListenerBase';\nimport rootScope from '../rootScope';\nimport sessionStorage from '../sessionStorage';\nimport { logger } from '../logger';\nimport { copy, setDeepProperty, validateInitObject } from '../../helpers/object';\nimport { getHeavyAnimationPromise } from '../../hooks/useHeavyAnimationCheck';\nimport App from '../../config/app';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\n\nconst REFRESH_EVERY = 24 * 60 * 60 * 1000; // 1 day\nconst STATE_VERSION = App.version;\n\nexport type State = Partial<{\n  dialogs: Dialog[],\n  allDialogsLoaded: DialogsStorage['allDialogsLoaded'],\n  chats: {[peerId: string]: ReturnType<AppChatsManager['getChat']>},\n  users: {[peerId: string]: ReturnType<AppUsersManager['getUser']>},\n  messages: any[],\n  contactsList: number[],\n  updates: Partial<{\n    seq: number,\n    pts: number,\n    date: number\n  }>,\n  filters: FiltersStorage['filters'],\n  maxSeenMsgId: number,\n  stateCreatedTime: number,\n  recentEmoji: string[],\n  topPeers: number[],\n  recentSearch: number[],\n  version: typeof STATE_VERSION,\n  authState: AuthState,\n  hiddenPinnedMessages: {[peerId: string]: number},\n  settings: {\n    messagesTextSize: number,\n    sendShortcut: 'enter' | 'ctrlEnter',\n    animationsEnabled: boolean,\n    autoDownload: {\n      contacts: boolean\n      private: boolean\n      groups: boolean\n      channels: boolean\n    },\n    autoPlay: {\n      gifs: boolean,\n      videos: boolean\n    },\n    stickers: {\n      suggest: boolean,\n      loop: boolean\n    },\n    background: {\n      type: 'color' | 'image' | 'default',\n      blur: boolean,\n      highlightningColor?: string,\n      color?: string,\n      slug?: string,\n    },\n    notifications: {\n      sound: boolean\n    },\n    nightTheme: boolean,\n  },\n  drafts: AppDraftsManager['drafts']\n}>;\n\nexport const STATE_INIT: State = {\n  dialogs: [],\n  allDialogsLoaded: {},\n  chats: {},\n  users: {},\n  messages: [],\n  contactsList: [],\n  updates: {},\n  filters: {},\n  maxSeenMsgId: 0,\n  stateCreatedTime: Date.now(),\n  recentEmoji: [],\n  topPeers: [],\n  recentSearch: [],\n  version: STATE_VERSION,\n  authState: {\n    _: 'authStateSignIn'\n  },\n  hiddenPinnedMessages: {},\n  settings: {\n    messagesTextSize: 16,\n    sendShortcut: 'enter',\n    animationsEnabled: true,\n    autoDownload: {\n      contacts: true,\n      private: true,\n      groups: true,\n      channels: true\n    },\n    autoPlay: {\n      gifs: true,\n      videos: true\n    },\n    stickers: {\n      suggest: true,\n      loop: true\n    },\n    background: {\n      type: 'image',\n      blur: false,\n      slug: 'ByxGo2lrMFAIAAAAmkJxZabh8eM', // * new blurred camomile,\n      highlightningColor: 'hsla(85.5319, 36.9171%, 40.402%, 0.4)'\n    },\n    notifications: {\n      sound: false\n    },\n    nightTheme: false\n  },\n  drafts: {}\n};\n\nconst ALL_KEYS = Object.keys(STATE_INIT) as any as Array<keyof State>;\n\nconst REFRESH_KEYS = ['dialogs', 'allDialogsLoaded', 'messages', 'contactsList', 'stateCreatedTime',\n  'updates', 'maxSeenMsgId', 'filters', 'topPeers'] as any as Array<keyof State>;\n\nexport class AppStateManager extends EventListenerBase<{\n  save: (state: State) => Promise<void>\n}> {\n  public static STATE_INIT = STATE_INIT;\n  public loaded: Promise<State>;\n  private log = logger('STATE'/* , LogLevels.error */);\n\n  private state: State;\n  private savePromise: Promise<void>;\n  private tempId = 0;\n\n  constructor() {\n    super();\n    this.loadSavedState();\n  }\n\n  public loadSavedState() {\n    if(this.loaded) return this.loaded;\n    //console.time('load state');\n    return this.loaded = new Promise((resolve) => {\n      Promise.all(ALL_KEYS.concat('user_auth' as any).map(key => sessionStorage.get(key))).then((arr) => {\n        let state: State = {};\n\n        // ! then can't store false values\n        ALL_KEYS.forEach((key, idx) => {\n          const value = arr[idx];\n          if(value !== undefined) {\n            // @ts-ignore\n            state[key] = value;\n          } else {\n            // @ts-ignore\n            state[key] = copy(STATE_INIT[key]);\n          }\n        });\n\n        const time = Date.now();\n        if(state) {\n          /* if(state.version !== STATE_VERSION) {\n            state = copy(STATE_INIT);\n          } else  */if((state.stateCreatedTime + REFRESH_EVERY) < time/*  || true *//*  && false */) {\n            if(DEBUG) {\n              this.log('will refresh state', state.stateCreatedTime, time);\n            }\n            \n            REFRESH_KEYS.forEach(key => {\n              // @ts-ignore\n              state[key] = copy(STATE_INIT[key]);\n            });\n\n            const users: typeof state['users'] = {}, chats: typeof state['chats'] = {};\n            if(state.recentSearch?.length) {\n              state.recentSearch.forEach(peerId => {\n                if(peerId < 0) chats[peerId] = state.chats[peerId];\n                else users[peerId] = state.users[peerId];\n              });\n            }\n\n            state.users = users;\n            state.chats = chats;\n          }\n        }\n\n        validateInitObject(STATE_INIT, state);\n\n        this.state = state;\n        this.state.version = STATE_VERSION;\n\n        // ! probably there is better place for it\n        rootScope.settings = this.state.settings;\n\n        if(DEBUG) {\n          this.log('state res', state, copy(state));\n        }\n        \n        //return resolve();\n\n        const auth: UserAuth = arr[arr.length - 1] as any;\n        if(auth) {\n          // ! Warning ! DON'T delete this\n          this.state.authState = {_: 'authStateSignedIn'};\n          rootScope.broadcast('user_auth', typeof(auth) !== 'number' ? (auth as any).id : auth); // * support old version\n        }\n        \n        //console.timeEnd('load state');\n        resolve(this.state);\n      }).catch(resolve).finally(() => {\n        setInterval(() => {\n          this.tempId++;\n          this.saveState();\n        }, 10000);\n      });\n    });\n  }\n\n  public getState() {\n    return this.state === undefined ? this.loadSavedState() : Promise.resolve(this.state);\n  }\n\n  public saveState() {\n    if(this.state === undefined || this.savePromise) return;\n\n    //return;\n\n    const tempId = this.tempId;\n    this.savePromise = getHeavyAnimationPromise().then(() => {\n      return Promise.all(this.dispatchEvent('save', this.state))\n      .then(() => getHeavyAnimationPromise())\n      .then(() => sessionStorage.set(this.state))\n      .then(() => {\n        this.savePromise = null;\n  \n        if(this.tempId !== tempId) {\n          this.saveState();\n        }\n      });\n    });\n    //let perf = performance.now();\n    \n    //this.log('saveState: event time:', performance.now() - perf);\n\n    //const pinnedOrders = appMessagesManager.dialogsStorage.pinnedOrders;\n\n    //perf = performance.now();\n    \n    //this.log('saveState: storage set time:', performance.now() - perf);\n  }\n\n  public setByKey(key: string, value: any) {\n    setDeepProperty(this.state, key, value);\n    rootScope.broadcast('settings_updated', {key, value});\n  }\n\n  public pushToState<T extends keyof State>(key: T, value: State[T]) {\n    this.state[key] = value;\n  }\n\n  public setPeer(peerId: number, peer: any) {\n    const container = peerId > 0 ? this.state.users : this.state.chats;\n    if(container.hasOwnProperty(peerId)) return;\n    container[peerId] = peer;\n  }\n\n  public resetState() {\n    for(let i in this.state) {\n      // @ts-ignore\n      this.state[i] = false;\n    }\n    sessionStorage.set(this.state).then(() => {\n      location.reload();\n    });\n  }\n}\n\n//console.trace('appStateManager include');\n\nconst appStateManager = new AppStateManager();\nMOUNT_CLASS_TO.appStateManager = appStateManager;\nexport default appStateManager;","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport function copy<T>(obj: T): T {\n  //in case of premitives\n  if(obj === null || typeof(obj) !== \"object\") {\n    return obj;\n  }\n \n  //date objects should be \n  if(obj instanceof Date) {\n    return new Date(obj.getTime()) as any;\n  }\n \n  //handle Array\n  if(Array.isArray(obj)) {\n    // @ts-ignore\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\n    return clonedArr;\n  }\n \n  //lastly, handle objects\n  // @ts-ignore\n  let clonedObj = new obj.constructor();\n  for(var prop in obj){\n    if(obj.hasOwnProperty(prop)) {\n      clonedObj[prop] = copy(obj[prop]);\n    }\n  }\n  return clonedObj;\n}\n\nexport function deepEqual(x: any, y: any): boolean {\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\n  return x && y && tx === 'object' && tx === ty ? (\n    ok(x).length === ok(y).length &&\n      ok(x).every(key => deepEqual(x[key], y[key]))\n  ) : (x === y);\n}\n\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\n  //const perf = performance.now();\n  const props = {writable: true, configurable: true};\n  const out: {[name: string]: typeof props} = {};\n  names.forEach(name => {\n    if(obj[name] === undefined) {\n      out[name] = props;\n    }\n  });\n  Object.defineProperties(obj, out);\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\n}\n\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\n  if(!object) return [];\n  const ids = Object.keys(object).map(i => +i);\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\n  else return ids.sort((a, b) => b - a);\n}\n\nexport function safeReplaceObject(wasObject: any, newObject: any) {\n  if(!wasObject) {\n    return newObject;\n  }\n\n  for(var key in wasObject) {\n    if(!newObject.hasOwnProperty(key) && key.charAt(0) !== '$') {\n      delete wasObject[key];\n    }\n  }\n\n  for(var key in newObject) {\n    //if (newObject.hasOwnProperty(key)) { // useless\n      wasObject[key] = newObject[key];\n    //}\n  }\n  \n  return wasObject;\n}\n\n/**\n * Will be used for FILE_REFERENCE_EXPIRED\n * @param key \n * @param wasObject \n * @param newObject \n */\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\n  if('byteLength' in newObject[key]) { // Uint8Array\n    newObject[key] = [...newObject[key]];\n  }\n\n  if(wasObject && wasObject[key] !== newObject[key]) {\n    wasObject[key].length = newObject[key].length;\n    (newObject[key] as any[]).forEach((v, i) => {\n      wasObject[key][i] = v;\n    });\n\n    /* wasObject[key].set(newObject[key]); */\n    newObject[key] = wasObject[key];\n  }\n}\n\nexport function isObject(object: any) {\n  return typeof(object) === 'object' && object !== null;\n}\n\nexport function getDeepProperty(object: any, key: string) {\n  const splitted = key.split('.');\n  let o: any = object;\n  splitted.forEach(key => {\n    // @ts-ignore\n    o = o[key];\n  });\n  \n  return o;\n}\n\nexport function setDeepProperty(object: any, key: string, value: any) {\n  const splitted = key.split('.');\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\n}\n\nexport function validateInitObject(initObject: any, currentObject: any) {\n  for(const i in initObject) {\n    if(typeof(currentObject[i]) !== typeof(initObject[i])) {\n      currentObject[i] = copy(initObject[i]);\n    } else if(isObject(initObject[i])) {\n      validateInitObject(initObject[i], currentObject[i]);\n    }\n  }\n}\n\nexport function safeAssign(object: any, fromObject: any) {\n  if(!fromObject) return;\n  \n  for(let i in fromObject) {\n    if(fromObject[i] !== undefined) {\n      object[i] = fromObject[i];\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from \"../config/debug\";\n\nexport enum LogLevels {\n  log = 1,\n  warn = 2,\n  error = 4,\n  debug = 8\n};\n\nconst _logTimer = Date.now();\nfunction dT() {\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\n}\n\nexport function logger(prefix: string, level = LogLevels.log | LogLevels.warn | LogLevels.error) {\n  if(!DEBUG/*  || true */) {\n    level = LogLevels.error;\n  }\n\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  function Log(...args: any[]) {\n    return level & LogLevels.log && console.log(dT(), prefix, ...args);\n  }\n  \n  Log.warn = function(...args: any[]) {\n    return level & LogLevels.warn && console.warn(dT(), prefix, ...args);\n  };\n  \n  Log.info = function(...args: any[]) {\n    return level & LogLevels.log && console.info(dT(), prefix, ...args);\n  };\n  \n  Log.error = function(...args: any[]) {\n    return level & LogLevels.error && console.error(dT(), prefix, ...args);\n  };\n  \n  Log.trace = function(...args: any[]) {\n    return level & LogLevels.log && console.trace(dT(), prefix, ...args);\n  };\n\n  /* Log.debug = function(...args: any[]) {\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\n  }; */\n\n  Log.debug = function(...args: any[]) {\n    return level & LogLevels.debug && console.debug(dT(), prefix, ...args);\n  };\n\n  Log.setPrefix = function(_prefix: string) {\n    prefix = '[' + _prefix + ']:';\n  };\n\n  Log.setPrefix(prefix);\n  \n  return Log;\n};","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n// * Jolly Cobra's useHeavyAnimationCheck.ts, patched\n\n//import { useEffect } from '../lib/teact/teact';\nimport { AnyToVoidFunction } from '../types';\nimport ListenerSetter from '../helpers/listenerSetter';\nimport { CancellablePromise, deferredPromise } from '../helpers/cancellablePromise';\nimport { pause } from '../helpers/schedulers';\nimport rootScope from '../lib/rootScope';\nimport DEBUG from '../config/debug';\n\nconst ANIMATION_START_EVENT = 'event-heavy-animation-start';\nconst ANIMATION_END_EVENT = 'event-heavy-animation-end';\n\nlet isAnimating = false;\nlet heavyAnimationPromise: CancellablePromise<void> = Promise.resolve();\nlet promisesInQueue = 0;\n\nconst log = console.log.bind(console.log, '[HEAVY-ANIMATION]:');\n\nexport const dispatchHeavyAnimationEvent = (promise: Promise<any>, timeout?: number) => {\n  if(!isAnimating) {\n    heavyAnimationPromise = deferredPromise<void>();\n    rootScope.broadcast(ANIMATION_START_EVENT);\n    isAnimating = true;\n    DEBUG && log('start');\n  }\n  \n  ++promisesInQueue;\n  DEBUG && log('attach promise, length:', promisesInQueue, timeout);\n\n  const promises = [\n    timeout !== undefined ? pause(timeout) : undefined,\n    promise.finally(() => {})\n  ].filter(Boolean);\n\n  const perf = performance.now();\n  Promise.race(promises).then(() => {\n    --promisesInQueue;\n    DEBUG && log('promise end, length:', promisesInQueue, performance.now() - perf);\n    if(!promisesInQueue) {\n      isAnimating = false;\n      promisesInQueue = 0;\n      rootScope.broadcast(ANIMATION_END_EVENT);\n      heavyAnimationPromise.resolve();\n\n      DEBUG && log('end');\n    }\n  });\n\n  return heavyAnimationPromise;\n};\n\nexport const getHeavyAnimationPromise = () => heavyAnimationPromise;\n\nexport default (\n  handleAnimationStart: AnyToVoidFunction,\n  handleAnimationEnd: AnyToVoidFunction,\n  listenerSetter?: ListenerSetter\n) => {\n  //useEffect(() => {\n    if(isAnimating) {\n      handleAnimationStart();\n    }\n\n    const add = listenerSetter ? listenerSetter.add.bind(listenerSetter, rootScope) : rootScope.addEventListener.bind(rootScope);\n    const remove = listenerSetter ? listenerSetter.removeManual.bind(listenerSetter, rootScope) : rootScope.removeEventListener.bind(rootScope);\n    add(ANIMATION_START_EVENT, handleAnimationStart);\n    add(ANIMATION_END_EVENT, handleAnimationEnd);\n\n    return () => {\n      remove(ANIMATION_END_EVENT, handleAnimationEnd);\n      remove(ANIMATION_START_EVENT, handleAnimationStart);\n    };\n  //}, [handleAnimationEnd, handleAnimationStart]);\n};\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { ChatSavedPosition } from './appManagers/appImManager';\nimport type { State } from './appManagers/appStateManager';\nimport { MOUNT_CLASS_TO } from '../config/debug';\nimport { LangPackDifference } from '../layer';\nimport AppStorage from './storage';\n\nconst sessionStorage = new AppStorage<{\n  dc: number,\n  user_auth: number,\n  dc1_auth_key: any,\n  dc2_auth_key: any,\n  dc3_auth_key: any,\n  dc4_auth_key: any,\n  dc5_auth_key: any,\n  max_seen_msg: number,\n  server_time_offset: number,\n\n  chatPositions: {\n    [peerId_threadId: string]: ChatSavedPosition\n  },\n  langPack: LangPackDifference\n} & State>({\n  storeName: 'session'\n});\nMOUNT_CLASS_TO.appStorage = sessionStorage;\nexport default sessionStorage;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nexport const readBlobAsText = (blob: Blob) => {\n  return new Promise<string>(resolve => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (e) => {\n      // @ts-ignore\n      resolve(e.srcElement.result);\n    });\n    reader.readAsText(blob);\n  });\n};\n\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\n  let blob;\n  const safeMimeType = blobSafeMimeType(mimeType);\n  try {\n    blob = new Blob(blobParts, {type: safeMimeType});\n  } catch(e) {\n    // @ts-ignore\n    let bb = new BlobBuilder;\n    blobParts.forEach((blobPart: any) => {\n      bb.append(blobPart);\n    });\n    blob = bb.getBlob(safeMimeType);\n  }\n  return blob;\n}\n\nexport function blobSafeMimeType(mimeType: string) {\n  if([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n    'application/json'\n  ].indexOf(mimeType) === -1) {\n    return 'application/octet-stream';\n  }\n\n  return mimeType;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { IDBStore } from \"../lib/idb\";\nimport Modes from \"./modes\";\n\nexport type DatabaseStoreName = 'session' | 'stickerSets';\nexport type DatabaseStore = Omit<IDBStore, 'name'> & {name: DatabaseStoreName};\nconst Database = {\n  name: 'tweb' + (Modes.test ? '_test' : ''),\n  version: 5,\n  stores: [{\n    name: 'session'\n  }, {\n    name: 'stickerSets'\n  }] as DatabaseStore[],\n};\n\nexport default Database;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport Database from '../config/database';\nimport { blobConstruct } from '../helpers/blob';\nimport { safeAssign } from '../helpers/object';\nimport { logger } from './logger';\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\n */\nexport type IDBIndex = {\n  indexName: string,\n  keyPath: string,\n  objectParameters: IDBIndexParameters\n};\n\nexport type IDBStore = {\n  name: string, \n  indexes?: IDBIndex[]\n};\n\nexport type IDBOptions = {\n  name?: string,\n  storeName: string,\n  stores?: IDBStore[],\n  version?: number\n};\n\nexport default class IDBStorage {\n  public openDbPromise: Promise<IDBDatabase>;\n  public storageIsAvailable = true;\n\n  private log: ReturnType<typeof logger> = logger('IDB');\n  \n  public name: string = Database.name;\n  public version: number = Database.version;\n  public stores: IDBStore[] = Database.stores;\n\n  public storeName: string;\n\n  constructor(options: IDBOptions) {\n    safeAssign(this, options);\n\n    this.openDatabase(true);\n  }\n\n  public isAvailable() {\n    return this.storageIsAvailable;\n  }\n\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\n    if(this.openDbPromise && !createNew) {\n      return this.openDbPromise;\n    }\n\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\n      const os = db.createObjectStore(store.name);\n\n      if(store.indexes?.length) {\n        for(const index of store.indexes) {\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\n        }\n      }\n    };\n\n    try {\n      var request = indexedDB.open(this.name, this.version);\n\n      if(!request) {\n        throw new Error();\n      }\n    } catch(error) {\n      this.log.error('error opening db', error.message)\n      this.storageIsAvailable = false;\n      return Promise.reject(error);\n    }\n\n    let finished = false;\n    setTimeout(() => {\n      if(!finished) {\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\n      }\n    }, 3000);\n\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\n      request.onsuccess = (event) => {\n        finished = true;\n        const db = request.result;\n        let calledNew = false;\n\n        this.log('Opened');\n  \n        db.onerror = (error) => {\n          this.storageIsAvailable = false;\n          this.log.error('Error creating/accessing IndexedDB database', error);\n          reject(error);\n        };\n\n        db.onclose = (e) => {\n          this.log.error('closed:', e);\n          !calledNew && this.openDatabase();\n        };\n\n        db.onabort = (e) => {\n          this.log.error('abort:', e);\n          const transaction = e.target as IDBTransaction;\n          \n          this.openDatabase(calledNew = true);\n\n          if(transaction.onerror) {\n            transaction.onerror(e);\n          }\n\n          db.close();\n        };\n\n        db.onversionchange = (e) => {\n          this.log.error('onversionchange, lol?');\n        };\n\n        resolve(db);\n      };\n  \n      request.onerror = (event) => {\n        finished = true;\n        this.storageIsAvailable = false;\n        this.log.error('Error creating/accessing IndexedDB database', event);\n        reject(event);\n      };\n  \n      request.onupgradeneeded = (event) => {\n        finished = true;\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\n\n        // @ts-ignore\n        var db = event.target.result as IDBDatabase;\n        this.stores.forEach((store) => {\n          /* if(db.objectStoreNames.contains(store.name)) {\n            //if(event.oldVersion === 1) {\n              db.deleteObjectStore(store.name);\n            //}\n          } */\n    \n          if(!db.objectStoreNames.contains(store.name)) {\n            createObjectStore(db, store);\n          }\n        });\n      };\n    });\n  }\n\n  public delete(entryName: string): Promise<void> {\n    //return Promise.resolve();\n    return this.openDatabase().then((db) => {\n      try {\n        //this.log('delete: `' + entryName + '`');\n        var objectStore = db.transaction([this.storeName], 'readwrite')\n          .objectStore(this.storeName);\n\n        var request = objectStore.delete(entryName);\n      } catch(error) {\n        return Promise.reject(error);\n      }\n\n      return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.log.error('delete: request not finished!', entryName, request);\n          resolve();\n        }, 3000);\n\n        request.onsuccess = (event) => {\n          //this.log('delete: deleted file', event);\n          resolve();\n          clearTimeout(timeout);\n        };\n  \n        request.onerror = (error) => {\n          reject(error);\n          clearTimeout(timeout);\n        };\n      });\n    });\n  }\n\n  public deleteAll() {\n    return this.openDatabase().then((db) => {\n      //this.log('deleteAll');\n\n      try {\n        const transaction = db.transaction([this.storeName], 'readwrite');\n\n        const objectStore = transaction.objectStore(this.storeName);\n        var request = objectStore.clear();\n      } catch(error) {\n        return Promise.reject(error);\n      }\n\n      return new Promise<void>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.log.error('deleteAll: request not finished', request);\n        }, 3000);\n\n        request.onsuccess = (event) => {\n          resolve();\n          clearTimeout(timeout);\n        };\n  \n        request.onerror = (error) => {\n          reject(error);\n          clearTimeout(timeout);\n        };\n      });\n    });\n  }\n\n  public save(entryName: string, value: any) {\n    return this.openDatabase().then((db) => {\n      //this.log('save:', entryName, value);\n\n      const handleError = (error: Error) => {\n        this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\n        if((!error || error.name === 'InvalidStateError')/*  && false */) {\n          setTimeout(() => {\n            this.save(entryName, value);\n          }, 2e3);\n        } else {\n          //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\n        }\n      };\n\n      try {\n        const transaction = db.transaction([this.storeName], 'readwrite');\n        transaction.onerror = (e) => {\n          handleError(transaction.error);\n        };\n        /* transaction.oncomplete = (e) => {\n          this.log('save: transaction complete:', entryName);\n        }; */\n\n        /* transaction.addEventListener('abort', (e) => {\n          //handleError();\n          this.log.error('IndexedDB: save transaction abort!', transaction.error);\n        }); */\n\n        const objectStore = transaction.objectStore(this.storeName);\n        var request = objectStore.put(value, entryName);\n      } catch(error) {\n        handleError(error);\n        return Promise.reject(error);\n        \n        /* this.storageIsAvailable = false;\n        throw error; */\n      }\n\n      return new Promise<void>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.log.error('save: request not finished', entryName, request);\n        }, 10000);\n\n        request.onsuccess = (event) => {\n          resolve();\n          clearTimeout(timeout);\n        };\n  \n        request.onerror = (error) => {\n          reject(error);\n          clearTimeout(timeout);\n        };\n      });\n    });\n  }\n\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\n    //return Promise.resolve(blobConstruct([blob]));\n    if(!(blob instanceof Blob)) {\n      blob = blobConstruct([blob]) as Blob;\n    }\n\n    return this.save(fileName, blob);\n  }\n\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\n      return Promise.reject();\n    }\n\n    if(!(blob instanceof Blob)) {\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\n      return this.storagePutB64String(db, fileName, address).then(() => {\n        return blob;\n      });\n    }\n\n    try {\n      var reader = new FileReader();\n    } catch (e) {\n      this.storageIsAvailable = false;\n      return Promise.reject();\n    }\n\n    let promise = new Promise<Blob>((resolve, reject) => {\n      reader.onloadend = () => {\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\n          resolve(blob);\n        }, reject);\n      }\n  \n      reader.onerror = reject;\n    });\n    \n\n    try {\n      reader.readAsDataURL(blob);\n    } catch (e) {\n      this.storageIsAvailable = false;\n      return Promise.reject();\n    }\n\n    return promise;\n  }\n\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\n    try {\n      var objectStore = db.transaction([this.storeName], 'readwrite')\n        .objectStore(this.storeName);\n      var request = objectStore.put(b64string, fileName);\n    } catch(error) {\n      this.storageIsAvailable = false;\n      return Promise.reject(error);\n    }\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = function(event) {\n        resolve();\n      };\n  \n      request.onerror = reject;\n    });\n  }\n\n  public getBlobSize(blob: any) {\n    return blob.size || blob.byteLength || blob.length;\n  } */\n\n  public get<T>(entryName: string): Promise<T> {\n    //return Promise.reject();\n    return this.openDatabase().then((db) => {\n      //this.log('get pre:', fileName);\n\n      try {\n        const transaction = db.transaction([this.storeName], 'readonly');\n        /* transaction.onabort = (e) => {\n          this.log.error('get transaction onabort?', e);\n        }; */\n        const objectStore = transaction.objectStore(this.storeName);\n        var request = objectStore.get(entryName);\n        \n        //this.log.log('IDB get:', fileName, request);\n      } catch(err) {\n        this.log.error('get error:', err, entryName, request, request.error);\n      }\n\n      return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.log.error('get request not finished!', entryName, request);\n          reject();\n        }, 3000);\n\n        request.onsuccess = function(event) {\n          const result = request.result;\n          if(result === undefined) {\n            reject('NO_ENTRY_FOUND');\n          } /* else if(typeof result === 'string' &&\n            result.substr(0, 5) === 'data:') {\n            resolve(dataUrlToBlob(result));\n          }  */else {\n            resolve(result);\n          }\n\n          clearTimeout(timeout);\n        }\n  \n        request.onerror = () => {\n          clearTimeout(timeout);\n          reject();\n        };\n      });\n    });\n  }\n\n  /* public getAllKeys(): Promise<Array<string>> {\n    console.time('getAllEntries');\n    return this.openDatabase().then((db) => {\n      var objectStore = db.transaction([this.storeName], 'readonly')\n        .objectStore(this.storeName);\n      var request = objectStore.getAllKeys();\n\n      return new Promise((resolve, reject) => {\n        request.onsuccess = function(event) {\n          // @ts-ignore\n          var result = event.target.result;\n          resolve(result);\n          console.timeEnd('getAllEntries');\n        }\n  \n        request.onerror = reject;\n      });\n    });\n  } */\n\n  /* public isFileExists(fileName: string): Promise<boolean> {\n    console.time('isFileExists');\n    return this.openDatabase().then((db) => {\n      var objectStore = db.transaction([this.storeName], 'readonly')\n        .objectStore(this.storeName);\n      var request = objectStore.openCursor(fileName);\n\n      return new Promise((resolve, reject) => {\n        request.onsuccess = function(event) {\n          // @ts-ignore\n          var cursor = event.target.result;\n          resolve(!!cursor);\n          console.timeEnd('isFileExists');\n        }\n  \n        request.onerror = reject;\n      });\n    });\n  } */\n\n  /* public getFileWriter(fileName: string, mimeType: string) {\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\n      return this.saveFile(fileName, blob);\n    });\n\n    return Promise.resolve(fakeWriter);\n  } */\n}","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { DatabaseStore, DatabaseStoreName } from \"../config/database\";\nimport IDBStorage, { IDBOptions } from \"./idb\";\n\nexport default class AppStorage<Storage extends Record<string, any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\n  private storage: IDBStorage;//new CacheStorageController('session');\n\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\n  private cache: Partial<Storage> = {};\n  private useStorage = true;\n\n  constructor(storageOptions: Omit<IDBOptions, 'storeName' | 'stores'> & {stores?: DatabaseStore[], storeName: DatabaseStoreName}) {\n    this.storage = new IDBStorage(storageOptions);\n  }\n\n  public getCache() {\n    return this.cache;\n  }\n\n  public getFromCache(key: keyof Storage) {\n    return this.cache[key];\n  }\n\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\n    return this.cache[key] = value;\n  }\n\n  public async get(key: keyof Storage): Promise<Storage[typeof key]> {\n    if(this.cache.hasOwnProperty(key)) {\n      return this.getFromCache(key);\n    } else if(this.useStorage) {\n      let value: any;\n      try {\n        value = await this.storage.get(key as string);\n        //console.log('[AS]: get result:', key, value);\n        //value = JSON.parse(value);\n      } catch(e) {\n        if(e !== 'NO_ENTRY_FOUND') {\n          this.useStorage = false;\n          console.error('[AS]: get error:', e, key, value);\n        }\n      }\n\n      return this.cache[key] = value;\n    } else {\n      throw 'something went wrong';\n    }\n  }\n\n  public async set(obj: Partial<Storage>, onlyLocal = false) {\n    //console.log('storageSetValue', obj, callback, arguments);\n\n    for(const key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        this.setToCache(key, value);\n\n        // let perf = /* DEBUG */false ? performance.now() : 0;\n        // value = JSON.stringify(value);\n\n        // if(perf) {\n        //   let elapsedTime = performance.now() - perf;\n        //   if(elapsedTime > 10) {\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\n        //   }\n        // }\n        \n        /* perf = performance.now();\n        value = stringify(value);\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\n\n        if(this.useStorage && !onlyLocal) {\n          try {\n            //console.log('setItem: will set', key/* , value */);\n            //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\n            //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\n            await this.storage.save(key, value);\n            //console.log('setItem: have set', key/* , value */);\n          } catch(e) {\n            //this.useCS = false;\n            console.error('[AS]: set error:', e, key/* , value */);\n          }\n        }\n      }\n    }\n  }\n\n  public async remove(key: keyof Storage, saveLocal = false) {\n    /* if(!this.cache.hasOwnProperty(key)) {\n      return;\n    } */\n\n    if(!saveLocal) {\n      delete this.cache[key];\n    }\n    \n    if(this.useStorage) {\n      try {\n        await this.storage.delete(key as string);\n      } catch(e) {\n        this.useStorage = false;\n        console.error('[AS]: remove error:', e);\n      }\n    }\n  }\n\n  public clear() {\n    return this.storage.deleteAll();\n  }\n}\n"],"sourceRoot":""}