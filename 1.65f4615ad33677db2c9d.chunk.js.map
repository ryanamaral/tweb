{"version":3,"sources":["webpack:///./src/helpers/object.ts","webpack:///./src/lib/appManagers/appStateManager.ts","webpack:///./src/lib/logger.ts","webpack:///./src/lib/sessionStorage.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/config/database.ts","webpack:///./src/lib/idb.ts","webpack:///./src/lib/storage.ts"],"names":["copy","obj","Date","getTime","Array","isArray","map","el","clonedObj","constructor","prop","hasOwnProperty","deepEqual","x","y","ok","Object","keys","tx","length","every","key","defineNotNumerableProperties","names","props","writable","configurable","out","forEach","name","undefined","defineProperties","getObjectKeysAndSort","object","sort","ids","i","a","b","safeReplaceObject","wasObject","newObject","safeReplaceArrayInObject","v","isObject","getDeepProperty","splitted","split","o","setDeepProperty","value","slice","join","pop","validateInitObject","initObject","currentObject","onReplace","previousKey","safeAssign","fromObject","STATE_VERSION","version","STATE_INIT","allDialogsLoaded","pinnedOrders","contactsList","updates","filters","maxSeenMsgId","stateCreatedTime","now","recentEmoji","topPeers","recentSearch","authState","_","hiddenPinnedMessages","settings","messagesTextSize","sendShortcut","animationsEnabled","autoDownload","contacts","private","groups","channels","autoPlay","gifs","videos","stickers","suggest","loop","themes","background","type","blur","slug","highlightningColor","color","theme","notifications","sound","keepSigned","ALL_KEYS","REFRESH_KEYS","AppStateManager","super","log","neededPeers","Map","singlePeerMap","storages","users","storeName","chats","dialogs","storagesResults","this","loadSavedState","loaded","console","time","Promise","resolve","storagesKeys","storagesPromises","getAll","promises","concat","get","all","then","arr","state","pushToState","splice","auth","shift","broadcast","id","s","find","t","nightTheme","missingKey","timeEnd","catch","first","direct","set","peerId","limit","has","Set","add","dispatchEvent","keepPeerSingle","existsPeerId","delete","size","appStateManager","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","dT","toFixed","logger","prefix","args","warn","info","error","trace","debug","setPrefix","_prefix","setLevel","level","reduce","acc","sessionStorage","appStorage","readBlobAsText","blob","reader","FileReader","addEventListener","e","srcElement","result","readAsText","blobConstruct","blobParts","mimeType","safeMimeType","indexOf","blobSafeMimeType","Blob","bb","BlobBuilder","blobPart","append","getBlob","test","stores","options","storageIsAvailable","openDatabase","createNew","openDbPromise","request","indexedDB","open","message","reject","finished","setTimeout","onerror","onsuccess","event","db","calledNew","onclose","onabort","transaction","target","close","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","getObjectStore","objectStore","clear","idx","put","fileName","save","mode","perf","performance","clearTimeout","timeout","oncomplete","results","r","requests","storageOptions","cache","useStorage","getPromises","keysToSet","saveDeferred","storage","STORAGES","push","saveThrottled","deferred","from","values","getThrottled","includes","getFromCache","p","onlyLocal","setToCache","saveLocal","deleteAll","enabled"],"mappings":"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","file":"1.65f4615ad33677db2c9d.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function copy<T>(obj: T): T {\r\n  //in case of premitives\r\n  if(obj === null || typeof(obj) !== \"object\") {\r\n    return obj;\r\n  }\r\n \r\n  //date objects should be \r\n  if(obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n \r\n  //handle Array\r\n  if(Array.isArray(obj)) {\r\n    // @ts-ignore\r\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\r\n    return clonedArr;\r\n  }\r\n \r\n  //lastly, handle objects\r\n  // @ts-ignore\r\n  let clonedObj = new obj.constructor();\r\n  for(var prop in obj){\r\n    if(obj.hasOwnProperty(prop)) {\r\n      clonedObj[prop] = copy(obj[prop]);\r\n    }\r\n  }\r\n  return clonedObj;\r\n}\r\n\r\nexport function deepEqual(x: any, y: any): boolean {\r\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\r\n  return x && y && tx === 'object' && tx === ty ? (\r\n    ok(x).length === ok(y).length &&\r\n      ok(x).every(key => deepEqual(x[key], y[key]))\r\n  ) : (x === y);\r\n}\r\n\r\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\r\n  //const perf = performance.now();\r\n  const props = {writable: true, configurable: true};\r\n  const out: {[name: string]: typeof props} = {};\r\n  names.forEach(name => {\r\n    if(obj[name] === undefined) {\r\n      out[name] = props;\r\n    }\r\n  });\r\n  Object.defineProperties(obj, out);\r\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\r\n}\r\n\r\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\r\n  if(!object) return [];\r\n  const ids = Object.keys(object).map(i => +i);\r\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\r\n  else return ids.sort((a, b) => b - a);\r\n}\r\n\r\nexport function safeReplaceObject(wasObject: any, newObject: any) {\r\n  if(!wasObject) {\r\n    return newObject;\r\n  }\r\n\r\n  for(var key in wasObject) {\r\n    if(!newObject.hasOwnProperty(key)) {\r\n      delete wasObject[key];\r\n    }\r\n  }\r\n\r\n  for(var key in newObject) {\r\n    //if (newObject.hasOwnProperty(key)) { // useless\r\n      wasObject[key] = newObject[key];\r\n    //}\r\n  }\r\n  \r\n  return wasObject;\r\n}\r\n\r\n/**\r\n * Will be used for FILE_REFERENCE_EXPIRED\r\n * @param key \r\n * @param wasObject \r\n * @param newObject \r\n */\r\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\r\n  if('byteLength' in newObject[key]) { // Uint8Array\r\n    newObject[key] = [...newObject[key]];\r\n  }\r\n\r\n  if(wasObject && wasObject[key] !== newObject[key]) {\r\n    wasObject[key].length = newObject[key].length;\r\n    (newObject[key] as any[]).forEach((v, i) => {\r\n      wasObject[key][i] = v;\r\n    });\r\n\r\n    /* wasObject[key].set(newObject[key]); */\r\n    newObject[key] = wasObject[key];\r\n  }\r\n}\r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\nexport function getDeepProperty(object: any, key: string) {\r\n  const splitted = key.split('.');\r\n  let o: any = object;\r\n  splitted.forEach(key => {\r\n    if(!key) {\r\n      return;\r\n    }\r\n    \r\n    // @ts-ignore\r\n    o = o[key];\r\n  });\r\n  \r\n  return o;\r\n}\r\n\r\nexport function setDeepProperty(object: any, key: string, value: any) {\r\n  const splitted = key.split('.');\r\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\r\n}\r\n\r\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\r\n  for(const key in initObject) {\r\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\r\n      currentObject[key] = copy(initObject[key]);\r\n      onReplace && onReplace(previousKey || key);\r\n    } else if(isObject(initObject[key])) {\r\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\r\n    }\r\n  }\r\n}\r\n\r\nexport function safeAssign(object: any, fromObject: any) {\r\n  if(!fromObject) return;\r\n  \r\n  for(let i in fromObject) {\r\n    if(fromObject[i] !== undefined) {\r\n      object[i] = fromObject[i];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { Dialog } from './appMessagesManager';\r\nimport type { UserAuth } from '../mtproto/mtproto_config';\r\nimport type { User } from './appUsersManager';\r\nimport type { AuthState } from '../../types';\r\nimport type FiltersStorage from '../storages/filters';\r\nimport type DialogsStorage from '../storages/dialogs';\r\nimport EventListenerBase from '../../helpers/eventListenerBase';\r\nimport rootScope from '../rootScope';\r\nimport sessionStorage from '../sessionStorage';\r\nimport { logger } from '../logger';\r\nimport { copy, setDeepProperty, validateInitObject } from '../../helpers/object';\r\nimport App from '../../config/app';\r\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport AppStorage from '../storage';\r\nimport { Chat } from '../../layer';\r\n\r\nconst REFRESH_EVERY = 24 * 60 * 60 * 1000; // 1 day\r\nconst STATE_VERSION = App.version;\r\n\r\nexport type Background = {\r\n  type: 'color' | 'image' | 'default',\r\n  blur: boolean,\r\n  highlightningColor?: string,\r\n  color?: string,\r\n  slug?: string,\r\n};\r\n\r\nexport type Theme = {\r\n  name: 'day' | 'night',\r\n  background: Background\r\n};\r\n\r\nexport type State = {\r\n  allDialogsLoaded: DialogsStorage['allDialogsLoaded'],\r\n  pinnedOrders: DialogsStorage['pinnedOrders'],\r\n  contactsList: number[],\r\n  updates: Partial<{\r\n    seq: number,\r\n    pts: number,\r\n    date: number\r\n  }>,\r\n  filters: FiltersStorage['filters'],\r\n  maxSeenMsgId: number,\r\n  stateCreatedTime: number,\r\n  recentEmoji: string[],\r\n  topPeers: number[],\r\n  recentSearch: number[],\r\n  version: typeof STATE_VERSION,\r\n  authState: AuthState,\r\n  hiddenPinnedMessages: {[peerId: string]: number},\r\n  settings: {\r\n    messagesTextSize: number,\r\n    sendShortcut: 'enter' | 'ctrlEnter',\r\n    animationsEnabled: boolean,\r\n    autoDownload: {\r\n      contacts: boolean\r\n      private: boolean\r\n      groups: boolean\r\n      channels: boolean\r\n    },\r\n    autoPlay: {\r\n      gifs: boolean,\r\n      videos: boolean\r\n    },\r\n    stickers: {\r\n      suggest: boolean,\r\n      loop: boolean\r\n    },\r\n    background?: Background, // ! DEPRECATED\r\n    themes: Theme[],\r\n    theme: Theme['name'],\r\n    notifications: {\r\n      sound: boolean\r\n    },\r\n    nightTheme?: boolean, // ! DEPRECATED\r\n  },\r\n  keepSigned: boolean\r\n};\r\n\r\nexport const STATE_INIT: State = {\r\n  allDialogsLoaded: {},\r\n  pinnedOrders: {},\r\n  contactsList: [],\r\n  updates: {},\r\n  filters: {},\r\n  maxSeenMsgId: 0,\r\n  stateCreatedTime: Date.now(),\r\n  recentEmoji: [],\r\n  topPeers: [],\r\n  recentSearch: [],\r\n  version: STATE_VERSION,\r\n  authState: {\r\n    _: 'authStateSignIn'\r\n  },\r\n  hiddenPinnedMessages: {},\r\n  settings: {\r\n    messagesTextSize: 16,\r\n    sendShortcut: 'enter',\r\n    animationsEnabled: true,\r\n    autoDownload: {\r\n      contacts: true,\r\n      private: true,\r\n      groups: true,\r\n      channels: true\r\n    },\r\n    autoPlay: {\r\n      gifs: true,\r\n      videos: true\r\n    },\r\n    stickers: {\r\n      suggest: true,\r\n      loop: true\r\n    },\r\n    themes: [{\r\n      name: 'day',\r\n      background: {\r\n        type: 'image',\r\n        blur: false,\r\n        slug: 'ByxGo2lrMFAIAAAAmkJxZabh8eM', // * new blurred camomile,\r\n        highlightningColor: 'hsla(85.5319, 36.9171%, 40.402%, 0.4)'\r\n      }\r\n    }, {\r\n      name: 'night',\r\n      background: {\r\n        type: 'color',\r\n        blur: false,\r\n        color: '#0f0f0f',\r\n        highlightningColor: 'hsla(0, 0%, 3.82353%, 0.4)'\r\n      }\r\n    }],\r\n    theme: 'day',\r\n    notifications: {\r\n      sound: false\r\n    }\r\n  },\r\n  keepSigned: true\r\n};\r\n\r\nconst ALL_KEYS = Object.keys(STATE_INIT) as any as Array<keyof State>;\r\n\r\nconst REFRESH_KEYS = ['dialogs', 'allDialogsLoaded', 'messages', 'contactsList', 'stateCreatedTime',\r\n  'updates', 'maxSeenMsgId', 'filters', 'topPeers', 'pinnedOrders'] as any as Array<keyof State>;\r\n\r\nexport class AppStateManager extends EventListenerBase<{\r\n  save: (state: State) => Promise<void>,\r\n  peerNeeded: (peerId: number) => void,\r\n  peerUnneeded: (peerId: number) => void,\r\n}> {\r\n  public static STATE_INIT = STATE_INIT;\r\n  private loaded: Promise<State>;\r\n  private log = logger('STATE'/* , LogLevels.error */);\r\n\r\n  private state: State;\r\n\r\n  private neededPeers: Map<number, Set<string>> = new Map();\r\n  private singlePeerMap: Map<string, number> = new Map();\r\n\r\n  public storages = {\r\n    users: new AppStorage<Record<number, User>>({\r\n      storeName: 'users'\r\n    }),\r\n\r\n    chats: new AppStorage<Record<number, Chat>>({\r\n      storeName: 'chats'\r\n    }),\r\n\r\n    dialogs: new AppStorage<Record<number, Dialog>>({\r\n      storeName: 'dialogs'\r\n    })\r\n  };\r\n\r\n  public storagesResults: {[key in keyof AppStateManager['storages']]: any[]} = {} as any;\r\n\r\n  constructor() {\r\n    super();\r\n    this.loadSavedState();\r\n  }\r\n\r\n  public loadSavedState(): Promise<State> {\r\n    if(this.loaded) return this.loaded;\r\n    console.time('load state');\r\n    this.loaded = new Promise((resolve) => {\r\n      const storagesKeys = Object.keys(this.storages) as Array<keyof AppStateManager['storages']>;\r\n      const storagesPromises = storagesKeys.map(key => this.storages[key].getAll());\r\n\r\n      const promises = ALL_KEYS\r\n      .concat('user_auth' as any)\r\n      .map(key => sessionStorage.get(key))\r\n      .concat(storagesPromises);\r\n\r\n      Promise.all(promises).then((arr) => {\r\n        /* const self = this;\r\n        const skipHandleKeys = new Set(['isProxy', 'filters', 'drafts']);\r\n        const getHandler = (path?: string) => {\r\n          return {\r\n            get(target: any, key: any) {\r\n              if(key === 'isProxy') {\r\n                return true;\r\n              }\r\n\r\n              const prop = target[key];\r\n\r\n              if(prop !== undefined && !skipHandleKeys.has(key) && !prop.isProxy && typeof(prop) === 'object') {\r\n                target[key] = new Proxy(prop, getHandler(path || key));\r\n                return target[key];\r\n              }\r\n              \r\n              return prop;\r\n            },\r\n            set(target: any, key: any, value: any) {\r\n              console.log('Setting', target, `.${key} to equal`, value, path);\r\n          \r\n              target[key] = value;\r\n\r\n              // @ts-ignore\r\n              self.pushToState(path || key, path ? self.state[path] : value, false);\r\n\r\n              return true;\r\n            }\r\n          };\r\n        }; */\r\n\r\n        let state: State = this.state = {} as any;\r\n\r\n        // ! then can't store false values\r\n        for(let i = 0, length = ALL_KEYS.length; i < length; ++i) {\r\n          const key = ALL_KEYS[i];\r\n          const value = arr[i];\r\n          if(value !== undefined) {\r\n            // @ts-ignore\r\n            state[key] = value;\r\n          } else {\r\n            this.pushToState(key, copy(STATE_INIT[key]));\r\n          }\r\n        }\r\n\r\n        arr.splice(0, ALL_KEYS.length);\r\n\r\n        // * Read auth\r\n        const auth: UserAuth = arr.shift() as any;\r\n        if(auth) {\r\n          // ! Warning ! DON'T delete this\r\n          state.authState = {_: 'authStateSignedIn'};\r\n          rootScope.broadcast('user_auth', typeof(auth) !== 'number' ? (auth as any).id : auth); // * support old version\r\n        }\r\n\r\n        // * Read storages\r\n        for(let i = 0, length = storagesKeys.length; i < length; ++i) {\r\n          this.storagesResults[storagesKeys[i]] = arr[i];\r\n        }\r\n\r\n        arr.splice(0, storagesKeys.length);\r\n\r\n        const time = Date.now();\r\n        if((state.stateCreatedTime + REFRESH_EVERY) < time) {\r\n          if(DEBUG) {\r\n            this.log('will refresh state', state.stateCreatedTime, time);\r\n          }\r\n          \r\n          REFRESH_KEYS.forEach(key => {\r\n            this.pushToState(key, copy(STATE_INIT[key]));\r\n\r\n            // @ts-ignore\r\n            const s = this.storagesResults[key];\r\n            if(s && s.length) {\r\n              s.length = 0;\r\n            }\r\n          });\r\n        }\r\n        \r\n        //state = this.state = new Proxy(state, getHandler());\r\n\r\n        // * support old version\r\n        if(!state.settings.hasOwnProperty('themes') && state.settings.background) {\r\n          const theme = STATE_INIT.settings.themes.find(t => t.name === STATE_INIT.settings.theme);\r\n          if(theme) {\r\n            state.settings.themes.find(t => t.name === theme.name).background = copy(state.settings.background);\r\n            this.pushToState('settings', state.settings);\r\n          }\r\n        }\r\n\r\n        // * support old version\r\n        if(!state.settings.hasOwnProperty('theme') && state.settings.hasOwnProperty('nightTheme')) {\r\n          state.settings.theme = state.settings.nightTheme ? 'night' : 'day';\r\n          this.pushToState('settings', state.settings);\r\n        }\r\n\r\n        validateInitObject(STATE_INIT, state, (missingKey) => {\r\n          // @ts-ignore\r\n          this.pushToState(missingKey, state[missingKey]);\r\n        });\r\n\r\n        if(state.version !== STATE_VERSION) {\r\n          this.pushToState('version', STATE_VERSION);\r\n        }\r\n\r\n        // ! probably there is better place for it\r\n        rootScope.settings = state.settings;\r\n\r\n        if(DEBUG) {\r\n          this.log('state res', state, copy(state));\r\n        }\r\n        \r\n        //return resolve();\r\n\r\n        console.timeEnd('load state');\r\n        resolve(state);\r\n      }).catch(resolve);\r\n    });\r\n\r\n    return this.loaded;\r\n  }\r\n\r\n  public getState() {\r\n    return this.state === undefined ? this.loadSavedState() : Promise.resolve(this.state);\r\n  }\r\n\r\n  public setByKey(key: string, value: any) {\r\n    setDeepProperty(this.state, key, value);\r\n    rootScope.broadcast('settings_updated', {key, value});\r\n\r\n    const first = key.split('.')[0];\r\n    // @ts-ignore\r\n    this.pushToState(first, this.state[first]);\r\n  }\r\n\r\n  public pushToState<T extends keyof State>(key: T, value: State[T], direct = true) {\r\n    if(direct) {\r\n      this.state[key] = value;\r\n    }\r\n\r\n    sessionStorage.set({\r\n      [key]: value\r\n    });\r\n  }\r\n\r\n  public requestPeer(peerId: number, type: string, limit?: number) {\r\n    let set = this.neededPeers.get(peerId);\r\n    if(set && set.has(type)) {\r\n      return;\r\n    }\r\n\r\n    if(!set) {\r\n      set = new Set();\r\n      this.neededPeers.set(peerId, set);\r\n    }\r\n\r\n    set.add(type);\r\n    this.dispatchEvent('peerNeeded', peerId);\r\n\r\n    if(limit !== undefined) {\r\n      this.keepPeerSingle(peerId, type);\r\n    }\r\n  }\r\n\r\n  public isPeerNeeded(peerId: number) {\r\n    return this.neededPeers.has(peerId);\r\n  }\r\n\r\n  public keepPeerSingle(peerId: number, type: string) {\r\n    const existsPeerId = this.singlePeerMap.get(type);\r\n    if(existsPeerId && existsPeerId !== peerId) {\r\n      const set = this.neededPeers.get(existsPeerId);\r\n      set.delete(type);\r\n\r\n      if(!set.size) {\r\n        this.neededPeers.delete(existsPeerId);\r\n        this.dispatchEvent('peerUnneeded', existsPeerId);\r\n      }\r\n    }\r\n\r\n    this.singlePeerMap.set(type, peerId);\r\n  }\r\n\r\n  /* public resetState() {\r\n    for(let i in this.state) {\r\n      // @ts-ignore\r\n      this.state[i] = false;\r\n    }\r\n    sessionStorage.set(this.state).then(() => {\r\n      location.reload();\r\n    });\r\n  } */\r\n}\r\n\r\n//console.trace('appStateManager include');\r\n\r\nconst appStateManager = new AppStateManager();\r\nMOUNT_CLASS_TO.appStateManager = appStateManager;\r\nexport default appStateManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\n\r\nexport enum LogTypes {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Log = 4,\r\n  Debug = 8\r\n};\r\n\r\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\r\n\r\nconst _logTimer = Date.now();\r\nfunction dT() {\r\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\r\n}\r\n\r\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error) {\r\n  if(!DEBUG/*  || true */) {\r\n    type = LogTypes.Error;\r\n  }\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  function Log(...args: any[]) {\r\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\r\n  }\r\n  \r\n  Log.warn = function(...args: any[]) {\r\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.info = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.error = function(...args: any[]) {\r\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.trace = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\r\n  };\r\n\r\n  /* Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\r\n  }; */\r\n\r\n  Log.debug = function(...args: any[]) {\r\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\r\n  };\r\n\r\n  Log.setPrefix = function(_prefix: string) {\r\n    prefix = '[' + _prefix + ']:';\r\n  };\r\n\r\n  Log.setPrefix(prefix);\r\n\r\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\r\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\r\n  };\r\n  \r\n  return Log;\r\n};\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatSavedPosition } from './appManagers/appImManager';\r\nimport type { State } from './appManagers/appStateManager';\r\nimport type { AppDraftsManager } from './appManagers/appDraftsManager';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport { LangPackDifference } from '../layer';\r\nimport AppStorage from './storage';\r\n\r\nconst sessionStorage = new AppStorage<{\r\n  dc: number,\r\n  user_auth: number,\r\n  dc1_auth_key: any,\r\n  dc2_auth_key: any,\r\n  dc3_auth_key: any,\r\n  dc4_auth_key: any,\r\n  dc5_auth_key: any,\r\n  max_seen_msg: number,\r\n  server_time_offset: number,\r\n\r\n  chatPositions: {\r\n    [peerId_threadId: string]: ChatSavedPosition\r\n  },\r\n  langPack: LangPackDifference,\r\n  drafts: AppDraftsManager['drafts']\r\n} & State>({\r\n  storeName: 'session'\r\n});\r\nMOUNT_CLASS_TO.appStorage = sessionStorage;\r\nexport default sessionStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport const readBlobAsText = (blob: Blob) => {\r\n  return new Promise<string>(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', (e) => {\r\n      // @ts-ignore\r\n      resolve(e.srcElement.result);\r\n    });\r\n    reader.readAsText(blob);\r\n  });\r\n};\r\n\r\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\r\n  let blob;\r\n  const safeMimeType = blobSafeMimeType(mimeType);\r\n  try {\r\n    blob = new Blob(blobParts, {type: safeMimeType});\r\n  } catch(e) {\r\n    // @ts-ignore\r\n    let bb = new BlobBuilder;\r\n    blobParts.forEach((blobPart: any) => {\r\n      bb.append(blobPart);\r\n    });\r\n    blob = bb.getBlob(safeMimeType);\r\n  }\r\n  return blob;\r\n}\r\n\r\nexport function blobSafeMimeType(mimeType: string) {\r\n  if([\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/bmp',\r\n    'video/mp4',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'audio/ogg',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'application/json'\r\n  ].indexOf(mimeType) === -1) {\r\n    return 'application/octet-stream';\r\n  }\r\n\r\n  return mimeType;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { IDBStore } from \"../lib/idb\";\r\nimport Modes from \"./modes\";\r\n\r\nexport type DatabaseStoreName = 'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs';\r\nexport type DatabaseStore = Omit<IDBStore, 'name'> & {name: DatabaseStoreName};\r\nconst Database = {\r\n  name: 'tweb' + (Modes.test ? '_test' : ''),\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }] as DatabaseStore[],\r\n};\r\n\r\nexport default Database;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Database from '../config/database';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport { safeAssign } from '../helpers/object';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage {\r\n  //private static STORAGES: IDBStorage[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string = Database.name;\r\n  private version: number = Database.version;\r\n  private stores: IDBStore[] = Database.stores;\r\n\r\n  private storeName: string;\r\n\r\n  constructor(options: IDBOptions) {\r\n    safeAssign(this, options);\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    //IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        throw new Error();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', error.message)\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public deleteAll() {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'deleteAll' : '');\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        const transaction = db.transaction([this.storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(this.storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { DatabaseStore, DatabaseStoreName } from \"../config/database\";\r\nimport { CancellablePromise, deferredPromise } from \"../helpers/cancellablePromise\";\r\nimport { throttle } from \"../helpers/schedulers\";\r\nimport IDBStorage, { IDBOptions } from \"./idb\";\r\n\r\nexport default class AppStorage<Storage extends Record<string, any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\r\n  private static STORAGES: AppStorage<any>[] = [];\r\n  private storage: IDBStorage;//new CacheStorageController('session');\r\n\r\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage = true;\r\n\r\n  private getPromises: Map<keyof Storage, CancellablePromise<Storage[keyof Storage]>> = new Map();\r\n  private getThrottled: () => void;\r\n\r\n  private keysToSet: Set<keyof Storage> = new Set();\r\n  private saveThrottled: () => void;\r\n  private saveDeferred = deferredPromise<void>();\r\n\r\n  constructor(storageOptions: Omit<IDBOptions, 'storeName' | 'stores'> & {stores?: DatabaseStore[], storeName: DatabaseStoreName}) {\r\n    this.storage = new IDBStorage(storageOptions);\r\n\r\n    AppStorage.STORAGES.push(this);\r\n\r\n    this.saveThrottled = throttle(async() => {\r\n      const deferred = this.saveDeferred;\r\n      this.saveDeferred = deferredPromise<void>();\r\n\r\n      if(this.keysToSet.size) {\r\n        const keys = Array.from(this.keysToSet.values()) as string[];\r\n        this.keysToSet.clear();\r\n\r\n        try {\r\n          //console.log('setItem: will set', key/* , value */);\r\n          //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\r\n          //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\r\n          await this.storage.save(keys, keys.map(key => this.cache[key]));\r\n          //console.log('setItem: have set', key/* , value */);\r\n        } catch(e) {\r\n          //this.useCS = false;\r\n          console.error('[AS]: set error:', e, keys/* , value */);\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n    }, 16, false);\r\n\r\n    this.getThrottled = throttle(async() => {\r\n      const keys = Array.from(this.getPromises.keys());\r\n\r\n      this.storage.get(keys as string[]).then(values => {\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            // @ts-ignore\r\n            deferred.resolve(this.cache[key] = values[i]);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      }, (error) => {\r\n        if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(error)) {\r\n          this.useStorage = false;\r\n          console.error('[AS]: get error:', error, keys);\r\n        }\r\n\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            deferred.reject(error);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      });\r\n    }, 16, false);\r\n  }\r\n\r\n  public getCache() {\r\n    return this.cache;\r\n  }\r\n\r\n  public getFromCache(key: keyof Storage) {\r\n    return this.cache[key];\r\n  }\r\n\r\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async get(key: keyof Storage): Promise<Storage[typeof key]> {\r\n    if(this.cache.hasOwnProperty(key)) {\r\n      return this.getFromCache(key);\r\n    } else if(this.useStorage) {\r\n      const r = this.getPromises.get(key);\r\n      if(r) return r;\r\n\r\n      const p = deferredPromise<Storage[typeof key]>();\r\n      this.getPromises.set(key, p);\r\n\r\n      this.getThrottled();\r\n\r\n      return p;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public getAll() {\r\n    return this.storage.getAll();\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal = false) {\r\n    //console.log('storageSetValue', obj, callback, arguments);\r\n\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.setToCache(key, value);\r\n\r\n        // let perf = /* DEBUG */false ? performance.now() : 0;\r\n        // value = JSON.stringify(value);\r\n\r\n        // if(perf) {\r\n        //   let elapsedTime = performance.now() - perf;\r\n        //   if(elapsedTime > 10) {\r\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\r\n        //   }\r\n        // }\r\n        \r\n        /* perf = performance.now();\r\n        value = stringify(value);\r\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\r\n\r\n        if(this.useStorage && !onlyLocal) {\r\n          this.keysToSet.add(key);\r\n          this.saveThrottled();\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.saveDeferred;\r\n  }\r\n\r\n  public async delete(key: keyof Storage, saveLocal = false) {\r\n    /* if(!this.cache.hasOwnProperty(key)) {\r\n      return;\r\n    } */\r\n\r\n    // ! it is needed here\r\n    key = '' + key;\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    if(this.useStorage) {\r\n      this.keysToSet.delete(key);\r\n      \r\n      try {\r\n        await this.storage.delete(key as string);\r\n      } catch(e) {\r\n        this.useStorage = false;\r\n        console.error('[AS]: remove error:', e);\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    return this.storage.deleteAll();\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        storage.keysToSet.clear();\r\n        storage.getPromises.forEach((deferred) => deferred.resolve());\r\n        storage.getPromises.clear();\r\n        return storage.clear();\r\n      } else {\r\n        return storage.set(storage.cache);\r\n      }\r\n    }));\r\n  }\r\n}\r\n"],"sourceRoot":""}