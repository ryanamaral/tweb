{"version":3,"sources":["webpack:///./src/lib/searchIndexManager.ts","webpack:///./src/components/middleEllipsis.ts","webpack:///./src/vendor/leemon.ts","webpack:///./src/lib/appManagers/appDraftsManager.ts","webpack:///./src/lib/mtproto/bin_utils.ts","webpack:///./src/vendor/fastBlur.js","webpack:///./src/helpers/heavyQueue.ts","webpack:///./src/helpers/blur.ts","webpack:///./src/lib/opusDecodeController.ts","webpack:///./src/lib/appManagers/appWebPagesManager.ts","webpack:///./src/helpers/dom/htmlToDocumentFragment.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/storages/dialogs.ts","webpack:///./src/lib/storages/filters.ts","webpack:///./src/lib/appManagers/appMessagesManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/lib/appManagers/appDownloadManager.ts","webpack:///./src/lib/appManagers/appPhotosManager.ts","webpack:///./src/lib/appManagers/appProfileManager.ts","webpack:///./src/lib/appManagers/appDocsManager.ts","webpack:///./src/components/peerTitle.ts","webpack:///./src/helpers/array.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/helpers/dom/renderImageFromUrl.ts","webpack:///./src/components/visibilityIntersector.ts","webpack:///./src/components/lazyLoadQueue.ts","webpack:///./src/lib/appManagers/appNotificationsManager.ts","webpack:///./src/components/preloader.ts","webpack:///./src/components/singleTransition.ts","webpack:///./src/helpers/files.ts","webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/lib/mtproto/mtproto_config.ts","webpack:///./src/lib/mtproto/referenceDatabase.ts","webpack:///./src/helpers/slicedArray.ts","webpack:///./src/helpers/fileName.ts","webpack:///./src/lib/appManagers/appPollsManager.ts"],"names":["SearchIndexManager","fullTexts","text","latinize","hasTag","charAt","replace","ch","latinizeCh","LatinizeMap","undefined","toLowerCase","username","id","searchText","searchIndex","trim","this","cleanSearchText","query","newFoundObjs","queryWords","split","peerId","fullText","found","word","idx","indexOf","badCharsRe","trimRe","map","Map","testQueue","Set","fontFamily","timeoutId","setTestQueue","cancelAnimationFrame","window","requestAnimationFrame","testQueueElements","forEach","testElement","clear","addEventListener","key","add","capture","passive","element","mapped","get","firstTime","textLength","from","multiplier","font","textWidth","elementWidth","textContent","length","dataset","fontWeight","getTextWidth","getBoundingClientRect","width","set","newElementWidth","widthChanged","setAttribute","smallerText","smallerWidth","smallerTextLength","half","Math","max","half1","substr","half2","removeAttribute","context","canvas","document","createElement","getContext","measureText","MiddleEllipsisElement","HTMLElement","super","delete","customElements","define","bpe","mask","int2bigInt","Array","t","bits","minSize","k","ceil","buff","copyInt_","x","n","i","c","len","appDraftsManager","drafts","getAllDraftPromise","sessionStorage","then","rootScope","addMultipleEventsListeners","updateDraftMessage","update","peerID","appPeersManager","getPeerId","peer","saveDraft","threadId","draft","notify","getKey","getAllDrafts","appMessagesManager","getDialogOnly","reloadConversation","Promise","resolve","invokeApi","updates","apiUpdatesManager","updatesState","syncLoading","processUpdateMessage","apiDraft","options","processApiDraft","broadcast","draft1","draft2","object","isObject","_","reply_to_msg_id","entities","message","pFlags","no_webpage","myEntities","parseEntities","apiEntities","totalEntities","mergeEntities","slice","rMessage","wrapDraftText","generateMessageId","localDraft","saveOnServer","serverDraft","getDraft","draftsAreEqual","draftObj","params","getInputPeerById","isEmptyDraft","getServerMessageId","saveLocalDraft","date","serverTimeManager","serverTimeOffset","mul_table","shg_table","heavyQueue","processingQueue","addHeavyTask","queue","method","items","promise","processHeavyQueue","todo","results","reject","f","start","performance","now","possiblePromise","process","apply","shift","realResult","err","push","timedChunk","finally","DEBUG","processBlur","dataUri","radius","iterations","img","Image","perf","console","log","onload","height","ctx","drawImage","top_x","top_y","Number","isNaN","imageData","getImageData","pixels","data","rsum","gsum","bsum","y","p","p1","p2","yp","yi","yw","wm","hm","rad1","r","g","b","mul_sum","shg_sum","vmin","vmax","putImageData","toDataURL","src","blurPromises","error","size","has","opusDecodeController","sampleRate","tasks","keepAlive","Error","isPlaySupportedResult","audio","canPlayType","wavWorker","Worker","e","page","bytes","onTaskEnd","worker","type","postMessage","command","waveform","buffers","typedArray","buffer","loadWorker","loadWavWorker","terminateWorkers","task","result","clearTimeout","timeout","callback","executeNewTask","kill","terminate","decoderSampleRate","outputBufferSampleRate","wavBitDepth","wavSampleRate","pages","withWaveform","setTimeout","pushDecodeTask","dataBlob","Blob","url","URL","createObjectURL","webpages","pendingWebPages","updateWebPage","saveWebPage","webpage","apiWebPage","mid","mediaContext","photo","savePhoto","saveDoc","siteName","site_name","shortTitle","title","author","rTitle","wrapRichText","noLinks","noLinebreaks","contextHashtag","matches","match","shortDescriptionText","description","rDescription","contextSite","msgs","msgId","webPage","Object","keys","htmlToDocumentFragment","html","template","innerHTML","content","appUsersManager","storage","storages","users","usernames","contactsIndex","createIndex","contactsList","updatedContactsList","updateUsersStatuses","timestampNow","user","status","expires","was_online","setUserToStateIfNeeded","setInterval","on","updateUserStatus","userId","user_id","updateUserPhoto","forceUserOnline","warn","updateUserName","saveApiUser","assign","first_name","last_name","getSelf","indexObject","getUserSearchText","getState","state","storagesResults","isArray","pushContact","contactsFillPromise","getFromCache","getUser","pushToState","saveApiUsers","contacts","contact","onContactsModified","resolvedPeer","saveApiChats","chats","getPeer","requestPeer","phone","self","format","filter","Boolean","join","includeSaved","fillContacts","_contactsList","search","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","testSelfSearch","findAndSplice","myId","unshift","block","value","peer_id","getOutputPeer","blocked","index","apiUsers","override","oldUser","min","fullName","searchUsername","cleanUsername","deleted","initials","getAbbreviation","changedTitle","isPeerNeeded","formatted","access_hash","args","isBot","support","Date","d","getDate","getMonth","getHours","getMinutes","bot","isRegularUser","isContact","allowMin","eventTimestamp","timestamp","getTopPeersPromise","topPeers","correspondents","offset","limit","hash","peerIds","categories","peers","topPeer","contactsBlocked","count","u","concat","q","my_results","offline","showPhone","getUserInput","add_phone_privacy_exception","onContactUpdated","userIds","appChatsManager","appNotificationsManager","appStateManager","dialogs","byFolders","dialogsIndex","searchIndexManager","cachedResults","folderId","onUpdateFolderPeers","folder_peers","folderPeer","folder_id","dialog","dropDialog","pinned","pinnedOrders","generateIndexForDialog","pushDialog","scheduleHandleNewDialogs","onUpdateDialogPinned","onUpdatePinnedDialogs","handleOrder","order","reverse","newPinned","getFolder","dialogsResult","applyDialogs","reset","peerText","getPeerSearchText","updateFolderPeers","updateDialogPinned","updatePinnedDialogs","top_message","topMessage","saveMessages","saveDialog","getMessageByPeer","allDialogsLoaded","loaded","dialogsOffsetDate","0","1","dialogsNum","filtersStorage","filters","testDialogForFilter","pinnedIndex","pinned_peers","generateDialogIndex","generateDialogPinnedDateByIndex","a","folders","folder","findIndex","justReturn","channelId","isChannel","topDate","generateDialogPinnedDate","channel","getChat","foundIndex","read_inbox_max_id","read_outbox_max_id","unread_count","unread_mentions_count","notify_settings","historyStorage","getHistoryStorage","history","incomingMessage","is_outgoing","fromId","pts","newPts","channelStates","offsetDate","pos","splice","setDialogToState","foundDialog","getDialog","keepPeerSingle","messages","updatedDialogs","topPendingMessage","pendingTopMsgs","maxId","dropped","newUpdatesAfterReloadToHandle","saveUpdate","chat","left","kicked","generateTempMessageId","from_id","out","isOutgoing","migrated_to","deactivated","migratedToPeer","migratedFromTo","migratedToFrom","wasDialogBefore","hasOwnProperty","unread","isEnd","Bottom","insertSlice","setEnd","readMaxId","readOutboxMaxId","savePeerSettings","addChannelState","offsetIndex","realFolderId","curDialogStorage","d1","d2","loadedAll","isDialogsLoaded","getTopMessages","messagesDialogs","orderIndex","onUpdateDialogFilter","saveDialogFilter","onUpdateDialogFilterOrder","filterId","setOrderIndex","updateDialogFilter","updateDialogFilters","oldFilters","getDialogFilters","_filterId","find","updateDialogFilterOrder","exclude_peers","include_peers","exclude_archived","exclude_read","exclude_muted","isPeerLocalMuted","broadcasts","isBroadcast","groups","isAnyGroup","bots","non_contacts","remove","flags","getOutputDialogFilter","bool","includes","overwrite","messagesStorageByPeerId","groupedMessagesStorage","scheduledMessagesStorage","historiesStorage","threadsStorage","searchesStorage","pinnedMessages","threadsServiceMessagesIdsStorage","threadsToReplies","pendingByRandomId","pendingByMessageId","pendingAfterMsgs","sendFilePromise","tempNum","tempFinalizeCallbacks","sendSmthLazyLoadQueue","needSingleMessages","fetchSingleMessagesPromise","maxSeenId","newMessagesHandleTimeout","newMessagesToHandle","newDialogsToHandle","notificationsHandlePromise","notificationsToHandle","reloadConversationsPeers","logger","Debug","Log","Warn","groupedTempId","typings","handleNewMessages","handleNewDialogs","newMaxSeenId","obj","dialogsStorage","incrementMaxSeenId","handleNotifications","_peerId","idle","isIDLE","notifyPeerToHandle","all","getNotifyPeerTypeSettings","getNotifySettings","getInputNotifyPeerById","peerTypeNotifySettings","notifyAboutMessage","fwdCount","onUpdateMessageId","randomId","random_id","pendingData","tempId","getMessageFromStorage","finalizePendingMessageCallbacks","onUpdateNewMessage","getMessagePeer","getMessagesStorage","isLocalThreadUpdate","threadKey","getThreadKey","good","isInChat","pendingMessage","checkPendingMessage","updateMessageRepliesIfNeeded","findSlice","firstSlice","first","mergeReplyKeyboard","handleNewMessage","inboxUnread","setDialogTopMessage","notifyPeer","fwd_from","onUpdateDialogUnreadMark","unread_mark","onUpdateEditMessage","oldMessage","newMessage","handleEditedMessage","isTopMessage","clear_history","grouped_id","onUpdateReadHistory","channel_id","max_id","read_max_id","top_msg_id","isOut","stillUnreadCount","still_unread_count","newUnreadCount","foundAffected","repliesKey","updateMessage","messageId","replyTo","reply_to","reply_to_top_id","cancel","getReadMaxIdIfUnread","threadKeyPart","onUpdateReadMessagesContents","mids","getMessageById","media_unread","setDialogToStateIfMessageIsTop","onUpdateChannelAvailableMessages","available_min_id","onUpdateDeleteMessages","clearCache","threadKeys","historyUpdated","handleDeletedMessages","threadsStorages","splitted","onUpdateChannel","needDialog","onUpdateChannelReload","onUpdateChannelMessageViews","views","onUpdateServiceNotification","inbox_date","media","hasUser","verified","onUpdatePinnedMessages","missingMessages","wrapSingleMessage","werePinned","hiddenPinnedMessages","onUpdateNotifySettings","onUpdateNewScheduledMessage","isScheduled","onUpdateDeleteScheduledMessages","updateMessageID","updateNewDiscussionMessage","updateNewMessage","updateNewChannelMessage","updateDialogUnreadMark","updateEditMessage","updateEditChannelMessage","updateReadChannelDiscussionInbox","updateReadChannelDiscussionOutbox","updateReadHistoryInbox","updateReadHistoryOutbox","updateReadChannelInbox","updateReadChannelOutbox","updateChannelReadMessagesContents","updateReadMessagesContents","updateChannelAvailableMessages","updateDeleteMessages","updateDeleteChannelMessages","updateChannel","updateChannelReload","updateChannelMessageViews","updateServiceNotification","updatePinnedMessages","updatePinnedChannelMessages","updateNotifySettings","updateNewScheduledMessage","updateDeleteScheduledMessages","settings","getConversationsAll","filterFunc","eventData","appWebPagesManager","getWebPage","maxSeenMsgId","sendEntites","entity","callbackName","finalize","deferred","invokeAfterMessageIsSent","editMessage","parseMarkdown","schedule_date","scheduleDate","is_scheduled","newMedia","getInputEntities","noWebPage","handled","replyToMsgId","sendText","getPeerMigratedTo","viaBotId","generateOutgoingMessage","toggleError","send","sentRequestOptions","apiPromise","afterMessageId","invokeApiAfter","query_id","queryId","resultId","clear_draft","clearDraft","silent","seq","pts_count","local","beforeMessageSending","file","attachType","apiFileName","fileType","mime_type","fileName","File","name","isDocument","caption","attributes","isPhoto","actionName","isVoiceMessage","attribute","voice","duration","isMedia","photoSize","w","h","location","sizes","cacheContext","appDownloadManager","getCacheContext","downloaded","objectURL","appPhotosManager","videoAttribute","round_message","isRoundMessage","file_name","thumbs","thumb","thumbURL","thumbBlob","thumbCacheContext","appDocsManager","preloader","attachMethod","tryAgainOnFail","isUpload","sentDeferred","attachPromise","catch","uploaded","cancelPendingMessage","setTyping","uploadPromise","file_reference","inputMedia","load","thumbUploadPromise","upload","notifyAll","done","total","blob","inputFile","addNotifyListener","progress","percents","floor","isGroupedItem","background","code","files","sendFile","sendFileDetails","groupId","details","o","syncDraft","inputPeer","invoke","multiMedia","multi_media","promises","messageMedia","getInput","doc","getMediaInput","inputSingleMedia","inputs","poll","appPollsManager","savePoll","total_voters","getPoll","getScheduledMessagesStorage","generateFromId","generateFlags","random","generateReplyHeader","via_bot_id","reply_markup","replies","generateReplies","pending","replyToTopId","header","channelFull","appProfileManager","chatsFull","linked_chat_id","comments","replies_pts","admin_rights","anonymous","post","originalMessage","fwdHeader","from_name","post_author","channel_post","saved_from_msg_id","saved_from_peer","MAX_SAFE_INTEGER","action","outDialogs","getConversations","getDialogs","chatHistoryStorage","getOffsetDate","invokeApiSingle","offset_date","offset_id","offset_peer","noErrorBox","maxSeenIdIncremented","hasPrepend","noIdsDialogs","setDialogsLoaded","fromPeerId","newMessages","generateForwardHeader","group","from_peer","to_peer","with_my_score","withMyScore","createMessageStorage","reloadConversationsPromise","getInputDialogPeerById","justClear","revoke","just_clear","affectedHistory","doFlushHistory","getHistory","historyResult","getChannelInput","getPinnedMessage","getSearch","inputFilter","unpin","oneSide","pm_oneside","unpinAll","unpinAllMessages","foundMessages","m","getMidsByAlbum","verify","temp","MESSAGE_ID_OFFSET","num","MESSAGE_ID_INCREMENT","l","used","increment","reply_to_mid","overwriting","savedFromPeerId","savedFromMid","savedFrom","fwdFromId","ttl_seconds","migrateFrom","migrateTo","suffix","video_sizes","chat_id","reason","migrateChecks","usingMids","plain","highlightWord","parts","addPart","langKey","part","el","append","usingFullAlbum","getMidsByMessage","getAlbumText","emoticon","wrapEmojiText","question","rReply","prefix","game","stickerEmojiRaw","stickerEmoji","actionWrapped","wrapMessageActionTextNew","regExp","RegExp","exec","messageWrapped","noTextFormat","fragment","createDocumentFragment","peerTitle","senderTitle","getPeerTitle","wrapPlainText","langPackKey","getNameDivHTML","langPack","htmlToSpan","anchorHTML","domain","node","toggleDialogPin","getDialogPeer","read","hasChat","fromChat","kind","goodMedias","sticker","canMessageBeEdited","hasRights","messageReplyMarkup","lastReplyMarkup","selective","maxOutId","single_use","hidden","canCache","invokeApiCacheable","bind","func","nextRate","backLimit","minDate","maxDate","foundMsgs","filtering","neededContents","neededDocTypes","excludeDocTypes","goodEntities","matchUrl","next_rate","offset_id_offset","min_date","max_date","add_offset","min_id","offsetPeerId","offsetId","offsetMessage","offset_rate","searchResult","foundCount","getDiscussionMessage","maxMessageId","serviceStartMessage","is_single","msg_id","filterMessages","generateThreadServiceStartMessage","newDialogsHandlePromise","localMessageIds","creator","editor","megagroup","goodMsgIds","affectedMessages","force","triedToReadMaxId","readPromise","soundReset","getPeerString","readHistory","msgIds","threadMessage","broadcastEventName","finalizePendingMessage","mute","mute_until","canSendToUser","finalMessage","callbacks","getPhoto","newPhoto","oldCacheContext","downloadOptions","getPhotoDownloadOptions","fakeDownload","getDoc","newDoc","getInputFileName","polls","tempMessage","notification","peerString","notificationMessage","show_previews","wrapMessageForReply","onclick","tag","peerPhoto","getPeerPhoto","loadAvatar","loadPromise","image","canWriteToPeer","isFetchIntervalNeeded","unsetEnd","haveSlice","sliceMe","fulfilled","Both","fillHistoryStorage","constructSlice","offsetIdOffset","requestHistory","topWasMeantToLoad","isTopEnd","isBottomEnd","Top","oldestMessage","foundSlice","_historyResult","getMessagesResult","fetchSingleMessages","typing","smth","referenceDatabase","deleteContext","deleteWebPageFromPending","groupedStorage","albums","peerMessagesToHandle","deletedMids","DialogColorsFg","DialogColors","DialogColorsMap","updatePeerBlocked","getUserPhoto","getChatPhoto","plainText","onlyFirstName","chatId","getUserString","getChatString","isUser","peerParams","isMegagroup","ignorePeerId","getChannelInputPeer","getChatInputPeer","pic","getDialogType","megagroupOnlines","typingsInPeer","onUpdateUserTyping","cancelAction","getChatFull","onChatUpdated","invalidateChannelParticipants","updateChannelParticipant","updateChatDefaultBannedRights","default_banned_rights","updateUserTyping","updateChatUserTyping","updateChannelUserTyping","apiChats","saveApiChat","oldChat","participants_count","changedPhoto","photo_id","rights","defaultRights","isThread","banned_rights","myFlags","post_messages","delete_messages","until_date","chatFull","participants","about","input","usersInputs","cached","onlines","res","_participants","reduce","acc","participant","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","inputChatPhoto","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","kicked_by","editBanned","view_messages","cacheStorage","downloads","progressCallbacks","uploadId","thumbsCache","download","cancelDownload","clearDownload","getNewDeferred","fetch","response","onError","refreshReference","tryDownload","onlyCache","getFile","downloadFile","mimeType","ext","uploadFile","onRemove","href","target","style","position","top","body","clickEvent","createEvent","initMouseEvent","dispatchEvent","click","open","discFileName","createDownloadAnchor","revokeObjectURL","thumbSize","cache","AppPhotosManager","photos","windowW","windowH","visualViewport","innerWidth","innerHeight","oldPhoto","saveContext","boxWidth","boxHeight","useBytes","devicePixelRatio","bestPhotoSize","inputUser","cacheSeconds","photosResult","photoIds","isSticker","arr","Uint8Array","jpegHeader","jpegTail","path","getPreviewURLFromBytes","useBlur","getPreviewURLFromThumb","classList","noZoom","choosePhotoSize","boxSize","aspect","isFit","aspectCovered","ignoreCache","getImageFromStrippedThumb","queueId","thumb_size","dcId","dc_id","photoId","fullWidth","fullHeight","getDownload","fullPhotoSize","downloadToDisc","AppProfileManager","botInfos","usersFull","fullPromises","savedAvatarURLs","updateChatParticipants","updateChatParticipantAdd","inviter_id","version","updateChatParticipantDelete","fullChat","emptyPhoto","chat_photo","botInfo","botId","commands","botCommand","shareText","share_text","userFull","profile_photo","rAbout","bot_info","saveBotInfo","getProfile","getProfileByPeerId","profile","getChannelFull","full_chat","exported_invite","link","exportedInvite","channelParticipant","fullChannel","updateResult","previous","getAvatarPromise","saved","peerPhotoFileLocation","big","div","color","animate","animationsEnabled","childElementCount","mutateElement","isDialog","avatarAvailable","avatarRendered","firstElementChild","contains","innerText","getPeerColorById","abbr","putAvatar","docs","savingLottiePreview","onServiceWorkerFail","supportsStreaming","oldDoc","audioTitle","audioPerformer","performer","alt","stickerset","stickerSetInput","isWebpSupported","animated","monthAsNumber","leadingZero","isServiceWorkerOnline","getFileURL","docId","inputFileLocation","getFileDownloadOptions","preloadPhoto","tryNotToUseBytes","getThumbURL","originalPromise","isPlaySupported","reader","FileReader","onloadend","uint8","decode","readAsArrayBuffer","toneIndex","stickerCachedThumbs","toBlob","downloadDoc","weakMap","WeakMap","peerTitleWeakMap","querySelectorAll","PeerTitle","accumulate","initialValue","findAndSpliceAll","array","forEachReverse","insertInDescendSortedArray","property","sortProperty","pendingPtsUpdates","pendingSeqUpdates","syncPending","attached","debug","processOpts","seqStart","seq_start","forceGetDifference","processUpdate","toId","Proxy","saveUpdatesState","us","nextSeq","pendingUpdatesData","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","curState","getChannelState","curPts","goodPts","goodIndex","getDifference","wasSyncing","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","lastPtsUpdateTime","toPeerId","popPts","popSeq","popPendingPtsUpdate","_state","stateResult","setUpdatesProcessor","setProxy","loadedURLs","elem","HTMLImageElement","HTMLVideoElement","SVGImageElement","setAttributeNS","backgroundImage","renderImageFromUrl","useCache","isImage","loader","VisibilityIntersector","onVisibilityChange","locked","observer","IntersectionObserver","entries","changed","entry","isIntersecting","visible","getVisible","disconnect","targets","observe","unobserve","unlock","refresh","parallelLimit","inProcess","lockPromise","unlockResolve","processQueue","_processQueue","item","loadItem","getItem","processItem","addElement","lock","intersector","unlockAndRefresh","intersectorTimeout","wasSeen","setProcessQueueTimeout","_queue","spliced","notificationsShown","notificationIndex","notificationsCount","soundsPlayed","vibrateSupport","navigator","vibrate","peerSettings","notifyUsers","notifyChats","notifyBroadcasts","faviconEl","head","querySelector","titleBackup","titleChanged","stopped","pushInited","updateLocalSettings","updSettings","nodesktop","volume","novibrate","nopreview","nopush","nosound","notifications","sound","requestPermission","Notification","removeEventListener","mozVibrate","webkitVibrate","notificationsUiSupport","topMessagesDeferred","notifySoundEl","newVal","toggleToggler","enable","resetTitle","setFavicon","clearInterval","titleInterval","beginPath","arc","PI","fillStyle","fill","fontSize","str","textBaseline","textAlign","fillText","getNotifyPeerTypePromise","inputKey","compare_sound","notifyContactsSignUp","prevFavicon","cloneNode","parentNode","replaceChild","peerNotifySettings","ret","isMuted","respectType","notifySettings","inputNotify","typeNotifySettings","getPeerLocalSettings","permission","testSound","icon","close","onclose","show","hide","nextSoundAt","prevSoundVolume","filename","autoplay","once","tokenData","registeredDevice","token_type","tokenType","token","tokenValue","other_uids","app_sandbox","secret","ProgressivePreloader","detached","cancelable","streamable","onClick","loadFunc","bold","constructContainer","construct","downloadSvg","lastElementChild","cancelSvg","previousElementSibling","circle","setProgress","startTime","onEnd","elapsedTime","delay","TRANSITION_TIME","detach","setManual","parentElement","totalLength","getTotalLength","strokeDasharray","className","forwards","onTransitionEnd","afterTimeout","toggle","createPosterFromVideo","video","onseeked","videoWidth","videoHeight","onerror","currentTime","createPosterForVideo","onloadedmetadata","preloadVideo","race","onVideoLoad","readyState","HAVE_METADATA","getFilesFromEvent","onlyTypes","scanFiles","isDirectory","directoryReader","createReader","readEntries","itemFile","getAsFile","DataTransferItem","DragEvent","dataTransfer","clipboardData","originalEvent","webkitGetAsEntry","requestFile","accept","display","span","REPLIES_PEER_ID","contexts","links","addTaskListener","originalPayload","getReferenceByLink","newTask","payload","serviceWorker","controller","reference","getContexts","_context","values","next","SliceEnd","SlicedArray","sliceConstructor","getSliceConstructor","slices","slicedArray","end","None","side","last","deleteCount","flatten","lowerBound","upperBound","lowerIndex","upperIndex","foundSliceIndex","sliced","insertIndex","s","prevSlice","nextSlice","sliceOffset","findSliceOffset","sliceStart","sliceEnd","bottomWasMeantToLoad","abs","topFulfilled","bottomFulfilled","getFileNameByLocation","short_name","thumb_version","volume_id","local_id","encodeURIComponent","JSON","stringify","updateMessagePoll","poll_id","saveResults","rQuestion","chosenIndexes","answer","chosen","pollId","correctAnswers","solution","solutionEntities","correct_answers","solution_entities","optionIds","answers","option","sendVote","votesList","closed","newPoll","getInputMediaPoll"],"mappings":"sFAAA,YAsBA,MAAMA,EAIG,cACL,MAAO,CACLC,UAAW,IAKR,gBAAgBC,EAAcC,GAAW,GAC9C,MAAMC,EAA4B,MAAnBF,EAAKG,OAAO,GAc3B,OAbAH,EAAOA,EAAKI,QAAQN,EAA+B,WAAG,IAAIM,QAAQN,EAA2B,OAAG,IAC7FG,IACDD,EAAOA,EAAKI,QAAQ,gBAAkBC,IACpC,MAAMC,EAAa,IAAOC,YAAYF,GACtC,YAAsBG,IAAfF,EAA2BA,EAAaD,KAInDL,EAAOA,EAAKS,cACTP,IACDF,EAAO,IAAMA,GAGRA,EAGF,cAAcU,GACnB,OAAOA,GAAYA,EAASD,eAAiB,GAGxC,YAAYE,EAAYC,EAAoBC,GASjD,GAJGD,EAAWE,SACZF,EAAaG,KAAKC,gBAAgBJ,KAGhCA,EAEF,cADOC,EAAYd,UAAUY,IACtB,EAGTE,EAAYd,UAAUY,GAAMC,EAiBvB,OAAOK,EAAeJ,GAC3B,MAAMd,EAAYc,EAAYd,UAKxBmB,EAAyC,GACzCC,GAHNF,EAAQF,KAAKC,gBAAgBC,IAGJG,MAAM,KAC/B,IAAI,MAAMC,KAAUtB,EAAW,CAC7B,MAAMuB,EAAWvB,EAAUsB,GAE3B,IAAIE,GAAQ,EACZ,IAAI,MAAMC,KAAQL,EAAY,CAC5B,MAAMM,EAAMH,EAASI,QAAQF,GAC7B,IAAY,IAATC,GAAuB,IAARA,GAAmC,MAAtBH,EAASG,EAAM,GAAa,CACzDF,GAAQ,EACR,OAIDA,IACDL,EAAaG,IAAU,GAkC3B,OAAOH,GAtHK,EAAAS,WAAa,4CACb,EAAAC,OAAS,YAyHV,QAAI9B,G,iCCjJnB,8CAmBA,MACM+B,EAQD,IAAIC,IAEHC,EAA8B,IAAIC,IAC3BC,EAAa,8HAE1B,IAAIC,EAEJ,MAAMC,EAAe,KACnBC,qBAAqBF,GACrBA,EAAYG,OAAOC,sBAAsBC,IAGrCA,EAAoB,KACxBR,EAAUS,QAAQC,GAClBV,EAAUW,SAGZL,OAAOM,iBAAiB,SAAU,KAChC,IAAI,MAAOC,KAAQf,EACjBE,EAAUc,IAAID,GAGhBT,KACC,CAACW,SAAS,EAAMC,SAAS,IAE5B,MAAMN,EAAeO,IAGnB,IAAIC,EAASpB,EAAIqB,IAAIF,GACrB,MAAMG,GAAaF,EAEnB,IAAI,KAACjD,EAAI,WAAEoD,EAAU,KAAEC,EAAI,WAAEC,EAAU,KAAEC,EAAI,UAAEC,EAAS,aAAEC,GAAgBR,GAAU,GAGjFE,IACDnD,EAAOgD,EAAQU,YACfN,EAAapD,EAAK2D,OAClBN,EAAgE,GAChEC,EAAaD,EAAO,GAAKA,EAAO,IAGhCE,EAAO,GAAGP,EAAQY,QAAQC,YAAc,YAAmB5B,IAK3DuB,EAAYM,EAAa9D,EAAMuD,GAE/BE,EAAeT,EAAQe,wBAAwBC,MAE/Cf,EAAS,CAACjD,OAAMoD,aAAYC,OAAMC,aAAYC,OAAMC,YAAWC,gBAC/D5B,EAAIoC,IAAIjB,EAASC,IAKnB,MAAMiB,EAAkBlB,EAAQe,wBAAwBC,MAClDG,EAAehB,GAAaM,IAAiBS,EAGnD,IAFCf,GAAagB,IAAiBlB,EAAOQ,aAAeA,EAAeS,GAEjEC,EACD,GAAGX,EAAYC,EAAc,CAC3BT,EAAQoB,aAAa,QAASpE,GAC9B,IAAIqE,EAAcrE,EACdsE,EAAeb,EACnB,KAAMY,EAAYV,OAAS,GAAG,CAC5B,IAAIY,EAAoBF,EAAYV,OACpC,MAAMa,EAAOlB,GACX,YAAMA,EAAaiB,GAAqB,EAAG,EAAGA,EAAoB,IAClEE,KAAKC,IAAIH,EAAoBlB,EAAO,EAAG,GACnCsB,EAAQN,EAAYO,OAAO,EAAGJ,GAAMpE,QAAQ,OAAO,IACnDyE,EAAQR,EAAYO,OAAOJ,EAAO,GAAGpE,QAAQ,OAAO,IAG1D,GAFAiE,EAAcM,EAAQE,EACtBP,EAAeR,EAAaO,EAlFnB,IAkF2Cd,GACjDe,EAAeb,EAAc,CAC9BT,EAAQU,YAAciB,EApFf,IAoFkCE,EACzC,OAKJ5B,EAAOQ,aAAeT,EAAQe,wBAAwBC,WAGtDhB,EAAQ8B,gBAAgB,UAO9B,IAAIC,EAMJ,SAASjB,EAAa9D,EAAcuD,GAElC,IAAIwB,EAAS,CACX,MAAMC,EAASC,SAASC,cAAc,UACtCH,EAAUC,EAAOG,WAAW,MAC5BJ,EAAQxB,KAAOA,EAMjB,OAFgBwB,EAAQK,YAAYpF,GAErBgE,MAIV,MAAMqB,UAA8BC,YACzC,cACEC,QAGF,oBAGE1D,EAAIoC,IAAIlD,KAAM,MACdgB,EAAUc,IAAI9B,MACdoB,IAMF,uBACkBN,EAAI2D,OAAOzE,OAK/B0E,eAAeC,OAAO,0BAA2BL,I,4GCrBtCM,G,MAAM,GACbC,EAAO,EAUX,IAAKD,EAAM,EAAG,GAAMA,EAAM,EAAK,GAAKA,EAAKA,KAEzCC,GAAQ,IADRD,IAAQ,IACY,EAEHE,EAAW,EAAG,EAAG,GAChBA,EAAW,EAAG,EAAG,GAIR,IAAIC,MAAM,GAulC9B,SAASD,EAAWE,EAAWC,EAAcC,GAClD,IAAOC,EAEPA,EAAID,GADJC,EAAIzB,KAAK0B,KAAKH,EAAOL,GAAO,GACVM,EAAUC,EAC5B,IAAIE,EAAO,IAAIN,MAAMI,GAErB,OADAG,EAASD,EAAML,GACRK,EAmTF,SAASC,EAASC,EAAaC,GACpC,IAAIC,EAAGC,EACHC,EAAMJ,EAAE3C,OACZ,IAAK8C,EAAIF,EAAGC,EAAI,EAAGA,EAAIE,EAAKF,IAC1BF,EAAEE,GAAKC,EAAIb,EACXa,IAAMd,E,+TC/0CV,MAAMgB,EAAmB,IA5MlB,MAIL,cAHQ,KAAAC,OAAwD,GACxD,KAAAC,mBAAoC,KAG1CC,EAAA,EAAe5D,IAAI,UAAU6D,KAAKH,IAChC7F,KAAK6F,OAASA,GAAU,KAG1BI,EAAA,QAAUC,2BAA2B,CACnCC,mBAAqBC,IACnB,MAAMC,EAASC,EAAA,EAAgBC,UAAUH,EAAOI,MAChDxG,KAAKyG,UAAUJ,EAASD,EAAeM,SAAUN,EAAOO,MAAO,CAACC,QAAQ,OAKtE,OAAOtG,EAAgBoG,GAC7B,OAAYpG,GAAUoG,EAAW,IAAMA,EAAW,IAG7C,SAASpG,EAAgBoG,GAC9B,OAAO1G,KAAK6F,OAAO7F,KAAK6G,OAAOvG,EAAQoG,IAGlC,mBACL,OAAO1G,KAAK8G,eAAed,KAAK,KAC9B,IAAI,MAAMnE,KAAO7B,KAAK6F,OAAQ,CAC5B,IAAyB,IAAtBhE,EAAIlB,QAAQ,KACb,SAGF,MAAML,GAAUuB,EACDkF,EAAA,EAAmBC,cAAc1G,IAE9CyG,EAAA,EAAmBE,mBAAmB3G,MAWvC,eACL,OAAON,KAAK8F,qBAAuB9F,KAAK8F,mBAAqB,IAAIoB,QAASC,IACxE,IAAWC,UAAU,yBAAyBpB,KAAMqB,KACxCC,EAAA,EAAkBC,aAAaC,aAAeN,QAAQC,WAC9DnB,KAAK,KACLsB,EAAA,EAAkBG,qBAAqBJ,KAGzCF,SAKC,UAAU7G,EAAgBoG,EAAkBgB,EAAwBC,EAEtE,IACH,MAAMhB,EAAQ3G,KAAK4H,gBAAgBF,GAE7B7F,EAAM7B,KAAK6G,OAAOvG,EAAQoG,GAoBhC,OAnBGC,EACD3G,KAAK6F,OAAOhE,GAAO8E,SAEZ3G,KAAK6F,OAAOhE,GAGrBkE,EAAA,EAAe7C,IAAI,CACjB2C,OAAQ7F,KAAK6F,SAGZ8B,EAAQf,QAETX,EAAA,QAAU4B,UAAU,gBAAiB,CACnCvH,SACAoG,WACAC,UAIGA,EAGF,eAAemB,EAAsBC,GAC1C,UAAS,UAAmB,EAC1B,OAAO,EAGT,IC1FG,SAAkBC,GACvB,MAA0B,iBAAb,GAAoC,OAAXA,EDyFhCC,CAASH,GACX,OAAO,EAGT,GAAGA,EAAOI,IAAMH,EAAOG,EACrB,OAAO,EAGT,GAAgB,iBAAbJ,EAAOI,GAAwBH,EAAOG,IAAMJ,EAAOI,EAAG,CACvD,GAAGJ,EAAOK,kBAAoBJ,EAAOI,gBACnC,OAAO,EAGT,IAAI,YAAUL,EAAOM,SAAUL,EAAOK,UACpC,OAAO,EAGT,GAAGN,EAAOO,UAAYN,EAAOM,QAC3B,OAAO,EAGT,GAAGP,EAAOQ,OAAOC,aAAeR,EAAOO,OAAOC,WAC5C,OAAO,EAIX,OAAO,EAGF,aAAa5B,GAClB,OAAIA,GAAqB,sBAAZA,EAAMuB,KAIhBvB,EAAMwB,gBAAkB,KAIvBxB,EAAM0B,QAAQzF,OAOb,gBAAgB+D,GACrB,IAAIA,GAAqB,iBAAZA,EAAMuB,EACjB,OAGF,MAAMM,EAAa,IAAkBC,cAAc9B,EAAM0B,SACnDK,EAAc/B,EAAMyB,UAAY,GAChCO,EAAgB,IAAkBC,cAAcF,EAAYG,QAASL,GAQ3E,OANA7B,EAAMmC,SAAW,IAAkBC,cAAcpC,EAAM0B,QAAS,CAACD,SAAUO,IAExEhC,EAAMwB,kBACPxB,EAAMwB,gBAAkBpB,EAAA,EAAmBiC,kBAAkBrC,EAAMwB,kBAG9DxB,EAGI,UAAUrG,EAAgBoG,EAAkBuC,EAA6BC,GAAe,G,yCAEnG,MAAMC,EAAcnJ,KAAKoJ,SAAS9I,EAAQoG,GAC1C,GAAG1G,KAAKqJ,eAAeF,EAAaF,GAElC,OAAO,EAIT,IAKIK,EALAC,EAA4B,CAC9B/C,KAAMF,EAAA,EAAgBkD,iBAAiBlJ,GACvC+H,QAAS,IAIX,GAAGrI,KAAKyJ,aAAaR,GACnBK,EAAW,CAACpB,EAAG,yBACV,CACL,IAAIG,EAAUY,EAAWZ,QACrBD,EAA4Ba,EAAWb,SAExCa,EAAWd,kBACZoB,EAAOpB,gBAAkBpB,EAAA,EAAmB2C,mBAAmBT,EAAWd,mBAGzEC,aAAQ,EAARA,EAAUxF,UACX2G,EAAOnB,SAAWA,GAGjBa,EAAWX,OAAOC,aACnBgB,EAAOhB,WAAaU,EAAWX,OAAOC,YAGxCgB,EAAOlB,QAAUA,EAGnB,MAAMsB,EAAiBL,GAAYL,EAKnC,OAJAU,EAAeC,KAAO,aAAM,GAAQC,EAAA,EAAkBC,iBAEtD9J,KAAKyG,UAAUnG,EAAQoG,EAAUiD,EAAgB,CAAC/C,QAAQ,MAEvDsC,IAAiBxC,IACX,IAAWU,UAAU,qBAAsBmC,QAQxD,IAAe3D,iBAAmBA,EACnB,O,8EEhMf,MAAMmE,EAAY,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,EAAG,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,EAAG,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAE5qkUC3BjhC,MAAMC,EAAgC,GACtC,IAAIC,GAAkB,EAEP,SAASC,EAAgBC,EAAsBC,EAA6B,QACzF,OAAID,EAAME,MAAM1H,QAIhBwH,EAAMG,QAAU,cAChBN,EAAWI,GAAQD,GAMrB,SAASI,IACP,IAAIN,EAAiB,EAWvB,SAAuBE,GACrB,IAAIA,EAAME,MAAM1H,OAEd,OADAwH,EAAMG,QAAQpD,QAAQ,IACfD,QAAQC,QAAQ,IAGzB,MAAMsD,EAAOL,EAAME,MAAMzB,QACnB6B,EAAe,GAErB,OAAO,IAAIxD,QAAa,CAACC,EAASwD,KAChC,MAAMC,EAAI,IAAW,EAAD,gCAClB,MAAMC,EAAQC,YAAYC,MAE1B,EAAG,OACK,cACN,MAAMC,EAAkBZ,EAAMa,QAAQC,MAAMd,EAAMpG,QAASyG,EAAKU,SAChE,IAAIC,EACJ,GAAGJ,aAA2B9D,QAC5B,IACEkE,QAAmBJ,EACnB,MAAMK,GAEN,YADAV,EAAOU,QAITD,EAAaJ,EAGfN,EAAQY,KAAKF,SACPX,EAAK7H,OAAS,GAAMkI,YAAYC,MAAQF,EAAS,GAEtDJ,EAAK7H,OAAS,EACf,YAAQgI,GAGRzD,EAAQuD,MAIZ,YAAQE,KAEP5E,KAAKoE,EAAMG,QAAQpD,QAASiD,EAAMG,QAAQI,SAlD3CY,CADctB,EAAWkB,SACPK,QAAQ,KACxBtB,GAAkB,EACfD,EAAWrH,QACZ4H,OAXNA,GAEOJ,EAAMG,SAPJrD,QAAQC,QAAQ,ICX3B,MAGMsE,EAAQ,MAAU,EAExB,SAASC,EAAYC,EAAiBC,EAAgBC,GACpD,OAAO,IAAI3E,QAAiBC,IAC1B,MAAM2E,EAAM,IAAIC,MAEVC,EAAOlB,YAAYC,MACtBU,GACDQ,QAAQC,IAAI,gBAGdJ,EAAIK,OAAS,KACX,MAAMlI,EAASC,SAASC,cAAc,UACtCF,EAAOhB,MAAQ6I,EAAI7I,MACnBgB,EAAOmI,OAASN,EAAIM,OAEpB,MAAMC,EAAMpI,EAAOG,WAAW,MAG9BiI,EAAIC,UAAUR,EAAK,EAAG,GFab,SAA0B9H,EAASuI,EAAOC,EAAOvJ,EAAOmJ,EAAQR,EAAQC,GACrF,GAAIY,OAAOC,MAAMd,IAAWA,EAAS,EAAG,OAExCA,GAAU,EAENa,OAAOC,MAAMb,KAAaA,EAAa,IAC3CA,GAAc,GACG,IAAGA,EAAa,GAC7BA,EAAa,IAAGA,EAAa,GAEjC,MAAMc,EAAY3I,EAAQ4I,aAAaL,EAAOC,EAAOvJ,EAAOmJ,GAEtDS,EAASF,EAAUG,KAEzB,IAAIC,EACAC,EACAC,EACA1H,EACA2H,EACAzH,EACA0H,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAKxK,EAAQ,EACbyK,EAAKtB,EAAS,EACduB,EAAO/B,EAAS,EAEhBgC,EAAI,GACJC,EAAI,GACJC,EAAI,GAEJC,EAAUhE,EAAU6B,GACpBoC,EAAUhE,EAAU4B,GAEpBqC,EAAO,GACPC,EAAO,GAEX,KAAOrC,KAAe,GAAG,CAGvB,IAFA2B,EAAKD,EAAK,EAELL,EAAI,EAAGA,EAAId,EAAQc,IAAK,CAK3B,IAJAH,EAAOF,EAAOW,GAAMG,EACpBX,EAAOH,EAAOW,EAAK,GAAKG,EACxBV,EAAOJ,EAAOW,EAAK,GAAKG,EAEnBlI,EAAI,EAAGA,GAAKmG,EAAQnG,IACvB0H,EAAIK,IAAQ/H,EAAIgI,EAAKA,EAAKhI,IAAO,GACjCsH,GAAQF,EAAOM,KACfH,GAAQH,EAAOM,KACfF,GAAQJ,EAAOM,KAGjB,IAAK5H,EAAI,EAAGA,EAAItC,EAAOsC,IACrBqI,EAAEL,GAAMR,EACRc,EAAEN,GAAMP,EACRc,EAAEP,GAAMN,EAEC,GAALC,IACFe,EAAK1I,KAAO4H,EAAI5H,EAAIoI,GAAQF,EAAKN,EAAIM,IAAO,EAC5CS,EAAK3I,IAAO4H,EAAI5H,EAAIqG,GAAU,EAAIuB,GAAK,EAAI,GAG7CC,EAAKI,EAAKS,EAAK1I,GACf8H,EAAKG,EAAKU,EAAK3I,GAEfwH,GAAQF,EAAOO,KAAQP,EAAOQ,KAC9BL,GAAQH,EAAOO,KAAQP,EAAOQ,KAC9BJ,GAAQJ,EAAOO,KAAQP,EAAOQ,KAE9BE,IAEFC,GAAOvK,GAAS,EAGlB,IAAKsC,EAAI,EAAGA,EAAItC,EAAOsC,IAAK,CAM1B,IALA+H,EAAK/H,EACLwH,EAAOa,EAAEN,GAAMK,EACfX,EAAOa,EAAEP,GAAMK,EACfV,EAAOa,EAAER,GAAMK,EAEVlI,EAAI,EAAGA,GAAKmG,EAAQnG,IACvB6H,GAAO7H,EAAIiI,EAAK,EAAIzK,EACpB8J,GAAQa,EAAEN,GACVN,GAAQa,EAAEP,GACVL,GAAQa,EAAER,GAIZ,IADAC,EAAKhI,GAAK,EACL2H,EAAI,EAAGA,EAAId,EAAQc,IACtBL,EAAOU,GAAOR,EAAOgB,IAAaC,EAClCnB,EAAOU,EAAK,GAAMP,EAAOe,IAAaC,EACtCnB,EAAOU,EAAK,GAAMN,EAAOc,IAAaC,EAE7B,GAALzI,IACF0I,EAAKf,KAAOC,EAAID,EAAIS,GAAQD,EAAKP,EAAIO,GAAMzK,EAC3CiL,EAAKhB,IAAOC,EAAID,EAAItB,GAAU,EAAIuB,EAAIlK,EAAQ,GAGhDmK,EAAK7H,EAAI0I,EAAKf,GACdG,EAAK9H,EAAI2I,EAAKhB,GAEdH,GAAQa,EAAER,GAAMQ,EAAEP,GAClBL,GAAQa,EAAET,GAAMS,EAAER,GAClBJ,GAAQa,EAAEV,GAAMU,EAAET,GAElBE,GAAMtK,GAAS,GAKrBe,EAAQmK,aAAaxB,EAAWJ,EAAOC,GE7HnC,CAASH,EAAK,EAAG,EAAGpI,EAAOhB,MAAOgB,EAAOmI,OAAQR,EAAQC,GAEzD1E,EAAQlD,EAAOmK,aACZ3C,GACDQ,QAAQC,IAAI,uBAAuBN,kBAAuBC,YAAqBf,YAAYC,MAAQiB,MAYvGF,EAAIuC,IAAM1C,IAId,MAAM2C,EAA6C,IAAIvN,IAGxC,SAAS,EAAK4K,EAAiBC,EA9C/B,EA8CwDC,EA7CpD,GA8CjB,IAAIF,EAEF,OADAM,QAAQsC,MAAM,sBAAuB5C,GAC9BzE,QAAQC,QAAQwE,GAOzB,GAJG2C,EAAaE,KARC,KASfF,EAAa3M,QAGZ2M,EAAaG,IAAI9C,GAAU,OAAO2C,EAAanM,IAAIwJ,GACtD,MAAMpB,EAAU,IAAIrD,QAAiBC,IAEnCgD,EAAa,CACXG,MAAO,CAAC,CAACqB,EAASC,EAAQC,IAC1B7H,QAAS,KACTiH,QAASS,GACR,WAAW1F,KAAK0E,IACjBvD,EAAQuD,EAAQ,QAMpB,OAFA4D,EAAapL,IAAIyI,EAASpB,GAEnBA,I,iCChFT,0B,sSAoLA,MAAMmE,EAAuB,IA7JtB,MAAP,cAGU,KAAAC,WAAa,KACb,KAAAC,MAAqB,GACrB,KAAAC,WAAY,EAEZ,KAAA3C,IAAM,YAAO,OAAQ,IAAS4C,OAE/B,kBACL,QAAkCrP,IAA/BO,KAAK+O,sBAAqC,OAAO/O,KAAK+O,sBAEzD,MAAMC,EAAQ9K,SAASC,cAAc,SACrC,OAAOnE,KAAK+O,yBAA2BC,EAAMC,cAAeD,EAAMC,YAAY,cAAc5P,QAAQ,KAAM,KAGrG,gBACFW,KAAKkP,YAERlP,KAAKkP,UAAY,IAAIC,OAAO,qBAC5BnP,KAAKkP,UAAUtN,iBAAiB,UAAYwN,IAC1C,MAAMtC,EAAOsC,EAAEtC,KAGf,GADA9M,KAAKkM,IAAI,qBAAsBY,GAC5BA,GAAQA,EAAKuC,KAAM,CACpB,MAAMC,EAAQxC,EAAKuC,KACnBrP,KAAKuP,UAAUvP,KAAK4O,MAAMzD,QAASmE,OAKlC,aACFtP,KAAKwP,SAERxP,KAAKwP,OAAS,IAAIL,OAAO,wBACzBnP,KAAKwP,OAAO5N,iBAAiB,UAAYwN,IACvC,MAAMtC,EAAOsC,EAAEtC,KAEf9M,KAAKkM,IAAI,wBAAyBY,GACjB,SAAdA,EAAK2C,MAENzP,KAAKkP,UAAUQ,YAAY,CAACC,QAAS,SAElC7C,EAAK8C,WACN5P,KAAK4O,MAAM,GAAGgB,SAAW9C,EAAK8C,WAIhC5P,KAAKkP,UAAUQ,YAAY,CACzBC,QAAS,SACTE,QAAST,EAAEtC,MACV,gBAAWrN,EAAYqN,EAAKhM,IAAKgP,GAA2BA,EAAWC,YAKzE,aAAalB,GAClB7O,KAAK6O,UAAYA,EACd7O,KAAK6O,WACN7O,KAAKgQ,aACLhQ,KAAKiQ,iBACIjQ,KAAK4O,MAAMhM,QACpB5C,KAAKkQ,mBAIF,UAAUC,EAAYC,GACvBA,GAGFC,aAAaF,EAAKG,SAClBH,EAAKI,SAASpJ,QAAQ,CAACmI,MAAOc,EAAQR,SAAUO,EAAKP,YAHrDO,EAAKI,SAAS5F,OAAO,WAMpB3K,KAAK4O,MAAMhM,QACZ5C,KAAKwQ,eAAexQ,KAAK4O,MAAM,IAGjC5O,KAAKkQ,mBAGA,iBAAiBO,GAAO,KACzBzQ,KAAK6O,YAAa7O,KAAK4O,MAAMhM,QAAY6N,KAE1CzQ,KAAKwP,SACNxP,KAAKwP,OAAOkB,YACZ1Q,KAAKwP,OAAS,MAGbxP,KAAKkP,YACNlP,KAAKkP,UAAUwB,YACf1Q,KAAKkP,UAAY,OAId,eAAeiB,GACpBnQ,KAAKwP,OAAOE,YAAY,CACtBC,QAAS,OACTgB,kBAAmB3Q,KAAK2O,WACxBiC,uBAAwB5Q,KAAK2O,aAG/B3O,KAAKkP,UAAUQ,YAAY,CACzBC,QAAS,OACTkB,YAAa,GACbC,cAAe9Q,KAAK2O,aAKpB3O,KAAKkM,IAAI,yBACTlM,KAAKwP,OAAOE,YAAY,CACtBC,QAAS,SACToB,MAAOZ,EAAKY,MACZnB,SAAUO,EAAKa,cACd,gBAAWvR,EAAY,CAAC0Q,EAAKY,MAAMhB,SAGxCI,EAAKG,QAAUhP,OAAO2P,WAAW,KAC/BjR,KAAKkM,IAAIqC,MAAM,kBAEfvO,KAAKkQ,kBAAiB,GACnBlQ,KAAK4O,MAAMhM,SACZ5C,KAAKgQ,aACLhQ,KAAKiQ,iBAGPjQ,KAAKuP,UAAUvP,KAAK4O,MAAMzD,UACzB,KAGE,eAAe4F,EAAmBC,GACvC,OAAO,IAAI9J,QAAgB,CAACC,EAASwD,KACnC,MAAMwF,EAAO,CACXY,QACAC,eACAT,SAAU,CAACpJ,UAASwD,UACpB2F,QAAS,GAGXtQ,KAAKgQ,aACLhQ,KAAKiQ,gBAEwB,IAA1BjQ,KAAK4O,MAAMtD,KAAK6E,IACjBnQ,KAAKwQ,eAAeL,KAKb,OAAOL,EAAwBkB,GAAe,G,yCACzD,OAAOhR,KAAKkR,eAAepB,EAAYkB,GAAchL,KAAKoK,IACxD,MAAMe,EAAW,IAAIC,KAAK,CAAChB,EAAOd,OAAQ,CAACG,KAAM,cACjD,MAAO,CAAC4B,IAAKC,IAAIC,gBAAgBJ,GAAWvB,SAAUQ,EAAOR,iBAMnE,IAAelB,qBAAuBA,EACvB,O,iCCtLf,mDAmIe,QAhHR,MAQL,cAPQ,KAAA8C,SAAgB,GAChB,KAAAC,gBAIJ,GAGF,UAAUvL,2BAA2B,CACnCwL,cAAgBtL,IACdpG,KAAK2R,YAAYvL,EAAOwL,YAKvB,YAAYC,EAAiBC,EAAcC,GAC7CF,EAAWG,OAAgC,UAAvBH,EAAWG,MAAM9J,EAEtC2J,EAAWG,MAAQ,IAAiBC,UAAUJ,EAAWG,MAAOD,UAEzDF,EAAWG,MAGjBH,EAAW3N,UAAsC,aAA1B2N,EAAW3N,SAASgE,EAC5C2J,EAAW3N,SAAW,IAAegO,QAAQL,EAAW3N,SAAU6N,IAE3C,aAApBF,EAAWpC,aACLoC,EAAWpC,YAGboC,EAAW3N,UAGpB,MAAMiO,EAAWN,EAAWO,UAC5B,IAAIC,EAAaR,EAAWS,OAAST,EAAWU,QAAUJ,GAAY,GACnEA,GAAYE,IAAeF,UACrBN,EAAWO,UAGpBC,EAAa,YAAaA,EAAY,GAAI,KAE1CR,EAAWW,OAAS,IAAkBC,aAAaJ,EAAY,CAACK,SAAS,EAAMC,cAAc,IAC7F,IAAIC,EAAiB,GACrB,GAAgB,WAAbT,EAAuB,CACxB,MAAMU,EAAUhB,EAAWR,IAAIyB,MAAM,4CAClCD,IACDD,EAAiBC,EAAQ,GAAK,eAKlC,MAAME,EAAuB,YAAalB,EAAWmB,aAAe,GAAI,IAAK,KA6B7E,GA5BAnB,EAAWoB,aAAe,IAAkBR,aAAaM,EAAsB,CAC7EG,YAAaf,GAAY,WACzBS,eAAgBA,IAGK,UAApBf,EAAWpC,MACQ,UAApBoC,EAAWpC,MACS,QAApBoC,EAAWpC,MACS,aAApBoC,EAAWpC,OACVoC,EAAWmB,aACZnB,EAAWG,QACXH,EAAWpC,KAAO,SAGjBqC,SAC0CrS,IAAxCO,KAAKyR,gBAAgBI,EAAWjS,MACjCI,KAAKyR,gBAAgBI,EAAWjS,IAAM,IAGxCI,KAAKyR,gBAAgBI,EAAWjS,IAAIkS,IAAO,QAGTrS,IAAjCO,KAAKwR,SAASK,EAAWjS,IAC1BI,KAAKwR,SAASK,EAAWjS,IAAMiS,EAE/B,YAAkB7R,KAAKwR,SAASK,EAAWjS,IAAKiS,IAG9CC,QAA+CrS,IAAxCO,KAAKyR,gBAAgBI,EAAWjS,IAAmB,CAC5D,MAAMuT,EAAiB,GACvB,IAAI,MAAMC,KAASpT,KAAKyR,gBAAgBI,EAAWjS,IACjDuT,EAAK7H,MAAM8H,GAGb,UAAUvL,UAAU,kBAAmB,CACrCjI,GAAIiS,EAAWjS,GACfuT,SAIJ,OAAOtB,EAGF,yBAAyBwB,EAAcvB,GAC5C,MAAMlS,EAAKyT,EAAQzT,GAChBI,KAAKyR,gBAAgB7R,IAAOI,KAAKyR,gBAAgB7R,GAAIkS,YAC/C9R,KAAKyR,gBAAgB7R,GAAIkS,GAE5BwB,OAAOC,KAAKvT,KAAKyR,gBAAgB7R,IAAKgD,eACjC5C,KAAKyR,gBAAgB7R,IAK3B,WAAWA,GAChB,OAAOI,KAAKwR,SAAS5R,M,iCCzHV,SAAS4T,EAAuBC,GAC7C,IAAIC,EAAWxP,SAASC,cAAc,YAGtC,OAFAsP,EAAOA,EAAK1T,OACZ2T,EAASC,UAAYF,EACdC,EAASE,QAVlB,mC,gCCAA,2HAy0BA,MAAMC,EAAkB,IAxyBjB,MAYL,cAXQ,KAAAC,QAAU,UAAgBC,SAASC,MAEnC,KAAAA,MAAkC,GAClC,KAAAC,UAA0C,GAC1C,KAAAC,cAAgB,IAAmBC,cAEnC,KAAAC,aAA4B,IAAInT,IAChC,KAAAoT,qBAAsB,EAsgBvB,KAAAC,oBAAsB,KAC3B,MAAMC,EAAe,aAAM,GAC3B,IAAI,MAAM9O,KAAKzF,KAAKgU,MAAO,CACzB,MAAMQ,EAAOxU,KAAKgU,MAAMvO,GAErB+O,EAAKC,QACY,qBAAlBD,EAAKC,OAAOvM,GACZsM,EAAKC,OAAOC,QAAUH,IAEtBC,EAAKC,OAAS,CAACvM,EAAG,oBAAqByM,WAAYH,EAAKC,OAAOC,SAC/D,UAAU7M,UAAU,cAAe2M,EAAK5U,IAExCI,KAAK4U,uBAAuBJ,MA7gBhCK,YAAY7U,KAAKsU,oBAAqB,KAEtC,UAAUQ,GAAG,qBAAsB9U,KAAKsU,qBAExC,UAAUpO,2BAA2B,CACnC6O,iBAAmB3O,IACjB,MAAM4O,EAAS5O,EAAO6O,QAChBT,EAAOxU,KAAKgU,MAAMgB,GACrBR,IACDA,EAAKC,OAASrO,EAAOqO,OAClBD,EAAKC,SACH,YAAaD,EAAKC,SACnBD,EAAKC,OAAOC,SAAW,IAAkB5K,kBAGxC,eAAgB0K,EAAKC,SACtBD,EAAKC,OAAOE,YAAc,IAAkB7K,mBAKhD,UAAUjC,UAAU,cAAemN,GACnChV,KAAK4U,uBAAuBJ,KAIhCU,gBAAkB9O,IAChB,MAAM4O,EAAS5O,EAAO6O,QAChBT,EAAOxU,KAAKgU,MAAMgB,GACrBR,GACDxU,KAAKmV,gBAAgBH,GAEC,0BAAnB5O,EAAO4L,MAAM9J,SACPsM,EAAKxC,MAEZwC,EAAKxC,MAAQ,YAAkBwC,EAAKxC,MAAO5L,EAAO4L,OAGpDhS,KAAK4U,uBAAuBJ,GAE5B,UAAU3M,UAAU,cAAemN,GACnC,UAAUnN,UAAU,gBAAiBmN,IAChC/I,QAAQmJ,KAAK,iBAAkBJ,IAGxCK,eAAiBjP,IACf,MAAM4O,EAAS5O,EAAO6O,QAChBT,EAAOxU,KAAKgU,MAAMgB,GACrBR,IACDxU,KAAKmV,gBAAgBH,GAErBhV,KAAKsV,YAAYhC,OAAOiC,OAAO,GAAIf,EAAM,CACvCgB,WAAYpP,EAAOoP,WACnBC,UAAWrP,EAAOqP,UAClB9V,SAAUyG,EAAOzG,YACf,OASV,UAAUmV,GAAG,kBAAoB1F,IAC/B,MAAM4F,EAAShV,KAAK0V,UAAU9V,GAC9B,IAAmB+V,YAAYX,EAAQhV,KAAK4V,kBAAkBZ,GAAShV,KAAKkU,iBAG9E,UAAgB2B,WAAW7P,KAAM8P,IAC/B,MAAM9B,EAAQ,UAAgB+B,gBAAgB/B,MAC9C,GAAGA,EAAMpR,OAAQ,CACf5C,KAAKgU,MAAQ,GACb,IAAI,IAAIvO,EAAI,EAAG7C,EAASoR,EAAMpR,OAAQ6C,EAAI7C,IAAU6C,EAAG,CACrD,MAAM+O,EAAOR,EAAMvO,GAChB+O,IACDxU,KAAKgU,MAAMQ,EAAK5U,IAAM4U,IAK5B,MAAMJ,EAAe0B,EAAM1B,aACxBA,GAAgBrP,MAAMiR,QAAQ5B,KAC/BA,EAAa3S,QAAQuT,IACnBhV,KAAKiW,YAAYjB,KAGhBZ,EAAaxR,SACd5C,KAAKkW,oBAAsBhP,QAAQC,QAAQnH,KAAKoU,gBAIpD,UAAgBxS,iBAAiB,aAAetB,IAC3CA,EAAS,GAAKN,KAAK8T,QAAQqC,aAAa7V,IAI3CN,KAAK8T,QAAQ5Q,IAAI,CACf,CAAC5C,GAASN,KAAKoW,QAAQ9V,OAI3B,UAAgBsB,iBAAiB,eAAiBtB,IAC7CA,EAAS,IAAMN,KAAK8T,QAAQqC,aAAa7V,IAI5CN,KAAK8T,QAAQrP,OAAOnE,OAKlB,qBACN,MAAM8T,EAAe,IAAIpU,KAAKoU,cAC9B,UAAgBiC,YAAY,eAAgBjC,GAGvC,eACL,GAAGpU,KAAKkW,qBAAuBlW,KAAKqU,oBAClC,OAAOrU,KAAKkW,oBAGdlW,KAAKqU,qBAAsB,EAE3B,MAAM9J,EAAU,IAAWnD,UAAU,wBAAwBpB,KAAMoK,IACjD,sBAAbA,EAAOlI,IACRlI,KAAKsW,aAAalG,EAAO4D,OAEzB5D,EAAOmG,SAAS9U,QAAS+U,IACvBxW,KAAKiW,YAAYO,EAAQvB,WAG3BjV,KAAKyW,sBAGPzW,KAAKkW,oBAAsB3L,EAEpBvK,KAAKoU,eAGd,OAAOpU,KAAKkW,sBAAwBlW,KAAKkW,oBAAsB3L,GAG1D,gBAAgB5K,GAMrB,MALmB,MAAhBA,EAAS,KACVA,EAAWA,EAASkJ,MAAM,IAG5BlJ,EAAWA,EAASD,cACjBM,KAAKiU,UAAUtU,GACTuH,QAAQC,QAAQnH,KAAKgU,MAAMhU,KAAKiU,UAAUtU,KAG5C,IAAWyH,UAAU,2BAA4B,CAACzH,aAAWqG,KAAK0Q,IACvE1W,KAAKsW,aAAaI,EAAa1C,OAC/B,IAAgB2C,aAAaD,EAAaE,OAEnC,IAAgBC,QAAQ,IAAgBtQ,UAAUmQ,EAAalQ,SAInE,YAAYwO,GACjBhV,KAAKoU,aAAatS,IAAIkT,GACtB,IAAmBW,YAAYX,EAAQhV,KAAK4V,kBAAkBZ,GAAShV,KAAKkU,eAC5E,UAAgB4C,YAAY9B,EAAQ,YAG/B,kBAAkBpV,GACvB,MAAM4U,EAAOxU,KAAKgU,MAAMpU,GACxB,IAAI4U,EACF,MAAO,GAYT,MATsB,CACpBA,EAAKgB,WACLhB,EAAKiB,UACLjB,EAAKuC,MACLvC,EAAK7U,SACL6U,EAAKlM,OAAO0O,KAAO,UAAKC,OAAO,iBAAiB,GAAQ,GACxDzC,EAAKlM,OAAO0O,KAAO,iBAAmB,IAG7BE,OAAOC,SAASC,KAAK,KAG3B,YAAYlX,EAAgBmX,GAAe,GAChD,OAAOrX,KAAKsX,eAAetR,KAAKuR,IAC9B,IAAInD,EAAe,IAAImD,GACvB,GAAGrX,EAAO,CACR,MAAMwK,EAAU,IAAmB8M,OAAOtX,EAAOF,KAAKkU,eAGtDE,EAF6B,IAAIA,GAAc8C,OAAOtX,KAAQ8K,EAAQ9K,IA6BxE,OAxBAwU,EAAaqD,KAAK,CAACC,EAAiBC,KAClC,MAAMC,GAAa5X,KAAKgU,MAAM0D,IAAY,IAAIG,UAAY,GACpDC,GAAa9X,KAAKgU,MAAM2D,IAAY,IAAIE,UAAY,GAE1D,OAAOD,EAAUG,cAAcD,KAG9BT,GACErX,KAAKgY,eAAe9X,KACrBkU,EAAa6D,cAAc9K,GAAKA,IAAM,UAAU+K,MAChD9D,EAAa+D,QAAQ,UAAUD,OAc5B9D,IAIJ,YAAY9T,EAAgB8X,GACjC,OAAO,IAAWhR,UAAUgR,EAAQ,iBAAmB,mBAAoB,CACzExY,GAAI,IAAgB4J,iBAAiBlJ,KACpC0F,KAAKqS,IACHA,GACD,IAAkB5Q,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,oBACHoQ,QAAS,IAAgBC,cAAcjY,GACvCkY,QAASJ,KAKRC,IAIJ,eAAenY,GACpB,MAAMsU,EAAOxU,KAAK0V,UACZ+C,EAAQ,IAAmBtE,cAEjC,OADA,IAAmBwB,YAAYnB,EAAK5U,GAAII,KAAK4V,kBAAkBpB,EAAK5U,IAAK6Y,KAChE,IAAmBjB,OAAOtX,EAAOuY,GAAOjE,EAAK5U,IAGjD,aAAa8Y,EAAiBC,GACnCD,EAASjX,QAAS+S,GAASxU,KAAKsV,YAAYd,EAAMmE,IAG7C,YAAYnE,EAAcmE,GAC/B,GAAc,cAAXnE,EAAKtM,EAAmB,OAE3B,MAAM8M,EAASR,EAAK5U,GACdgZ,EAAU5Y,KAAKgU,MAAMgB,GAE3B,GAAG4D,IAAYD,EACb,OAOF,QAJmBlZ,IAAhB+U,EAAKlM,SACNkM,EAAKlM,OAAS,IAGbkM,EAAKlM,OAAOuQ,UAAmBpZ,IAAZmZ,EACpB,OAMF,MAAME,EAAWtE,EAAKgB,WAAa,KAAOhB,EAAKiB,WAAa,IAC5D,GAAGjB,EAAK7U,SAAU,CAChB,MAAMoZ,EAAiB,IAAmBC,cAAcxE,EAAK7U,UAC7DK,KAAKiU,UAAU8E,GAAkB/D,EAGnCR,EAAKqD,SAAWrD,EAAKlM,OAAO2Q,QAAU,GAAK,IAAmBhZ,gBAAgB6Y,GAAU,GAExFtE,EAAK0E,SAAW,IAAkBC,gBAAgBL,GAE/CtE,EAAKC,SACFD,EAAKC,OAAuCC,UAC7CF,EAAKC,OAAuCC,SAAW,IAAkB5K,kBAGxE0K,EAAKC,OAAwCE,aAC9CH,EAAKC,OAAwCE,YAAc,IAAkB7K,mBAMlF,IAAIsP,GAAe,OACJ3Z,IAAZmZ,EACD5Y,KAAKgU,MAAMgB,GAAUR,GAElBA,EAAKgB,aAAeoD,EAAQpD,YAC1BhB,EAAKiB,YAAcmD,EAAQnD,WAC3BjB,EAAK7U,WAAaiZ,EAAQjZ,WAC7ByZ,GAAe,GAGjB,YAAkBR,EAASpE,GAC3B,UAAU3M,UAAU,cAAemN,IAGlCoE,GACD,UAAUvR,UAAU,kBAAmB2M,EAAK5U,IAG9CI,KAAK4U,uBAAuBJ,GAGvB,uBAAuBA,GACzB,UAAgB6E,aAAa7E,EAAK5U,KACnCI,KAAK8T,QAAQ5Q,IAAI,CACf,CAACsR,EAAK5U,IAAK4U,IAKV,gBAAgBuC,GACrB,MAAO,IAAM,YAAkBA,GAAOuC,UAGjC,qBAAqB7E,GAK1B,GAJsB,iBAAb,IACPA,EAASzU,KAAKoW,QAAQ3B,GAAQA,QAG7BA,EAAQ,CACT,MAAMC,EAAuB,qBAAbD,EAAOvM,EAA2BuM,EAAOC,QAAwB,sBAAbD,EAAOvM,EAA4BuM,EAAOE,WAAa,EAC3H,GAAGD,EACD,OAAOA,EAYT,OAAOD,EAAOvM,GACZ,IAAK,qBACH,OAAO,EACT,IAAK,qBACH,OAAO,EACT,IAAK,sBACH,OAAO,GAIb,OAAO,EAGF,QAAQtI,GACb,OAAG,YAASA,GACHA,EAGFI,KAAKgU,MAAMpU,IAAO,CAACA,GAAIA,EAAI0I,OAAQ,CAAC2Q,SAAS,GAAOM,YAAa,IAGnE,UACL,OAAOvZ,KAAKoW,QAAQ,UAAU8B,MAGzB,oBAAoBlD,G,MACzB,IAAInT,EACA2X,EAEJ,OAAOxE,GACL,KAAK,IACHnT,EAAM,4BACN,MACF,KAAK,MACHA,EAAM,4BACN,MACF,QAAS,CACP,GAAG7B,KAAKyZ,MAAMzE,GAAS,CACrBnT,EAAM,MACN,MAGF,MAAM2S,EAAOxU,KAAKoW,QAAQpB,GAC1B,IAAIR,EAAM,CACR3S,EAAM,GACN,MAGF,GAAG2S,EAAKlM,OAAOoR,QAAS,CACtB7X,EAAM,gBACN,MAGF,OAAkB,QAAX,EAAA2S,EAAKC,cAAM,eAAEvM,GAClB,IAAK,qBACHrG,EAAM,SACN,MAGF,IAAK,qBACHA,EAAM,cACN,MAGF,IAAK,sBACHA,EAAM,eACN,MAGF,IAAK,oBAAqB,CACxB,MAAM+H,EAAO4K,EAAKC,OAAOE,WACnB5J,EAAM4O,KAAK5O,MAAQ,IAEzB,GAAIA,EAAMnB,EAAQ,GAChB/H,EAAM,2BACD,GAAIkJ,EAAMnB,EAAQ,KAAM,CAC7B/H,EAAM,qBAEN2X,EAAO,EADIzO,EAAMnB,GAAQ,GAAK,QAEzB,GAAGmB,EAAMnB,EAAO,MAAO,CAC5B/H,EAAM,oBAEN2X,EAAO,EADIzO,EAAMnB,GAAQ,KAAO,OAE3B,CACL/H,EAAM,yBACN,MAAM+X,EAAI,IAAID,KAAY,IAAP/P,GACnB4P,EAAO,EAAE,IAAMI,EAAEC,WAAWhR,OAAO,GAAK,KAAO,KAAO+Q,EAAEE,WAAa,IAAIjR,OAAO,IAC7E,IAAM+Q,EAAEG,YAAYlR,OAAO,GAAK,KAAO,IAAM+Q,EAAEI,cAAcnR,OAAO,IAGzE,MAGF,IAAK,mBACHhH,EAAM,SACN,MAGF,QACEA,EAAM,eAKV,OAIJ,OAAO,eAAKA,EAAK2X,GAGZ,MAAM5Z,GACX,OAAOI,KAAKgU,MAAMpU,IAAOI,KAAKgU,MAAMpU,GAAI0I,OAAO2R,IAG1C,UAAUra,GACf,OAAOI,KAAKoU,aAAa3F,IAAI7O,GAGxB,cAAcA,GACnB,MAAM4U,EAAOxU,KAAKgU,MAAMpU,GACxB,OAAO4U,IAASxU,KAAKyZ,MAAM7Z,KAAQ4U,EAAKlM,OAAO2Q,UAAYzE,EAAKlM,OAAOoR,QAGlE,iBAAiB9Z,GACtB,OAAOI,KAAKka,cAActa,KAAQI,KAAKma,UAAUva,IAAOA,IAAO,UAAUsY,KAGpE,QAAQtY,EAAYwa,GACzB,IAAI5F,EAAOxU,KAAKgU,MAAMpU,GACtB,OAAO,YAAS4U,KAAU4F,IAAa5F,EAAKlM,OAAOuQ,KAG9C,cAAcjZ,GACnB,MAAM4U,EAAOxU,KAAKoW,QAAQxW,GAC1B,OAAQ4U,EAAKlM,OAAO2Q,SAA6B,YAAlBzE,EAAK7U,SAG/B,aAAaC,GAClB,MAAM4U,EAAOxU,KAAKoW,QAAQxW,GAE1B,OAAO4U,GAAQA,EAAKxC,OAAS,CAC3B9J,EAAG,yBAIA,cAActI,GACnB,MAAM4U,EAAOxU,KAAKoW,QAAQxW,GAC1B,MAAO,IAAMA,GAAM4U,EAAK+E,YAAc,IAAM/E,EAAK+E,YAAc,IAG1D,aAAa3Z,GAClB,MAAM4U,EAAOxU,KAAKoW,QAAQxW,GAC1B,OAAG4U,EAAKlM,QAAUkM,EAAKlM,OAAO0O,KACrB,CAAC9O,EAAG,iBAGN,CACLA,EAAG,YACH+M,QAASrV,EACT2Z,YAAa/E,EAAK+E,aAqBf,gBAAgB3Z,EAAYya,GACjC,GAAGra,KAAKyZ,MAAM7Z,GACZ,OAGF,MAAM0a,EAAY,aAAM,GAExB,GAAGD,GACD,GAAIC,EAAYD,GAFI,GAGlB,YAEG,GAAG,IAAkB9S,aAAaC,YACvC,OAGF,MAAMgN,EAAOxU,KAAKoW,QAAQxW,GACvB4U,GACDA,EAAKC,QACa,qBAAlBD,EAAKC,OAAOvM,GACM,oBAAlBsM,EAAKC,OAAOvM,IACXsM,EAAKlM,OAAOoR,UACZlF,EAAKlM,OAAO2Q,UAEbzE,EAAKC,OAAS,CACZvM,EAAG,mBACHwM,QAAS4F,EAnBS,IAuBpB,UAAUzS,UAAU,cAAejI,GAEnCI,KAAK4U,uBAAuBJ,IA0EzB,cACL,OAAGxU,KAAKua,mBAA2Bva,KAAKua,mBAEjCva,KAAKua,mBAAqB,UAAgB1E,WAAW7P,KAAM8P,I,MAChE,OAAkB,QAAf,EAAAA,aAAK,EAALA,EAAO0E,gBAAQ,eAAE5X,QACXkT,EAAM0E,SAGR,IAAWpT,UAAU,uBAAwB,CAClDqT,gBAAgB,EAChBC,OAAQ,EACRC,MAAO,GACPC,KAAM,IACL5U,KAAMoK,IACP,IAAIyK,EAAoB,GAiBxB,MAhBgB,sBAAbzK,EAAOlI,IAERlI,KAAKsW,aAAalG,EAAO4D,OACzB,IAAgB2C,aAAavG,EAAOwG,OAEjCxG,EAAO0K,WAAWlY,SACnBiY,EAAUzK,EAAO0K,WAAW,GAAGC,MAAMja,IAAKka,IACxC,MAAM1a,EAAS,IAAgBiG,UAAUyU,EAAQxU,MAEjD,OADA,UAAgBsQ,YAAYxW,EAAQ,WAC7BA,MAKb,UAAgB+V,YAAY,WAAYwE,GAEjCA,MAKN,WAAWH,EAAS,EAAGC,EAAQ,GACpC,OAAO,IAAWvT,UAAU,sBAAuB,CAACsT,SAAQC,UAAQ3U,KAAKiV,IACvEjb,KAAKsW,aAAa2E,EAAgBjH,OAClC,IAAgB2C,aAAasE,EAAgBrE,OAK7C,MAAO,CAACsE,MAJ4B,qBAAtBD,EAAgB/S,EAA2B+S,EAAgBjH,MAAMpR,OAASqY,EAAgBrE,MAAMhU,OAASqY,EAAgBC,MAIxHL,QAFCI,EAAgBjH,MAAMlT,IAAIqa,GAAKA,EAAEvb,IAAIwb,OAAOH,EAAgBrE,MAAM9V,IAAI4E,IAAMA,EAAE9F,QA8B3F,eAAeM,EAAeya,EAAQ,IAC3C,OAAO,IAAWvT,UAAU,kBAAmB,CAC7CiU,EAAGnb,EACHya,UACC3U,KAAK+U,IACN/a,KAAKsW,aAAayE,EAAM/G,OACxB,IAAgB2C,aAAaoE,EAAMnE,OAOnC,MALY,CACV0E,WAAY,IAAI,IAAIra,IAAI8Z,EAAMO,WAAWxa,IAAIqM,GAAK,IAAgB5G,UAAU4G,MAC5EzC,QAASqQ,EAAMrQ,QAAQ5J,IAAIqM,GAAK,IAAgB5G,UAAU4G,OAOxD,iBAAiB6H,EAAgBmF,GAEpCA,IADkBna,KAAKma,UAAUnF,KAE/BmF,EACDna,KAAKiW,YAAYjB,GAEjBhV,KAAKoU,aAAa3P,OAAOuQ,GAG3BhV,KAAKyW,qBAEL,UAAU5O,UAAU,kBAAmBmN,IAIpC,eAAerV,GACpB,OAAO,IAAWyH,UAAU,yBAA0B,CACpDzH,aACCqG,KAAMwO,IACPxU,KAAKsV,YAAYd,KAId,cAAcQ,EAAgBuG,GACnC,GAAGvb,KAAKyZ,MAAMzE,GACZ,OAGF,MAAMR,EAAOxU,KAAKgU,MAAMgB,GACxB,GAAGR,EAAM,CACP,MAAMC,EAAc8G,EAAU,CAC5BrT,EAAG,oBACHyM,WAAY,aAAM,IAChB,CACFzM,EAAG,mBACHwM,QAAS,aAAM,GAAQ,KAGzBF,EAAKC,OAASA,EAEd,UAAU5M,UAAU,cAAemN,IAIhC,WAAWA,EAAgBQ,EAAoBC,EAAmBsB,EAAeyE,GACtF,OAAO,IAAWpU,UAAU,sBAAuB,CACjDxH,GAAII,KAAKyb,aAAazG,GACtBQ,aACAC,YACAsB,QACA2E,4BAA6BF,IAC5BxV,KAAMqB,IACP,IAAkBI,qBAAqBJ,EAAS,CAACsR,UAAU,IAE3D3Y,KAAK2b,iBAAiB3G,GAAQ,KAI3B,eAAe4G,GACpB,OAAO,IAAWxU,UAAU,0BAA2B,CACrDxH,GAAIgc,EAAQ9a,IAAIkU,GAAUhV,KAAKyb,aAAazG,MAC3ChP,KAAMqB,IACP,IAAkBI,qBAAqBJ,EAAS,CAACsR,UAAU,IAE3DiD,EAAQna,QAAQuT,IACdhV,KAAK2b,iBAAiB3G,GAAQ,SAOtC,IAAenB,gBAAkBA,EAClB,O,oLC9yBA,MAAM,EAyBnB,YAAoB9M,EACV8U,EACAvV,EACAuN,EACAjO,EACAkW,EACAC,EACAzU,EACAuC,GARU,KAAA9C,qBACV,KAAA8U,kBACA,KAAAvV,kBACA,KAAAuN,kBACA,KAAAjO,mBACA,KAAAkW,0BACA,KAAAC,kBACA,KAAAzU,oBACA,KAAAuC,oBA9BF,KAAAmS,QAAsC,GACvC,KAAAC,UAA4C,GAO3C,KAAAC,aAAeC,EAAA,EAAmBhI,cAElC,KAAAiI,cAKJ,CACFlc,MAAO,GACPgb,MAAO,EACPc,QAAS,GACTK,SAAU,GAsiBJ,KAAAC,oBAAuBlW,IAEfA,EAAOmW,aAEf9a,QAAS+a,I,MACb,MAAM,UAACC,EAAS,KAAEjW,GAAQgW,EAEpBlc,EAASN,KAAKsG,gBAAgBC,UAAUC,GACxCkW,EAAS1c,KAAK2c,WAAWrc,GAAQ,GACpCoc,KACe,QAAb,EAAAA,EAAOpU,cAAM,eAAEsU,iBACTF,EAAOpU,OAAOsU,OACrB5c,KAAK6c,aAAaJ,GAAWxE,cAAc9K,GAAKA,IAAMuP,EAAOpc,QAC7DN,KAAK+b,gBAAgB1F,YAAY,eAAgBrW,KAAK6c,eAGxDH,EAAOD,UAAYA,EACnBzc,KAAK8c,uBAAuBJ,GAC5B1c,KAAK+c,WAAWL,IAGlB1c,KAAK+G,mBAAmBiW,yBAAyB1c,EAAQoc,MAIrD,KAAAO,qBAAwB7W,I,MAC9B,MAAMiW,EAA2B,QAAhB,EAAAjW,EAAOqW,iBAAS,QAAI,EAE/Bnc,EAASN,KAAKsG,gBAAgBC,UAAWH,EAAOI,KAA+BA,MAC/EkW,EAAS1c,KAAKgH,cAAc1G,GAY/Boc,IACGtW,EAAOkC,OAAOsU,OAKhBF,EAAOpU,OAAOsU,QAAS,UAJhBF,EAAOpU,OAAOsU,OACrB5c,KAAK6c,aAAaR,GAAUpE,cAAc9K,GAAKA,IAAMuP,EAAOpc,QAC5DN,KAAK+b,gBAAgB1F,YAAY,eAAgBrW,KAAK6c,eAKxD7c,KAAK8c,uBAAuBJ,IAG9B1c,KAAK+G,mBAAmBiW,yBAAyB1c,EAAQoc,IAGnD,KAAAQ,sBAAyB9W,I,MAC/B,MAAMiW,EAA2B,QAAhB,EAAAjW,EAAOqW,iBAAS,QAAI,EAE/BU,EAAeC,IACnBpd,KAAK6c,aAAaR,GAAUzZ,OAAS,EACrCwa,EAAMC,UACND,EAAM3b,QAASnB,IACbgd,EAAUhd,IAAU,EAEpB,MAAMoc,EAAS1c,KAAKgH,cAAc1G,GAClCN,KAAK+G,mBAAmBiW,yBAAyB1c,EAAQoc,GACrDA,IAIJA,EAAOpU,OAAOsU,QAAS,EACvB5c,KAAK8c,uBAAuBJ,MAG9B1c,KAAKud,UAAUlB,GAAU5a,QAAQib,IAC/B,MAAMpc,EAASoc,EAAOpc,OACnBoc,EAAOpU,OAAOsU,SAAWU,EAAUhd,IACpCN,KAAK+G,mBAAmBiW,yBAAyB1c,MAMjDgd,EAAsC,GACxClX,EAAOgX,MA6BXD,EAAY/W,EAAOgX,MAAMtc,IAAI0F,GAAQxG,KAAKsG,gBAAgBC,UAAWC,EAA+BA,QA5BlG,IAAWY,UAAU,4BAA6B,CAChDqV,UAAWJ,IACVrW,KAAMwX,IAIPxd,KAAKyd,aAAaD,GAElBL,EAAYK,EAAcxB,QAAQlb,IAAI8Y,GAAKA,EAAEtZ,YAvnBjDN,KAAK8T,QAAU9T,KAAK+b,gBAAgBhI,SAASiI,QAE7Chc,KAAK0d,QAEL,UAAU5I,GAAG,kBAAoB1F,IAC/B,MAAM9O,EAASuT,EAAgB6B,UAAU9V,GAEzC,GADeI,KAAKgH,cAAc1G,GACvB,CACT,MAAMqd,EAAWrX,EAAgBsX,kBAAkBtd,GACnD6b,EAAA,EAAmBxG,YAAYrV,EAAQqd,EAAU3d,KAAKkc,iBAI1D,UAAUhW,2BAA2B,CACnC2X,kBAAmB7d,KAAKsc,oBAExBwB,mBAAoB9d,KAAKid,qBAEzBc,oBAAqB/d,KAAKkd,wBAG5BnB,EAAgBlG,WAAW7P,KAAM8P,IAC/B9V,KAAK6c,aAAe/G,EAAM+G,cAAgB,GACtC7c,KAAK6c,aAAa,KAAI7c,KAAK6c,aAAa,GAAK,IAC7C7c,KAAK6c,aAAa,KAAI7c,KAAK6c,aAAa,GAAK,IAEjD,MAAMb,EAAUD,EAAgBhG,gBAAgBiG,QAChD,GAAGA,EAAQpZ,OACT,IAAI,IAAI6C,EAAI,EAAG7C,EAASoZ,EAAQpZ,OAAQ6C,EAAI7C,IAAU6C,EAAG,CACvD,MAAMiX,EAASV,EAAQvW,GACvB,GAAGiX,EAAQ,CACTA,EAAOsB,YAAche,KAAK+G,mBAAmB2C,mBAAmBgT,EAAOsB,aAEpEtB,EAAOuB,YACRje,KAAK+G,mBAAmBmX,aAAa,CAACxB,EAAOuB,aAG/Cje,KAAKme,WAAWzB,GAGA1c,KAAK+G,mBAAmBqX,iBAAiB1B,EAAOpc,OAAQoc,EAAOsB,aACpE/E,SACTjZ,KAAK+G,mBAAmBE,mBAAmByV,EAAOpc,SAM1DN,KAAKqe,iBAAmBvI,EAAMuI,kBAAoB,KAI/C,gBAAgBhC,GACrB,QAASrc,KAAKqe,iBAAiBhC,GAG1B,iBAAiBA,EAAkBiC,GACxCte,KAAKqe,iBAAiBhC,GAAYiC,EAClCte,KAAK+b,gBAAgB1F,YAAY,mBAAoBrW,KAAKqe,kBAGrD,QACLre,KAAKqe,iBAAmB,GACxBre,KAAKue,kBAAoB,GACzBve,KAAK6c,aAAe,CAClB2B,EAAG,GACHC,EAAG,IAELze,KAAK0e,WAAa,EAGb,cAAcrC,GACnB,OAAOrc,KAAKue,kBAAkBlC,IAAa,EAGtC,UAAUzc,G,QACf,GAAGA,GAAM,EACP,OAAyB,QAAlB,EAAAI,KAAKic,UAAUrc,UAAG,QAAKI,KAAKic,UAAUrc,GAAM,GAGrD,MAAMoc,EAA6C,GAC7C9E,EAASlX,KAAK+G,mBAAmB4X,eAAeC,QAAQhf,GAE9D,IAAI,MAAMU,KAAUN,KAAKgc,QAAS,CAChC,MAAMU,EAAS1c,KAAKgc,QAAQ1b,GAC5B,GAAGN,KAAK+G,mBAAmB4X,eAAeE,oBAAoBnC,EAAQxF,GAAS,CAC7E,IAAIuB,EAEJ,MAAMqG,EAAc5H,EAAO6H,aAAape,QAAQ+b,EAAOpc,QAErDmY,GADkB,IAAjBqG,EACO9e,KAAKgf,oBAAoBhf,KAAKif,gCAAgC/H,EAAO6H,aAAanc,OAAS,EAAIkc,KAClF,QAAb,EAAApC,EAAOpU,cAAM,eAAEsU,QACf5c,KAAK8c,uBAAuBJ,GAAQ,GAEpCA,EAAOjE,MAGjBuD,EAAQ1Q,KAAK,CAACoR,SAAQjE,WAK1B,OADAuD,EAAQvE,KAAK,CAACyH,EAAGpR,IAAMA,EAAE2K,MAAQyG,EAAEzG,OAC5BuD,EAAQlb,IAAI8Y,GAAKA,EAAE8C,QAGrB,UAAUpc,EAAgB+b,GAC/B,MAAM8C,EAAsB,GAE5B,QAAgB1f,IAAb4c,EAAwB,CACzB,MAAML,EAAUhc,KAAKic,UACrB,IAAI,MAAMI,KAAYL,EACpBmD,EAAQ7T,KAAK0Q,EAAQK,SAGvB8C,EAAQ7T,KAAKtL,KAAKud,UAAUlB,IAG9B,IAAI,IAAI+C,KAAUD,EAAS,CACzB,MAAM1G,EAAQ2G,EAAOC,UAAU3C,GAAUA,EAAOpc,SAAWA,GAC3D,IAAc,IAAXmY,EACD,MAAO,CAAC2G,EAAO3G,GAAQA,GAI3B,MAAO,GAGF,cAAcnY,GACnB,OAAON,KAAKgc,QAAQ1b,GAWf,oBAAoBsJ,GAKzB,YAJYnK,IAATmK,IACDA,EAAO,aAAM,GAAQ5J,KAAK6J,kBAAkBC,kBAG/B,MAAPF,GAAyC,QAAnB5J,KAAK0e,YAG9B,uBAAuBhC,EAAgB4C,GAAa,EAAOjX,G,MAChE,MAAMkX,EAAYvf,KAAKsG,gBAAgBkZ,UAAU9C,EAAOpc,SAAWoc,EAAOpc,OAAS,EAEnF,IAAImf,EAAU,EACd,GAAG/C,EAAOpU,OAAOsU,SAAW0C,EAC1BG,EAAUzf,KAAK0f,yBAAyBhD,OACnC,CAML,GALIrU,IACFA,EAAUrI,KAAK+G,mBAAmBqX,iBAAiB1B,EAAOpc,OAAQoc,EAAOsB,cAG3EyB,EAAWpX,EAA4BuB,MAAQ6V,EAC5CF,EAAW,CACZ,MAAMI,EAAU3f,KAAK6b,gBAAgB+D,QAAQL,KACzCE,GAAYE,EAAQ/V,MAAQ+V,EAAQ/V,KAAO6V,KAC7CA,EAAUE,EAAQ/V,MAIC,kBAAR,QAAZ,EAAA8S,EAAO/V,aAAK,eAAEuB,IAAwBwU,EAAO/V,MAAMiD,KAAO6V,IAC3DA,EAAU/C,EAAO/V,MAAMiD,MAIvB6V,IACFA,EAAU9F,KAAK5O,MAAQ,KAGzB,MAAM0N,EAAQzY,KAAKgf,oBAAoBS,GACvC,GAAGH,EAAY,OAAO7G,EACtBiE,EAAOjE,MAAQA,EAGV,gCAAgCqG,GACrC,OAAO,YAA4B,MAAdA,GAGhB,yBAAyBpC,GAC9B,MAAMU,EAAQpd,KAAK6c,aAAaH,EAAOD,WAEjCoD,EAAazC,EAAMzc,QAAQ+b,EAAOpc,QACxC,IAAIwe,EAAce,EAMlB,OALmB,IAAhBA,IACDf,EAAc1B,EAAM9R,KAAKoR,EAAOpc,QAAU,EAC1CN,KAAK+b,gBAAgB1F,YAAY,eAAgBrW,KAAK6c,eAGjD7c,KAAKif,gCAAgCH,GAGvC,eAAexe,GAepB,MAduB,CACrB4H,EAAG,SACHI,OAAQ,GACR9B,KAAMxG,KAAKsG,gBAAgBiS,cAAcjY,GACzC0d,YAAa,EACb8B,kBAAmB,EACnBC,mBAAoB,EACpBC,aAAc,EACdC,sBAAuB,EACvBC,gBAAiB,CACfhY,EAAG,uBAOF,iBAAiBwU,GACtB,MAAMyD,EAAiBngB,KAAK+G,mBAAmBqZ,kBAAkB1D,EAAOpc,QAClE+f,EAAU,GAAGjF,OAAO+E,EAAeE,QAAQxX,OACjD,IAAIyX,EACJ,IAAI,IAAI7a,EAAI,EAAG7C,EAASyd,EAAQzd,OAAQ6C,EAAI7C,IAAU6C,EAAG,CACvD,MAAMqM,EAAMuO,EAAQ5a,GACd4C,EAAUrI,KAAK+G,mBAAmBqX,iBAAiB1B,EAAOpc,OAAQwR,GACxE,IAAIzJ,EAAQC,OAAOiY,YAAa,CAC9BD,EAAkBjY,EAEfA,EAAQmY,SAAW9D,EAAOpc,QAC3BN,KAAK+b,gBAAgBjF,YAAYzO,EAAQmY,OAAQ,cAAgB9D,EAAOpc,OAAQ,GAGlF,OAMJ,GAFAoc,EAAOuB,WAAaqC,EAEjB5D,EAAOpc,OAAS,GAAKoc,EAAO+D,IAAK,CAClC,MAAMC,EAAS1gB,KAAKsH,kBAAkBqZ,eAAejE,EAAOpc,QAAQmgB,IACpE/D,EAAO+D,IAAMC,EAGf1gB,KAAK8T,QAAQ5Q,IAAI,CACf,CAACwZ,EAAOpc,QAASoc,IAGnB1c,KAAK+b,gBAAgBjF,YAAY4F,EAAOpc,OAAQ,UAAYoc,EAAOpc,OAAQ,GAGtE,WAAWoc,EAAgBkE,GAChC,MAAM5E,EAAUhc,KAAKud,UAAUb,EAAOD,WAChCoE,EAAM7E,EAAQqD,UAAUzF,GAAKA,EAAEtZ,SAAWoc,EAAOpc,QAWvD,IAVY,IAATugB,GACD7E,EAAQ8E,OAAOD,EAAK,GAIpB7gB,KAAKgc,QAAQU,EAAOpc,QAAUoc,EAE9B1c,KAAK+gB,iBAAiBrE,GAGrBkE,IACAlE,EAAOpU,OAAOsU,UACb5c,KAAKue,kBAAkB7B,EAAOD,YAAcmE,EAAa5gB,KAAKue,kBAAkB7B,EAAOD,YAAa,CACtG,IAAY,IAAToE,EAED,OAAO,EAET7gB,KAAKue,kBAAkB7B,EAAOD,WAAamE,EAG7C,YAA2B5E,EAASU,EAAQ,QAASmE,GAGhD,WAAWvgB,GAChB,MAAM0gB,EAAchhB,KAAKihB,UAAU3gB,GAYnC,OAXG0gB,EAAY,KACbhhB,KAAKic,UAAU+E,EAAY,GAAGvE,WAAWqE,OAAOE,EAAY,GAAI,UACzDhhB,KAAKgc,QAAQ1b,GACpB6b,EAAA,EAAmBxG,YAAYrV,EAAQ,GAAIN,KAAKkc,cAGhDlc,KAAK+b,gBAAgBmF,eAAe,EAAG,cAAgB5gB,GACvDN,KAAK+b,gBAAgBmF,eAAe,EAAG,UAAY5gB,GACnDN,KAAK8T,QAAQrP,OAAOnE,IAGf0gB,EAGF,aAAaxD,GAIlB,YAAeA,EAAcxB,QAAS,CAACU,EAAQhc,KAC7B,iBAAbgc,EAAOxU,GACRsV,EAAcxB,QAAQ8E,OAAOpgB,EAAK,KAItCV,KAAK6T,gBAAgByC,aAAakH,EAAcxJ,OAChDhU,KAAK6b,gBAAgBlF,aAAa6G,EAAc5G,OAChD5W,KAAK+G,mBAAmBmX,aAAaV,EAAc2D,UAEnDnhB,KAAK+G,mBAAmBmF,IAAI,oBAAqBsR,GAEjD,MAAM4D,EAA6C,GAClD5D,EAAcxB,QAAqBva,QAASib,IAC3C,MAAMpc,EAASN,KAAKsG,gBAAgBC,UAAUmW,EAAOlW,MACrD,IAAIyX,EAAavB,EAAOsB,YAExB,MAAMqD,EAAoBrhB,KAAK+G,mBAAmBua,eAAehhB,GAcjE,GAbG+gB,KACGpD,GACEje,KAAK+G,mBAAmBqX,iBAAiB9d,EAAQ+gB,GAAiCzX,KAAQ5J,KAAK+G,mBAAmBqX,iBAAiB9d,EAAQ2d,GAA0BrU,QACzK8S,EAAOsB,YAAcC,EAAaoD,EAClCrhB,KAAK+G,mBAAmBqZ,kBAAkB9f,GAAQihB,MAAQF,GAS3DpD,GAAevB,EAAO/V,OAA4B,iBAAnB+V,EAAO/V,MAAMuB,EAC7ClI,KAAKme,WAAWzB,GAChB0E,EAAe9gB,GAAUoc,MACpB,CACL,MAAM8E,EAAUxhB,KAAK2c,WAAWrc,GAC7BkhB,EAAQ5e,QACT,UAAUiF,UAAU,cAAe,CAACvH,SAAQoc,OAAQ8E,EAAQ,KAIhE,MAAMna,EAAUrH,KAAK+G,mBAAmB0a,8BAA8BnhB,GACtE,QAAeb,IAAZ4H,EAAuB,CACxB,IAAI,MAAMjB,KAAUiB,EAClBrH,KAAKsH,kBAAkBoa,WAAWtb,UAG7BpG,KAAK+G,mBAAmB0a,8BAA8BnhB,MAI9DgT,OAAOC,KAAK6N,GAAgBxe,QAC7B,UAAUiF,UAAU,sBAAuBuZ,GAOxC,WAAW1E,EAAgBL,EAAW,GAC3C,MAAM/b,EAASN,KAAKsG,gBAAgBC,UAAUmW,EAAOlW,MACrD,IAAIlG,EAEF,OADA2L,QAAQsC,MAAM,gCAAiCmO,EAAQL,IAChD,EAGO,WAAbK,EAAOxU,GACR+D,QAAQsC,MAAM,sCAAuCmO,EAAQpJ,OAAOiC,OAAO,GAAImH,IAGjF,MAAM6C,EAAYvf,KAAKsG,gBAAgBkZ,UAAUlf,IAAWA,EAAS,EAErE,GAAGA,EAAS,EAAG,CACb,MAAMqhB,EAAa3hB,KAAK6b,gBAAgB+D,SAAStf,GACjD,GAAc,qBAAXqhB,EAAKzZ,GAAuC,kBAAXyZ,EAAKzZ,GAA0ByZ,EAAmBrZ,OAAOsZ,MAASD,EAAmBrZ,OAAOuZ,OAC9H,OAAO,EAIX,MAAMlE,EAAW3d,KAAKsG,gBAAgBsX,kBAAkBtd,GAGxD,IAAIwR,EAAazJ,EAwBjB,GA1BA8T,EAAA,EAAmBxG,YAAYrV,EAAQqd,EAAU3d,KAAKkc,cAGnDQ,EAAOsB,aACRlM,EAAM9R,KAAK+G,mBAAmBiC,kBAAkB0T,EAAOsB,aACvD3V,EAAUrI,KAAK+G,mBAAmBqX,iBAAiB9d,EAAQwR,KAE3DA,EAAM9R,KAAK+G,mBAAmB+a,sBAAsBxhB,GACpD+H,EAAU,CACRH,EAAG,UACHtI,GAAIkS,EACJA,MACAiQ,QAAS/hB,KAAKsG,gBAAgBiS,cAAcvY,KAAK6T,gBAAgB6B,UAAU9V,IAC3E0Y,QAAStY,KAAKsG,gBAAgBiS,cAAcjY,GAC5C2Y,SAAS,EACT3Q,OAAQ,CAAC0Z,KAAK,GACdpY,KAAM,EACNvB,QAAS,IAEXrI,KAAK+G,mBAAmBmX,aAAa,CAAC7V,GAAU,CAAC4Z,YAAY,MAG3D5Z,aAAO,EAAPA,EAASC,SACXtI,KAAK+G,mBAAmBmF,IAAIqC,MAAM,+BAAgCmO,EAAQrU,IAGxEkX,GAAajf,EAAS,EAAG,CAC3B,MAAMqhB,EAAO3hB,KAAK6b,gBAAgB+D,SAAStf,GAC3C,GAAGqhB,GAAQA,EAAKO,aAAeP,EAAKrZ,OAAO6Z,YAAa,CACtD,MAAMC,EAAiBpiB,KAAKsG,gBAAgBC,UAAUob,EAAKO,aAG3D,OAFAliB,KAAK+G,mBAAmBsb,eAAe/hB,GAAU8hB,OACjDpiB,KAAK+G,mBAAmBub,eAAeF,GAAkB9hB,IAK7D,MAAMiiB,EAAkBviB,KAAKgH,cAAc1G,GAE3Coc,EAAOsB,YAAclM,EACrB4K,EAAOoD,kBAAoB9f,KAAK+G,mBAAmBiC,kBAAkBuZ,IAAoB7F,EAAOoD,kBAAoByC,EAAgBzC,kBAAoBpD,EAAOoD,mBAC/JpD,EAAOqD,mBAAqB/f,KAAK+G,mBAAmBiC,kBAAkBuZ,IAAoB7F,EAAOqD,mBAAqBwC,EAAgBxC,mBAAqBrD,EAAOqD,oBAE9JrD,EAAO8F,eAAe,cACR,WAAb9F,EAAOxU,IAERwU,EAAOD,UAAY8F,EAAkBA,EAAgB9F,UAAYJ,GAMrEK,EAAO/V,MAAQ3G,KAAK4F,iBAAiBa,UAAUnG,EAAQ,EAAGoc,EAAO/V,OACjE+V,EAAOpc,OAASA,EAGb+H,EAAQC,OAAOiY,cACbzO,EAAM4K,EAAOrU,EAAQC,OAAO0Z,IAAM,qBAAuB,qBAAsB3Z,EAAQC,OAAOma,QAAS,SAC9Fpa,EAAQC,OAAOma,QAG7B,MAAMtC,EAAiBngB,KAAK+G,mBAAmBqZ,kBAAkB9f,GAC3DuI,EAAQsX,EAAeE,QAAQxX,MAM3B,GAAIA,EAAMjG,QAEb,IAAIiG,EAAM6Z,MAAM,IAASC,QAAS,CACzBxC,EAAeE,QAAQuC,YAAY,CAAC9Q,IAC5C+Q,OAAO,IAASF,cAHtBxC,EAAeE,QAAQlI,QAAQrG,GAMjCqO,EAAeoB,MAAQzP,EACvBqO,EAAe2C,UAAYpG,EAAOoD,kBAClCK,EAAe4C,gBAAkBrG,EAAOqD,mBAExC/f,KAAK8b,wBAAwBkH,iBAAiB1iB,EAAQoc,EAAOwD,iBAE1DX,GAAa7C,EAAO+D,KACrBzgB,KAAKsH,kBAAkB2b,gBAAgB1D,EAAW7C,EAAO+D,KAG3DzgB,KAAK8c,uBAAuBJ,GAEzB6F,GACD,YAAkBA,EAAiB7F,GAGrC1c,KAAK+c,WAAWL,EAAQrU,EAAQuB,MAG3B,WAAW1J,EAAQ,GAAIgjB,EAAsBvI,EAAQ,GAAI0B,EAAW,GACzE,MAAM8G,EAAe9G,EAAW,EAAI,EAAIA,EACxC,IAAI+G,EAAmBpjB,KAAKud,UAAUlB,GAEtC,GAAGnc,EAAO,CACR,IAAIya,GAAS3a,KAAKoc,cAAclc,QAAUA,GAASF,KAAKoc,cAAcC,WAAaA,EAAU,CAC3Frc,KAAKoc,cAAclc,MAAQA,EAC3BF,KAAKoc,cAAcC,SAAWA,EAE9B,MAAM3R,EAAUyR,EAAA,EAAmB3E,OAAOtX,EAAOF,KAAKkc,cAEtDlc,KAAKoc,cAAcJ,QAAU,GAE7B,IAAI,MAAM1b,KAAUN,KAAKgc,QAAS,CAChC,MAAMU,EAAS1c,KAAKgc,QAAQ1b,GACzBoK,EAAQgS,EAAOpc,SAAWoc,EAAOD,YAAcJ,GAChDrc,KAAKoc,cAAcJ,QAAQ1Q,KAAKoR,GAIpC1c,KAAKoc,cAAcJ,QAAQvE,KAAK,CAAC4L,EAAIC,IAAOA,EAAG7K,MAAQ4K,EAAG5K,OAE1DzY,KAAKoc,cAAclB,MAAQlb,KAAKoc,cAAcJ,QAAQpZ,OAGxDwgB,EAAmBpjB,KAAKoc,cAAcJ,aAEtChc,KAAKoc,cAAclc,MAAQ,GAG7B,IAAIwa,EAAS,EACb,GAAGwI,EAAc,EACf,KAAMxI,EAAS0I,EAAiBxgB,UAC3BsgB,EAAcE,EAAiB1I,GAAQjC,OADJiC,KAO1C,MAAM6I,EAAYvjB,KAAKwjB,gBAAgBL,GACvC,OAAGjjB,GAASqjB,GAAaH,EAAiBxgB,QAAU8X,EAASC,EACpDzT,QAAQC,QAAQ,CACrB6U,QAASoH,EAAiBva,MAAM6R,EAAQA,EAASC,GACjDO,MAAOqI,EAAYH,EAAiBxgB,OAAS,KAC7C8f,MAAOa,GAAc7I,EAASC,GAAUyI,EAAiBxgB,SAItD5C,KAAK+G,mBAAmB0c,eAAe9I,EAAOwI,GAAcnd,KAAK0d,IAItE,GADAhJ,EAAS,EACNwI,EAAc,EACf,KAAMxI,EAAS0I,EAAiBxgB,UAC3BsgB,EAAcE,EAAiB1I,GAAQjC,OADJiC,KAS1C,MAAO,CACLsB,QAASoH,EAAiBva,MAAM6R,EAAQA,EAASC,GACjDO,MAA6B,qBAAtBwI,EAAgBxb,EAA2Bwb,EAAgB1H,QAAQpZ,OAAS8gB,EAAgBxI,MACnGwH,MAAO1iB,KAAKwjB,gBAAgBL,IAAkBzI,EAASC,GAAUyI,EAAiBxgB,W,0SCrjB3E,MAAM,EAInB,YAAoBmE,EACVT,EACAuN,EACAiI,EACAC,EACAzU,EAEArB,GAPU,KAAAc,qBACV,KAAAT,kBACA,KAAAuN,kBACA,KAAAiI,0BACA,KAAAC,kBACA,KAAAzU,oBAEA,KAAArB,YAVH,KAAA2Y,QAAgD,GAC/C,KAAA+E,WAJgB,EA2ChB,KAAAC,qBAAwBxd,IAC3BA,EAAO8Q,OACRlX,KAAK6jB,iBAAiBzd,EAAO8Q,QACrBlX,KAAK4e,QAAQxY,EAAOxG,MAE5BI,KAAKiG,UAAU4B,UAAU,gBAAiB7H,KAAK4e,QAAQxY,EAAOxG,YACvDI,KAAK4e,QAAQxY,EAAOxG,KAG7BI,KAAK+b,gBAAgB1F,YAAY,UAAWrW,KAAK4e,UAG3C,KAAAkF,0BAA6B1d,IAGnCpG,KAAK2jB,WA1DiB,EA2DtBvd,EAAOgX,MAAM3b,QAAQ,CAACsiB,EAAUrjB,KAC9B,MAAMwW,EAASlX,KAAK4e,QAAQmF,UACrB7M,EAAOyM,WACd3jB,KAAKgkB,cAAc9M,KAGrBlX,KAAKiG,UAAU4B,UAAU,eAAgBzB,EAAOgX,OAEhDpd,KAAK+b,gBAAgB1F,YAAY,UAAWrW,KAAK4e,UApDjD5e,KAAK+b,gBAAgBlG,WAAW7P,KAAM8P,IACpC9V,KAAK4e,QAAU9I,EAAM8I,UAGvB3Y,EAAUC,2BAA2B,CACnC+d,mBAAoBjkB,KAAK4jB,qBAEzBM,oBAAsB9d,IAGpB,MAAM+d,EAAa,YAAKnkB,KAAK4e,SAE7B5e,KAAKokB,kBAAiB,GAAMpe,KAAK4Y,IAC/B,IAAI,MAAMyF,KAAaF,EAAY,CACjC,MAAMJ,GAAYM,EACdzF,EAAQ0F,KAAKpN,GAAUA,EAAOtX,KAAOmkB,IACvC/jB,KAAK4jB,qBAAqB,CAAC1b,EAAG,qBAAsBtI,GAAImkB,IAI5D/jB,KAAK8jB,0BAA0B,CAAC5b,EAAG,0BAA2BkV,MAAOwB,EAAQ9d,IAAIoW,GAAUA,EAAOtX,SAItG2kB,wBAAyBvkB,KAAK8jB,4BA+B3B,oBAAoBpH,EAAgBxF,GAEzC,IAAI,MAAM5W,KAAU4W,EAAOsN,cACzB,GAAGlkB,IAAWoc,EAAOpc,OACnB,OAAO,EAKX,IAAI,MAAMA,KAAU4W,EAAOuN,cACzB,GAAGnkB,IAAWoc,EAAOpc,OACnB,OAAO,EAIX,MAAMgI,EAAS4O,EAAO5O,OAGtB,GAAGA,EAAOoc,kBAAyC,IAArBhI,EAAOD,UACnC,OAAO,EAIT,GAAGnU,EAAOqc,eAAiBjI,EAAOsD,aAChC,OAAO,EAIT,GAAG1X,EAAOsc,cAAe,CAEvB,GADgB5kB,KAAK8b,wBAAwB+I,iBAAiBnI,EAAOpc,QAEnE,OAAO,EAIX,MAAMA,EAASoc,EAAOpc,OACtB,GAAGA,EAAS,EAAG,CAEb,GAAGgI,EAAOwc,YAAc9kB,KAAKsG,gBAAgBye,YAAYzkB,GACvD,OAAO,EAIT,GAAGgI,EAAO0c,QAAUhlB,KAAKsG,gBAAgB2e,WAAW3kB,GAClD,OAAO,MAEJ,CAEL,GAAGN,KAAKsG,gBAAgBmT,MAAMnZ,GAC5B,QAASgI,EAAO4c,KAIlB,GAAG5c,EAAO6c,eAAiBnlB,KAAK6T,gBAAgBsG,UAAU7Z,GACxD,OAAO,EAIT,GAAGgI,EAAOiO,UAAYvW,KAAK6T,gBAAgBsG,UAAU7Z,GACnD,OAAO,EAIX,OAAO,EAGF,gBAAgBA,EAAgByjB,GACrC,MAAM7M,EAASlX,KAAK4e,QAAQmF,GAO5B,OALkB7M,EAAO6H,aAAa9G,cAAc9K,GAAKA,IAAM7M,IAE7D4W,EAAO6H,aAAa5G,QAAQ7X,GAGvBN,KAAKikB,mBAAmB/M,GAG1B,mBAAmBA,GACxB,IAAIqK,EAAQ7d,KAAKC,IAAI,KAAM2P,OAAOC,KAAKvT,KAAK4e,SAAS9d,IAAI2E,IAAMA,IAG/D,OAFAyR,EAAS,YAAKA,IACPtX,GAAK2hB,EAAQ,EACbvhB,KAAKikB,mBAAmB/M,GAG1B,mBAAmBA,EAAwBkO,GAAS,GACzD,MAAMC,EAAQD,EAAS,EAAI,EAE3B,OAAO,IAAWhe,UAAU,8BAA+B,CACzDie,QACAzlB,GAAIsX,EAAOtX,GACXsX,OAAQkO,OAAS3lB,EAAYO,KAAKslB,sBAAsBpO,KACvDlR,KAAMuf,IAGJA,GAODvlB,KAAK4jB,qBAAqB,CACxB1b,EAAG,qBACHtI,GAAIsX,EAAOtX,GACXsX,OAAQkO,OAAS3lB,EAAYyX,IAI1BqO,IAIJ,sBAAsBrO,GAC3B,MAAMxR,EAAoB,YAAKwR,GAY/B,MAXA,CAAC,eAAgB,gBAAiB,iBAAiBzV,QAAQI,IAEzD6D,EAAE7D,GAAO6D,EAAE7D,GAAKf,IAAKR,GAAmBN,KAAKsG,gBAAgBkD,iBAAiBlJ,MAGhF,YAAeoF,EAAE+e,cAAe,CAACnkB,EAAQI,KACpCgF,EAAEqZ,aAAayG,SAASllB,IACzBoF,EAAE+e,cAAc3D,OAAOpgB,EAAK,KAIzBgF,EAGI,iBAAiB+f,GAAY,G,yCACxC,MAAMlS,EAAOD,OAAOC,KAAKvT,KAAK4e,SAC9B,GAAGrL,EAAK3Q,SAAW6iB,EACjB,OAAOlS,EAAKzS,IAAIijB,GAAY/jB,KAAK4e,QAAQmF,IAAWtM,KAAK,CAACyH,EAAGpR,IAAMoR,EAAEyE,WAAa7V,EAAE6V,YAGtF,MAAM/E,QAAkC,IAAWxX,UAAU,6BAC7D,IAAI,MAAM8P,KAAU0H,EAClB5e,KAAK6jB,iBAAiB3M,EAAQuO,GAIhC,OAAO7G,KAGF,iBAAiB1H,EAAwB9Q,GAAS,GACvD,CAAC,eAAgB,gBAAiB,iBAAiB3E,QAAQI,IAEzDqV,EAAOrV,GAAOqV,EAAOrV,GAAKf,IAAK0F,GAAcxG,KAAKsG,gBAAgBC,UAAUC,MAG9E,YAAe0Q,EAAOuN,cAAe,CAACnkB,EAAQI,KACzCwW,EAAO6H,aAAayG,SAASllB,IAC9B4W,EAAOuN,cAAc3D,OAAOpgB,EAAK,KAIrCwW,EAAOuN,cAAgBvN,EAAO6H,aAAa3D,OAAOlE,EAAOuN,eAEtDzkB,KAAK4e,QAAQ1H,EAAOtX,IACrB0T,OAAOiC,OAAOvV,KAAK4e,QAAQ1H,EAAOtX,IAAKsX,GAEvClX,KAAK4e,QAAQ1H,EAAOtX,IAAMsX,EAG5BlX,KAAKgkB,cAAc9M,GAEhB9Q,GACDpG,KAAKiG,UAAU4B,UAAU,gBAAiBqP,GAIvC,cAAcA,GAChBA,EAAOsL,eAAe,cACpBtL,EAAOyM,YAAc3jB,KAAK2jB,aAC3B3jB,KAAK2jB,WAAazM,EAAOyM,WAAa,GAGxCzM,EAAOyM,WAAa3jB,KAAK2jB,aAG3B3jB,KAAK+b,gBAAgB1F,YAAY,UAAWrW,KAAK4e,U,ocCvK9C,MAAM,EAuFX,cAnFO,KAAA8G,wBAA+D,GAC/D,KAAAC,uBAA+D,GAC/D,KAAAC,yBAAgE,GAChE,KAAAC,iBAEH,GACG,KAAAC,eAIH,GACG,KAAAC,gBAOH,GACG,KAAAC,eAAoD,GAEpD,KAAAC,iCAAwE,GACxE,KAAAC,iBAEH,GAEG,KAAAC,kBAOH,GACG,KAAAC,mBAA8C,GAC9C,KAAAC,iBAAwB,GACxB,KAAA/E,eAA6C,GAC7C,KAAAgF,gBAA4Cpf,QAAQC,UACpD,KAAAof,QAAU,EACV,KAAAC,sBAOH,GAEG,KAAAC,sBAAwB,IAAI,IAAkB,GAE9C,KAAAC,mBAAmD,GAClD,KAAAC,2BAA4C,KAE7C,KAAAC,UAAY,EAEZ,KAAAvE,eAA6C,GAC7C,KAAAC,eAA6C,GAE7C,KAAAuE,yBAA2B,EAC3B,KAAAC,oBAAuD,GAEvD,KAAAC,mBAAiD,GACjD,KAAAtF,8BAAiE,GAEhE,KAAAuF,2BAA6B,EAC7B,KAAAC,sBAIH,GAGG,KAAAC,yBAAwC,IAAIjmB,IAE7C,KAAAiL,IAAM,OAAAib,EAAA,GAAO,WAAY,IAASrY,MAAQ,IAASsY,MAAQ,IAASC,IAAM,IAASC,MAKlF,KAAAC,cAAgB,EAEhB,KAAAC,QAAgF,GA+iGxF,KAAAC,kBAAoB,KAClBpX,aAAarQ,KAAK6mB,0BAClB7mB,KAAK6mB,yBAA2B,EAEhC,UAAUhf,UAAU,sBAAuB7H,KAAK8mB,qBAChD9mB,KAAK8mB,oBAAsB,IAG7B,KAAAY,iBAAmB,KACjB,IAAIC,EAAe,EACnB,MAAMC,EAAM5nB,KAAK+mB,mBACjB,IAAI,MAAMzmB,KAAUsnB,EAAK,CACvB,MAAMlL,EAASkL,EAAItnB,GACfoc,GAIF1c,KAAK6nB,eAAe9K,WAAWL,GAC3B,IAAgB8C,WAAWlf,KAC7BqnB,EAAejkB,KAAKC,IAAIgkB,EAAcjL,EAAOsB,aAAe,MAL9Dhe,KAAKiH,oBAAoB3G,UAClBsnB,EAAItnB,IAWK,IAAjBqnB,GACD3nB,KAAK8nB,mBAAmBH,GAG1B,UAAU9f,UAAU,sBAAuB+f,GAC3C5nB,KAAK+mB,mBAAqB,IAoOpB,KAAAgB,oBAAsB,KAC5BzmB,OAAO+O,aAAarQ,KAAKgnB,4BACzBhnB,KAAKgnB,2BAA6B,EAKlC,IAAI,MAAMgB,KAAWhoB,KAAKinB,sBAAuB,CAC/C,MAAM3mB,GAAU0nB,EAEhB,GAAG,UAAU1nB,SAAWA,IAAW,UAAU2nB,KAAKC,OAChD,SAGF,MAAMC,EAAqBnoB,KAAKinB,sBAAsB3mB,GAEtD4G,QAAQkhB,IAAI,CACV,IAAwBC,4BACxB,IAAwBC,kBAAkB,IAAgBC,uBAAuBjoB,GAAQ,MACxF0F,KAAK,EAAEkC,EAAGsgB,MACX,MAAMvK,EAAakK,EAAmBlK,YACnC,IAAwB4G,iBAAiBvkB,GAAQ,IAAU2d,EAAW3V,OAAOma,QAK3ExE,EAAW3V,OAAOma,QACnBziB,KAAKyoB,mBAAmBxK,EAAY,CAClCyK,SAAUP,EAAmBO,SAC7BF,6BAOVxoB,KAAKinB,sBAAwB,IAGvB,KAAA0B,kBAAqBviB,IAC3B,MAAMwiB,EAAWxiB,EAAOyiB,UAClBC,EAAc9oB,KAAKmmB,kBAAkByC,GAE3C,GAAGE,EAAa,CACd,MAAM,OAACxoB,EAAM,OAAEyoB,EAAM,SAAEriB,EAAQ,QAAEoN,GAAWgV,EAEtChX,EAAM9R,KAAKgJ,kBAAkB5C,EAAOxG,IAC1BI,KAAKgpB,sBAAsBlV,EAAShC,GACxCmH,QASVjZ,KAAKomB,mBAAmBtU,GAAO8W,GAR/B,CAAC5oB,KAAKogB,kBAAkB9f,GAASoG,EAAW1G,KAAKogB,kBAAkB9f,EAAQoG,QAAYjH,GACtFyX,OAAOC,SACP1V,QAAQqS,IACPA,EAAQuM,QAAQ5b,OAAOskB,KAGzB/oB,KAAKipB,gCAAgCnV,EAASiV,EAAQjX,MAOpD,KAAAoX,mBAAsB9iB,I,MAC5B,MAAMiC,EAAUjC,EAAOiC,QACjB/H,EAASN,KAAKmpB,eAAe9gB,GAC7ByL,EAAU9T,KAAKopB,mBAAmB9oB,GAClCoc,EAAS1c,KAAKgH,cAAc1G,GAG5B+oB,EAAmC,+BAAbjjB,EAAO8B,EAGnClI,KAAKke,aAAa,CAAC7V,GAAU,CAACyL,QAAS,KAEvC,MAAMwV,EAAYtpB,KAAKupB,aAAalhB,GAC9B3B,EAAW4iB,GAAaA,EAAUjpB,MAAM,KAAK,QAAKZ,EACxD,GAAGiH,IAAa2iB,GAAuBrpB,KAAK8lB,eAAexlB,IAAWN,KAAK8lB,eAAexlB,GAAQoG,GAAW,CAC3G,MAAMN,EAAS,CACb8B,EAAG,6BACHG,WAGFrI,KAAKkpB,mBAAmB9iB,GAG1B,IAAIsW,IAAW2M,EAAqB,CAClC,IAAIG,GAAO,EAKX,GAJGlpB,EAAS,IACVkpB,EAAO,IAAgBC,UAAUnpB,IAGhCkpB,EAAM,CACP,MAAMtmB,EAAgD,QAA1C,EAAAlD,KAAKyhB,8BAA8BnhB,UAAO,QAAKN,KAAKyhB,8BAA8BnhB,GAAU,IAAIW,IAC5G,GAAGiC,EAAIuL,IAAIrI,GAET,YADApG,KAAKkM,IAAIqC,MAAM,mBAAoBjO,GAIrCN,KAAKgd,yBAAyB1c,GAC9B4C,EAAIpB,IAAIsE,GAGV,OAUFpG,KAAKke,aAAa,CAAC7V,GAAU,CAACyL,YAO9B,MAAM4V,EAAiB1pB,KAAK2pB,oBAAoBthB,GAC1C8X,EAAiBngB,KAAKogB,kBAAkB9f,EAAQ+oB,EAAsB3iB,OAAWjH,GAMvF,GAJI4pB,GACFrpB,KAAK4pB,6BAA6BvhB,GAGjC8X,EAAeE,QAAQwJ,UAAUxhB,EAAQyJ,KAC1C,OAAO,EAIT,MAAMgY,EAAa3J,EAAeE,QAAQ0J,MAC1C,GAAGD,EAAWpH,MAAM,IAASC,QAAS,CACpC,IAAIld,EAAI,EACR,IAAI,MAAM7C,EAASknB,EAAWlnB,OAAQ6C,EAAI7C,KACrCyF,EAAQyJ,IAAMgY,EAAWrkB,MADsBA,GAMpDqkB,EAAWhJ,OAAOrb,EAAG,EAAG4C,EAAQyJ,UAEhCqO,EAAeE,QAAQlI,QAAQ9P,EAAQyJ,KAmBzC,GAhB4B,OAAzBqO,EAAejF,OAChBiF,EAAejF,QAGdlb,KAAKgqB,mBAAmB7J,EAAgB9X,IACzC,UAAUR,UAAU,uBAAwB,CAACvH,WAG5C+H,EAAQmY,OAAS,IAAMnY,EAAQC,OAAO0Z,KAAO3Z,EAAQ0Z,SACtD,IAAgB5M,gBAAgB9M,EAAQmY,OAAQnY,EAAQuB,MAGtD8f,GACF1pB,KAAKiqB,iBAAiB3pB,EAAQ+H,EAAQyJ,KAGrCuX,EACD,OAGF,MAAMa,GAAe7hB,EAAQC,OAAO0Z,KAAO3Z,EAAQC,OAAOma,OAQ1D,GAPG/F,IACD1c,KAAKmqB,oBAAoB9hB,EAASqU,GAC/BwN,GACDxN,EAAOsD,gBAIRkK,EAAsF,CACvF,MAAME,EAAa/hB,EAAQ/H,OAC3B,IAAI6nB,EAAqBnoB,KAAKinB,sBAAsBmD,QAC1B3qB,IAAvB0oB,IACDA,EAAqBnoB,KAAKinB,sBAAsBmD,GAAc,CAC5D1B,SAAU,EACVlI,OAAQ,IAIT2H,EAAmB3H,SAAWnY,EAAQmY,SACvC2H,EAAmB3H,OAASnY,EAAQmY,OACpC2H,EAAmBO,SAAW,GAG5BrgB,EAA4BgiB,UAC9BlC,EAAmBO,WAGrBP,EAAmBlK,WAAa5V,EAE5BrI,KAAKgnB,6BACPhnB,KAAKgnB,2BAA6B1lB,OAAO2P,WAAWjR,KAAK+nB,oBAAqB,MAK5E,KAAAuC,yBAA4BlkB,IAElC,MAAM9F,EAAS,IAAgBiG,UAAWH,EAAOI,KAA+BA,MAC1EkW,EAAS1c,KAAKgH,cAAc1G,GAE9Boc,GAGEtW,EAAOkC,OAAOma,OAGhB/F,EAAOpU,OAAOiiB,aAAc,SAFrB7N,EAAOpU,OAAOiiB,YAKvB,UAAU1iB,UAAU,sBAAuB,CAAC,CAACvH,GAASoc,IACtD1c,KAAK6nB,eAAe9G,iBAAiBrE,IATrC1c,KAAKgd,yBAAyB1c,IAa1B,KAAAkqB,oBAAuBpkB,IAC7B,MAAMiC,EAAUjC,EAAOiC,QACjB/H,EAASN,KAAKmpB,eAAe9gB,GAC7ByJ,EAAM9R,KAAKgJ,kBAAkBX,EAAQzI,IACrCkU,EAAU9T,KAAKopB,mBAAmB9oB,GACxC,QAAoBb,IAAjBqU,EAAQhC,GACT,OAKF,MAAM2Y,EAAazqB,KAAKgpB,sBAAsBlV,EAAShC,GACvD9R,KAAKke,aAAa,CAAC7V,GAAU,CAACyL,YAC9B,MAAM4W,EAAa1qB,KAAKgpB,sBAAsBlV,EAAShC,GAEvD9R,KAAK2qB,oBAAoBF,EAAYC,GAErC,MAAMhO,EAAS1c,KAAKgH,cAAc1G,GAC5BsqB,EAAelO,GAAUA,EAAOsB,cAAgBlM,EAEtD,GAAGzJ,EAAQwiB,cACND,GACD,UAAU/iB,UAAU,eAAgB,CAACvH,gBASvC,GANA,UAAUuH,UAAU,eAAgB,CAClCiM,UACAxT,SACAwR,QAGC8Y,GAAiBviB,EAA4ByiB,WAAY,CAC1D,MAAM1J,EAA6C,GACnDA,EAAe9gB,GAAUoc,EACzB,UAAU7U,UAAU,sBAAuBuZ,GAC3CphB,KAAK6nB,eAAe9G,iBAAiBrE,KAKnC,KAAAqO,oBAAuB3kB,IAG7B,MAAMmZ,EAAanZ,EAAyC4kB,WACtDzJ,EAAQvhB,KAAKgJ,kBAAmB5C,EAAyC6kB,QAAW7kB,EAAmD8kB,aACvIxkB,EAAW1G,KAAKgJ,kBAAmB5C,EAAmD+kB,YACtF7qB,EAASif,GAAaA,EAAY,IAAgBhZ,UAAWH,EAAyCI,MAEtG4kB,EAAqB,4BAAbhlB,EAAO8B,GAAgD,4BAAb9B,EAAO8B,GAAgD,sCAAb9B,EAAO8B,QAAmDzI,EAEtJqU,EAAU9T,KAAKopB,mBAAmB9oB,GAClC+f,EAAU,YAAqBvM,EAAS,QACxCkN,EAAchhB,KAAKgH,cAAc1G,GACjC+qB,EAAoBjlB,EAAyCklB,mBACnE,IAAIC,EAAiB,EACjBC,GAAgB,EAIpB,MAAMrL,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GAMtD,GAJGpG,EAAS,GAAK8qB,GACf,IAAgBjW,gBAAgB7U,GAG/BoG,EAAU,CACX,MAAM+kB,EAAazrB,KAAKkmB,iBAAiB5lB,EAAS,IAAMoG,GACxD,GAAG+kB,EAAY,CACb,MAAOnrB,EAAQwR,GAAO2Z,EAAWprB,MAAM,KAAKS,IAAI0E,IAAMA,GACtDxF,KAAK0rB,cAAcprB,EAAQwR,EAAK,oBAIpC,IAAI,IAAIrM,EAAI,EAAG7C,EAASyd,EAAQzd,OAAQ6C,EAAI7C,EAAQ6C,IAAK,CACvD,MAAMkmB,EAAYtL,EAAQ5a,GAC1B,GAAGkmB,EAAYpK,EACb,SAGF,MAAMlZ,EAAUyL,EAAQ6X,GAExB,GAAGtjB,EAAQC,OAAO0Z,MAAQoJ,EAA1B,CAIA,IAAI/iB,EAAQC,OAAOma,OACjB,MAGF,GAAG/b,EAAU,CACX,MAAMklB,EAAUvjB,EAAQwjB,SACxB,IAAID,IAAYA,EAAQE,iBAAmBF,EAAQzjB,mBAAqBzB,EACtE,SAKD2B,EAAQC,OAAOma,gBACTpa,EAAQC,OAAOma,OAClB+I,IACFA,GAAgB,GAGdnjB,EAAQC,OAAO0Z,KAAQtb,IAAYsa,QAAoCvhB,IAArB4rB,IACpDE,IAAmBvK,EAAYhB,cAGjC,IAAwB+L,OAAO,MAAQJ,KA2B3C,GAvBGP,EAAOjL,EAAe4C,gBAAkBxB,EACtCpB,EAAe2C,UAAYvB,GAE5B7a,GAAYsa,IACXoK,EAAOpK,EAAYjB,mBAAqBwB,EACtCP,EAAYlB,kBAAoByB,EAEjC6J,IACCG,EAAiB,IAAMvrB,KAAKgsB,qBAAqB1rB,GAClD0gB,EAAYhB,aAAe,EACnBuL,GAAkBvK,EAAYhD,YAAcuD,IACpDP,EAAYhB,aAAeuL,IAI/B,UAAU1jB,UAAU,gBAAiB,CAACvH,WACtCN,KAAK6nB,eAAe9G,iBAAiBC,IAGpCwK,GACD,UAAU3jB,UAAU,kBAGlBnB,GAAY6Y,EAAW,CACzB,MAAM0M,EAAgB3rB,EAAS,IAC/B,IAAI,MAAMgpB,KAAatpB,KAAKkmB,iBAC1B,GAAwC,IAArCoD,EAAU3oB,QAAQsrB,GAAsB,CACzC,MAAO3rB,EAAQwR,GAAO9R,KAAKkmB,iBAAiBoD,GAAWjpB,MAAM,KAAKS,IAAI0E,IAAMA,GAC5E,UAAUqC,UAAU,kBAAmB7H,KAAKoe,iBAAiB9d,EAAQwR,OAMrE,KAAAoa,6BAAgC9lB,IACtC,MAAMmZ,EAAanZ,EAAoD4kB,WACjEmB,EAAQ/lB,EAA6C+a,SAASrgB,IAAIlB,GAAMI,KAAKgJ,kBAAkBpJ,IAC/FU,EAASif,GAAaA,EAAYvf,KAAKosB,eAAeD,EAAK,IAAI7rB,OACrE,IAAI,MAAMwR,KAAOqa,EAAM,CACrB,MAAM9jB,EAAUrI,KAAKoe,iBAAiB9d,EAAQwR,GAC1CzJ,EAAQ4Q,iBACH5Q,EAAQC,OAAO+jB,aACtBrsB,KAAKssB,+BAA+BjkB,IAIxC,UAAUR,UAAU,sBAAuB,CAACvH,SAAQ6rB,UAG9C,KAAAI,iCAAoCnmB,IAC1C,MAAMmZ,EAAoBnZ,EAAO4kB,WAC3B7J,EAAqB,GACrB7gB,GAAkBif,EAClBc,EAAUrgB,KAAKogB,kBAAkB9f,GAAQ+f,QAAQxX,MACpDwX,EAAQzd,QACTyd,EAAQ5e,QAAS2R,MACXhN,EAAOomB,kBAAoBpZ,GAAShN,EAAOomB,mBAC7CrL,EAAS7V,KAAK8H,KAKnBhN,EAAqD+a,SAAWA,EACjEnhB,KAAKysB,uBAAuBrmB,IAGtB,KAAAqmB,uBAA0BrmB,IAChC,MAAMmZ,EAAqBnZ,EAA8C4kB,WAEnE7J,EAAY/a,EAAqD+a,SAASrgB,IAAIlB,GAAMI,KAAKgJ,kBAAkBpJ,IAC3GU,EAAiBif,GAAaA,EAAYvf,KAAKosB,eAAejL,EAAS,IAAI7gB,OAEjF,IAAIA,EACF,OAGF,IAAWosB,WAAW,6BAA+BnjB,GAC5C,IAAgBhD,UAAUgD,EAAO/C,QAAUlG,GAGpD,MAAMqsB,EAA0B,IAAI1rB,IACpC,IAAI,MAAM6Q,KAAOqP,EAAU,CACzB,MAAM9Y,EAAUrI,KAAKoe,iBAAiB9d,EAAQwR,GACxCwX,EAAYtpB,KAAKupB,aAAalhB,GACjCihB,GAAatpB,KAAK8lB,eAAexlB,IAAWN,KAAK8lB,eAAexlB,IAASgpB,EAAUjpB,MAAM,KAAK,KAC/FssB,EAAW7qB,IAAIwnB,GAInB,MAAMsD,EAAiB5sB,KAAK6sB,sBAAsBvsB,EAAQN,KAAKopB,mBAAmB9oB,GAAS6gB,GAErF2L,EAAkB/nB,MAAMzC,KAAKqqB,GAAY7rB,IAAIwoB,IACjD,MAAMyD,EAAWzD,EAAUjpB,MAAM,KACjC,OAAOL,KAAKogB,mBAAmB2M,EAAS,IAAKA,EAAS,MAGxD,CAAC/sB,KAAKogB,kBAAkB9f,IAAS8a,OAAO0R,GAAiBrrB,QAAQ0e,IAC/D,IAAI,MAAMrO,KAAO8a,EAAezZ,KAC9BgN,EAAeE,QAAQ5b,QAAQqN,GAE9B8a,EAAe1R,OACS,OAAzBiF,EAAejF,OACfiF,EAAejF,MAAQ,IACvBiF,EAAejF,OAAS0R,EAAe1R,MACpCiF,EAAejF,MAAQ,IACxBiF,EAAejF,MAAQ,MAK7B,UAAUrT,UAAU,iBAAkB,CAACvH,SAAQ6S,KAAMyZ,EAAezZ,OAEpE,MAAM6N,EAAchhB,KAAKgH,cAAc1G,GACpC0gB,IACE4L,EAAenK,SAChBzB,EAAYhB,cAAgB4M,EAAenK,OAE3C,UAAU5a,UAAU,gBAAiB,CAACvH,YAGrCssB,EAAezZ,KAAK6N,EAAYhD,cACjChe,KAAKiH,mBAAmB3G,KAKtB,KAAA0sB,gBAAmB5mB,IACzB,MAAMmZ,EAAoBnZ,EAAO4kB,WAC3B1qB,GAAUif,EACVI,EAAwB,IAAgBC,QAAQL,GAEhD0N,EAAa,IAAgBxD,SAASlK,MAEnBI,EAAQhgB,WAAaggB,EAAQrX,OAAOsZ,cACRniB,IAAlCO,KAAK6lB,iBAAiBvlB,aAGhCN,KAAK6lB,iBAAiBvlB,GAC7B,UAAUuH,UAAU,oBAAqBvH,IAG3C,MAAMoc,EAAS1c,KAAKgH,cAAc1G,KAC7Boc,IAAWuQ,IACXA,EACDjtB,KAAKiH,oBAAoBsY,GAEtB7C,IACD1c,KAAK6nB,eAAelL,WAAWrc,GAC/B,UAAUuH,UAAU,cAAe,CAACvH,SAAQoc,cAM5C,KAAAwQ,sBAAyB9mB,IAE/B,MAAMmZ,EAAoBnZ,EAAO4kB,WAC3B1qB,GAAUif,EAEhBvf,KAAK6nB,eAAelL,WAAWrc,UAExBN,KAAK6lB,iBAAiBvlB,GAC7BN,KAAKiH,oBAAoBsY,GAAWvZ,KAAK,KACvC,UAAU6B,UAAU,iBAAkBvH,MAIlC,KAAA6sB,4BAA+B/mB,IACrC,MAAMgnB,EAAQhnB,EAAOgnB,MAEftb,EAAM9R,KAAKgJ,kBAAkB5C,EAAOxG,IACpCyI,EAAUrI,KAAKoe,kBAAkBhY,EAAO4kB,WAAYlZ,IACtDzJ,EAAQ4Q,SAAW5Q,EAAQ+kB,OAAS/kB,EAAQ+kB,MAAQA,IACtD/kB,EAAQ+kB,MAAQA,EAChB,UAAUvlB,UAAU,gBAAiB,CAACiK,MAAKsb,YAIvC,KAAAC,4BAA+BjnB,IAErC,MAEMulB,EAAY3rB,KAAK8hB,sBAFR,OAGTzZ,EAAe,CACnBH,EAAG,UACHtI,GAAI+rB,EACJ5J,QAAS,IAAgBxJ,cANZ,OAObD,QAAS,IAAgBC,cAPZ,OAQbjQ,OAAQ,CAACma,QAAQ,GACjB7Y,MAAOxD,EAAOknB,YAAc,aAAM,IAAS,IAAkBxjB,iBAC7DzB,QAASjC,EAAOiC,QAChBklB,MAAOnnB,EAAOmnB,MACdnlB,SAAUhC,EAAOgC,UAEf,IAAgBolB,QAdL,QAeb,IAAgBlX,aAAa,CAAC,CAC5BpO,EAAG,OACHtI,GAjBW,MAkBX0I,OAAQ,CAACmlB,UAAU,GACnBlU,YAAa,EACb/D,WAAY,WACZuB,MAAO,WAGX/W,KAAKke,aAAa,CAAC7V,GAAU,CAAC4Z,YAAY,IAEvC7b,EAAOknB,aACRttB,KAAKshB,eA3BQ,OA2BiBqK,EAC9B3rB,KAAKkpB,mBAAmB,CACtBhhB,EAAG,mBACHG,cAKE,KAAAqlB,uBAA0BtnB,IAChC,MAAMmZ,EAAyB,gCAAbnZ,EAAO8B,EAAsC9B,EAAO4kB,gBAAavrB,EAC7Ea,EAASif,GAAaA,EAAY,IAAgBhZ,UAAWH,EAAuCI,MAYpG2a,EAAW/a,EAAO+a,SAASrgB,IAAIlB,GAAMI,KAAKgJ,kBAAkBpJ,IAE5DkU,EAAU9T,KAAKopB,mBAAmB9oB,GAClCqtB,EAAkBxM,EAASjK,OAAOpF,IAAQgC,EAAQhC,KAC9B6b,EAAgB/qB,OAASsE,QAAQkhB,IAAIuF,EAAgB7sB,IAAIgR,GAAO9R,KAAK4tB,kBAAkBttB,EAAQwR,KAAS5K,QAAQC,WACxHqE,QAAQ,K,MACxB,MAAMqiB,EAA0B,QAAb,EAAAznB,EAAOkC,cAAM,eAAEsU,OAClC,GAAGiR,EACD,IAAI,MAAM/b,KAAOqP,EAAU,CAETrN,EAAQhC,GAChBxJ,OAAOsU,QAAS,OAU1B,IAAI,MAAM9K,KAAOqP,EAAU,QAETrN,EAAQhC,GACTxJ,OAAOsU,cASnB5c,KAAKgmB,eAAe1lB,GAC3B,UAAgBuV,WAAW7P,KAAK8P,WACvBA,EAAMgY,qBAAqBxtB,GAClC,UAAUuH,UAAU,uBAAwB,CAACvH,SAAQ6rB,KAAMhL,EAAUvE,OAAQiR,SAK3E,KAAAE,uBAA0B3nB,IAChC,MAAM,KAACI,EAAI,gBAAE0Z,GAAmB9Z,EAChC,GAAc,eAAXI,EAAK0B,EAAoB,CAC1B,MAAM5H,EAAS,IAAgBiG,UAAWC,EAA+BA,MAEnEkW,EAAS1c,KAAKgH,cAAc1G,GAC/Boc,IACDA,EAAOwD,gBAAkBA,EACzB,UAAUrY,UAAU,yBAA0B6U,GAC9C1c,KAAK6nB,eAAe9G,iBAAiBrE,MAKnC,KAAAsR,4BAA+B5nB,IACrC,MAAMiC,EAAUjC,EAAOiC,QACjB/H,EAASN,KAAKmpB,eAAe9gB,GAE7ByL,EAAU9T,KAAK4lB,yBAAyBtlB,GAC9C,GAAGwT,EAAS,CACV,MAAMhC,EAAM9R,KAAKgJ,kBAAkBX,EAAQzI,IAErC6qB,EAAazqB,KAAKgpB,sBAAsBlV,EAAShC,GACvD9R,KAAKke,aAAa,CAAC7V,GAAU,CAACyL,UAASma,aAAa,IACpD,MAAMvD,EAAa1qB,KAAKgpB,sBAAsBlV,EAAShC,GAEvD,GAAI2Y,EAAWxR,QAGR,CACkBjZ,KAAK2pB,oBAAoBthB,IAE9C,UAAUR,UAAU,gBAAiB,CAACvH,SAAQwR,IAAKzJ,EAAQyJ,WAL7D9R,KAAK2qB,oBAAoBF,EAAYC,GACrC,UAAU7iB,UAAU,eAAgB,CAACiM,UAASxT,SAAQwR,IAAKzJ,EAAQyJ,QAUjE,KAAAoc,gCAAmC9nB,IACzC,MAAM9F,EAAS,IAAgBiG,UAAUH,EAAOI,MAE1CsN,EAAU9T,KAAK4lB,yBAAyBtlB,GAC9C,GAAGwT,EAAS,CACV,MAAMqY,EAAO/lB,EAAO+a,SAASrgB,IAAIlB,GAAMI,KAAKgJ,kBAAkBpJ,IAC9DI,KAAK6sB,sBAAsBvsB,EAAQwT,EAASqY,GAE5C,UAAUtkB,UAAU,mBAAoB,CAACvH,SAAQ6rB,WAr7HnD,UAAUjmB,2BAA2B,CACnCioB,gBAAiBnuB,KAAK2oB,kBAEtByF,2BAA4BpuB,KAAKkpB,mBACjCmF,iBAAkBruB,KAAKkpB,mBACvBoF,wBAAyBtuB,KAAKkpB,mBAE9BqF,uBAAwBvuB,KAAKsqB,yBAE7BkE,kBAAmBxuB,KAAKwqB,oBACxBiE,yBAA0BzuB,KAAKwqB,oBAE/BkE,iCAAkC1uB,KAAK+qB,oBACvC4D,kCAAmC3uB,KAAK+qB,oBACxC6D,uBAAwB5uB,KAAK+qB,oBAC7B8D,wBAAyB7uB,KAAK+qB,oBAC9B+D,uBAAwB9uB,KAAK+qB,oBAC7BgE,wBAAyB/uB,KAAK+qB,oBAE9BiE,kCAAmChvB,KAAKksB,6BACxC+C,2BAA4BjvB,KAAKksB,6BAEjCgD,+BAAgClvB,KAAKusB,iCAErC4C,qBAAsBnvB,KAAKysB,uBAC3B2C,4BAA6BpvB,KAAKysB,uBAElC4C,cAAervB,KAAKgtB,gBAGpBsC,oBAAqBtvB,KAAKktB,sBAE1BqC,0BAA2BvvB,KAAKmtB,4BAEhCqC,0BAA2BxvB,KAAKqtB,4BAEhCoC,qBAAsBzvB,KAAK0tB,uBAC3BgC,4BAA6B1vB,KAAK0tB,uBAElCiC,qBAAsB3vB,KAAK+tB,uBAE3B6B,0BAA2B5vB,KAAKguB,4BAEhC6B,8BAA+B7vB,KAAKkuB,kCAItC,UAAUpZ,GAAG,4BAA6B,EAAEjT,MAAKiuB,eAC/C9vB,KAAK+vB,sBAAsB/pB,KAAKgW,IAC9B,IAAIgU,EACsBA,EAAf,gBAARnuB,EAAqC6a,GAAWA,EAAOpc,OAAS,EACnD,qBAARuB,EAA0C6a,GAAW,IAAgBqI,aAAarI,EAAOpc,QAC9Eoc,GAAW,IAAgBuI,WAAWvI,EAAOpc,QAEhE0b,EACC9E,OAAO8Y,GACPvuB,QAAQib,IACP,UAAU7U,UAAU,yBAA0B6U,SAKpD,UAAU5H,GAAG,kBAAoB1F,IAC/B,MAAM6gB,EAAY7gB,EAClB6gB,EAAU9c,KAAK1R,QAASqQ,IACtB,MAAMzJ,EAAUrI,KAAKosB,eAAeta,GACpC,IAAIzJ,EAAS,OACbA,EAAQklB,MAAQ,CACdrlB,EAAG,sBACH0J,QAASse,EAAA,EAAmBC,WAAWF,EAAUrwB,KAGnD,MAAMU,EAASN,KAAKmpB,eAAe9gB,GAC7ByL,EAAU9T,KAAKopB,mBAAmB9oB,GACxC,UAAUuH,UAAU,eAAgB,CAClCiM,UACAxT,SACAwR,YAKN,UAAUgD,GAAG,gBAAkB1F,IAC7B,MAAM,OAAC9O,EAAM,SAAEoG,EAAQ,MAAEC,GAASyI,EAElC,GAAG1I,EAAU,OAEb,MAAMgW,EAAS1c,KAAKgH,cAAc1G,GAC/Boc,IAAWhW,GACZgW,EAAO/V,MAAQA,EACf3G,KAAK6nB,eAAe/K,uBAAuBJ,GAC3C1c,KAAK6nB,eAAe9K,WAAWL,GAE/B,UAAU7U,UAAU,eAAgB,CAClCvH,SACAqG,QACA8R,MAAOiE,EAAOjE,SAGhBzY,KAAKiH,mBAAmB3G,KAI5B,UAAgBuV,WAAW7P,KAAK8P,IAC3BA,EAAMsa,eACPpwB,KAAK4mB,UAAY9Q,EAAMsa,gBAI3B,IAAwBvlB,QAGnB,YACL7K,KAAK2e,eAAiB,IAAI,EAAe3e,KAAM,IAAiB,IAAiB,IAAyB,UAAiB,IAAqC,WAChKA,KAAK6nB,eAAiB,IAAI,EAAe7nB,KAAM,IAAiB,IAAiB,IAAiB,IAAkB,IAAyB,UAAiB,IAAmB,KAG5K,iBAAiBoI,GACtB,IAAIioB,EAAc,YAAKjoB,GAOvB,OANAioB,EAAY5uB,QAAS6uB,IACH,6BAAbA,EAAOpoB,IACRooB,EAAOpoB,EAAI,gCACXooB,EAAOrb,QAAU,IAAgBwG,aAAa6U,EAAOrb,YAGlDob,EAGF,yBAAyBtH,EAAgBwH,EAAsBhgB,G,QACpE,MAAMigB,EAA6C,QAAlC,EAAAxwB,KAAKwmB,sBAAsBuC,UAAO,QAAK/oB,KAAKwmB,sBAAsBuC,GAAU,GACvFnB,EAA4B,QAAtB,EAAA4I,EAASD,UAAa,QAAKC,EAASD,GAAgB,CAACE,SAAU,eAI3E,OAFA7I,EAAIrX,SAAWA,EAERqX,EAAI6I,SAGN,YAAYpoB,EAAcpJ,EAAc0I,EAK1C,IAKH,MAAM,IAACmK,EAAG,OAAExR,GAAU+H,EAEtB,GAAGA,EAAQC,OAAOiY,YAChB,OAAOvgB,KAAK0wB,yBAAyB5e,EAAK,OAASzJ,GAE1CrI,KAAK2wB,YAAYtoB,EAASpJ,EAAM0I,IAI3C,IAAIS,EAAWT,EAAQS,UAAY,GAChCnJ,IACDA,EAAO,IAAkB2xB,cAAc3xB,EAAMmJ,IAG/C,MAAMyoB,EAAgBlpB,EAAQmpB,eAAiBzoB,EAAQC,OAAOyoB,aAAe1oB,EAAQuB,UAAOnK,GAC5F,OAAO,IAAW2H,UAAU,uBAAwB,CAClDZ,KAAM,IAAgBgD,iBAAiBlJ,GACvCV,GAAIyI,EAAQzI,GACZyI,QAASpJ,EACTsuB,MAAO5lB,EAAQqpB,SACf5oB,SAAUA,EAASxF,OAAS5C,KAAKixB,iBAAiB7oB,QAAY3I,EAC9D8I,WAAYZ,EAAQupB,UACpBL,kBACC7qB,KAAMqB,IACP,IAAkBI,qBAAqBJ,IACrCkH,IAGF,GAFAvO,KAAKkM,IAAIqC,MAAM,qBAAsBA,IAElCA,GAAwB,yBAAfA,EAAMkB,KAOlB,OAHGlB,GAAwB,kBAAfA,EAAMkB,OAChBlB,EAAM4iB,SAAU,GAEXjqB,QAAQyD,OAAO4D,GANpBA,EAAM4iB,SAAU,IAUf,SAAS7wB,EAAgBrB,EAAc0I,EAazC,IACH,GAAoB,iBAAX,IAAwB1I,EAAK2D,OACpC,OAKC+E,EAAQjB,WAAaiB,EAAQypB,eAC9BzpB,EAAQypB,aAAezpB,EAAQjB,UAIjC,GAAGzH,EAAK2D,OADW,KACU,CAC3B,MAAMmqB,EAAW,YAAoB9tB,EAFpB,MAGjBA,EAAO8tB,EAAS,GAEbA,EAASnqB,OAAS,UACZ+E,EAAQ0L,QAGjB,IAAI,IAAI5N,EAAI,EAAGA,EAAIsnB,EAASnqB,SAAU6C,EACpCwL,WAAW,KACTjR,KAAKqxB,SAAS/wB,EAAQysB,EAAStnB,GAAIkC,IAClClC,GAIPnF,EAAS,IAAgBgxB,kBAAkBhxB,IAAWA,EAEtD,IAAI8H,EAAWT,EAAQS,UAAY,GAC/BT,EAAQ4pB,WACVtyB,EAAO,IAAkB2xB,cAAc3xB,EAAMmJ,IAG/C,IAAIioB,EAAcrwB,KAAKixB,iBAAiB7oB,GACpCioB,EAAYztB,SACdytB,OAAc5wB,GAGhB,MAAM4I,EAAUrI,KAAKwxB,wBAAwBlxB,EAAQqH,GACrDU,EAAQD,SAAWA,EACnBC,EAAQA,QAAUpJ,EAElB,MAAMmyB,EAAezpB,EAAQypB,aAAepxB,KAAK0J,mBAAmB/B,EAAQypB,mBAAgB3xB,EACtF+f,EAAY,IAAgBA,UAAUlf,GAEzCqH,EAAQ0L,UACThL,EAAQklB,MAAQ,CACdrlB,EAAG,sBACH0J,QAASjK,EAAQ0L,UAIrB,MAAMoe,EAAe3c,IAChBA,EACDzM,EAAQkG,OAAQ,SAETlG,EAAQkG,MAEjB,UAAU1G,UAAU,qBAGtBQ,EAAQqpB,KAAO,KACbD,GAAY,GACZ,MAAME,EAAuC,GAK7C,IAAIC,EAJD5xB,KAAKqmB,iBAAiB/lB,KACvBqxB,EAAmBE,eAAiB7xB,KAAKqmB,iBAAiB/lB,GAAQqrB,WAKlEiG,EADCjqB,EAAQ4pB,SACI,IAAWO,eAAe,+BAAgC,CACrEtrB,KAAM,IAAgBgD,iBAAiBlJ,GACvCuoB,UAAWxgB,EAAQwgB,UACnB1gB,gBAAiBipB,QAAgB3xB,EACjCsyB,SAAUpqB,EAAQqqB,QAClBpyB,GAAI+H,EAAQsqB,SACZC,YAAavqB,EAAQwqB,YACpBR,GAEU,IAAWG,eAAe,uBAAwB,CAC7DvpB,WAAYZ,EAAQupB,UACpB1qB,KAAM,IAAgBgD,iBAAiBlJ,GACvC+H,QAASpJ,EACT4pB,UAAWxgB,EAAQwgB,UACnB1gB,gBAAiBipB,QAAgB3xB,EACjC2I,SAAUioB,EACV6B,YAAavqB,EAAQwqB,WACrBtB,cAAelpB,EAAQmpB,mBAAgBrxB,EACvC2yB,OAAQzqB,EAAQyqB,QACfT,GAILC,EAAW5rB,KAAMqB,IAEE,2BAAdA,EAAQa,GACTG,EAAQuB,KAAOvC,EAAQuC,KACvBvB,EAAQzI,GAAKyH,EAAQzH,GACrByI,EAAQklB,MAAQlmB,EAAQkmB,MACxBllB,EAAQD,SAAWf,EAAQe,SAG3Bf,EAAU,CACRa,EAAG,UACH8L,MAAO,GACP4C,MAAO,GACPyb,IAAK,EACLhrB,QAAS,CAAC,CACRa,EAAG,kBACH2gB,UAAWxgB,EAAQwgB,UACnBjpB,GAAIyH,EAAQzH,IACX,CACDsI,EAAGP,EAAQmpB,aAAe,4BAA+BtR,EAAY,0BAA4B,mBACjGnX,QAASA,EACToY,IAAKpZ,EAAQoZ,IACb6R,UAAWjrB,EAAQirB,cAGfjrB,EAAQA,SAChBA,EAAQA,QAAQ5F,QAAS2E,IACP,uBAAbA,EAAO8B,IACR9B,EAAOmsB,OAAQ,KAQrB,IAAkB9qB,qBAAqBJ,IAKtC,KACDoqB,GAAY,KACXjmB,QAAQ,KACNxL,KAAKqmB,iBAAiB/lB,KAAYqxB,UAC5B3xB,KAAKqmB,iBAAiB/lB,KAIjCN,KAAKqmB,iBAAiB/lB,GAAUqxB,GAGlC3xB,KAAKwyB,qBAAqBnqB,EAAS,CACjC4lB,cAAetmB,EAAQmpB,mBAAgBrxB,EACvCiH,SAAUiB,EAAQjB,SAClByrB,WAAYxqB,EAAQwqB,aAIjB,SAAS7xB,EAAgBmyB,EAAgC9qB,EAuB3D,IACHrH,EAAS,IAAgBgxB,kBAAkBhxB,IAAWA,EAItD,MAAM+H,EAAUrI,KAAKwxB,wBAAwBlxB,EAAQqH,GAC/CypB,EAAezpB,EAAQypB,aAAepxB,KAAK0J,mBAAmB/B,EAAQypB,mBAAgB3xB,EAE5F,IAAIizB,EAAoBC,EAExB,MAAMC,EAAW,cAAeH,EAAOA,EAAKI,UAAYJ,EAAKhjB,KACvDqjB,EAAWL,aAAgBM,KAAON,EAAKO,KAAO,GAC9CC,IAAeR,aAAgBM,MAAWN,aAAgBrhB,MAChE,IAAI8hB,EAAUvrB,EAAQurB,SAAW,GAEjClzB,KAAKkM,IAAI,WAAYumB,EAAMG,GAE3B,MAAMxqB,EAAWT,EAAQS,UAAY,GAClC8qB,IACDA,EAAU,IAAkBtC,cAAcsC,EAAS9qB,IAGrD,MAAM+qB,EAAkC,GAElCC,EAAU,CAAC,aAAc,YAAa,aAAazyB,QAAQiyB,IAAa,EAE9E,IAAI5gB,EAAgB9N,EAEhBmvB,EACJ,GAAGJ,EACDP,EAAa,WACbC,EAAc,QACT,GAAkC,IAA/BC,EAASjyB,QAAQ,WAAmB,CAAC,aAAaA,QAAQiyB,IAAa,EAAG,CAClFF,EAAa,QACbC,EAAc,UAAuC,QAA3BC,EAASvyB,MAAM,KAAK,GAAe,MAAQ,OACrEgzB,EAAa,+BAEV1rB,EAAQ2rB,iBACTZ,EAAa,QACbrqB,EAAQC,OAAO+jB,cAAe,GAGhC,IAAIkH,EAAsD,CACxDrrB,EAAG,yBACHI,OAAQ,CACNkrB,MAAO7rB,EAAQ2rB,gBAEjB1jB,SAAUjI,EAAQiI,SAClB6jB,SAAU9rB,EAAQ8rB,UAAY,GAGhCN,EAAW7nB,KAAKioB,QACX,GAAI5rB,EAAQ+rB,QAIZ,GAAGN,EAAS,CACjBV,EAAa,QACbC,EAAc,SAAWC,EAASvyB,MAAM,KAAK,GAC7CgzB,EAAa,+BAEb,MAAMM,EAAY,CAChBzrB,EAAG,YACH0rB,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,OACXqD,KAAM,OACNqkB,SAAU,KACVtlB,KAAMikB,EAAKjkB,MAGbwD,EAAQ,CACN9J,EAAG,QACHtI,GAAI,GAAKyI,EAAQzI,GACjBm0B,MAAO,CAACJ,GACRC,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,QAGb,MAAM4nB,EAAeC,EAAA,EAAmBC,gBAAgBliB,EAAO2hB,EAAUlkB,MACzEukB,EAAaG,WAAa1B,EAAKjkB,KAC/BwlB,EAAa3iB,IAAM1J,EAAQysB,WAAa,GAExCpiB,EAAQqiB,EAAA,EAAiBpiB,UAAUD,QAC9B,GAAkC,IAA/B4gB,EAASjyB,QAAQ,UAAiB,CAC1C+xB,EAAa,QACbC,EAAc,YACdU,EAAa,+BAEb,IAAIiB,EAA2D,CAC7DpsB,EAAG,yBACHI,OAAQ,CACNisB,cAAe5sB,EAAQ6sB,gBAEzBf,SAAU9rB,EAAQ8rB,SAClBG,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,QAGb+mB,EAAW7nB,KAAKgpB,QAEhB5B,EAAa,WACbC,EAAc,YAAcC,EAASvyB,MAAM,KAAK,GAChDgzB,EAAa,uCAjDbX,EAAa,WACbC,EAAc,YAAcC,EAASvyB,MAAM,KAAK,GAChDgzB,EAAa,kCAoDf,GAFAF,EAAW7nB,KAAK,CAACpD,EAAG,4BAA6BusB,UAAW3B,GAAYH,KAEJ,IAAjE,CAAC,WAAY,QAAS,QAAS,SAAShyB,QAAQ+xB,KAAuBO,EAAY,CACpF,MAAMyB,EAAsB,GAC5BxwB,EAAW,CACTgE,EAAG,WACHtI,GAAI,GAAKyI,EAAQzI,GACjB6zB,SAAU9rB,EAAQ8rB,SAClBN,aACAS,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,OACXsoB,SACA7B,UAAWD,EACXpkB,KAAMikB,EAAKjkB,MAGb,MAAMwlB,EAAeC,EAAA,EAAmBC,gBAAgBhwB,GAIxD,IAAIywB,EACJ,GAJAX,EAAaG,WAAa1B,EAAKjkB,KAC/BwlB,EAAa3iB,IAAM1J,EAAQysB,WAAa,GAGrChB,EACDD,EAAW7nB,KAAK,CACdpD,EAAG,6BACH0rB,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,SAGbuoB,EAAQ,CACNzsB,EAAG,YACH0rB,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,OACXqD,KAAM,OACNjB,KAAMikB,EAAKjkB,WAER,GAAkB,UAAfkkB,GACL/qB,EAAQitB,SAAU,CACnBD,EAAQ,CACNzsB,EAAG,YACH0rB,EAAGjsB,EAAQ1E,MACX4wB,EAAGlsB,EAAQyE,OACXqD,KAAM,OACNjB,KAAM7G,EAAQktB,UAAUrmB,MAG1B,MAAMsmB,EAAoBb,EAAA,EAAmBC,gBAAgBhwB,EAAUywB,EAAMllB,MAC7EqlB,EAAkBX,WAAaQ,EAAMnmB,KACrCsmB,EAAkBzjB,IAAM1J,EAAQitB,SAIjCD,GACDD,EAAOppB,KAAKqpB,GAUdzwB,EAAW6wB,EAAA,EAAe7iB,QAAQhO,GAGpClE,KAAKkM,IAAI,WAAYwmB,EAAYC,EAAaF,EAAKhjB,KAAM9H,GAEzD,MAAMqtB,EAAY/B,OAAaxzB,EAAY,IAAI,IAAqB,CAClEw1B,aAAc,UACdC,gBAAgB,EAChBC,UAAU,IAGNC,EAAe,cAElBJ,IACDA,EAAUK,cAAcD,GACxBA,EAAarJ,OAAS,KACpB,MAAMxd,EAAQ,IAAIO,MAAM,qBACxBP,EAAMykB,KAAO,aACboC,EAAazqB,OAAO4D,IAGtB6mB,EAAaE,MAAMjqB,IACD,eAAbA,EAAI2nB,MAA0BuC,IAC/Bv1B,KAAKkM,IAAI,oBAAqBqhB,GAE9B6H,EAAazqB,OAAOU,GACpBrL,KAAKw1B,qBAAqBntB,EAAQwgB,WAClC7oB,KAAKy1B,UAAUn1B,EAAQ,CAAC4H,EAAG,6BAExBwtB,aAAa,EAAbA,EAAe3J,SAChB2J,EAAc3J,aAMtB,MAAMwB,EAAQ0F,OAAaxzB,EAAY,CACrCyI,EAAG8J,EAAQ,oBAAsB,uBACjC1J,OAAQ,GACR0sB,YACAhjB,QACA9N,WACAqG,QAAS6qB,GAGX/sB,EAAQD,SAAWA,EACnBC,EAAQA,QAAU6qB,EAClB7qB,EAAQklB,MAAQ0F,EAAa,CAC3B/qB,EAAG,uBACHI,OAAQ,GACRpE,SAAUuuB,GACRlF,EAEJ,MAAMkE,EAAe3c,IAChBA,EACDzM,EAAQkG,OAAQ,SAETlG,EAAQkG,MAGjB,UAAU1G,UAAU,qBAGtB,IAAI0tB,GAAW,EACbG,EAA0D,KAmJ5D,OAjJArtB,EAAQqpB,KAAO,KACb,GAAGuB,EAAY,CACb,MAAM,GAACrzB,EAAE,YAAE2Z,EAAW,eAAEoc,GAAkBlD,EAEpCmD,EAAyB,CAC7B1tB,EAAG,qBACHtI,GAAI,CACFsI,EAAG,gBACHtI,KACA2Z,cACAoc,mBAIJP,EAAajuB,QAAQyuB,QAChB,GAAGnD,aAAgBM,MAAQN,aAAgBrhB,KAAM,CACtD,MAAMykB,EAAO,KAOX,IAAIC,EAmEJ,OAzEIP,IAAYltB,EAAQkG,QACtBgnB,GAAW,EACXG,EAAgBzB,EAAA,EAAmB8B,OAAOtD,GAC1C2C,EAAaY,UAAU,CAACC,KAAM,EAAGC,MAAOzD,EAAKjkB,QAI7B,UAAfkkB,GAA0B/qB,EAAQysB,YACnC0B,EAAqB,IAAI5uB,QAAQ,CAACC,EAASwD,MACrBhD,EAAQktB,UAAY3tB,QAAQC,QAAQQ,EAAQktB,WAAa,YAAqBltB,EAAQysB,YAC9FpuB,KAAKmwB,IACXA,EAGFlC,EAAA,EAAmB8B,OAAOI,GAAMnwB,KAAKmB,EAASwD,GAF9CxD,EAAQ,OAITwD,MAIP+qB,GAAiBA,EAAc1vB,KAAWowB,GAAc,kCAStD,IAAIR,EACJ,cALOvtB,EAAQklB,MAAMyH,UAErBoB,EAAUpD,KAAOL,EACjB4C,GAAW,EAEJ7C,GACL,IAAK,QACHkD,EAAa,CACX1tB,EAAG,0BACHuqB,KAAM2D,GAER,MAEF,QACER,EAAa,CACX1tB,EAAG,6BACHuqB,KAAM2D,EACNvD,UAAWD,EACXO,cAIN,GAAG2C,EACD,IACE,MAAMM,QAAkBN,EACvBF,EAAqDjB,MAAQyB,EAC9D,MAAM/qB,GACNrL,KAAKkM,IAAIqC,MAAM,+BAAgClD,GAInD+pB,EAAajuB,QAAQyuB,MACpB,KACDnE,GAAY,KAGdiE,EAAcW,kBAAmBC,IAK/B,MAAMC,EAAW7yB,KAAKC,IAAI,EAAGD,KAAK8yB,MAAM,IAAMF,EAASL,KAAOK,EAASJ,QACpE7C,GACDrzB,KAAKy1B,UAAUn1B,EAAQ,CAAC4H,EAAGmrB,EAAYiD,SAAqB,EAAXC,IAEnDnB,EAAaY,UAAUM,KAGlBlB,GAGNztB,EAAQ8uB,cACTZ,IAEA71B,KAAKymB,sBAAsBnb,KAAK,CAC9BuqB,SAKN,OAAOT,GAGTp1B,KAAKwyB,qBAAqBnqB,EAAS,CACjCouB,cAAe9uB,EAAQ8uB,cACvBxI,cAAetmB,EAAQmpB,mBAAgBrxB,EACvCiH,SAAUiB,EAAQjB,SAClByrB,WAAYxqB,EAAQwqB,aAGlBxqB,EAAQ8uB,eACVrB,EAAapvB,KAAK4vB,IAChB51B,KAAKy1B,UAAUn1B,EAAQ,CAAC4H,EAAG,4BAEpB,IAAWd,UAAU,qBAAsB,CAChDsvB,WAAY/uB,EAAQ+uB,WACpBlwB,KAAM,IAAgBgD,iBAAiBlJ,GACvCitB,MAAOqI,EACPvtB,QAAS6qB,EACTrK,UAAWxgB,EAAQwgB,UACnB1gB,gBAAiBipB,EACjBP,cAAelpB,EAAQmpB,aACvBsB,OAAQzqB,EAAQyqB,OAChBhqB,WACA8pB,YAAavqB,EAAQwqB,aACpBnsB,KAAMqB,IACP,IAAkBI,qBAAqBJ,IACrCkH,IACF,GAAkB,UAAfmkB,GACc,MAAfnkB,EAAMooB,OACU,6BAAfpoB,EAAMkB,MACQ,4BAAflB,EAAMkB,MAIN,OAHAlB,EAAM4iB,SAAU,EAChBuB,EAAa,gBACbrqB,EAAQqpB,OAIVD,GAAY,OAKX,CAACppB,UAASkC,QAAS6qB,GAGf,UAAU90B,EAAgBs2B,EAAejvB,EAiBjD,I,yCAOH,GAJGA,EAAQjB,WAAaiB,EAAQypB,eAC9BzpB,EAAQypB,aAAezpB,EAAQjB,UAGb,IAAjBkwB,EAAMh0B,OACP,OAAO5C,KAAK62B,SAASv2B,EAAQs2B,EAAM,GAAI,OAAF,wBAAMjvB,GAAYA,EAAQmvB,gBAAgB,KAGjFx2B,EAAS,IAAgBgxB,kBAAkBhxB,IAAWA,EACtD,MAAM8wB,EAAezpB,EAAQypB,aAAepxB,KAAK0J,mBAAmB/B,EAAQypB,mBAAgB3xB,EAE5F,IAAIyzB,EAAUvrB,EAAQurB,SAAW,GAC7B9qB,EAAWT,EAAQS,UAAY,GAChC8qB,IACDA,EAAU,IAAkBtC,cAAcsC,EAAS9qB,IAGrDpI,KAAKkM,IAAI,YAAa0qB,EAAOjvB,GAE7B,MAAMovB,EAAU,MAAO/2B,KAAKunB,cAEtBpG,EAAWyV,EAAM91B,IAAI,CAAC2xB,EAAM/xB,KAChC,MAAMs2B,EAAUrvB,EAAQmvB,gBAAgBp2B,GAClCu2B,EAAC,eACLR,eAAe,EACf/C,QAAS/rB,EAAQ+rB,QACjB5C,aAAcnpB,EAAQmpB,aACtBsB,OAAQzqB,EAAQyqB,OAChBhB,eACA1qB,SAAUiB,EAAQjB,SAClBqwB,WACGC,GASL,OANW,IAARt2B,IACDu2B,EAAE/D,QAAUA,EACZ+D,EAAE7uB,SAAWA,GAIRpI,KAAK62B,SAASv2B,EAAQmyB,EAAMwE,GAAG5uB,UAGrCV,EAAQjB,SACT,IAAiBwwB,UAAU52B,EAAQqH,EAAQjB,UAE3C,IAAiBD,UAAUnG,EAAQqH,EAAQjB,SAAU,KAAM,CAACE,QAAQ,IAMtE,MAAM6qB,EAAc,CAACppB,EAAcyM,KAC9BA,EACDzM,EAAQkG,OAAQ,SAETlG,EAAQkG,MAGjB,UAAU1G,UAAU,qBAGhBsvB,EAAY,IAAgB3tB,iBAAiBlJ,GAC7C82B,EAAUC,IACdr3B,KAAKy1B,UAAUn1B,EAAQ,CAAC4H,EAAG,4BAE3BlI,KAAKymB,sBAAsBnb,KAAK,CAC9BuqB,KAAM,IACG,IAAWzuB,UAAU,0BAA2B,CACrDZ,KAAM2wB,EACNG,YAAaD,EACblvB,gBAAiBipB,EACjBP,cAAelpB,EAAQmpB,aACvBsB,OAAQzqB,EAAQyqB,OAChBF,YAAavqB,EAAQwqB,aACpBnsB,KAAMqB,IACP,IAAkBI,qBAAqBJ,IACrCkH,IACF4S,EAAS1f,QAAQ4G,GAAWopB,EAAYppB,GAAS,SAMnDkvB,EAAwCpW,EAASrgB,IAAI,CAACuH,EAAS3H,IAC3D2H,EAAQqpB,OAA+B1rB,KAAM4vB,GAC5C,IAAWxuB,UAAU,uBAAwB,CAClDZ,KAAM2wB,EACN5J,MAAOqI,KAGV5vB,KAAKwxB,IACJ,IAAI5B,EACJ,GAAsB,sBAAnB4B,EAAatvB,EAA2B,CACzC,MAAM8J,EAAQqiB,EAAA,EAAiBpiB,UAAUulB,EAAaxlB,OACtD4jB,EAAavB,EAAA,EAAiBoD,SAASzlB,QAClC,GAAsB,yBAAnBwlB,EAAatvB,EAA8B,CACnD,MAAMwvB,EAAM3C,EAAA,EAAe7iB,QAAQslB,EAAatzB,UAChD0xB,EAAab,EAAA,EAAe4C,cAAcD,GAG5C,MAAME,EAAqC,CACzC1vB,EAAG,mBACHqlB,MAAOqI,EACP/M,UAAWxgB,EAAQwgB,UACnBxgB,QAAS6qB,EACT9qB,YASF,OALG8qB,IACDA,EAAU,GACV9qB,EAAW,IAGNwvB,IACNtC,MAAOjqB,IACR,GAAgB,eAAbA,EAAI2nB,KACL,OAAO,KAKT,MAFAhzB,KAAKkM,IAAIqC,MAAM,+BAAgClD,EAAKhD,GACpDopB,EAAYppB,GAAS,GACfgD,KAIVnE,QAAQkhB,IAAImP,GAAUvxB,KAAK6xB,IACzBT,EAAOS,EAAO3gB,OAAOC,eAIlB,UAAU7W,EAAgBs1B,EAAiBjuB,EAU7C,IACHrH,EAAS,IAAgBgxB,kBAAkBhxB,IAAWA,EAGtD,MAAM+H,EAAUrI,KAAKwxB,wBAAwBlxB,EAAQqH,GAC/CypB,EAAezpB,EAAQypB,aAAepxB,KAAK0J,mBAAmB/B,EAAQypB,mBAAgB3xB,EAE5F,IAAI8tB,EACJ,OAAOqI,EAAW1tB,GAChB,IAAK,iBAAkB,CACrB0tB,EAAWkC,KAAKl4B,GAAKyI,EAAQzI,GAC7Bm4B,EAAA,EAAgBC,SAASpC,EAAWkC,KAAM,CACxC5vB,EAAG,cACHmd,MAAO,EACP4S,aAAc,EACd3vB,OAAQ,KAGV,MAAM,KAACwvB,EAAI,QAAEptB,GAAWqtB,EAAA,EAAgBG,QAAQ,GAAK7vB,EAAQzI,IAC7D2tB,EAAQ,CACNrlB,EAAG,mBACH4vB,OACAptB,WAGF,OA+DJrC,EAAQklB,MAAQA,EAkBhBllB,EAAQqpB,KAAO,KACb,MAAMC,EAA0B,GAKhC,IAAIC,EAJD5xB,KAAKqmB,iBAAiB/lB,KACvBqxB,EAAmBE,eAAiB7xB,KAAKqmB,iBAAiB/lB,GAAQqrB,WAKlEiG,EADCjqB,EAAQ4pB,SACI,IAAWO,eAAe,+BAAgC,CACrEtrB,KAAM,IAAgBgD,iBAAiBlJ,GACvCuoB,UAAWxgB,EAAQwgB,UACnB1gB,gBAAiBipB,QAAgB3xB,EACjCsyB,SAAUpqB,EAAQqqB,QAClBpyB,GAAI+H,EAAQsqB,SACZC,YAAavqB,EAAQwqB,YACpBR,GAEU,IAAWG,eAAe,qBAAsB,CAC3DtrB,KAAM,IAAgBgD,iBAAiBlJ,GACvCitB,MAAOqI,EACP/M,UAAWxgB,EAAQwgB,UACnB1gB,gBAAiBipB,QAAgB3xB,EACjC4I,QAAS,GACT6pB,YAAavqB,EAAQwqB,WACrBtB,cAAelpB,EAAQmpB,aACvBsB,OAAQzqB,EAAQyqB,QACfT,GAGLC,EAAW5rB,KAAMqB,IACZA,EAAQA,SACTA,EAAQA,QAAQ5F,QAAS2E,IACP,uBAAbA,EAAO8B,IACR9B,EAAOmsB,OAAQ,KAKrB,IAAkB9qB,qBAAqBJ,IACrCkH,IA1CJ,UAAU1G,UAAU,sBA4CjB2D,QAAQ,KACNxL,KAAKqmB,iBAAiB/lB,KAAYqxB,UAC5B3xB,KAAKqmB,iBAAiB/lB,KAGjCN,KAAKqmB,iBAAiB/lB,GAAUqxB,GAGlC3xB,KAAKwyB,qBAAqBnqB,EAAS,CACjC4lB,cAAetmB,EAAQmpB,mBAAgBrxB,EACvCiH,SAAUiB,EAAQjB,SAClByrB,WAAYxqB,EAAQwqB,aAehB,qBAAqB9pB,EAAcV,EAKtC,IACH,MAAMgkB,EAAYtjB,EAAQzI,GACpBU,EAASN,KAAKmpB,eAAe9gB,GAC7ByL,EAAUnM,EAAQsmB,YAAcjuB,KAAKm4B,4BAA4B73B,GAAUN,KAAKopB,mBAAmB9oB,GAEzG,GAAGqH,EAAQsmB,YAETjuB,KAAKke,aAAa,CAAC7V,GAAU,CAACyL,UAASma,aAAa,EAAMhM,YAAY,IACtEhR,WAAW,KACT,UAAUpJ,UAAU,gBAAiB,CAACvH,SAAQwR,IAAK6Z,KAClD,OACE,CAIL,MAAM5X,EAA6B,CACjC/T,KAAKogB,kBAAkB9f,GACvBqH,EAAQjB,SAAW1G,KAAKogB,kBAAkB9f,EAAQqH,EAAQjB,eAAYjH,GAGxE,IAAI,MAAMqU,KAAWC,EAChBD,GACDA,EAAQuM,QAAQlI,QAAQwT,GAK5B3rB,KAAKke,aAAa,CAAC7V,GAAU,CAACyL,UAASmO,YAAY,IACnDhR,WAAW,KACTjR,KAAKmqB,oBAAoB9hB,GACzB,UAAUR,UAAU,iBAAkB,CAACiM,UAASxT,SAAQwR,IAAK6Z,KAC5D,IAGDhkB,EAAQ8uB,eAAiB9uB,EAAQwqB,aAChCxqB,EAAQjB,SACT,IAAiBwwB,UAAU52B,EAAQqH,EAAQjB,UAE3C,IAAiBD,UAAUnG,EAAQqH,EAAQjB,SAAU,KAAM,CAACE,QAAQ,KAIxE5G,KAAKmmB,kBAAkB9d,EAAQwgB,WAAa,CAC1CvoB,SACAyoB,OAAQ4C,EACRjlB,SAAUiB,EAAQjB,SAClBoN,YAGEnM,EAAQ8uB,eAAiBpuB,EAAQqpB,MACnCzgB,WAAW5I,EAAQqpB,KAAM,GAMrB,wBAAwBpxB,EAAgBqH,GAQ3CA,EAAQjB,WAAaiB,EAAQypB,eAC9BzpB,EAAQypB,aAAezpB,EAAQjB,UAqBjC,MAlBqB,CACnBwB,EAAG,UACHtI,GAAII,KAAK8hB,sBAAsBxhB,GAC/ByhB,QAAS/hB,KAAKo4B,eAAe93B,GAC7BgY,QAAS,IAAgBC,cAAcjY,GACvCgI,OAAQtI,KAAKq4B,cAAc/3B,GAC3BsJ,KAAMjC,EAAQmpB,cAAiB,aAAM,GAAQ,IAAkBhnB,iBAC/DzB,QAAS,GACTyiB,WAAYnjB,EAAQovB,QACpBlO,UAAW,OAAAyP,EAAA,KACXzM,SAAU7rB,KAAKu4B,oBAAoB5wB,EAAQypB,aAAczpB,EAAQjB,UACjE8xB,WAAY7wB,EAAQ4pB,SACpBkH,aAAc9wB,EAAQ8wB,aACtBC,QAAS14B,KAAK24B,gBAAgBr4B,GAC9B8sB,MAAO,IAAgBrI,YAAYzkB,IAAW,EAC9Cs4B,SAAS,GAML,oBAAoBxH,EAAsByH,GAChD,MAAMC,EAAS,CACb5wB,EAAG,qBACHC,gBAAiBipB,GAAgByH,GAOnC,OAJGA,GAAgBC,EAAO3wB,kBAAoB0wB,IAC5CC,EAAOhN,gBAAkB+M,GAGpBC,EAGD,gBAAgBx4B,GACtB,IAAIo4B,EACJ,GAAG,IAAgB3T,YAAYzkB,GAAS,CACtC,MAAMy4B,EAAcC,EAAA,QAAkBC,WAAW34B,IAC9Cy4B,aAAW,EAAXA,EAAaG,kBACdR,EAAU,CACRxwB,EAAG,iBACHmd,MAAO,EACP/c,OAAQ,CACN6wB,UAAU,GAEZnO,WAAY+N,EAAYG,eACxBR,QAAS,EACTU,YAAa,IAKnB,OAAOV,EAMD,eAAep4B,G,QACrB,OAAGA,EAAS,IAAM,IAAgBykB,YAAYzkB,KAA+D,QAApD,EAA4C,QAA5C,MAAgBuW,QAAQvW,GAAQ+4B,oBAAY,eAAE/wB,cAAM,eAAEgxB,iBAC7G,EAEO,IAAgB/gB,cAAc,IAAgB7C,UAAU9V,IAI3D,cAAcU,GACpB,MAAMgI,EAAc,GAcpB,OAZGhI,IADY,IAAgBoV,UAAU9V,KAEvC0I,EAAO0Z,KAAM,EAET,IAAgBxC,UAAUlf,IAAY,IAAgBmZ,MAAMnZ,KAC9DgI,EAAOma,QAAS,IAIjB,IAAgBsC,YAAYzkB,KAC7BgI,EAAOixB,MAAO,GAGTjxB,EAGD,sBAAsBhI,EAAgBk5B,GAC5C,MAAMthB,EAAO,IAAgBxC,UAAU9V,GACvC,GAAG45B,EAAgBhZ,SAAWtI,GAAQshB,EAAgBl5B,SAAW4X,IAASshB,EAAgBnP,SACxF,OAGF,MAAMoP,EAA+C,CACnDvxB,EAAG,mBACHmd,MAAO,EACPzb,KAAM4vB,EAAgB5vB,MA0BxB,OAvBG4vB,EAAgBnP,UACjBoP,EAAU1X,QAAUyX,EAAgBnP,SAAStI,QAC7C0X,EAAUC,UAAYF,EAAgBnP,SAASqP,UAC/CD,EAAUE,YAAcH,EAAgBnP,SAASsP,cAEjDF,EAAU1X,QAAU,IAAgBxJ,cAAcihB,EAAgBhZ,QAClEiZ,EAAUE,YAAcH,EAAgBG,aAGvC,IAAgB5U,YAAYyU,EAAgBl5B,UAC1Ck5B,EAAgBG,cACjBF,EAAUE,YAAcH,EAAgBG,aAG1CF,EAAUG,aAAeJ,EAAgB55B,IAIxCU,IAAW4X,IACZuhB,EAAUI,kBAAoBL,EAAgB55B,GAC9C65B,EAAUK,gBAAkB,IAAgBvhB,cAAcihB,EAAgBl5B,SAGrEm5B,EAGF,0BAA0Bn5B,EAAgB0R,GAC/C,MAAMuP,EAAQ9U,OAAOstB,iBACf1xB,EAAU,CACdH,EAAG,iBACH8xB,OAAQ,CACN9xB,EAAG,gCACH8J,SAEFF,IAAKyP,EACLjhB,SACAsJ,KAAOoI,EAAsBpI,KAC7B4W,OAAQlgB,GAIV,OADAN,KAAKopB,mBAAmB9oB,GAAQihB,GAASlZ,EAClCA,EAGF,oBAAoBA,EAAoBqU,EAA0B1c,KAAKgH,cAAcqB,EAAQ/H,SAClG,GAAGoc,EAAQ,CACTA,EAAOsB,YAAc3V,EAAQyJ,IAEN9R,KAAKogB,kBAAkB/X,EAAQ/H,QACvCihB,MAAQlZ,EAAQyJ,IAE/B9R,KAAK6nB,eAAe/K,uBAAuBJ,GAAQ,EAAOrU,GAE1DrI,KAAKgd,yBAAyB3U,EAAQ/H,OAAQoc,IAI3C,qBAAqBkM,GAC1B,MAAME,EAAc9oB,KAAKmmB,kBAAkByC,GAM3C,GAAGE,EAAa,CACd,MAAM,OAACxoB,EAAM,OAAEyoB,EAAM,QAAEjV,GAAWgV,EAC5B3I,EAAiBngB,KAAKogB,kBAAkB9f,GAe9C,OAbA,IAAkBmH,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,uBACHiZ,SAAU,CAAC4H,MAIf5I,EAAeE,QAAQ5b,OAAOskB,UAEvB/oB,KAAKmmB,kBAAkByC,UACvB9U,EAAQiV,IAER,EAGT,OAAO,EAGI,uB,yCACX,MAAmBkR,EAAuB,GAC1C,IAAI,IAAI5d,EAAW,EAAGA,EAAW,IAAKA,EAAU,CAC9C,IAAIuE,EAAa,EACjB,OAAQ,CACN,MAAM,QAAC5E,SAAiB,EAAmByH,eAJjC,IAIuDpH,EAAUuE,GAE3E,IAAG5E,EAAQpZ,OAcT,MAdiB,CACjBq3B,EAAW3uB,QAAQ0Q,GACnB,MAAMU,EAASV,EAAQA,EAAQpZ,OAAS,GAGlCtC,EAAS,IAAgBiG,UAAUmW,EAAOlW,MAC1CsL,EAAM9R,KAAKgJ,kBAAkB0T,EAAOsB,aAG1C,GAFA4C,EAAa5gB,KAAKoe,iBAAiB9d,EAAQwR,GAAKlI,MAE5CgX,EAAY,CACd3U,QAAQsC,MAAM,0CAA2CmO,GACzD,SAQR,IAAIkL,EAAkC,GAMtC,OALAqS,EAAWx4B,QAAQib,IACjBkL,EAAIlL,EAAOpc,QAAUoc,IAEvB,UAAU7U,UAAU,sBAAuB+f,GAEpCqS,KAGI,oBAAoB/5B,EAAQ,GAAImc,EAAW,G,yCACtD,MAAmB4d,EAAuB,GAC1C,KAAM5d,EAAW,IAAKA,EAAU,CAC9B,IAAI6G,EAAc,EAClB,OAAQ,CACN,MAAM,QAAClH,SAAiB,EAAmBke,iBAAiBh6B,EAAOgjB,EAJzD,IAI6E7G,GAEvF,IAAGL,EAAQpZ,OAIT,MAHAq3B,EAAW3uB,QAAQ0Q,GACnBkH,EAAclH,EAAQA,EAAQpZ,OAAS,GAAG6V,OAAS,GAOzD,OAAOwhB,KAGF,iBAAiB/5B,EAAQ,GAAIgjB,EAAsBvI,EAAQ,GAAI0B,EAAW,GAC/E,OAAOrc,KAAK6nB,eAAesS,WAAWj6B,EAAOgjB,EAAavI,EAAO0B,GAG5D,qBAAqB/b,EAAgBoG,G,MAC1C,MAAMyZ,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GACtD,GAAGA,EAAU,CACX,MAAM0zB,EAAqBp6B,KAAKogB,kBAAkB9f,GAC5CwiB,EAAYpf,KAAKC,IAAgC,QAA5B,EAAAy2B,EAAmBtX,iBAAS,QAAI,EAAG3C,EAAe2C,WAE7E,OADgB9iB,KAAKoe,iBAAiB9d,EAAQ6f,EAAeoB,OAC7CjZ,OAAO0Z,KAAOc,EAAY3C,EAAeoB,MAAQuB,EAAY,EACxE,CACL,MAAMza,EAAUrI,KAAKoe,iBAAiB9d,EAAQ6f,EAAeoB,OACvDuB,EAAYxiB,EAAS,EAAIoD,KAAKC,IAAIwc,EAAe2C,UAAW3C,EAAe4C,iBAAmB5C,EAAe2C,UACnH,OAAQza,EAAQC,OAAO0Z,KAAOc,EAAY3C,EAAeoB,MAAQuB,EAAY,GAI1E,eAAenI,EAAe0B,EAAkBuE,GACrD,MAAM5E,EAAUhc,KAAK6nB,eAAetK,UAAUlB,GAC9C,IAEI6G,EAAc,EAclB,YAZkBzjB,IAAfmhB,IACDA,EAAa5gB,KAAK6nB,eAAewS,cAAche,IAG9CuE,IACDsC,EAA2B,MAAbtC,EACdA,GAAc,IAAkB9W,kBAM3B,IAAWwwB,gBAAgB,sBAAuB,CACvD7d,UAAWJ,EACXke,YAAa3Z,EACb4Z,UAnBa,EAoBbC,YAAa,IAAgBjxB,iBAnBZ,GAoBjBmR,QACAC,KAAM,GACL,CAED8f,YAAY,IACX10B,KAAMwX,IACP,GAAuB,gCAApBA,EAActV,EAAqC,OAAO,KAE1D,KACDlI,KAAKkM,IAAI,8BAA+BsR,EAAcxB,QAAS,OAAF,UAAMwB,EAAcxB,QAAQ,KAO3F,IAAgB1F,aAAakH,EAAcxJ,OAC3C,IAAgB2C,aAAa6G,EAAc5G,OAC3C5W,KAAKke,aAAaV,EAAc2D,UAEhC,IAAIwZ,IAAuB/Z,EACvBga,GAAa,EACjB,MAAMC,EAA2C,GACjD,YAAgBrd,EAAcxB,QAAsBU,I,MAGlD1c,KAAK6nB,eAAe1J,WAAWzB,EAAwB,QAAhB,EAAAA,EAAOD,iBAAS,QAAIJ,QAEtC5c,IAAlBid,EAAOpc,SAQP4iB,GAAexG,EAAOjE,MAAQyK,IAC/BljB,KAAKgd,yBAAyBN,EAAOpc,OAAQoc,GAC7Cke,GAAa,GAKX56B,KAAK0J,mBAAmBgT,EAAOoD,oBAAuB9f,KAAK0J,mBAAmBgT,EAAOqD,sBACvF8a,EAAane,EAAOpc,QAAUoc,EAE9B1c,KAAKkM,IAAIqC,MAAM,eAAgBmO,IAO7Bie,GACC,IAAgBnb,UAAU,IAAgBjZ,UAAUmW,EAAOlW,SAC9DxG,KAAK8nB,mBAAmBpL,EAAOsB,aAC/B2c,GAAuB,MAIxBrnB,OAAOC,KAAKsnB,GAAcj4B,QAEzB5C,KAAKiH,mBAAmBqM,OAAOC,KAAKsnB,GAAc/5B,IAAIlB,IAAOA,IAAKoG,KAAK,KACrE,UAAU6B,UAAU,sBAAuBgzB,GAE3C,IAAI,IAAIv6B,KAAUu6B,EAChB,UAAUhzB,UAAU,gBAAiB,CAACvH,QAASA,MAMvD,MAAM4a,EAASsC,EAAuDtC,MActE,QAZIsC,EAAcxB,QAAQpZ,SACvBsY,GACDc,EAAQpZ,QAAUsY,IAClBlb,KAAK6nB,eAAeiT,iBAAiBze,GAAU,GAG9Cue,EACD56B,KAAKgd,2BAEL,UAAUnV,UAAU,sBAAuB,IAGtC2V,IAIJ,gBAAgBld,EAAgBy6B,EAAoB5O,EAAgBxkB,EAItE,IACHrH,EAAS,IAAgBgxB,kBAAkBhxB,IAAWA,EACtD6rB,EAAOA,EAAKtjB,QAAQ4O,KAAK,CAACyH,EAAGpR,IAAMoR,EAAIpR,GAEvC,MAAMkX,EAKF,GAEEgW,EAAc7O,EAAKrrB,IAAIgR,I,QAC3B,MAAM0nB,EAAmCx5B,KAAKoe,iBAAiB2c,EAAYjpB,GACrEzJ,EAA2BrI,KAAKwxB,wBAAwBlxB,EAAQqH,GACtEU,EAAQgiB,SAAWrqB,KAAKi7B,sBAAsB36B,EAAQk5B,GAErD,CAAC,WAAY,WAAY,UAAW,QAAS,eAAgB,SAA2C/3B,QAAQI,IAE/GwG,EAAQxG,GAAO23B,EAAgB33B,KAGjC,MAAMqC,EAA+D,QAAnD,EAAAmE,EAAQklB,aAA2C,eAAErpB,SACvE,GAAGA,EAAU,CACyB,CAAC,QAAS,SACrCshB,SAASthB,EAASuL,QACxBpH,EAAsBC,OAAO+jB,cAAe,GAIjD,GAAGmN,EAAgB1O,WAAY,EACmB,QAAlC,EAAA9F,EAAOwU,EAAgB1O,mBAAW,QAAK9F,EAAOwU,EAAgB1O,YAAc,CAAC/B,OAAQ,MAAO/oB,KAAKunB,cAAepG,SAAU,KAClIA,SAAS7V,KAAKjD,GAGtB,OAAOA,IAGT,IAAI,MAAM0uB,KAAW/R,EAAQ,CAC3B,MAAMkW,EAAQlW,EAAO+R,GAClBmE,EAAM/Z,SAASve,OAAS,GACzBs4B,EAAM/Z,SAAS1f,QAAQ4G,IACrBA,EAAQyiB,WAAaoQ,EAAMnS,SAKjCiS,EAAYv5B,QAAQ4G,IAClBrI,KAAKwyB,qBAAqBnqB,EAAS,CACjC4lB,cAAetmB,EAAQmpB,mBAAgBrxB,MAI3C,MAAMkyB,EAAuC,GAC1C3xB,KAAKqmB,iBAAiB/lB,KACvBqxB,EAAmBE,eAAiB7xB,KAAKqmB,iBAAiB/lB,GAAQqrB,WAGpE,MAAMphB,EAA2C,IAAWunB,eAAe,2BAA4B,CACrGqJ,UAAW,IAAgB3xB,iBAAiBuxB,GAC5Cn7B,GAAIusB,EAAKrrB,IAAIgR,GAAO9R,KAAK0J,mBAAmBoI,IAC5C+W,UAAWmS,EAAYl6B,IAAIuH,GAAWA,EAAQwgB,WAC9CuS,QAAS,IAAgB5xB,iBAAiBlJ,GAC1C+6B,cAAe1zB,EAAQ2zB,YACvBlJ,OAAQzqB,EAAQyqB,OAChBvB,cAAelpB,EAAQmpB,cACtBa,GAAoB3rB,KAAMqB,IAC3BrH,KAAKkM,IAAI,2BAA4B7E,GACrC,IAAkBI,qBAAqBJ,KACtCmE,QAAQ,KACNxL,KAAKqmB,iBAAiB/lB,KAAYqxB,UAC5B3xB,KAAKqmB,iBAAiB/lB,KAKjC,OADAN,KAAKqmB,iBAAiB/lB,GAAUqxB,EACzBpnB,EAGF,sBAAsBuJ,EAA0B6X,GACrD,OAAO7X,GAAWA,EAAQ6X,IAAc,CACtCzjB,EAAG,eACHtI,GAAI+rB,EACJ1S,SAAS,EACT3Q,OAAQ,IAIJ,uBAmBN,MAlBiC,GAqB5B,mBAAmBhI,G,MACxB,OAA2C,QAApC,EAAAN,KAAK0lB,wBAAwBplB,UAAO,QAAKN,KAAK0lB,wBAAwBplB,GAAUN,KAAKu7B,uBAGvF,eAAe5P,GACpB,IAAI,MAAMrrB,KAAUN,KAAK0lB,wBAAyB,CAChD,GAAG,IAAgBlG,WAAWlf,GAC5B,SAGF,MAAM+H,EAAUrI,KAAK0lB,wBAAwBplB,GAAQqrB,GACrD,GAAGtjB,EACD,OAAOA,EAIX,OAAOrI,KAAKgpB,sBAAsB,KAAM2C,GAGnC,iBAAiBrrB,EAAgBqrB,GACtC,OAAIrrB,EAIGN,KAAKgpB,sBAAsBhpB,KAAKopB,mBAAmB9oB,GAASqrB,GAH1D3rB,KAAKosB,eAAeT,GAMxB,eAAetjB,GAGpB,OAFaA,EAAQiQ,SAAW,IAAgB/R,UAAU8B,EAAQiQ,UAAY,EAKzE,kBAAkBhY,GACvB,OAAON,KAAK6nB,eAAe5G,UAAU3gB,GAGhC,cAAcA,GACnB,OAAON,KAAK6nB,eAAe7gB,cAAc1G,GAGpC,mBAAmBA,GAQxB,MAPA,GAAG8a,OAAO9a,GAAQmB,QAAQnB,IACpBN,KAAKknB,yBAAyBzY,IAAInO,IACpCN,KAAKknB,yBAAyBplB,IAAIxB,KAKnCN,KAAKw7B,2BAAmCx7B,KAAKw7B,2BACzCx7B,KAAKw7B,2BAA6B,IAAIt0B,QAAQ,CAACC,EAASwD,KAC7DsG,WAAW,KACT,MAAM8J,EAAQhW,MAAMzC,KAAKtC,KAAKknB,0BAA0BpmB,IAAIR,GAAU,IAAgBm7B,uBAAuBn7B,IAC7GN,KAAKknB,yBAAyBvlB,QAE9B,IAAWyF,UAAU,0BAA2B,CAAC2T,UAAQ/U,KAAMoK,IAC7DpQ,KAAK6nB,eAAepK,aAAarN,GACjCjJ,KACCwD,GAAQa,QAAQ,KACjBxL,KAAKw7B,2BAA6B,QAEnC,KAIC,eAAerE,EAAgBuE,EAAqBC,GAC1D,OAAO,IAAWv0B,UAAU,yBAA0B,CACpDw0B,WAAYF,EACZC,OAAQA,EACRn1B,KAAM2wB,EACNlM,OAAQ,IACPjlB,KAAM61B,IACP,IAAkBp0B,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,YACHuY,IAAKob,EAAgBpb,IACrB6R,UAAWuJ,EAAgBvJ,cAI3BuJ,EAAgBnhB,QAIb1a,KAAK87B,eAAe3E,EAAWuE,KAI7B,aAAap7B,EAAgBo7B,EAAqBC,G,yCAC7D,GAAG,IAAgBnc,UAAUlf,GAAS,CACpC,MAAMiK,EAAUvK,KAAK+7B,WAAWz7B,EAAQ,EAAG,GAErC07B,EAAgBzxB,aAAmBrD,cAAgBqD,EAAUA,EAE7DgV,GAAajf,EACbihB,EAAQya,EAAc3b,QAAQ,IAAM,EAC1C,OAAO,IAAWjZ,UAAU,yBAA0B,CACpDuY,QAAS,IAAgBsc,gBAAgB1c,GACzC0L,OAAQ1J,IACPvb,KAAK,KACN,IAAkByB,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,iCACH8iB,WAAYzL,EACZiN,iBAAkBjL,MAIf,IAIX,OAAOvhB,KAAK87B,eAAe,IAAgBtyB,iBAAiBlJ,GAASo7B,EAAWC,GAAQ31B,KAAK,YACpFhG,KAAK6lB,iBAAiBvlB,UACtBN,KAAK0lB,wBAAwBplB,GAEjCo7B,EACD,UAAU7zB,UAAU,eAAgB,CAACvH,YAErCN,KAAK6nB,eAAelL,WAAWrc,GAE/B,UAAUuH,UAAU,cAAe,CAACvH,iBAKnC,mBAAmBA,GACxB,OAAO4G,QAAQkhB,IAAI,CACjB,UAAgBvS,WAChB7V,KAAKk8B,iBAAiB57B,KAEvB0F,KAAK,EAAE8P,EAAO8G,MACb9G,EAAMgY,qBAAqBxtB,GAAUsc,EAAO2E,MAC5C,UAAU1Z,UAAU,qBAAsB,CAACvH,SAAQihB,MAAO3E,EAAO2E,UAI9D,iBAAiBjhB,G,MACtB,MAAM6M,EAA+B,QAA3B,EAAAnN,KAAKgmB,eAAe1lB,UAAO,QAAKN,KAAKgmB,eAAe1lB,GAAU,GACxE,OAAG6M,EAAE5C,QAAgB4C,EAAE5C,QACf4C,EAAEoU,MAAcra,QAAQC,QAAQgG,GAEjCA,EAAE5C,QAAUvK,KAAKm8B,UAAU,CAChC77B,SACA87B,YAAa,CAACl0B,EAAG,6BACjBqZ,MAAO,EACP5G,MAAO,IACN3U,KAAKoK,I,MAGN,OAFAjD,EAAE+N,MAAQ9K,EAAO8K,MACjB/N,EAAEoU,MAAyB,QAAjB,EAAAnR,EAAOiQ,QAAQ,UAAE,eAAEvO,IACtB3E,IACN3B,QAAQ,YACF2B,EAAE5C,UAIN,oBAAoBjK,EAAgBwR,EAAauqB,EAAcjK,EAAekK,GACnF,OAAO,IAAWl1B,UAAU,+BAAgC,CAC1DZ,KAAM,IAAgBgD,iBAAiBlJ,GACvC+7B,QACAjK,SACAmK,WAAYD,EACZ18B,GAAII,KAAK0J,mBAAmBoI,KAC3B9L,KAAKqB,IAEN,IAAkBI,qBAAqBJ,KAIpC,iBAAiB/G,GACtB,OAAO,IAAW8G,UAAU,4BAA6B,CACvDZ,KAAM,IAAgBgD,iBAAiBlJ,KACtC0F,KAAK61B,IAUN,GATA,IAAkBp0B,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,YACHuY,IAAKob,EAAgBpb,IACrB6R,UAAWuJ,EAAgBvJ,cAI3BuJ,EAAgBnhB,OAAQ,CAC1B,MAAM5G,EAAU9T,KAAKopB,mBAAmB9oB,GACxC,IAAI,MAAMwR,KAAOgC,EAAS,CACxB,MAAMzL,EAAUyL,EAAQhC,GACrBzJ,EAAQC,OAAOsU,eACTvU,EAAQC,OAAOsU,OAO1B,OAHA,UAAU/U,UAAU,uBAAwB,CAACvH,SAAQk8B,UAAU,WACxDx8B,KAAKgmB,eAAe1lB,IAEpB,EAGT,OAAON,KAAKy8B,iBAAiBn8B,KAI1B,aAAawqB,GAClB,MAAMoQ,EAAQl7B,KAAK2lB,uBAAuBmF,GAC1C,IAAuBziB,EAAiBM,EAAgCP,EAApEs0B,EAAgB,EACpB,IAAI,MAAMj3B,KAAKy1B,EAAO,CACpB,MAAMyB,EAAIzB,EAAMz1B,GAChB,GAAGk3B,EAAEt0B,QAAS,CACZ,KAAKq0B,EAAgB,EAAG,MACxBr0B,EAAUs0B,EAAEt0B,QACZM,EAAgBg0B,EAAEh0B,cAClBP,EAAWu0B,EAAEv0B,UAUjB,OANGs0B,EAAgB,IACjBr0B,OAAU5I,EACVkJ,OAAgBlJ,EAChB2I,OAAW3I,GAGN,CAAC4I,UAASD,WAAUO,iBAGtB,eAAemiB,GACpB,OAAO,YAAqB9qB,KAAK2lB,uBAAuBmF,GAAa,OAIhE,iBAAiBziB,GACtB,OAAGA,aAAO,EAAPA,EAASyiB,YAAmB9qB,KAAK48B,eAAev0B,EAAQyiB,YAC/C,CAACziB,EAAQyJ,KAGhB,eAAezJ,EAAcw0B,GAClC,MAAM7a,EAAmB,GACzB,GAAG3Z,EAAQyiB,WAAY,CACrB,MAAMhX,EAAU9T,KAAK2lB,uBAAuBtd,EAAQyiB,YACpD,IAAI,MAAMhZ,KAAOgC,EAAS,CACxB,MAAMzL,EAAUyL,EAAQhC,GACrB+qB,EAAOx0B,IACR2Z,EAAI1W,KAAKjD,SAIVw0B,EAAOx0B,IACR2Z,EAAI1W,KAAKjD,GAIb,OAAO2Z,EAGF,sBAAsB1hB,GAC3B,MAAMoc,EAAS1c,KAAKgH,cAAc1G,GAClC,OAAON,KAAKgJ,mBAAkB0T,aAAM,EAANA,EAAQsB,cAAe,GAAG,GAGnD,kBAAkB2N,EAAmBmR,GAAO,GACjD,MAAMzhB,EAAI,EAAmB0hB,kBACvBC,EAAMF,IAAS98B,KAAKumB,QAAU,EACpC,OAAGoF,GAAatQ,EACXyhB,EACMnR,GAAaqR,EAAO,EAAmBC,qBAAuB,GAGhEtR,EAGFtQ,GAAKsQ,EAAY,EAAmBsR,sBAAwBD,EAAO,EAAmBC,qBAAuB,IAM/G,mBAAmBtR,GACxB,MAAMtQ,EAAI,EAAmB0hB,kBAC7B,GAAGpR,EAAYtQ,EACb,OAAOsQ,EAGT,MAAMuR,EAAI,EAAmBD,qBAAuB,EAC9CE,EAAOxR,EAAYuR,EAKzB,OAJGC,IAASD,IACVvR,GAAawR,EAAO,IAGdxR,EAAYtQ,GAAK,EAAmB4hB,qBAGvC,mBAAmBtR,EAAmByR,GAC3C,OAAOp9B,KAAKgJ,kBAAkBhJ,KAAK0J,mBAAmBiiB,GAAayR,GAG9D,aAAajc,EAAiBxZ,EAKhC,IAEHwZ,EAAS1f,QAAS4G,I,MAKhB,QAJsB5I,IAAnB4I,EAAQC,SACTD,EAAQC,OAAS,IAGF,iBAAdD,EAAQH,EACT,OAMF,MAAM5H,EAASN,KAAKmpB,eAAe9gB,GAC7ByL,EAAUnM,EAAQmM,SAAW9T,KAAKopB,mBAAmB9oB,GACrDkf,EAAkC,gBAAtBnX,EAAQiQ,QAAQpQ,EAC5BqX,EAAYC,GAAalf,EAAS,EAClCykB,EAAcvF,GAAa,IAAgBuF,YAAYxF,GAE1D5X,EAAQsmB,cACT5lB,EAAQC,OAAOyoB,cAAe,GAG7BppB,EAAQsa,aACT5Z,EAAQC,OAAOiY,aAAc,GAG/B,MAAMzO,EAAM9R,KAAKgJ,kBAAkBX,EAAQzI,IAG3C,GAFAyI,EAAQyJ,IAAMA,EAEXzJ,EAAQyiB,WAAY,EAC0C,QAA/C,EAAA9qB,KAAK2lB,uBAAuBtd,EAAQyiB,mBAAW,QAAK9qB,KAAK2lB,uBAAuBtd,EAAQyiB,YAAc,IAC9GhZ,GAAOzJ,EAGjB,MAAMqU,EAAS1c,KAAKgH,cAAc1G,GAC/Boc,GAAU5K,GACRA,EAAM4K,EAAOrU,EAAQC,OAAO0Z,IAC3B,qBACA,uBACF3Z,EAAQC,OAAOma,QAAS,GAKzBpa,EAAQwjB,WACNxjB,EAAQwjB,SAAS1jB,kBAClBE,EAAQwjB,SAAS1jB,gBAAkBE,EAAQg1B,aAAer9B,KAAKgJ,kBAAkBX,EAAQwjB,SAAS1jB,kBAGjGE,EAAQwjB,SAASC,kBAAiBzjB,EAAQwjB,SAASC,gBAAkB9rB,KAAKgJ,kBAAkBX,EAAQwjB,SAASC,mBAG/GzjB,EAAQqwB,UACNrwB,EAAQqwB,QAAQzN,SAAQ5iB,EAAQqwB,QAAQzN,OAASjrB,KAAKgJ,kBAAkBX,EAAQqwB,QAAQzN,SACxF5iB,EAAQqwB,QAAQxN,cAAa7iB,EAAQqwB,QAAQxN,YAAclrB,KAAKgJ,kBAAkBX,EAAQqwB,QAAQxN,eAGvG,MAAMoS,IAAgBj1B,EAAQ/H,OAC1Bg9B,IACFj1B,EAAQuB,MAAQ,IAAkBE,kBAIpC,MAAMoO,EAAO,IAAgBxC,UAAU9V,GAEvCyI,EAAQ/H,OAASA,EACd+H,EAAQ/H,SAAW4X,EACpB7P,EAAQmY,OAASnY,EAAQgiB,SAAYhiB,EAAQgiB,SAAStI,QAAU,IAAgBxb,UAAU8B,EAAQgiB,SAAStI,SAAW,EAAK7J,EAG3H7P,EAAQmY,OAASnY,EAAQC,OAAOixB,OAASlxB,EAAQ0Z,QAAUzhB,EAAS,IAAgBiG,UAAU8B,EAAQ0Z,SAGxG,MAAM0X,EAAYpxB,EAAQgiB,SAC1B,GAAGoP,EAAW,CAEPA,EAAUI,oBAAmBJ,EAAUI,kBAAoB75B,KAAKgJ,kBAAkBywB,EAAUI,oBAC5FJ,EAAUG,eAAcH,EAAUG,aAAe55B,KAAKgJ,kBAAkBywB,EAAUG,eAErF,MAAMpzB,EAAOizB,EAAUK,iBAAmBL,EAAU1X,QAC9C3O,EAAQqmB,EAAUI,mBAAqBJ,EAAUG,aACvD,GAAGpzB,GAAQ4M,EAAO,CAChB,MAAMmqB,EAAkB,IAAgBh3B,UAAUC,GAC5Cg3B,EAAex9B,KAAKgJ,kBAAkBoK,GAC5C/K,EAAQo1B,UAAYF,EAAkB,IAAMC,EAUhDn1B,EAAQq1B,UAAY,IAAgBn3B,UAAUkzB,EAAU1X,SAEpDub,IACF7D,EAAU7vB,MAAQ,IAAkBE,kBAIrCzB,EAAQmwB,WAAa,IACtBnwB,EAAQkpB,SAAWlpB,EAAQmwB,YAG7B,MAAMzmB,EAAiC,CACrCtC,KAAM,UACNnP,SACAqrB,UAAW7Z,GAGb,GAAGzJ,EAAQklB,MACT,OAAOllB,EAAQklB,MAAMrlB,GACnB,IAAK,2BACIG,EAAQklB,MACf,MACF,IAAK,oBACAllB,EAAQklB,MAAMoQ,YACft1B,EAAQklB,MAAQ,CAACrlB,EAAG,8BAEpBG,EAAQklB,MAAMvb,MAAQqiB,EAAA,EAAiBpiB,UAAU5J,EAAQklB,MAAMvb,MAAOD,GAGpE1J,EAAQklB,MAAMvb,cACT3J,EAAQklB,MAGjB,MACF,IAAK,mBACHllB,EAAQklB,MAAMuK,KAAOC,EAAA,EAAgBC,SAAS3vB,EAAQklB,MAAMuK,KAAMzvB,EAAQklB,MAAM7iB,SAChF,MACF,IAAK,uBACArC,EAAQklB,MAAMoQ,YACft1B,EAAQklB,MAAQ,CAACrlB,EAAG,8BAEpBG,EAAQklB,MAAMrpB,SAAW6wB,EAAA,EAAe7iB,QAAQ7J,EAAQklB,MAAMrpB,SAAU6N,GAG1E,MACF,IAAK,sBACH1J,EAAQklB,MAAM3b,QAAUse,EAAA,EAAmBve,YAAYtJ,EAAQklB,MAAM3b,QAASvJ,EAAQyJ,IAAKC,GAC3F,MAKF,IAAK,sBACH1J,EAAQklB,MAAQ,CAACrlB,EAAG,8BAK1B,GAAGG,EAAQ2xB,OAAQ,CACjB,IAAI4D,EACAC,EACJ,MAAMC,EAASz1B,EAAQmY,SAAW,IAAgB9K,UAAU9V,GAAK,MAAQ,GACzE,OAAOyI,EAAQ2xB,OAAO9xB,GAEpB,IAAK,6BACHG,EAAQ2xB,OAAOhoB,MAAQqiB,EAAA,EAAiBpiB,UAAU5J,EAAQ2xB,OAAOhoB,MAAOD,GACrE1J,EAAQ2xB,OAAOhoB,MAAM+rB,YACtB11B,EAAQ2xB,OAAO9xB,EAAI6c,EAAc,gCAAkC,6BAEhEA,IACD1c,EAAQ2xB,OAAO9xB,EAAI,iCAGvB,MAEF,IAAK,6BAOA6c,IACD1c,EAAQ2xB,OAAO9xB,EAAI,iCAErB,MAEF,IAAK,+BACA6c,IACD1c,EAAQ2xB,OAAO9xB,EAAI,mCAErB,MAEF,IAAK,2BACgC,IAAhCG,EAAQ2xB,OAAOhmB,MAAMpR,QACtByF,EAAQ2xB,OAAO/kB,QAAU5M,EAAQ2xB,OAAOhmB,MAAM,GAC3C3L,EAAQmY,SAAWnY,EAAQ2xB,OAAO/kB,UAEjC5M,EAAQ2xB,OAAO9xB,EADdsX,EACkB,0BAA4Bse,EAE5B,0BAA4BA,IAG3Cz1B,EAAQ2xB,OAAOhmB,MAAMpR,OAAS,IACtCyF,EAAQ2xB,OAAO9xB,EAAI,6BAErB,MAEF,IAAK,8BACAG,EAAQmY,SAAWnY,EAAQ2xB,OAAO/kB,UACnC5M,EAAQ2xB,OAAO9xB,EAAI,yBAA2B41B,GAEhD,MAEF,IAAK,kCACHF,GAAev1B,EAAQ2xB,OAAOgE,QAC9BH,GAAate,EACb,MAEF,IAAK,6BACHqe,GAAere,EACfse,GAAax1B,EAAQ2xB,OAAOhP,WAC5B,MAEF,IAAK,4BAEH3iB,EAAQwiB,eAAgB,SACjBxiB,EAAQC,OAAO0Z,WACf3Z,EAAQC,OAAOma,OACtB,MAEF,IAAK,yBACHpa,EAAQ2xB,OAAOvqB,MACZpH,EAAQC,OAAO0Z,IAAM,OAAS,QAED,iCAA5B3Z,EAAQ2xB,OAAOiE,OAAO/1B,GACM,+BAA5BG,EAAQ2xB,OAAOiE,OAAO/1B,EACjB,SACA,MAKV01B,GACCC,IACC79B,KAAKqiB,eAAeub,KACpB59B,KAAKsiB,eAAeub,IACvB79B,KAAKk+B,cAAcN,EAAaC,GAcpC,GAAGx1B,EAAQA,SAAWA,EAAQA,QAAQzF,SAAWyF,EAAQM,cAAe,CACtE,MAAMH,EAAa,IAAkBC,cAAcJ,EAAQA,SACrDK,EAAcL,EAAQD,UAAY,GACxCC,EAAQM,cAAgB,IAAkBC,cAAcF,EAAYG,QAASL,GAG/EsL,EAAQhC,GAAOzJ,IAgBZ,oBAAoBA,EAAcpJ,EAAeoJ,EAAQA,QAAS81B,EAAsBC,EAAiBC,GAC9G,MAAMC,EAAkC,GAElCC,EAAU,CAACC,EAAsBC,EAA6Bx/B,KAKlE,GAJGu/B,IACDC,EAAOL,EAAQ,UAAKnnB,OAAOunB,GAAS,GAAQ,eAAKA,IAGhDJ,EACDE,EAAMhzB,KAAKmzB,OACN,CACL,MAAMC,EAAKx6B,SAASC,cAAc,KACd,iBAAX,EAAqBu6B,EAAG/qB,UAAY8qB,EACxCC,EAAGC,OAAOF,GACfH,EAAMhzB,KAAKozB,GAGVz/B,GACDq/B,EAAMhzB,KAAK,OAIf,GAAGjD,EAAQklB,MAAO,CAChB,IAAIqR,GAAiB,EACrB,GAAGv2B,EAAQyiB,WAAY,CACrB,GAAGqT,EAAW,CACZ,MAAMhS,EAAOnsB,KAAK6+B,iBAAiBx2B,GACnC,GAAG81B,EAAUv7B,SAAWupB,EAAKvpB,QAC3B,IAAI,MAAMkP,KAAOqa,EACf,IAAIgS,EAAU3Y,SAAS1T,GAAM,CAC3B8sB,GAAiB,EACjB,YAIJA,GAAiB,EAIlBA,GAEDL,EAAQ,mBAAe9+B,EADvBR,EAAOe,KAAK8+B,aAAaz2B,EAAQyiB,YAAYziB,cAI/Cu2B,GAAiB,EAGnB,IAAIA,EAAgB,CAClB,MAAMrR,EAAQllB,EAAQklB,MACtB,OAAOA,EAAMrlB,GACX,IAAK,oBACHq2B,EAAQ,mBAAe9+B,EAAW4I,EAAQA,SAC1C,MACF,IAAK,mBACHk2B,OAAQ9+B,EAAW2+B,EAAQ7Q,EAAMwR,SAAW,IAAkBC,cAAczR,EAAMwR,WAClF,MACF,IAAK,oBAAqB,CACxB,MAAM9/B,EAAOm/B,EAAQ7Q,EAAMjb,MAAQ,IAAkB0sB,cAAczR,EAAMjb,OACzEisB,EAAQ,sBAAkB9+B,EAAWR,GACrCq/B,EAAMhzB,KAAK,OAAAkI,EAAA,GAAuBvU,IAClC,MAEF,IAAK,kBACHs/B,EAAQ,kBACR,MACF,IAAK,sBACHA,EAAQ,sBACR,MACF,IAAK,mBACHA,OAAQ9+B,EAAW2+B,EAAQ,OAAc7Q,EAAMuK,KAAKmH,UAAY,QAAU1R,EAAMuK,KAAKoH,QACrF,MACF,IAAK,sBACHX,EAAQ,iBACR,MACF,IAAK,mBAAoB,CACvB,MAAMY,EAAS,MACfZ,OAAQ9+B,EAAW2+B,EAAQe,EAAS5R,EAAM6R,KAAK9sB,MAAQ,IAAkB0sB,cAAcG,EAAS5R,EAAM6R,KAAK9sB,QAC3G,MAEF,IAAK,uBACH,IAAIpO,EAAWqpB,EAAMrpB,SAEA,UAAlBA,EAASuL,KACV8uB,EAAQ,mBAAe9+B,EAAW4I,EAAQA,SAChB,UAAlBnE,EAASuL,KACjB8uB,EAAQ,mBAAe9+B,EAAW4I,EAAQA,SAChB,QAAlBnE,EAASuL,KACjB8uB,EAAQ,iBAAa9+B,EAAW4I,EAAQA,SACd,UAAlBnE,EAASuL,KACjB8uB,EAAQ,mBAAe9+B,EAAW4I,EAAQA,SAChB,YAAlBnE,EAASuL,MACjB8uB,OAAQ9+B,IAAa2+B,EAAQl6B,EAASm7B,gBAAkBn7B,EAASo7B,eAAiB,IAAM,WACxFrgC,EAAO,IAEPs/B,EAAQr6B,EAASuwB,eAAWh1B,EAAW4I,EAAQA,WAazD,GAAGA,EAAQ2xB,OAAQ,CACjB,MAAMuF,EAAgBv/B,KAAKw/B,yBAAyBn3B,EAAS+1B,GAC1DmB,GACDhB,OAAQ9+B,EAAW8/B,GAIvB,GAAGtgC,EAGD,GAFAA,EAAO,YAAaA,EAAM,KAEvBm/B,EACDE,EAAMhzB,KAAKrM,OACN,CACL,IAAImJ,EAAW,IAAkBK,cAAcxJ,EAAKI,QAAQ,MAAO,MAEnE,GAAGg/B,EAAe,CACZj2B,IAAUA,EAAW,IACzB,IACI0K,EADAtS,GAAQ,EAERi/B,EAAS,IAAIC,OAAO,YAAarB,GAAgB,MACrD,KAAsC,QAA/BvrB,EAAQ2sB,EAAOE,KAAK1gC,KACzBmJ,EAASkD,KAAK,CAACpD,EAAG,yBAA0BtF,OAAQy7B,EAAcz7B,OAAQ8X,OAAQ5H,EAAM2F,QACxFjY,GAAQ,EAGPA,GACD4H,EAASqP,KAAK,CAACyH,EAAGpR,IAAMoR,EAAExE,OAAS5M,EAAE4M,QAIzC,MAAMklB,EAAiB,IAAkBntB,aAAaxT,EAAM,CAC1D0T,cAAc,EACdvK,WACAsK,SAAS,EACTmtB,cAAc,IAGhBvB,EAAMhzB,KAAK,OAAAkI,EAAA,GAAuBosB,IAItC,GAAGxB,EACD,OAAOE,EAAMlnB,KAAK,IACb,CACL,MAAM0oB,EAAW57B,SAAS67B,yBAE1B,OADAD,EAASnB,UAAUL,GACZwB,GAIJ,oBAAoBz3B,GACzB,IAAsB23B,EAAlBC,EAAc,GAWlB,OATAA,EAAc53B,EAAQC,OAAO0Z,IAAM,MAAQ,IAAgBke,aAAa73B,EAAQmY,QAAQ,GAAO,GAC/Fwf,EAAY,IAAgB/a,WAAW5c,EAAQ/H,SAAY+H,EAAQC,OAAO0Z,KAAO3Z,EAAQ/H,SAAW,UAAU4X,KAC5G,IAAgBgoB,aAAa73B,EAAQ/H,QAAQ,GAAO,GACpD,GAEC0/B,IACDC,GAAe,MAAQD,GAGlBC,EAMF,yBAAyB53B,EAAc+1B,GAC5C,MAAMn8B,EAAuBm8B,OAAQ3+B,EAAYyE,SAASC,cAAc,QAClE61B,EAAS3xB,EAAQ2xB,OAIvB,GAAIA,EAAmD3xB,QACrD,OAAG+1B,EACM,IAAkB+B,cAAc93B,EAAQA,UAE/CpG,EAAQ0R,UAAY,IAAkBlB,aAAcunB,EAAmD3xB,QAAS,CAACsK,cAAc,IACxH1Q,GAEJ,CACL,IAEIm+B,EACA5mB,EAHAtR,EAAI8xB,EAAO9xB,EAKf,MAAMm4B,EAAiB,CAAC//B,EAAgB89B,IAC/BA,EAAQ,IAAgB8B,aAAa5/B,EAAQ89B,GAAS,IAAM,IAAK,IAAU,CAAC99B,WAAU2B,QAG/F,OAAO+3B,EAAO9xB,GACZ,IAAK,yBAA0B,CAC7BA,GAAK,IAAO8xB,EAAevqB,KAE3B,MAAMgkB,EAAWuG,EAAOvG,UAAY,EAC9B7Z,EAAc,GAEpBA,EAAEtO,KAAKmoB,EAAW,GAAK,MACpBA,GAAY,IAAI7Z,EAAEtO,MAAMmoB,EAAW,GAAK,GAAK,QAGhD2M,EAAcE,EAAA,SAASp4B,GACvBsR,EAAO,CAACI,EAAEyD,UAAUjG,KAAK,MACzB,MAGF,IAAK,0BACL,IAAK,6BACL,IAAK,0BACL,IAAK,yBACL,IAAK,0BACL,IAAK,0BACL,IAAK,6BACL,IAAK,+BACL,IAAK,6BACL,IAAK,gCACL,IAAK,gCACL,IAAK,kCACHgpB,EAAcE,EAAA,SAASp4B,GACvBsR,EAAO,CAAC6mB,EAAeh4B,EAAQmY,OAAQ4d,IACvC,MAGF,IAAK,gCACL,IAAK,6BACHgC,EAAcE,EAAA,SAASp4B,GAEvBsR,EAAO,GACS,+BAAbwgB,EAAO9xB,GACRsR,EAAKlO,KAAK+0B,EAAeh4B,EAAQmY,OAAQ4d,IAG3C5kB,EAAKlO,KAAK8yB,EAAQpE,EAAO1nB,MAAQ,OAAAiuB,EAAA,GAAW,IAAkBvB,cAAchF,EAAO1nB,SACnF,MAGF,IAAK,8BACL,IAAK,4BACL,IAAK,2BAA4B,CAC/B,MAAM0B,EAAmBgmB,EAAkDhmB,OACtE,CAAEgmB,EAAqD/kB,SAK5D,GAHAmrB,EAAcE,EAAA,SAASp4B,GACvBsR,EAAO,CAAC6mB,EAAeh4B,EAAQmY,OAAQ4d,IAEpCpqB,EAAMpR,OAAS,EAChB,GAAGw7B,EACD5kB,EAAKlO,QAAQ0I,EAAMlT,IAAKkU,GAAoBqrB,EAAerrB,GAAQ,GAAiBjV,QAAQqX,KAAK,WAC5F,CACL,MAAM0oB,EAAW57B,SAASC,cAAc,QACxC27B,EAASnB,UACJ,eACD3qB,EAAMlT,IAAKkU,GAAmBqrB,EAAerrB,GAAQ,KACrD,IAGJwE,EAAKlO,KAAKw0B,QAGZtmB,EAAKlO,KAAK+0B,EAAersB,EAAM,GAAIoqB,IAGrC,MAGF,IAAK,0BAA2B,CAC9B,MAAMoC,EAAa,IAAkB/tB,aAAaunB,EAAOyG,OAAQ,CAC/Dr4B,SAAU,CAAC,CACTF,EAAG,mBACHtF,OAAQo3B,EAAOyG,OAAO79B,OACtB8X,OAAQ,MAINgmB,EAAO,OAAAH,EAAA,GAAWC,GAExBJ,EAAcE,EAAA,SAASp4B,GACvBsR,EAAO,CAACknB,GACR,MAGF,QACEN,EAAeE,EAAA,SAASp4B,IAAM,IAAI8xB,EAAO9xB,KAW7C,OAPIk4B,IACFA,EAAcE,EAAA,SAASp4B,QACJzI,IAAhB2gC,IACDA,EAAc,IAAMl4B,EAAI,MAIzBk2B,EACM,UAAKnnB,OAAOmpB,GAAa,EAAM5mB,GAE/B,gBAAMvX,EAASm+B,EAAa5mB,IAOlC,gBAAgBqB,EAAmBwB,GACxC,IAAWjV,UAAU,0BAA2B,CAC9CmV,aAAc1B,EAAQ/Z,IAAIR,IACjB,CACL4H,EAAG,kBACH1B,KAAM,IAAgBgD,iBAAiBlJ,GACvCmc,UAAWJ,OAGdrW,KAAKqB,IAEN,IAAkBI,qBAAqBJ,KAIpC,gBAAgB/G,EAAgByjB,G,MACrC,GAAGA,EAAW,EACZ,OAAO/jB,KAAK2e,eAAegiB,gBAAgBrgC,EAAQyjB,GAGrD,MAAMrH,EAAS1c,KAAKgH,cAAc1G,GAClC,IAAIoc,EAAQ,OAAOxV,QAAQyD,SAE3B,MAAMiS,IAAsB,QAAb,EAAAF,EAAOpU,cAAM,eAAEsU,cAASnd,EACvC,OAAO,IAAW2H,UAAU,2BAA4B,CACtDZ,KAAM,IAAgBi1B,uBAAuBn7B,GAC7Csc,WACC5W,KAAKuf,IACN,GAAGA,EAAM,CACP,MAAMjd,EAA8CsU,EAAS,CAACA,UAAU,GACxE,IAAkB8E,WAAW,CAC3BxZ,EAAG,qBACH1B,KAAM,IAAgBo6B,cAActgC,GACpCmc,UAAWsH,EACXzb,cAMD,iBAAiBhI,EAAgBugC,G,MACtC,MAAMnkB,EAAS1c,KAAKgH,cAAc1G,GAClC,IAAIoc,EAAQ,OAAOxV,QAAQyD,SAE3B,MAAM8X,GAASoe,KAAqB,QAAb,EAAAnkB,EAAOpU,cAAM,eAAEiiB,mBAAc9qB,EACpD,OAAO,IAAW2H,UAAU,4BAA6B,CACvDZ,KAAM,IAAgBi1B,uBAAuBn7B,GAC7CmiB,WACCzc,KAAKuf,IACN,GAAGA,EAAM,CACP,MAAMjd,EAAkDma,EAAS,CAACA,UAAU,GAC5EziB,KAAKsqB,yBAAyB,CAC5BpiB,EAAG,yBACH1B,KAAM,IAAgBo6B,cAActgC,GACpCgI,cAMD,cAAcs1B,EAAqBC,GACxC,IAAI79B,KAAKqiB,eAAeub,KACrB59B,KAAKsiB,eAAeub,IACrB,IAAgBiD,SAASjD,GAAY,CACrC,MAAMkD,EAAW,IAAgBnhB,SAASge,GAC1C,GAAGmD,GACDA,EAAS7e,aACT6e,EAAS7e,YAAY8I,cAAgB6S,EAAW,CAC9C79B,KAAKqiB,eAAeub,GAAeC,EACnC79B,KAAKsiB,eAAeub,GAAaD,EAGjC,UAAU/1B,UAAU,iBAAkB,CAAC+1B,cAAaC,cAEpD,MAAMrc,EAAUxhB,KAAK6nB,eAAelL,WAAWihB,GAC5Cpc,EAAQ5e,QACT,UAAUiF,UAAU,cAAe,CAACvH,OAAQs9B,EAAalhB,OAAQ8E,EAAQ,OAO3E,mBAAmBnZ,EAAc24B,GACvC,GAAG34B,EAAQC,OAAOiY,YAChB,OAAO,EAGT,MAAM0gB,EAAa,CACjB,oBACA,uBACA,uBAOF,MAJY,SAATD,GACDC,EAAW31B,KAAK,sBAGD,YAAdjD,EAAQH,GACPG,EAAQ4Q,SACR5Q,EAAQgiB,UACRhiB,EAAQmwB,YACRnwB,EAAQklB,QAAkD,IAAzC0T,EAAWtgC,QAAQ0H,EAAQklB,MAAMrlB,IAClDG,EAAQmY,QAAU,IAAgB/G,MAAMpR,EAAQmY,YAIjDnY,EAAQklB,OACa,yBAApBllB,EAAQklB,MAAMrlB,IACbG,EAAQklB,MAAMrpB,SAASg9B,SAA2C,UAAhC74B,EAAQklB,MAAMrpB,SAASuL,MAOzD,eAAepH,EAAc24B,EAAwB,Q,MAC1D,SAAI34B,IAAYrI,KAAKmhC,mBAAmB94B,EAAS24B,SAK9C34B,EAAQC,OAAO0Z,KAAOhiB,KAAKmpB,eAAe9gB,KAAa,IAAgBqN,UAAU9V,OAIhFyI,EAAQuB,KAAQ,aAAM,GAAQ,QAAqC,sBAAR,QAAb,EAAAvB,EAAQklB,aAAK,eAAErlB,KAA8BG,EAAQC,OAAO0Z,MAOzG,iBAAiB3Z,GACtB,OAAOA,IACLA,EAAQ/H,OAAS,GACd+H,EAAQmY,SAAW,UAAUtI,MACiB,SAA9C,IAAgB0H,QAAQvX,EAAQ/H,QAAQ4H,GACxC,IAAgBk5B,UAAU/4B,EAAQ/H,OAAQ,sBACzC+H,EAAQC,OAAOiY,YAGhB,mBAAmBJ,EAAgC9X,G,MAExD,IAAIA,EAAQowB,gBACK,QAAd,EAAApwB,EAAQC,cAAM,eAAE0Z,OAChB3Z,EAAQ2xB,OACT,OAAO,EAET,GAAG3xB,EAAQowB,cACkB,sBAA3BpwB,EAAQowB,aAAavwB,EACrB,OAAO,EAET,IAAIm5B,EAAqBh5B,EAAQowB,aAC7B6I,EAAkBnhB,EAAesY,aACrC,GAAG4I,EACD,QAAGC,GAAmBA,EAAgBxvB,KAAOzJ,EAAQyJ,QAIlDuvB,EAAmB/4B,OAAOi5B,YAI1BphB,EAAeqhB,UAChBn5B,EAAQyJ,IAAMqO,EAAeqhB,UAC7BH,EAAmB/4B,OAAOm5B,aAC1BJ,EAAmB/4B,OAAOo5B,QAAS,GAKT,uBAH5BL,EAAqB/tB,OAAOiC,OAAO,CACjCzD,IAAKzJ,EAAQyJ,KACZuvB,IACmBn5B,IACpBm5B,EAAmB7gB,OAAS,IAAgBja,UAAU8B,EAAQ0Z,UAEhE5B,EAAesY,aAAe4I,GAEvB,IAGT,GAAGh5B,EAAQC,OAAO0Z,IAChB,GAAGsf,GACD,GAAGA,EAAgBh5B,OAAOm5B,aACvBH,EAAgBh5B,OAAOo5B,SACvBr5B,EAAQyJ,IAAMwvB,EAAgBxvB,KAAOzJ,EAAQC,OAAOiY,cACrDlY,EAAQA,QAGR,OAFAi5B,EAAgBh5B,OAAOo5B,QAAS,GAEzB,QAEAvhB,EAAeqhB,UACxBn5B,EAAQyJ,IAAMqO,EAAeqhB,YAC7BrhB,EAAeqhB,SAAWn5B,EAAQyJ,KAItC,SAAGzJ,EAAQ2xB,QACY,gCAArB3xB,EAAQ2xB,OAAO9xB,KACdo5B,EACGj5B,EAAQ2xB,OAAO/kB,UAAYqsB,EAAgB9gB,OAC3C,IAAgB/G,MAAMpR,EAAQ2xB,OAAO/kB,aAGzCkL,EAAesY,aAAe,CAC5BvwB,EAAG,oBACH4J,IAAKzJ,EAAQyJ,IACbxJ,OAAQ,KAGH,GAMJ,iBAAiBhI,EAAgB87B,GAGtC,OAFIp8B,KAAK+lB,gBAAgBzlB,KAASN,KAAK+lB,gBAAgBzlB,GAAU,IAC7DN,KAAK+lB,gBAAgBzlB,GAAQ87B,KAAcp8B,KAAK+lB,gBAAgBzlB,GAAQ87B,GAAe,CAAC/b,QAAS,KAC9FrgB,KAAK+lB,gBAAgBzlB,GAAQ87B,GAG/B,kBAAkB97B,EAAgBse,EAA2B+iB,GAAW,GAE7E,OADcA,EAAW,IAAWC,mBAAqB,IAAWx6B,WAAWy6B,KAAK,IAC7EC,CAAK,6BAA8B,CACxCt7B,KAAM,IAAgBgD,iBAAiBlJ,GACvCse,YAIG,WAAU,OAACte,EAAM,MAAEJ,EAAK,YAAEk8B,EAAW,MAAE7a,EAAK,MAAE5G,EAAK,SAAEonB,EAAQ,UAAEC,EAAS,SAAEt7B,EAAQ,SAAE2V,EAAQ,QAAE4lB,EAAO,QAAEC,IAoBxG5hC,IAAQA,EAAS,GACjBJ,IAAOA,EAAQ,IACfk8B,IAAaA,EAAc,CAACl0B,EAAG,kCACtBzI,IAAVkb,IAAqBA,EAAQ,IAC5BonB,IAAUA,EAAW,GACrBC,IAAWA,EAAY,GAE3BC,EAAUA,EAAUA,EAAU,IAAO,EAAI,EACzCC,EAAUA,EAAUA,EAAU,IAAO,EAAI,EAEzC,MAAMC,EAA+B,GAIlCH,IACDrnB,GAASqnB,GAMX,IAAIluB,EAMJ,GAAGxT,IAAW0hC,IAAczgB,IAAUrhB,GAAmB,IAAVya,IAAgBjU,EAAiE,CAC9HoN,EAEE9T,KAAKogB,kBAAkB9f,GACzB,IAAI8hC,GAAY,EAEhB,MAAM/hB,EAAoFvM,EAAQuM,QAElG,QAAe5gB,IAAZqU,GAAyBuM,EAAQzd,OAAQ,CAC1C,MAAMy/B,EAEF,GACFC,EAA2B,GAC3BC,EAA4B,GAG9B,OAAOnG,EAAYl0B,GACjB,IAAK,4BACHm6B,EAAkC,mBAAI,EACtC,MAEF,IAAK,gCACHA,EAAkC,mBAAI,EACtCA,EAAqC,sBAAI,EACzCC,EAAeh3B,KAAK,SACpB,MAEF,IAAK,2BACH+2B,EAAqC,sBAAI,EACzCC,EAAeh3B,KAAK,SACpB,MAEF,IAAK,8BACH+2B,EAAqC,sBAAI,EACzCE,EAAgBj3B,KAAK,SACrB,MAEF,IAAK,2BACH+2B,EAAqC,sBAAI,EACzCC,EAAeh3B,KAAK,SACpB,MAEF,IAAK,gCACH+2B,EAAqC,sBAAI,EACzCC,EAAeh3B,KAAK,QAAS,SAC7B,MAEF,IAAK,gCACH+2B,EAAqC,sBAAI,EACzCC,EAAeh3B,KAAK,SACpB,MAEF,IAAK,2BACH+2B,EAAqC,sBAAI,EACzCC,EAAeh3B,KAAK,SACpB,MAEF,IAAK,yBACH+2B,EAAoB,KAAI,EACxB,MAEF,IAAK,gCACHA,EAAuB,QAAI,EAC3B,MAUF,QACED,GAAY,EAShB,GAAGA,EAAW,CACZ,MAAMtuB,EAAU9T,KAAKopB,mBAAmB9oB,GACxC,IAAI,IAAImF,EAAI,EAAG7C,EAASyd,EAAQzd,OAAQ6C,EAAI7C,EAAQ6C,IAAK,CACvD,MAAM4C,EAAUyL,EAAQuM,EAAQxX,MAAMpD,IAEtC,IAAI4C,EAAS,SAIb,IAAI7H,GAAQ,EACZ,GAAG6H,EAAQklB,OAAS8U,EAAeh6B,EAAQklB,MAAMrlB,KAAOG,EAAQgiB,SAAU,CACxE,GAAuB,yBAApBhiB,EAAQklB,MAAMrlB,IACXo6B,EAAe1/B,SAAW0/B,EAAe9c,SAASnd,EAAQklB,MAAMrpB,SAASuL,OACxE8yB,EAAgB/c,SAASnd,EAAQklB,MAAMrpB,SAASuL,OACnD,SAIJjP,GAAQ,OACH,GAAG6hC,EAAoB,KAAKh6B,EAAQA,QAAS,CAClD,MAAMm6B,EAAe,CAAC,uBAAwB,qBAC1Cn6B,EAAQM,cAAkC2b,KAAKlV,GAAKozB,EAAahd,SAASpW,EAAElH,KAAO,IAAkBu6B,SAASp6B,EAAQA,YACxH7H,GAAQ,QAEF6hC,EAAuB,QAAKh6B,EAAQ2xB,QAAU,CAAC,gCAAiC,6BAA8B,gCAAiC,8BAA8BxU,SAASnd,EAAQ2xB,OAAO9xB,KAC7M1H,GAAQ,GAKV,GAAGA,IACD2hC,EAAU72B,KAAKjD,GACZ85B,EAAUv/B,QAAU+X,GACrB,SAQZ,GAAGwnB,EAAUv/B,OAAQ,CACnB,KAAGu/B,EAAUv/B,OAAS+X,GAIpB,OAAOzT,QAAQC,QAAQ,CACrB+T,MAA8B,EAC9BwnB,UAAW,EACXC,iBAAkB,EAClBtiB,QAAS8hB,IAPX5gB,EAAQ4gB,EAAUA,EAAUv/B,OAAS,GAAGkP,IACxC6I,GAAgBwnB,EAAUv/B,YAvIjB,EAyJb,MACMyH,EAAqD,IAAWjD,UAAWy6B,KAAK,KAEtF,IAAIjQ,EACJ,GAAGtxB,IAAWyhC,QAAyBtiC,IAAb4c,EACxBuV,EAAavnB,EAAO,kBAAmB,CACrC7D,KAAM,IAAgBgD,iBAAiBlJ,GACvC+a,EAAGnb,GAAS,GACZgX,OAAQklB,EACRwG,SAAUX,EACVY,SAAUX,EACVvnB,QACA6f,UAAWx6B,KAAK0J,mBAAmB6X,IAAU,EAC7CuhB,WAAYd,GAAaA,EAAY,EACrC/W,OAAQ,EACR8X,OAAQ,EACRnoB,KAAM,EACNuQ,WAAYnrB,KAAK0J,mBAAmBhD,IAAa,GAChD,CAEDg0B,YAAY,QAET,CAEL,IAAIsI,EAAe,EACfC,EAAW,EACXC,EAAgB3hB,GAASvhB,KAAKoe,iBAAiB9d,EAAQihB,GAExD2hB,GAAiBA,EAAct5B,OAEhCq5B,EAAWC,EAActjC,GACzBojC,EAAehjC,KAAKmpB,eAAe+Z,IAGrCtR,EAAavnB,EAAO,wBAAyB,CAC3CgR,EAAGnb,EACHgX,OAAQklB,EACRwG,SAAUX,EACVY,SAAUX,EACViB,YAAapB,EACbtH,YAAa,IAAgBjxB,iBAAiBw5B,GAC9CxI,UAAWyI,EACXtoB,QACA8B,UAAWJ,GACV,CAEDqe,YAAY,IAIhB,OAAO9I,EAAW5rB,KAAMo9B,IACtB,IAAgB9sB,aAAa8sB,EAAapvB,OAC1C,IAAgB2C,aAAaysB,EAAaxsB,OAC1C5W,KAAKke,aAAaklB,EAAajiB,UAU5B,KACDnhB,KAAKkM,IAAI,oBAAqBkwB,EAAagH,GAG7C,MAAMC,EAAqBD,EAAaloB,OAAUinB,EAAUv/B,OAASwgC,EAAajiB,SAASve,OAc3F,OAZAwgC,EAAajiB,SAAS1f,QAAS4G,IAC7B,MAAM/H,EAASN,KAAKmpB,eAAe9gB,GACnC,GAAG/H,EAAS,EAAG,CACb,MAAMqhB,EAAO,IAAgB/B,SAAStf,GACnCqhB,EAAKO,aACNliB,KAAKk+B,cAAc59B,GAASqhB,EAAKO,YAAY8I,YAIjDmX,EAAU72B,KAAKjD,KAGV,CACL6S,MAAOmoB,EACPV,iBAAkBS,EAAaT,kBAAoB,EACnDD,UAAWU,EAAaV,UACxBriB,QAAS8hB,KAKR,uBAAuB7hC,EAAgBwR,GAC5C,MAAM2Z,EAAanrB,EAAS,IAAMwR,EAClC,IAAI,MAAMwX,KAAatpB,KAAKkmB,iBAC1B,GAAGlmB,KAAKkmB,iBAAiBoD,KAAemC,EAAY,OAGtDzrB,KAAKsjC,qBAAqBhjC,EAAQwR,GAG7B,kCAAkCzJ,GACvC,MAAMihB,EAAYjhB,EAAQ/H,OAAS,IAAM+H,EAAQyJ,IACjD,GAAG9R,KAAKimB,iCAAiCqD,GAAY,OAErD,MAAMia,EAAevjC,KAAK0J,mBAAmBhG,KAAKC,OAAO3D,KAAK6+B,iBAAiBx2B,KACzEm7B,EAA8C,CAClDt7B,EAAG,iBACHI,OAAQ,CACNm7B,WAAW,GAEb7jC,GAAII,KAAKgJ,kBAAkBu6B,GAAc,GACzC35B,KAAMvB,EAAQuB,KACdmY,QAAS,CAAC7Z,EAAG,WAAY+M,QAAS,GAClCqD,QAASjQ,EAAQiQ,QACjB0hB,OAAQ,CACN9xB,EAAG,4BACHG,QAAS,sBAEXwjB,SAAU7rB,KAAKu4B,oBAAoBlwB,EAAQzI,KAG7CI,KAAKke,aAAa,CAACslB,GAAsB,CAACvhB,YAAY,IACtDjiB,KAAKimB,iCAAiCqD,GAAaka,EAAoB1xB,IAGlE,qBAAqBxR,EAAgBwR,GAC1C,OAAO,IAAWwoB,gBAAgB,gCAAiC,CACjE9zB,KAAM,IAAgBgD,iBAAiBlJ,GACvCojC,OAAQ1jC,KAAK0J,mBAAmBoI,KAC/B9L,KAAKoK,I,MACN,IAAgBuG,aAAavG,EAAOwG,OACpC,IAAgBN,aAAalG,EAAO4D,OACpChU,KAAKke,aAAa9N,EAAO+Q,UAEzB,MAAM9Y,EAAUrI,KAAK2jC,eAAevzB,EAAO+Q,SAAS,GAAI9Y,KAAcA,EAA4BqwB,SAAS,GACrGpP,EAAYjhB,EAAQ/H,OAAS,IAAM+H,EAAQyJ,IAEjD9R,KAAK4jC,kCAAkCv7B,GAEvC,MAAM8X,EAAiBngB,KAAKogB,kBAAkB/X,EAAQ/H,OAAQ+H,EAAQyJ,KAOtE,OANA1B,EAAO6a,OAAS9K,EAAeoB,MAAQvhB,KAAKgJ,kBAAkBoH,EAAO6a,SAAW,EAChF7a,EAAO0P,kBAAoBK,EAAe2C,UAAY9iB,KAAKgJ,kBAA0C,QAAxB,EAAAoH,EAAO0P,yBAAiB,QAAIzX,EAAQyJ,KACjH1B,EAAO2P,mBAAqBI,EAAe4C,gBAAkB/iB,KAAKgJ,kBAAkBoH,EAAO2P,qBAAuB,EAElH/f,KAAKkmB,iBAAiBoD,GAAahpB,EAAS,IAAMwR,EAE3CzJ,IAIH,iBAAiB/H,EAAgBwR,QACCrS,IAArCO,KAAK8mB,oBAAoBxmB,KAC1BN,KAAK8mB,oBAAoBxmB,GAAU,IAAIW,KAGzCjB,KAAK8mB,oBAAoBxmB,GAAQwB,IAAIgQ,GACjC9R,KAAK6mB,2BACP7mB,KAAK6mB,yBAA2BvlB,OAAO2P,WAAWjR,KAAKynB,kBAAmB,IAsCvE,yBAAyBnnB,EAAiBoc,GAK/C,YAJcjd,IAAXa,IACDN,KAAK+mB,mBAAmBzmB,GAAUoc,GAGjC1c,KAAK6jC,wBAAgC7jC,KAAK6jC,wBACtC7jC,KAAK6jC,wBAA0B,IAAI38B,QAASC,IACjD8J,WAAW,KACTjR,KAAK6jC,6BAA0BpkC,EAC/BO,KAAK0nB,oBACJ,KAIA,eAAepnB,EAAgB6rB,EAAgBwP,GACpD,IAAIpxB,EAEJ,MAAMu5B,EAAkB3X,EAAKrrB,IAAIgR,GAAO9R,KAAK0J,mBAAmBoI,IAEhE,GAAGxR,EAAS,GAAK,IAAgBkf,UAAUlf,GAAS,CAClD,MAAMif,GAAajf,EACbqf,EAAU,IAAgBC,QAAQL,GACxC,KAAII,EAAQrX,OAAOy7B,SAAapkB,EAAQrX,OAAO07B,QAAUrkB,EAAQrX,OAAO27B,WAAY,CAClF,MAAMC,EAAuB,GAU7B,IATGvkB,EAAQrX,OAAO07B,QAAUrkB,EAAQrX,OAAO27B,YACzC9X,EAAK1qB,QAAQ,CAAC2R,EAAO3N,KACHzF,KAAKoe,iBAAiB9d,EAAQ6rB,EAAK1mB,IACxC6C,OAAO0Z,KAChBkiB,EAAW54B,KAAK8H,MAKlB8wB,EAAWthC,OACb,OAGFupB,EAAO+X,EAGT35B,EAAU,IAAWnD,UAAU,0BAA2B,CACxDuY,QAAS,IAAgBsc,gBAAgB1c,GACzC3f,GAAIkkC,IACH99B,KAAMm+B,IACP,IAAkB18B,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,8BACH8iB,WAAYzL,EACZ4B,SAAUgL,EACV1L,IAAK0jB,EAAiB1jB,IACtB6R,UAAW6R,EAAiB7R,oBAKlC/nB,EAAU,IAAWnD,UAAU,0BAA2B,CACxDu0B,SACA/7B,GAAIkkC,IACH99B,KAAMm+B,IACP,IAAkB18B,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,uBACHiZ,SAAUgL,EACV1L,IAAK0jB,EAAiB1jB,IACtB6R,UAAW6R,EAAiB7R,eAMpC,OAAO/nB,EAIF,YAAYjK,EAAgBihB,EAAQ,EAAG7a,EAAmB09B,GAAQ,GAIvE,GADApkC,KAAKkM,IAAI,eAAgB5L,EAAQihB,EAAO7a,IACpC1G,KAAKgsB,qBAAqB1rB,EAAQoG,KAAc09B,EAElD,OADApkC,KAAKkM,IAAI,6BACFhF,QAAQC,UAGjB,MAAMgZ,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GAEtD,GAAGyZ,EAAekkB,kBAAoB9iB,EACpC,OAAOra,QAAQC,UAGjB,IAAIyqB,EAgEJ,OA/DGlrB,GACGyZ,EAAemkB,cACjB1S,EAAa,IAAWxqB,UAAU,0BAA2B,CAC3DZ,KAAM,IAAgBgD,iBAAiBlJ,GACvCojC,OAAQ1jC,KAAK0J,mBAAmBhD,GAChCwkB,YAAalrB,KAAK0J,mBAAmB6X,MAIzC,IAAkB9Z,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,mCACH8iB,YAAa1qB,EACb6qB,WAAYzkB,EACZwkB,YAAa3J,MAGT,IAAgB/B,UAAUlf,IAC9B6f,EAAemkB,cACjB1S,EAAa,IAAWxqB,UAAU,uBAAwB,CACxDuY,QAAS,IAAgBsc,iBAAiB37B,GAC1C2qB,OAAQjrB,KAAK0J,mBAAmB6X,MAIpC,IAAkB9Z,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,yBACH+iB,OAAQ1J,EACRyJ,YAAa1qB,OAIb6f,EAAemkB,cACjB1S,EAAa,IAAWxqB,UAAU,uBAAwB,CACxDZ,KAAM,IAAgBgD,iBAAiBlJ,GACvC2qB,OAAQjrB,KAAK0J,mBAAmB6X,KAC/Bvb,KAAMm+B,IACP,IAAkB18B,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,YACHuY,IAAK0jB,EAAiB1jB,IACtB6R,UAAW6R,EAAiB7R,gBAMpC,IAAkB7qB,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,yBACH+iB,OAAQ1J,EACR/a,KAAM,IAAgB+R,cAAcjY,OAK1C,IAAwBikC,WAAW,IAAgBC,cAAclkC,IAE9D6f,EAAemkB,YACTnkB,EAAemkB,aAGxBnkB,EAAekkB,iBAAmB9iB,EAElCqQ,EAAWpmB,QAAQ,YACV2U,EAAemkB,YAEtBtkC,KAAKkM,IAAI,+BAAgCqV,EAAOpB,EAAe2C,WAE5D3C,EAAe2C,UAAYvB,GAC5BvhB,KAAKykC,YAAYnkC,EAAQ6f,EAAe2C,UAAWpc,GAAU,KAI1DyZ,EAAemkB,YAAc1S,GAG/B,eAAetxB,EAAgBoG,EAAmB09B,GAAQ,GAC/D,MAAMjkB,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GACnDyZ,EAAeoB,OAChBvhB,KAAKykC,YAAYnkC,EAAQ6f,EAAeoB,MAAO7a,EAAU09B,GAItD,aAAa9jC,EAAgBokC,GAElC,GADAA,EAASA,EAAO5jC,IAAIgR,GAAO9R,KAAK0J,mBAAmBoI,IAChDxR,EAAS,GAAK,IAAgBkf,UAAUlf,GAAS,CAClD,MAAMif,GAAajf,EACnB,IAAW8G,UAAU,+BAAgC,CACnDuY,QAAS,IAAgBsc,gBAAgB1c,GACzC3f,GAAI8kC,IACH1+B,KAAK,KACN,IAAkByB,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,oCACH8iB,WAAYzL,EACZ4B,SAAUujB,YAKhB,IAAWt9B,UAAU,+BAAgC,CACnDxH,GAAI8kC,IACH1+B,KAAMm+B,IACP,IAAkB18B,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,6BACHiZ,SAAUujB,EACVjkB,IAAK0jB,EAAiB1jB,IACtB6R,UAAW6R,EAAiB7R,eAO/B,kBAAkBhyB,EAAgBoG,G,QACvC,OAAGA,GAEG1G,KAAK8lB,eAAexlB,KAASN,KAAK8lB,eAAexlB,GAAU,IACnB,QAArC,EAAAN,KAAK8lB,eAAexlB,GAAQoG,UAAS,QAAK1G,KAAK8lB,eAAexlB,GAAQoG,GAAY,CAACwU,MAAO,KAAMmF,QAAS,IAAI,MAGlF,QAA7B,EAAArgB,KAAK6lB,iBAAiBvlB,UAAO,QAAKN,KAAK6lB,iBAAiBvlB,GAAU,CAAC4a,MAAO,KAAMmF,QAAS,IAAI,KA6oB/F,+BAA+BhY,GACpC,MAAMqU,EAAS1c,KAAKgH,cAAcqB,EAAQ/H,QACvCoc,GAAUA,EAAOsB,cAAgB3V,EAAQyJ,KAC1C9R,KAAK6nB,eAAe9G,iBAAiBrE,GAIjC,6BAA6BioB,GACnC,IACE,MAAMrb,EAAYtpB,KAAKupB,aAAaob,GACpC,GAAGrb,EAAW,CACZ,MAAMmC,EAAazrB,KAAKkmB,iBAAiBoD,GACzC,GAAGmC,EAAY,CACb,MAAOnrB,EAAQwR,GAAO2Z,EAAWprB,MAAM,KAAKS,IAAI0E,IAAMA,GAEtDxF,KAAK0rB,cAAcprB,EAAQwR,EAAK,qBAGpC,MAAMzG,GACNrL,KAAKkM,IAAIqC,MAAM,8BAA+BlD,EAAKs5B,IAI/C,aAAaA,GACnB,IAAIrb,EAAY,GAChB,GAAGqb,EAAcrkC,OAAS,GAAKqkC,EAAc9Y,SAAU,CACrD,MAAMnlB,EAAWi+B,EAAc9Y,SAASC,iBAAmB6Y,EAAc9Y,SAAS1jB,gBAClFmhB,EAAYqb,EAAcrkC,OAAS,IAAMoG,EAG3C,OAAO4iB,EAGF,cAAchpB,EAAgBwR,EAAa8yB,GAWhD,OAV0C5kC,KAAK4tB,kBAAkBttB,EAAQwR,GAAK,GAAM9L,KAAK,KACvF,MAAMqC,EAAUrI,KAAKoe,iBAAiB9d,EAAQwR,GAM9C,OAJG8yB,GACD,UAAU/8B,UAAU+8B,EAAoBv8B,GAGnCA,IAMH,oBAAoBA,GAC1B,MAAMugB,EAAW5oB,KAAKomB,mBAAmB/d,EAAQyJ,KACjD,IAAI4X,EACJ,GAAGd,EAAU,CACX,MAAME,EAAc9oB,KAAKmmB,kBAAkByC,IACxCc,EAAiB1pB,KAAK6kC,uBAAuBjc,EAAUvgB,KACxD,UAAUR,UAAU,iBAAkB,CAACiM,QAASgV,EAAYhV,QAASxT,OAAQ+H,EAAQ/H,OAAQwR,IAAKzJ,EAAQyJ,aAGrG9R,KAAKomB,mBAAmB/d,EAAQyJ,KAGzC,OAAO4X,EAGF,SAASppB,EAAgBwkC,GAC9B,MAAMhV,EAAoC,CACxC5nB,EAAG,2BASL,YANYzI,IAATqlC,IACDA,GAAQ,IAAwBjgB,iBAAiBvkB,GAAQ,IAG3DwvB,EAASiV,WAAaD,EAAO,WAAa,EAEnC,IAAwBnV,qBAAqB,CAClDznB,EAAG,kBACH1B,KAAM,IAAgBgD,iBAAiBlJ,IACtCwvB,GAGE,eAAexvB,EAAgBoG,GACpC,GAAGpG,EAAS,EAAG,CACb,MAAMkf,EAAY,IAAgBA,UAAUlf,GACtC8gC,EAAY5hB,GAAa,IAAgB4hB,WAAW9gC,EAAQ,qBAAiBb,IAAaiH,GAChG,OAAQ8Y,GAAa4hB,EAErB,OAAO,IAAgB4D,cAAc1kC,GAIlC,uBAAuBsoB,EAAkBqc,GAC9C,MAAMnc,EAAc9oB,KAAKmmB,kBAAkByC,GAG3C,GAAGE,EAAa,CACd,MAAM,OAACxoB,EAAM,OAAEyoB,EAAM,SAAEriB,EAAQ,QAAEoN,GAAWgV,EAE5C,CAAC9oB,KAAKogB,kBAAkB9f,GAASoG,EAAW1G,KAAKogB,kBAAkB9f,EAAQoG,QAAYjH,GACtFyX,OAAOC,SACP1V,QAAQqS,IACPA,EAAQuM,QAAQ5b,OAAOskB,KAKzB,MAAM1gB,EAAUrI,KAAKgpB,sBAAsBlV,EAASiV,GAepD,OAdI1gB,EAAQ4Q,iBACH5Q,EAAQC,OAAOiY,mBACflY,EAAQuwB,eACRvwB,EAAQkG,aACRlG,EAAQwgB,iBACRxgB,EAAQqpB,KAEf,UAAU7pB,UAAU,4BAGf7H,KAAKmmB,kBAAkByC,GAE9B5oB,KAAKipB,gCAAgCnV,EAASiV,EAAQkc,EAAanzB,KAE5DzJ,EAGT,OAAO,EAGF,gCAAgCyL,EAA0BiV,EAAgBjX,GAC/E,MAAMzJ,EAAUrI,KAAKgpB,sBAAsBlV,EAAShC,GAC9CozB,EAAYllC,KAAKwmB,sBAAsBuC,GAE7C,QAAiBtpB,IAAdylC,EAAyB,CAC1B,IAAI,MAAMlS,KAAQkS,EAAW,CAC3B,MAAM,SAACzU,EAAQ,SAAElgB,GAAY20B,EAAUlS,GAEvCziB,EAASlI,GAASrC,KAAKyqB,EAAStpB,QAASspB,EAAS9lB,eAG7C3K,KAAKwmB,sBAAsBuC,GAIpC,GAAG1gB,EAAQklB,MACT,GAAGllB,EAAQklB,MAAMvb,MAAO,CACtB,MAAMA,EAAQqiB,EAAA,EAAiB8Q,SAAS,GAAKpc,GAC7C,GAAiC/W,EAAO,CACtC,MAAMozB,EAAW/8B,EAAQklB,MAAMvb,MACzBgiB,EAAeC,EAAA,EAAmBC,gBAAgBkR,GAClDC,EAAkBpR,EAAA,EAAmBC,gBAAgBliB,EAAO,QAClEsB,OAAOiC,OAAOye,EAAcqR,GAE5B,MAAM1R,EAAYyR,EAASrR,MAAMqR,EAASrR,MAAMnxB,OAAS,GAEnD0iC,EAAkBjR,EAAA,EAAiBkR,wBAAwBH,EAAUzR,GACrEb,EAAW,YAAsBwS,EAAgBxR,UACvDG,EAAA,EAAmBuR,aAAa1S,EAAUuS,EAAgBh0B,WAEvD,GAAGhJ,EAAQklB,MAAMrpB,SAAU,CAChC,MAAMwzB,EAAM3C,EAAA,EAAe0Q,OAAO,GAAK1c,GACvC,GAAG2O,GACqCA,EAAIjoB,MAAqB,YAAbioB,EAAIjoB,KAAoB,CACxE,MAAMi2B,EAASr9B,EAAQklB,MAAMrpB,SACvB8vB,EAAeC,EAAA,EAAmBC,gBAAgBwR,GAClDL,EAAkBpR,EAAA,EAAmBC,gBAAgBwD,GAC3DpkB,OAAOiC,OAAOye,EAAcqR,GAE5B,MAAMvS,EAAWiC,EAAA,EAAe4Q,iBAAiBD,GACjDzR,EAAA,EAAmBuR,aAAa1S,EAAUuS,EAAgBh0B,WAGtDhJ,EAAQklB,MAAMuK,cACfC,EAAA,EAAgB6N,MAAM7c,UACtBgP,EAAA,EAAgBrtB,QAAQqe,IAInC,MAAM8c,EAAc7lC,KAAKgpB,sBAAsBlV,EAASiV,UACjDjV,EAAQiV,GAEf,UAAUlhB,UAAU,eAAgB,CAACiM,UAASiV,SAAQ8c,cAAa/zB,QAG9D,mBAAmByP,GACxB,IAAIA,GAAYvhB,KAAK4mB,aAAarF,EAAQvhB,KAAK4mB,WAC7C,OAAO,EAGT5mB,KAAK4mB,UAAYrF,EACjB,UAAgBlL,YAAY,eAAgBkL,GAE5C,IAAWna,UAAU,4BAA6B,CAChD6jB,OAAQjrB,KAAK0J,mBAAmB6X,KAI5B,mBAAmBlZ,EAAoBV,EAG1C,IACH,MAAMrH,EAASN,KAAKmpB,eAAe9gB,GAC7By9B,EAA8B,GAC9BC,EAAa,IAAgBvB,cAAclkC,GACjD,IAAI0lC,EAIAA,EAFDr+B,EAAQ6gB,uBAAuByd,cACf,YAAd59B,EAAQH,GAAmBG,EAAQgiB,UAAY1iB,EAAQ+gB,SAClC,UAAKzR,OAAO,2BAA2B,EAAM,CAACtP,EAAQ+gB,WAEtD1oB,KAAKkmC,oBAAoB79B,OAAS5I,OAAWA,GAAW,GAG1D,UAAKwX,OAAO,qBAAqB,GAGzD6uB,EAAaxzB,MAAQ,IAAgB4tB,aAAa5/B,GAAQ,GACvDA,EAAS,GAAK+H,EAAQmY,SAAWnY,EAAQ/H,SAC1CwlC,EAAaxzB,MAAQ,IAAgB4tB,aAAa73B,EAAQmY,QAAQ,GAChE,MACAslB,EAAaxzB,OAGjBwzB,EAAaxzB,MAAQ,IAAkB6tB,cAAc2F,EAAaxzB,OAElEwzB,EAAaK,QAAU,KACrB,UAAUt+B,UAAU,gBAAiB,CAACvH,SAAQwR,IAAKzJ,EAAQyJ,OAG7Dg0B,EAAaz9B,QAAU29B,EACvBF,EAAajkC,IAAM,MAAQwG,EAAQyJ,IACnCg0B,EAAaM,IAAML,EACnBD,EAAa1T,QAAS,EAEtB,MAAMiU,EAAY,IAAgBC,aAAahmC,GAC5C+lC,EACDrN,EAAA,QAAkBuN,WAAWjmC,EAAQ+lC,EAAW,eAAeG,YAAYxgC,KAAKqL,IAC3EhJ,EAAQC,OAAOma,SAChBqjB,EAAaW,MAAQp1B,EACrB,IAAwBzK,OAAOk/B,MAInC,IAAwBl/B,OAAOk/B,GAI5B,4BAA4BxlC,G,MACjC,OAA4C,QAArC,EAAAN,KAAK4lB,yBAAyBtlB,UAAO,QAAKN,KAAK4lB,yBAAyBtlB,GAAUN,KAAKu7B,uBAGzF,qBAAqBj7B,GAC1B,IAAIN,KAAK0mC,eAAepmC,GAAS,OAAO4G,QAAQC,QAAQ,IAExD,MAAM2M,EAAU9T,KAAKm4B,4BAA4B73B,GACjD,OAAGgT,OAAOC,KAAKO,GAASlR,OACfsE,QAAQC,QAAQmM,OAAOC,KAAKO,GAAShT,IAAIlB,IAAOA,IAGlD,IAAW06B,gBAAgB,+BAAgC,CAChE9zB,KAAM,IAAgBgD,iBAAiBlJ,GACvCsa,KAAM,IACL5U,KAAKg2B,IACN,GAAuB,iCAApBA,EAAc9zB,EAAsC,CACrD,IAAgBoO,aAAa0lB,EAAchoB,OAC3C,IAAgB2C,aAAaqlB,EAAcplB,OAE3C,MAAM9C,EAAU9T,KAAKm4B,4BAA4B73B,GAEjD,OADAN,KAAKke,aAAa8d,EAAc7a,SAAU,CAACrN,UAASma,aAAa,IAC1D3a,OAAOC,KAAKO,GAAShT,IAAIlB,IAAOA,GAGzC,MAAO,KAIJ,sBAAsBU,EAAgB6rB,GAC3C,OAAO,IAAW/kB,UAAU,iCAAkC,CAC5DZ,KAAM,IAAgBgD,iBAAiBlJ,GACvCV,GAAIusB,EAAKrrB,IAAIgR,GAAO9R,KAAK0J,mBAAmBoI,MAC3C9L,KAAKqB,IACN,IAAkBI,qBAAqBJ,KAIpC,wBAAwB/G,EAAgB6rB,GAC7C,OAAO,IAAW/kB,UAAU,mCAAoC,CAC9DZ,KAAM,IAAgBgD,iBAAiBlJ,GACvCV,GAAIusB,EAAKrrB,IAAIgR,GAAO9R,KAAK0J,mBAAmBoI,MAC3C9L,KAAKqB,IACN,IAAkBI,qBAAqBJ,KAIpC,sBAAsBgB,GAC3B,GAAGA,EAAQ/H,SAAW,MACpB+H,EAAUrI,KAAK2jC,eAAet7B,EAASA,KAAcA,EAA4BqwB,SAAS,KAC1ErwB,EAAQqwB,SAAWrwB,EAAQqwB,QAAQpwB,OAAO6wB,UAA2C,MAA/B9wB,EAAQqwB,QAAQ1N,WAKxF,OAAO3iB,EAGF,sBAAsB/H,GAC3B,OAAOA,EAAS,IAAM,IAAgBmpB,SAASnpB,GAGpC,cAAcA,EAAgBoG,G,yCACzC,IAAI1G,KAAK2mC,sBAAsBrmC,GAC7B,OAGF,MAAM6f,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GAChDmC,EAAQsX,EAAeE,QAAQxX,MACrC,IAAIA,EAAM6Z,MAAM,IAASC,QACvB,cAGKxC,EAAeoB,MACtB1Y,EAAM+9B,SAAS,IAASjkB,QAExB,IAAIqZ,EAAgBh8B,KAAK+7B,WAAWz7B,EAAQuI,EAAM,GAAI,EAAG,GAAInC,GAC1Ds1B,aAAyB90B,UAC1B80B,QAAsBA,GAGxB,IAAI,IAAIv2B,EAAI,EAAG7C,EAASo5B,EAAc3b,QAAQzd,OAAQ6C,EAAI7C,IAAU6C,EAClEzF,KAAKiqB,iBAAiB3pB,EAAQ07B,EAAc3b,QAAQ5a,IAGtD,OAAO0a,KAMF,WAAW7f,EAAgBihB,EAAQ,EAAG5G,EAAeqnB,EAAoBt7B,GAC9E,MAAMyZ,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GAEtD,IAAIgU,EAAS,EAsCVsnB,IACDtnB,GAAUsnB,EACVrnB,GAASqnB,GAcX,MAAM6E,EAAY1mB,EAAeE,QAAQymB,QAAQvlB,EAAO7G,EAAQC,GAChE,OAAGksB,GAAcA,EAAUh+B,MAAMjG,SAAW+X,IAAUksB,EAAUE,UAAY,IAASC,QAAU,IAASA,KAQjGhnC,KAAKinC,mBAAmB3mC,EAAQihB,EAAO5G,EAAOD,EAAQyF,EAAgBzZ,GAAUV,KAAK,KAC1F,MAAM6C,EAAQsX,EAAeE,QAAQymB,QAAQvlB,EAAO7G,EAAQC,GAC5D,MAAO,CACLO,MAAOiF,EAAejF,MACtBmF,SAASxX,aAAK,EAALA,EAAOA,QAASsX,EAAeE,QAAQ6mB,iBAChDC,gBAAgBt+B,aAAK,EAALA,EAAOs+B,iBAAkBhnB,EAAejF,SAZnD,CACLA,MAAOiF,EAAejF,MACtBmF,QAASwmB,EAAUh+B,MACnBs+B,eAAgBN,EAAUM,gBAczB,mBAAmB7mC,EAAgBk6B,EAAmB7f,EAAemoB,EAAoB3iB,EAAgCzZ,GAC9H,OAAO1G,KAAKonC,eAAe9mC,EAAQk6B,EAAW7f,EAAOmoB,OAAYrjC,EAAWiH,GAAUV,KAAMg2B,IAC1F,MAAM,iBAAC2G,EAAgB,MAAEznB,EAAK,SAAEiG,GAAY6a,EAE5C7b,EAAejF,MAAQA,GAASiG,EAASve,OACzC,MAAMukC,EAAiBxE,GAAoB,EAErC0E,EAAoBvE,EAAa,EAAInoB,EAAQmoB,EAAanoB,EAE1D2sB,EAAWH,GAAmBhnB,EAAejF,MAAQmsB,GAAsBlnB,EAAejF,MAAQmsB,EAClGE,GAAeJ,GAAmBrE,EAAa,GAAMqE,EAAiBrE,GAAe,EAQrF3W,EAAOhL,EAASrgB,IAAKuH,IACtBrI,KAAKgqB,mBAAmB7J,EAAgB9X,IACzC,UAAUR,UAAU,uBAAwB,CAACvH,WAGvC+H,EAAsByJ,MAKhC,GAAG0oB,IAAcrO,EAAK3G,SAASgV,IAAc2M,EAAiBhnB,EAAejF,MAAO,CAClF,IAAIzV,EAAI,EACR,IAAI,MAAM7C,EAASupB,EAAKvpB,OAAQ6C,EAAI7C,KAC/B43B,EAAYrO,EAAK1mB,MADwBA,GAM9C0mB,EAAKrL,OAAOrb,EAAG,EAAG+0B,GAGpB,MAAM3xB,EAAQsX,EAAeE,QAAQuC,YAAYuJ,IAAShM,EAAeE,QAAQxX,MAC9Ey+B,GACDz+B,EAAMga,OAAO,IAAS2kB,KAGrBD,IACD1+B,EAAMga,OAAO,IAASF,QACtBxC,EAAeoB,MAAQ1Y,EAAM,MAwC5B,eAAevI,EAAgBihB,EAAe5G,EAAQ,EAAGD,EAAS,EAAGkG,EAAa,EAAGla,EAAW,GAKrG,MAAMiB,EAAe,CACnBnB,KAAM,IAAgBgD,iBAAiBlJ,GACvCk6B,UAAWx6B,KAAK0J,mBAAmB6X,IAAU,EAC7CgZ,YAAa3Z,EACbkiB,WAAYpoB,EACZC,QACAsQ,OAAQ,EACR8X,OAAQ,EACRnoB,KAAM,GAGLlU,IACDiB,EAAQ+7B,OAAS1jC,KAAK0J,mBAAmBhD,IAAa,GAQxD,OALkE,IAAW4zB,gBAAgB5zB,EAAW,sBAAwB,sBAAuBiB,EAAS,CAE9J+yB,YAAY,IAGC10B,KAAMg2B,IAChB,KACDh8B,KAAKkM,IAAI,yBAA0B5L,EAAQ07B,EAAeza,EAAO5G,EAAOD,GAG1E,IAAgBpE,aAAa0lB,EAAchoB,OAC3C,IAAgB2C,aAAaqlB,EAAcplB,OAC3C5W,KAAKke,aAAa8d,EAAc7a,UAE7B,IAAgB3B,UAAUlf,IAC3B,IAAkB2iB,iBAAiB3iB,EAAS07B,EAA2Dvb,KAGzG,IAAI7d,EAASo5B,EAAc7a,SAASve,OAAQsY,EAAS8gB,EAAyD9gB,MAC3GtY,GAAUo5B,EAAc7a,SAASve,EAAS,GAAGqW,UAC9C+iB,EAAc7a,SAASL,OAAOle,EAAS,EAAG,GAC1CA,IACAsY,KAKF,MAAMiF,EAAiBngB,KAAKogB,kBAAkB9f,EAAQoG,GAChD+gC,EAAiCzL,EAAc7a,SAASve,EAAS,GACvE,GAAGA,GAAU6kC,EAAc3c,WAAY,CACrC,MAAM4c,EAAavnB,EAAeE,QAAQwJ,UAAU4d,EAAc31B,KAClE,GAAG41B,GAAeA,EAAW7+B,MAAMjG,OAASo5B,EAAc7a,SAASve,OAAUsY,EAC3E,OAAOlb,KAAKonC,eAAe9mC,EAAQmnC,EAAc31B,IAAK,GAAI,EAAG8O,EAAYla,GAAUV,KAAM2hC,GAChF3L,GAKb,OAAOA,GACLztB,IACF,OAAQA,EAAMkB,MACZ,IAAK,kBACH,IAAIkQ,EAAU,IAAgBC,SAAStf,GACvCqf,EAAU,CAACzX,EAAG,mBAAoBqR,YAAaoG,EAAQpG,YAAajH,MAAOqN,EAAQrN,OACnF,IAAkB7K,qBAAqB,CACrCS,EAAG,UACHb,QAAS,CAAC,CACRa,EAAG,gBACH8iB,YAAa1qB,IAEfsW,MAAO,CAAC+I,GACR3L,MAAO,KAKb,MAAMzF,IAIH,sBACL,OAAGvO,KAAK2mB,2BACC3mB,KAAK2mB,2BAGP3mB,KAAK2mB,2BAA6B,IAAIzf,QAASC,IACpD8J,WAAW,KACT,IAAIsmB,EAA4B,GAEhC,IAAI,MAAMj3B,KAAUN,KAAK0mB,mBAAoB,CAC3C,MAAMyF,EAAOnsB,KAAK0mB,mBAAmBpmB,UAC9BN,KAAK0mB,mBAAmBpmB,GAE/B,MAAMokC,EAAyBvY,EAAKrrB,IAAKsS,IAChC,CACLlL,EAAG,iBACHtI,GAAII,KAAK0J,mBAAmB0J,MAIhC,IAAI7I,EAEFA,GADEjK,EAAS,GAAK,IAAgBkf,WAAWlf,GACjC,IAAWg6B,gBAAgB,uBAAwB,CAC3D3a,QAAS,IAAgBsc,kBAAkB37B,GAC3CV,GAAI8kC,IAGI,IAAWpK,gBAAgB,uBAAwB,CAC3D16B,GAAI8kC,IAIRnN,EAASjsB,KAAKf,EAAQvE,KAAK4hC,IACE,iCAAxBA,EAAkB1/B,IACnB,IAAgBoO,aAAasxB,EAAkB5zB,OAC/C,IAAgB2C,aAAaixB,EAAkBhxB,OAC/C5W,KAAKke,aAAa0pB,EAAkBzmB,WAGtC,UAAUtZ,UAAU,sBAAuB,CAACvH,QAASA,EAAQ6rB,YAIjEjlB,QAAQkhB,IAAImP,GAAU/rB,QAAQ,KAC5BxL,KAAK2mB,2BAA6B,KAC/BrT,OAAOC,KAAKvT,KAAK0mB,oBAAoB9jB,QAAQ5C,KAAK6nC,sBACrD1gC,OAED,KAIA,kBAAkB7G,EAAgB8S,EAAeqS,GAAY,G,MAClE,OAAIzlB,KAAKoe,iBAAiB9d,EAAQ8S,GAAO6F,SAAYwM,EAG1CzlB,KAAK0mB,mBAAmBpmB,KAA+D,IAApDN,KAAK0mB,mBAAmBpmB,GAAQK,QAAQyS,GAG5EpT,KAAK2mB,2BACN3mB,KAAK2mB,gCADP,IAF2B,QAA/B,EAAA3mB,KAAK0mB,mBAAmBpmB,UAAO,QAAKN,KAAK0mB,mBAAmBpmB,GAAU,IAAKgL,KAAK8H,GAC1EpT,KAAK6nC,wBAJZ,UAAUhgC,UAAU,sBAAuB,CAACvH,SAAQ6rB,KAAM,CAAC/Y,KACpDlM,QAAQC,WASZ,UAAU7G,EAAgB05B,GAC/B,IAAI8N,EAAS9nC,KAAKwnB,QAAQlnB,GAC1B,OAAI,UAAU4X,MACX5X,GACAN,KAAK0mC,eAAepmC,IACrBA,IAAW,UAAU4X,OACrB4vB,aAAM,EAANA,EAAQr4B,QAASuqB,EAAO9xB,IAKvB4/B,aAAM,EAANA,EAAQx3B,UACTD,aAAay3B,EAAOx3B,SAGtBw3B,EAAS9nC,KAAKwnB,QAAQlnB,GAAU,CAC9BmP,KAAMuqB,EAAO9xB,GAGR,IAAWd,UAAU,qBAAsB,CAChDZ,KAAM,IAAgBgD,iBAAiBlJ,GACvC05B,WACCxuB,QAAQ,KACNs8B,IAAW9nC,KAAKwnB,QAAQlnB,KACzBwnC,EAAOx3B,QAAUhP,OAAO2P,WAAW,YAC1BjR,KAAKwnB,QAAQlnB,IACnB,SAlBE4G,QAAQC,SAAQ,GAuBnB,sBAAsB7G,EAAgBwT,EAA0BqN,GACtE,MAAMd,EAKF,CAACnF,MAAO,EAAGuH,OAAQ,EAAGtP,KAAM,IAEhC,IAAI,MAAMrB,KAAOqP,EAAU,CACzB,MAAM9Y,EAAqBrI,KAAKgpB,sBAAsBlV,EAAShC,GAC/D,GAAGzJ,EAAQ4Q,QAAS,SAEpB,GAAI5Q,EAA4BklB,MAAO,CAErC,MAAM7nB,EAAI2C,EAAQklB,MAAM3b,SAAWvJ,EAAQklB,MACrCwa,EAAOriC,EAAEsM,OAAStM,EAAExB,UAEvB6jC,aAAI,EAAJA,EAAMpS,iBACPqS,EAAA,EAAkBC,cAAcF,EAAKpS,eAAgB,CAAClmB,KAAM,UAAWnP,SAAQqrB,UAAW7Z,IAIzFzJ,EAAQklB,MAAM3b,SAEfse,EAAA,EAAmBgY,yBAAyB7/B,EAAQklB,MAAM3b,QAASE,GAevE,GAXA9R,KAAK4pB,6BAA6BvhB,GAE9BA,EAAQC,OAAO0Z,KAAQ3Z,EAAQC,OAAOiY,cAAelY,EAAQC,OAAOma,SACtEpC,EAAQoC,SACR,IAAwBsJ,OAAO,MAAQja,IAEzCuO,EAAQnF,QACRmF,EAAQlN,KAAKrB,IAAO,EAEpBzJ,EAAQ4Q,SAAU,EAED,mBAAd5Q,EAAQH,GAA0BG,EAAQyiB,WAAY,CACvD,MAAMqd,EAAiBnoC,KAAK2lB,uBAAuBtd,EAAQyiB,YACxDqd,WACMA,EAAer2B,GAElBuO,EAAQ+nB,SAAQ/nB,EAAQ+nB,OAAS,KACpC/nB,EAAQ+nB,OAAO//B,EAAQyiB,cAAgBzK,EAAQ+nB,OAAO//B,EAAQyiB,YAAc,IAAI7pB,MAAQa,IAAIgQ,GAEzFwB,OAAOC,KAAK40B,GAAgBvlC,gBACvByd,EAAQ+nB,cACRpoC,KAAK2lB,uBAAuBtd,EAAQyiB,qBAK1ChX,EAAQhC,GAEf,MAAMu2B,EAAuBroC,KAAK8mB,oBAAoBxmB,GACnD+nC,GAAwBA,EAAqB55B,IAAIqD,IAClDu2B,EAAqB5jC,OAAOqN,GAIhC,GAAGuO,EAAQ+nB,OACT,IAAI,MAAMrR,KAAW1W,EAAQ+nB,OAC3B,UAAUvgC,UAAU,aAAc,CAACvH,SAAQy2B,UAASuR,YAAa,IAAIjoB,EAAQ+nB,OAAOrR,MASxF,OAAO1W,EAGD,oBAAoBoK,EAAiBC,G,OACxB,QAAhB,EAAAD,EAAW8C,aAAK,eAAE3b,UACnBse,EAAA,EAAmBgY,yBAAyBzd,EAAW8C,MAAM3b,QAAS6Y,EAAW3Y,MA7vJvE,EAAAmrB,qBAAuB,MACvB,EAAAF,kBAAoB,WAiwJpC,MAAM,EAAqB,IAAI,EAC/B,IAAeh2B,mBAAqB,EACrB,O,gCCn3Jf,kDAgCA,MAAMwhC,EAAiB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC/FC,EAAe,CAAC,MAAO,QAAS,SAAU,OAAQ,SAAU,OAAQ,OAAQ,UAC5EC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA6Q3C,MAAMniC,EAAkB,IA1QjB,MACL,cACE,UAAUJ,2BAA2B,CACnCwiC,kBAAoBtiC,IAClB,UAAUyB,UAAU,aAAc,CAACvH,OAAQN,KAAKuG,UAAUH,EAAOkS,SAAUE,QAASpS,EAAOoS,aAS1F,cAAclY,GACnB,OAAOA,EAAS,GAAK,IAAgB8gC,WAAW9gC,EAAQ,gBAGnD,aAAaA,GAClB,MAAM0R,EAAQ1R,EAAS,EACnB,IAAgBqoC,aAAaroC,GAC7B,IAAgBsoC,cAActoC,GAElC,MAAmB,mBAAZ0R,EAAM9J,GAAsC,0BAAZ8J,EAAM9J,EAAgC8J,EAAQ,KAGhF,kBAAkB1R,GACvB,GAAGA,GAAU,EACX,OAAO,EAGT,IAAIqhB,EAAO,IAAgB/B,SAAStf,GACpC,SAAGqhB,GAAQA,EAAKO,aAAeP,EAAKrZ,OAAO6Z,cAClCniB,KAAKuG,UAAUob,EAAKO,aAMxB,aAAa5hB,EAAsBuoC,GAAY,EAAOC,GAAgB,GACvExoC,IACFA,EAAS,UAAU4X,MAGrB,IAAI1R,EAAY,GAGTA,EAFH,YAASlG,GAECA,EADLN,KAAK6W,QAAQvW,GAGtB,IAAIgS,EAAQ,GAeZ,OAdGhS,EAAS,GACPkG,EAAKgP,aAAYlD,GAAS9L,EAAKgP,YAC/BhP,EAAKiP,YAAWnD,GAAS,IAAM9L,EAAKiP,WAGlCnD,EADDA,EACSA,EAAMvS,OADAyG,EAAK8B,OAAO2Q,QAAU,kBAAoBzS,EAAK7G,UAGlE2S,EAAQ9L,EAAK8L,MAGZw2B,IACDx2B,EAAQA,EAAMjS,MAAM,KAAK,IAGpBwoC,EAAYv2B,EAAQ,IAAkB0sB,cAAc1sB,GAGtD,cAAchS,GACnB,GAAGA,EAAS,EACV,MAAO,CAAC4H,EAAG,WAAY+M,QAAS3U,GAGlC,IAAIyoC,GAAUzoC,EACd,OAAG,IAAgBkf,UAAUupB,GACpB,CAAC7gC,EAAG,cAAe8iB,WAAY+d,GAGjC,CAAC7gC,EAAG,WAAY81B,QAAS+K,GAG3B,cAAczoC,GACnB,OAAGA,EAAS,EACH,IAAgB0oC,cAAc1oC,GAEhC,IAAgB2oC,eAAe3oC,GAGjC,gBAAgBA,GACrB,OAAGA,EAAS,EACH,IAAgB8V,QAAQ9V,GAAQX,UAAY,GAE9C,IAAgBigB,SAAStf,GAAQX,UAAY,GAG/C,QAAQW,GACb,OAAOA,EAAS,EACZ,IAAgB8V,QAAQ9V,GACxB,IAAgBsf,SAAStf,GAGxB,UAAUA,GACf,GAAsB,iBAAb,EAAuB,OAAOA,EAClC,GAAG,YAASA,GAAS,OAAQA,EAAyB2U,WAAc3U,EAA4B0qB,YAAe1qB,EAAyB09B,SACxI,IAAI19B,EAAQ,OAAO,EAExB,MAAM4oC,EAA0C,MAAhC5oC,EAAkBlB,OAAO,GACnC+pC,EAAc7oC,EAAkBuD,OAAO,GAAGxD,MAAM,KAEtD,OAAO6oC,GAAUC,EAAW,IAAMA,EAAW,IAAM,EAG9C,cAAc7oC,GACnB,MAAO,CACL4H,EAAG,aACH1B,KAAMxG,KAAKuY,cAAcjY,IAItB,UAAUA,GACf,OAAQA,EAAS,GAAM,IAAgBkf,WAAWlf,GAG7C,YAAYA,GACjB,OAAQA,EAAS,GAAM,IAAgB8oC,aAAa9oC,GAG/C,WAAWA,GAChB,OAAQA,EAAS,IAAO,IAAgBykB,aAAazkB,GAGhD,YAAYA,GACjB,OAAON,KAAKwf,UAAUlf,KAAYN,KAAKopC,YAAY9oC,GAG9C,MAAMA,GACX,OAAQA,EAAS,GAAM,IAAgBmZ,MAAMnZ,GAqCxC,uBAAuBA,EAAgB+oC,GAC5C,OAAGA,EACE/oC,EAAS,EACH,CAAC4H,EAAG,oBAER5B,EAAgBye,YAAYzkB,GACtB,CAAC4H,EAAG,yBAEJ,CAACA,EAAG,oBAIR,CACLA,EAAG,kBACH1B,KAAMxG,KAAKwJ,iBAAiBlJ,IAK3B,iBAAiBA,GACtB,IAAIA,EACF,MAAO,CAAC4H,EAAG,kBAGb,GAAG5H,EAAS,EAAG,CACb,MAAMyoC,GAAUzoC,EAChB,OAAI,IAAgBkf,UAAUupB,GAGrB,IAAgBO,oBAAoBP,GAFpC,IAAgBQ,iBAAiBR,GAM5C,MAAO,CACL7gC,EAAG,gBACH+M,QAAS3U,EACTiZ,YAAa,IAAgBnD,QAAQ9V,GAAQiZ,aAI1C,uBAAuBjZ,GAC5B,MAAO,CACL4H,EAAG,kBACH1B,KAAMxG,KAAKwJ,iBAAiBlJ,IAIzB,iBAAiBA,EAAgBkpC,GAAM,GAC5C,IAAIlpC,EAAQ,MAAO,GAInB,OADekpC,EAAMhB,EAAeD,GADxBE,GAAiBnoC,EAAS,GAAKA,EAASA,GAAU,IAKzD,kBAAkBA,GACvB,IAAIrB,EACJ,GAAGqB,EAAS,EACVrB,EAAO,OAAS,IAAgB2W,kBAAkBtV,QAC7C,GAAGA,EAAS,EAAG,CAEpBrB,EAAO,QADM,IAAgB2gB,SAAStf,GAChBgS,OAAS,IAEjC,OAAOrT,EAGF,cAAcqB,GACnB,OAAGgG,EAAgB8iC,YAAY9oC,GACtB,YACCgG,EAAgBkZ,UAAUlf,GAC3B,UACCA,EAAS,EACV,QAEAA,IAAW,UAAU4X,KAAO,QAAU,OAI1C,oBAAoB5X,GACzB,OAAON,KAAKypC,cAAcnpC,IACxB,IAAK,UACH,MAAO,gCAET,IAAK,YACH,MAAO,8BAET,IAAK,QACH,MAAO,iCAET,QACE,MAAO,iCAMf,IAAegG,gBAAkBA,EAClB,O,gCCjTf,kG,sSAyzBA,MAAMuV,EAAkB,IAzxBjB,MAYL,cAXQ,KAAA/H,QAAU,UAAgBC,SAAS6C,MAEnC,KAAAA,MAAwD,GAKxD,KAAA8yB,iBAAyE,GAEzE,KAAAC,cAAkD,GA8DlD,KAAAC,mBAAsBxjC,I,MAC5B,MAAMoa,EAAUpa,EAAmC6O,SAAW,IAAgB1O,UAAWH,EAAuC2b,SAChI,GAAG,UAAU7J,OAASsI,GAA8B,8BAApBpa,EAAO4zB,OAAO9xB,EAC5C,OAGF,MAAM5H,EAAsB,qBAAb8F,EAAO8B,EACpBsY,IACGpa,EAAuC43B,SAAY53B,EAA0C4kB,YAC5FxD,EAAoC,QAA1B,EAAAxnB,KAAK2pC,cAAcrpC,UAAO,QAAKN,KAAK2pC,cAAcrpC,GAAU,GAC5E,IAAIwnC,EAAStgB,EAAQlD,KAAKtf,GAAKA,EAAEgQ,SAAWwL,GAE5C,MAAMqpB,EAAe,YACZ/B,EAAOx3B,QAEd,MAAM5P,EAAM8mB,EAAQ7mB,QAAQmnC,IAChB,IAATpnC,GACD8mB,EAAQ1G,OAAOpgB,EAAK,GAGtB,UAAUmH,UAAU,eAAgB,CAACvH,SAAQknB,YAEzCA,EAAQ5kB,eACH5C,KAAK2pC,cAAcrpC,IAQ9B,GAJGwnC,QAA6BroC,IAAnBqoC,EAAOx3B,SAClBD,aAAay3B,EAAOx3B,SAGC,4BAApBlK,EAAO4zB,OAAO9xB,EAQX4/B,IACFA,EAAS,CACP9yB,OAAQwL,GAGVgH,EAAQlc,KAAKw8B,IAKfA,EAAO9N,OAAS5zB,EAAO4zB,OAEnB,IAAgBxM,QAAQhN,IACV,yBAAbpa,EAAO8B,GACL9B,EAAO43B,SAAWniB,EAAgBilB,QAAQ16B,EAAO43B,WAAaniB,EAAgB2D,UAAUpZ,EAAO43B,UAChG,UAAkB8L,YAAY1jC,EAAO43B,SAO3C,IAAgB7oB,gBAAgBqL,GAEhCsnB,EAAOx3B,QAAUhP,OAAO2P,WAAW44B,EAAc,KACjD,UAAUhiC,UAAU,eAAgB,CAACvH,SAAQknB,gBAjC/C,CACE,IAAIsgB,EACF,OAGF+B,MA+dI,KAAAE,cAAgB,CAAChB,EAAgB1hC,KAGvC,IAAkBI,qBAAqBJ,GACpCA,GAGCrH,KAAKwf,UAAUupB,IACjB,UAAkBiB,8BAA8BjB,IAtkBlD,UAAU7iC,2BAA2B,CAOnC+jC,yBAA2B7jC,IACzB,IAAgBsmB,WAAW,2BAA6BnjB,GAC9CA,EAAOoW,QAAsCqL,aAAe5kB,EAAO4kB,aAI/Ekf,8BAAgC9jC,IAC9B,MAAM2iC,GAAU,IAAgBxiC,UAAUH,EAAOI,MAC3Cmb,EAAkB3hB,KAAK4W,MAAMmyB,GAChCpnB,IACDA,EAAKwoB,sBAAwB/jC,EAAO+jC,sBACpC,UAAUtiC,UAAU,cAAekhC,KAIvCqB,iBAAkBpqC,KAAK4pC,mBACvBS,qBAAsBrqC,KAAK4pC,mBAC3BU,wBAAyBtqC,KAAK4pC,qBAGhC,UAAgB/zB,WAAW7P,KAAM8P,IAC/B,MAAMc,EAAQ,UAAgBb,gBAAgBa,MAC9C,GAAGA,EAAMhU,OAAQ,CACf5C,KAAK4W,MAAQ,GACb,IAAI,IAAInR,EAAI,EAAG7C,EAASgU,EAAMhU,OAAQ6C,EAAI7C,IAAU6C,EAAG,CACrD,MAAMkc,EAAO/K,EAAMnR,GAChBkc,IACD3hB,KAAK4W,MAAM+K,EAAK/hB,IAAM+hB,IAK5B,UAAgB/f,iBAAiB,aAAetB,IAC3CA,EAAS,GAAKN,KAAK8T,QAAQqC,cAAc7V,IAI5CN,KAAK8T,QAAQ5Q,IAAI,CACf,EAAE5C,GAASN,KAAK4f,SAAStf,OAI7B,UAAgBsB,iBAAiB,eAAiBtB,IAC7CA,EAAS,IAAMN,KAAK8T,QAAQqC,cAAc7V,IAI7CN,KAAK8T,QAAQrP,QAAQnE,OAyEpB,eAAeA,GACpB,OAAON,KAAK2pC,cAAcrpC,GAGrB,aAAaiqC,EAAiB5xB,GACnC4xB,EAAS9oC,QAAQkgB,GAAQ3hB,KAAKwqC,YAAY7oB,EAAMhJ,IAG3C,YAAYgJ,EAAYhJ,G,QAC7B,GAAc,cAAXgJ,EAAKzZ,EAAmB,OAQ3B,MAAMuiC,EAAyCzqC,KAAK4W,MAAM+K,EAAK/hB,IAU/D,QAJkCH,IAA9BkiB,EAAmBrZ,SACpBqZ,EAAmBrZ,OAAS,IAG3BqZ,EAAsBrZ,OAAOuQ,UAAmBpZ,IAAZgrC,EACtC,OAGF9oB,EAAKzI,SAAW,IAAkBC,gBAAgBwI,EAAKrP,OAEzC,YAAXqP,EAAKzZ,QACwBzI,IAA5BkiB,EAAK+oB,yBACOjrC,IAAZgrC,GACCA,EAAyBC,qBAC5B/oB,EAAK+oB,mBAAsBD,EAAyBC,oBAQtD,IAAIC,GAAe,EAAOvxB,GAAe,EACzC,QAAe3Z,IAAZgrC,EACDzqC,KAAK4W,MAAM+K,EAAK/hB,IAAM+hB,MACjB,EACmE,QAApD,EAAC8oB,EAAsBz4B,aAA6B,eAAE44B,aACL,QAAjD,EAACjpB,EAAmB3P,aAA6B,eAAE44B,YAErED,GAAe,GAGdF,EAAQn4B,QAAUqP,EAAKrP,QACxB8G,GAAe,GAGjB,YAAkBqxB,EAAS9oB,GAC3B,UAAU9Z,UAAU,cAAe8Z,EAAK/hB,IAGvC+qC,GACD,UAAU9iC,UAAU,iBAAkB8Z,EAAK/hB,IAG1CwZ,GACD,UAAUvR,UAAU,mBAAoB8Z,EAAK/hB,IAG5C,UAAgByZ,cAAcsI,EAAK/hB,KACpCI,KAAK8T,QAAQ5Q,IAAI,CACf,CAACye,EAAK/hB,IAAK+hB,IAKV,QAAQ/hB,GAEb,OADGA,EAAK,IAAGA,GAAMA,GACVI,KAAK4W,MAAMhX,IAAO,CAACsI,EAAG,YAAatI,KAAIqZ,SAAS,EAAMM,YAAa,GAAIjR,OAAQ,IAGjF,+BAA+B1I,EAAYirC,GAChD,MAAMlpB,EAAqB3hB,KAAK4f,QAAQhgB,GAExC,GAAG+hB,EAAKwoB,sBAAuB,CAC7BU,EAAS,YAAKA,GACd,MAAMC,EAAgBnpB,EAAKwoB,sBAAsB7hC,OACjD,IAAI,IAAI7C,KAAKqlC,EAEXD,EAAOviC,OAAO7C,GAAKqlC,EAAcrlC,GAIrC,OAAOolC,EAGF,UAAUjrC,EAAYo6B,EAAoB6Q,EAA6CE,GAC5F,MAAMppB,EAAa3hB,KAAK4f,QAAQhgB,GAChC,GAAc,cAAX+hB,EAAKzZ,EAAmB,OAAO,EAElC,GAAc,kBAAXyZ,EAAKzZ,GACO,qBAAXyZ,EAAKzZ,GACJyZ,EAAmBrZ,OAAOuZ,QAC1BF,EAAKrZ,OAAOsZ,OAAUD,EAAsBrZ,OAAO27B,UACtD,OAAO,EAGT,GAAGtiB,EAAKrZ,OAAOy7B,cAAsBtkC,IAAXorC,EACxB,OAAO,EAGT,IAAIA,KACFA,EAASlpB,EAAK0X,cAAiB1X,EAAsBqpB,eAAiBrpB,EAAKwoB,uBAGzE,OAAO,EAIX,IAAIc,EAAyG,GAK7G,OAJGJ,IACDI,EAAUJ,EAAOviC,QAGZ0xB,GACL,IAAK,cACL,IAAK,aACL,IAAK,YACL,IAAK,cACL,IAAK,aACL,IAAK,gBACL,IAAK,aACL,IAAK,gBACH,IAAI+Q,GAAYppB,EAAKrZ,OAAOsZ,KAC1B,OAAO,EAGT,GAAgB,qBAAbipB,EAAO3iC,GAA4B+iC,EAAQjR,GAC5C,OAAO,EAGT,GAAc,YAAXrY,EAAKzZ,IACFyZ,EAAKrZ,OAAO27B,YAAcgH,EAAQC,cACpC,OAAO,EAIX,MAIF,IAAK,kBACH,QAASD,EAAQE,gBAGnB,IAAK,eACH,MAAoB,oBAAbN,EAAO3iC,EAA0B+iC,EAAQjR,MAAaiR,EAAQC,eAAiBD,EAAQjR,GAGhG,IAAK,eACL,IAAK,cACH,MAAoB,oBAAb6Q,EAAO3iC,EAA0B+iC,EAAQjR,IAAWiR,EAAQjR,GAIrE,IAAK,cACL,IAAK,cACH,OAAO,EAGT,IAAK,qBACH,MAAoB,oBAAb6Q,EAAO3iC,GAA2B+iC,EAAmB,UAG9D,IAAK,oBACH,QAAqB,SAAXtpB,EAAKzZ,GAAiByZ,EAAKrZ,OAAOT,YAAa8Z,EAAKrZ,OAAOy7B,UAAWpiB,EAAK0X,cAIzF,OAAO,EAGF,4BAA4Bz5B,EAAYorC,GAC7C,MAAMrpB,EAAkB3hB,KAAK4f,QAAQhgB,GACrC,OAAG+hB,EAAKwoB,uBACHxoB,EAAKwoB,sBAAsBiB,aAAeJ,EAAcI,YAAc,YAAUzpB,EAAKwoB,sBAAsB7hC,OAAQ0iC,EAAc1iC,QAC3HpB,QAAQC,UAIZ,IAAWC,UAAU,uCAAwC,CAClEZ,KAAM,IAAgBgD,kBAAkB5J,GACxCorC,kBACChlC,KAAKhG,KAAK+pC,cAAclI,KAAK7hC,KAAMJ,IAejC,UAAUA,GACf,MAAM+hB,EAAO3hB,KAAK4W,MAAMhX,GACxB,OAAO+hB,IAAoB,YAAXA,EAAKzZ,GAA8B,qBAAXyZ,EAAKzZ,GAGxC,YAAYtI,GAKjB,MAAM+hB,EAAO3hB,KAAK4W,MAAMhX,GACxB,OAAO+hB,GAAmB,YAAXA,EAAKzZ,GAAmByZ,EAAKrZ,OAAO27B,UAG9C,YAAYrkC,GACjB,OAAOI,KAAKwf,UAAU5f,KAAQI,KAAKopC,YAAYxpC,GAG1C,SAASA,GACd,IAAI4pB,GAAO,EACX,MAAM7H,EAAa3hB,KAAK4f,QAAQhgB,GAUhC,OATc,qBAAX+hB,EAAKzZ,GACQ,kBAAXyZ,EAAKzZ,GACM,cAAXyZ,EAAKzZ,GACJyZ,EAAmBrZ,OAAOsZ,MAC1BD,EAAmBrZ,OAAOuZ,QAC1BF,EAAmBrZ,OAAO6Z,eAC9BqH,GAAO,GAGFA,EAGF,gBAAgB5pB,GACrB,MAAM+hB,EAAa3hB,KAAK4f,QAAQhgB,GAChC,MAAc,cAAX+hB,EAAKzZ,GAAuByZ,EAAsBpI,YAK5C,CACLrR,EAAG,eACH8iB,WAAYprB,EACZ2Z,YAAcoI,EAAsBpI,aAA+C,KAP9E,CACLrR,EAAG,qBAWF,iBAAiBtI,GACtB,MAAO,CACLsI,EAAG,gBACH81B,QAASp+B,GAIN,oBAAoBA,GACzB,MAAO,CACLsI,EAAG,mBACH8iB,WAAYprB,EACZ2Z,YAAavZ,KAAK4f,QAAQhgB,GAAI2Z,aAA+C,GAI1E,QAAQ3Z,EAAYwa,GACzB,MAAMuH,EAAO3hB,KAAK4W,MAAMhX,GACxB,OAAO,YAAS+hB,KAAUvH,IAAauH,EAAKrZ,OAAOuQ,KAG9C,aAAajZ,GAClB,MAAM+hB,EAAkB3hB,KAAK4f,QAAQhgB,GAErC,OAAO+hB,GAAQA,EAAK3P,OAAS,CAC3B9J,EAAG,kBAIA,cAActI,GACnB,MAAM+hB,EAAO3hB,KAAK4f,QAAQhgB,GAC1B,OAAGI,KAAKwf,UAAU5f,IACRI,KAAKopC,YAAYxpC,GAAM,IAAM,KAAOA,EAAK,IAAM+hB,EAAKpI,YAEvD,IAAM3Z,EAGR,qBAAqBA,G,QAC1B,MAAM+hB,EAAO3hB,KAAK4f,QAAQhgB,GACpByrC,EAAW,UAAkBpS,UAAUr5B,GAC7C,IAAIsb,EAGAA,EAFDmwB,EACiB,gBAAfA,EAASnjC,EACFmjC,EAASX,mBAEgE,QAAxE,EAAAW,EAASC,aAAmDA,oBAAY,eAAE1oC,OAG7E+e,EAAK+oB,qBAAuC,QAAjB,EAAA/oB,EAAK2pB,oBAAY,eAAEA,aAAa1oC,QAIrEsY,EAAQA,GAAS,EAEjB,IAAIrZ,EAHc7B,KAAK+kB,YAAYnlB,GAGA,0BAA4B,qBAC/D,OAAO,eAAKiC,EAAK,CAAC,YAAuBqZ,KAuDpC,cAAc5I,EAAei5B,GAClC,OAAO,IAAWnkC,UAAU,yBAA0B,CACpDS,WAAW,EACXyK,QACAi5B,UACCvlC,KAAMqB,IACP,IAAkBI,qBAAqBJ,GAEvC,MAAMkY,EAAYlY,EAAQuP,MAAM,GAAGhX,GAGnC,OAFA,UAAUiI,UAAU,gBAAiB,CAACvH,QAASif,IAExCA,IAIJ,gBAAgB3f,EAAYgc,GACjC,MAAM4vB,EAAQxrC,KAAKi8B,gBAAgBr8B,GAC7B6rC,EAAc7vB,EAAQ9a,IAAIqa,GAAK,IAAgBM,aAAaN,IAElE,OAAO,IAAW/T,UAAU,2BAA4B,CACtDuY,QAAS6rB,EACTx3B,MAAOy3B,IACNzlC,KAAKqB,IACN,IAAkBI,qBAAqBJ,KAIpC,WAAWiL,EAAesJ,GAC/B,OAAO,IAAWxU,UAAU,sBAAuB,CACjD4M,MAAO4H,EAAQ9a,IAAIqa,GAAK,IAAgBM,aAAaN,IACrD7I,UACCtM,KAAKqB,IACN,IAAkBI,qBAAqBJ,GAEvC,MAAM0hC,EAAU1hC,EAAmCuP,MAAM,GAAGhX,GAG5D,OAFA,UAAUiI,UAAU,gBAAiB,CAACvH,QAASyoC,IAExCA,IAIE,WAAWnpC,G,iDACtB,GAAGI,KAAKopC,YAAYxpC,GAAK,CACvB,MAAM0a,EAAYX,KAAK5O,MAAQ,IAAO,EAChC2gC,EAAkC,QAAzB,EAAA1rC,KAAK0pC,iBAAiB9pC,UAAG,QAAKI,KAAK0pC,iBAAiB9pC,GAAM,CAAC0a,UAAW,EAAGqxB,QAAS,GACjG,GAAIrxB,EAAYoxB,EAAOpxB,UAAa,GAClC,OAAOoxB,EAAOC,QAGhB,MAAMC,QAAY,IAAWxkC,UAAU,sBAAuB,CAC5DZ,KAAMxG,KAAKspC,oBAAoB1pC,KAG3B+rC,EAAqB,QAAX,EAAAC,EAAID,eAAO,QAAI,EAI/B,OAHAD,EAAOpxB,UAAYA,EACnBoxB,EAAOC,QAAUA,EAEVA,EACF,GAAG3rC,KAAK+kB,YAAYnlB,GACzB,OAAO,EAGT,MACMisC,SADiB,UAAkB/B,YAAYlqC,IACC0rC,aACtD,GAAGO,GAAiBA,EAAcP,aAAc,CAG9C,OAFqBO,EAAcP,aAEfQ,OAAO,CAACC,EAAaC,KACvC,MAAMx3B,EAAO,IAAgB4B,QAAQ41B,EAAY/2B,SACjD,OAAGT,GAAQA,EAAKC,QAA4B,qBAAlBD,EAAKC,OAAOvM,EAC7B6jC,EAAM,EAGRA,GACN,GAEH,OAAO,KAgBJ,aAAansC,GAClB,OAAO,IAAWwH,UAAU,wBAAyB,CACnDuY,QAAS3f,KAAKi8B,gBAAgBr8B,KAC7BoG,KAAKhG,KAAK+pC,cAAclI,KAAK7hC,KAAMJ,IAGjC,YAAYA,GACjB,OAAO,IAAWwH,UAAU,uBAAwB,CAClDuY,QAAS3f,KAAKi8B,gBAAgBr8B,KAC7BoG,KAAKhG,KAAK+pC,cAAclI,KAAK7hC,KAAMJ,IAGjC,YAAYA,EAAYoV,EAAgBi3B,EAAW,KACxD,OAAO,IAAW7kC,UAAU,uBAAwB,CAClD42B,QAASp+B,EACTqV,QAAS,IAAgBwG,aAAazG,GACtCk3B,UAAWD,IACVjmC,KAAKhG,KAAK+pC,cAAclI,KAAK7hC,KAAMJ,IAGjC,eAAeA,EAAYoV,GAChC,OAAO,IAAW5N,UAAU,0BAA2B,CACrD42B,QAASp+B,EACTqV,QAAS,IAAgBwG,aAAazG,KACrChP,KAAKhG,KAAK+pC,cAAclI,KAAK7hC,KAAMJ,IAGjC,UAAUA,GACf,OAAOI,KAAKmsC,eAAevsC,EAAI,IAAgB8V,UAAU9V,IAGpD,MAAMA,GACX,OAAOI,KAAKwf,UAAU5f,GAAMI,KAAKosC,aAAaxsC,GAAMI,KAAKqsC,UAAUzsC,GAG9D,OAAOA,GACZ,OAAOI,KAAKwf,UAAU5f,GAAMI,KAAKssC,cAAc1sC,GAAMI,KAAKusC,WAAW3sC,GAGhE,cAAcA,GACnB,OAAO,IAAWwH,UAAU,yBAA0B,CACpDuY,QAAS3f,KAAKi8B,gBAAgBr8B,KAC7BoG,KAAKhG,KAAK+pC,cAAclI,KAAK7hC,KAAMJ,IAGjC,WAAWA,GAEd,OAAO,IAAWwH,UAAU,sBAAuB,CACjD42B,QAASp+B,IAKR,YAAYA,GACjB,MAAM+hB,EAAa3hB,KAAK4f,QAAQhgB,GAChC,MAAc,YAAX+hB,EAAKzZ,EAAwBhB,QAAQC,QAAQwa,EAAK/hB,IAC9C,IAAWwH,UAAU,uBAAwB,CAClD42B,QAASp+B,IACRoG,KAAMqB,IACPrH,KAAK+pC,cAAcnqC,EAAIyH,GAEvB,OADsCA,EAA4BA,QAAQid,KAAKnJ,GAAa,kBAARA,EAAEjT,GACxE8iB,aAIX,eAAeprB,EAAYD,GAChC,OAAO,IAAWyH,UAAU,0BAA2B,CACrDuY,QAAS3f,KAAKi8B,gBAAgBr8B,GAC9BD,aACCqG,KAAMuf,IACP,GAAGA,EAAM,CACoBvlB,KAAK4f,QAAQhgB,GACnCD,SAAWA,EAGlB,OAAO4lB,IAIJ,UAAU3lB,EAAYw2B,GAC3B,MAAMoW,EAAiC,CACrCtkC,EAAG,yBACHuqB,KAAM2D,GAGR,IAAI7rB,EAaJ,OAXEA,EADCvK,KAAKwf,UAAU5f,GACN,IAAWwH,UAAU,qBAAsB,CACnDuY,QAAS3f,KAAKi8B,gBAAgBr8B,GAC9BoS,MAAOw6B,IAGC,IAAWplC,UAAU,yBAA0B,CACvD42B,QAASp+B,EACToS,MAAOw6B,IAIJjiC,EAAQvE,KAAMqB,IACnB,IAAkBI,qBAAqBJ,KAIpC,UAAUzH,EAAY0S,GAC3B,IAAI/H,EAcJ,OAXEA,EADCvK,KAAKwf,UAAU5f,GACN,IAAWwH,UAAU,qBAAsB,CACnDuY,QAAS3f,KAAKi8B,gBAAgBr8B,GAC9B0S,UAGQ,IAAWlL,UAAU,yBAA0B,CACvD42B,QAASp+B,EACT0S,UAIG/H,EAAQvE,KAAMqB,IACnB,IAAkBI,qBAAqBJ,KAIpC,UAAUzH,EAAY2rC,GAC3B,OAAO,IAAWnkC,UAAU,yBAA0B,CACpDZ,KAAM,IAAgBgD,kBAAkB5J,GACxC2rC,UACCvlC,KAAKuf,IAEN,UAAU1d,UAAU,iBAAkBjI,KAInC,qBAAqBosC,GAI1B,OAHgBA,EAA4DxlC,KAC1E,IAAgBD,UAAWylC,EAA4DxlC,MACtFwlC,EAAgD/2B,QAI9C,WAAWrV,EAAYosC,EAA0ChB,GACtE,MAAM1qC,EAAiC,iBAAlB,EAA6B0rC,EAAchsC,KAAKysC,qBAAqBT,GAC1F,OAAO,IAAW5kC,UAAU,sBAAuB,CACjDuY,QAAS3f,KAAKi8B,gBAAgBr8B,GAC9BosC,YAAa,IAAgBxiC,iBAAiBlJ,GAC9C0qC,kBACChlC,KAAMqB,IAGP,GAFArH,KAAK+pC,cAAcnqC,EAAIyH,GAEI,iBAAlB,EAA4B,CACnC,MAAMiT,EAAYX,KAAK5O,MAAQ,IAAO,EACtC,IAAkBtD,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,2BACH8iB,WAAYprB,EACZgK,KAAM0Q,EACNoyB,cAAUjtC,EACVktC,SAAKltC,EACLwV,QAAS3U,EACTssC,iBAAkBZ,EAClBa,gBAAiBv5B,OAAOC,KAAKy3B,EAAc1iC,QAAQ1F,OAAS,CAC1DsF,EAAG,2BACH0B,KAAM0Q,EACN0wB,gBACA8B,UAAW,IAAgBp3B,UAAU9V,GACrC4G,KAAM,IAAgB+R,cAAcjY,GACpCgI,OAAQ,SACN7I,QAOP,oCAAoCG,EAAYosC,GACrD,OAAOhsC,KAAK+sC,WAAWntC,EAAIosC,EAAa,CACtC9jC,EAAG,mBACHkjC,WAAY,EACZ9iC,OAAQ,KAIL,gBAAgB1I,EAAYosC,GACjC,OAAOhsC,KAAK+sC,WAAWntC,EAAIosC,EAAa,CACtC9jC,EAAG,mBACHkjC,WAAY,EACZ9iC,OAAQ,CACN0kC,eAAe,OAOvB,IAAenxB,gBAAkBA,EAClB,O,gCC3zBf,0DA0RA,MAAMoY,EAAqB,IA9OpB,MAgBL,cAfO,KAAAgZ,aAAe,IAAI,IAAuB,eACzC,KAAAC,UAA4C,GAC5C,KAAA5W,SAA2C,GAC3C,KAAA6W,kBAAmE,GAEnE,KAAAC,SAAW,EAEX,KAAAC,YAGJ,CACFr7B,MAAO,GACP9N,SAAU,IAIV,UAAU4Q,GAAG,oBAAsB1F,IACjC,MAAM4nB,EAAU5nB,EAChBpP,KAAKs2B,SAASU,EAAQlE,UAAYkE,EAElC,MAAMkO,EAAYllC,KAAKmtC,kBAAkBnW,EAAQlE,UAC9CoS,GACDA,EAAUzjC,QAAQ8O,GAAYA,EAASymB,IAGzC,MAAMsW,EAAWttC,KAAKktC,UAAUlW,EAAQlE,UACrCwa,GACDA,EAAStX,UAAUgB,KAKjB,eAAelE,GACrB,MAAMrC,EAAW,cAyBjB,OAvBAA,EAAS1E,OAAS,KAEd,MAAMxd,EAAQ,IAAIO,MAAM,qBACxBP,EAAMykB,KAAO,aAEb,IAAWua,eAAeza,GAE1BrC,EAAS9lB,OAAO4D,GAChBkiB,EAAS1E,OAAS,QAMtB0E,EAASjlB,QAAQ,YACRxL,KAAKs2B,SAASxD,UACd9yB,KAAKmtC,kBAAkBra,KAGhCrC,EAAS6E,MAAM,KACbt1B,KAAKwtC,cAAc1a,KAGd9yB,KAAKktC,UAAUpa,GAAYrC,EAG5B,cAAcqC,UACb9yB,KAAKktC,UAAUpa,GAGjB,aAAaA,EAAkBza,GACpC,MAAMoY,EAAWzwB,KAAKytC,eAAe3a,GASrC,MARqB,iBAAZ,EACP4a,MAAMr1B,GACLrS,KAAK2nC,GAAYA,EAASxX,QAC1BnwB,KAAKmwB,GAAQ1F,EAAStpB,QAAQgvB,IAE/B1F,EAAStpB,QAAQkR,GAGZoY,EAGF,SAAS9oB,GACd,MAAMmrB,EAAW,YAAsBnrB,EAAQmsB,SAAU,CAAChB,SAAUnrB,EAAQmrB,WAC5E,GAAG9yB,KAAKktC,UAAU1qB,eAAesQ,GAAW,OAAO9yB,KAAKktC,UAAUpa,GAElE,MAAMrC,EAAWzwB,KAAKytC,eAAe3a,GAE/B8a,EAAWviC,I,MACf,OAAOA,EAAIoE,MACT,IAAK,yBAA0B,CAE7B,MAAMH,EAAyC,QAAjB,EAAA3H,aAAO,EAAPA,EAASmsB,gBAAQ,eAAE6B,eACjD,GAAGrmB,EAAO,CACR,IAAkBu+B,iBAAiBv+B,GAAOtJ,KAAK8nC,GAI/C,MAEA7hC,QAAQmJ,KAAK,gDAAiD9F,GAIlE,QACEmhB,EAAS9lB,OAAOU,KAKhByiC,EAAc,KAGlB,IAAI,IAAWt+B,QAAU7H,EAAQomC,UAAW,CAC1C,MAAMxjC,EAAUvK,KAAKitC,aAAae,QAAQlb,GAAU9sB,KAAMmwB,IACxD,GAAGA,EAAK3nB,KAAO7G,EAAQ6G,KAAM,KAAM,aAC9BiiB,EAAStpB,QAAQgvB,KAGxB,OAAGxuB,EAAQomC,UAAkBxjC,EAAQ+qB,MAAMsY,GACpCrjC,EAAQ+qB,MAAM,IACZ,IAAW2Y,aAAatmC,GAAS3B,KAAKyqB,EAAStpB,QAASymC,IAOjE,OAAO,IAAWK,aAAatmC,GAAS3B,KAAKyqB,EAAStpB,QAASymC,IAOnE,OAHAE,IAGOrd,EAGF,OAAOgC,EAAmBK,GAC/B,IAAIA,EAAU,CACZ,MAAMob,EAAWzb,aAAI,EAAJA,EAAMhjB,KACvB,GAAGy+B,EAAU,CACX,MAAMC,EAAMnuC,KAAKotC,WAAa,IAAMc,EAAS7tC,MAAM,KAAK,GAGtDyyB,EADC,CAAC,aAAc,YAAa,aAAanyB,QAAQutC,IAAa,EACpD,QAAUC,EACkB,IAA/BD,EAASvtC,QAAQ,WAAmB,CAAC,aAAaA,QAAQutC,IAAa,EACpE,QAAUC,EACkB,IAA/BD,EAASvtC,QAAQ,UACd,QAAUwtC,EAEV,WAAaA,OAI1Brb,EAAW,UAAY9yB,KAAKotC,WAIhC,MAAM3c,EAAWzwB,KAAKytC,eAAe3a,GAOrC,OANA,IAAWsb,WAAW,CAAC3b,OAAMK,aAAW9sB,KAAKyqB,EAAStpB,QAASspB,EAAS9lB,QAExE8lB,EAASjlB,QAAQ,KACfxL,KAAKwtC,cAAc1a,KAGdrC,EAGF,YAAYqC,GACjB,OAAO9yB,KAAKktC,UAAUpa,GAGjB,oBAAoBA,EAAkBviB,G,MAC3C,MAAM+lB,EAAWt2B,KAAKs2B,SAASxD,IACE,QAAhC,EAAA9yB,KAAKmtC,kBAAkBra,UAAS,QAAK9yB,KAAKmtC,kBAAkBra,GAAY,IAAKxnB,KAAKiF,GAEhF+lB,GACD/lB,EAAS+lB,GAIN,qBAAqBjlB,EAAayhB,EAAkBub,GACzD,MAAMnvB,EAAIhb,SAASC,cAAc,KACjC+a,EAAEovB,KAAOj9B,EACT6N,EAAEouB,SAAWxa,EACb5T,EAAEqvB,OAAS,SAEXrvB,EAAEsvB,MAAMC,SAAW,WACnBvvB,EAAEsvB,MAAME,IAAM,MACdxvB,EAAEsvB,MAAM5sB,KAAO,MAEf1d,SAASyqC,KAAKhQ,OAAOzf,GAErB,IACE,IAAI0vB,EAAa1qC,SAAS2qC,YAAY,eACtCD,EAAWE,eAAe,SAAS,GAAM,EAAOxtC,OAAQ,EAAG,EAAG,EAAG,EAAG,GAAG,GAAO,GAAO,GAAO,EAAO,EAAG,MACtG4d,EAAE6vB,cAAcH,GAChB,MAAOx/B,GACPnD,QAAQsC,MAAM,uBAAwBa,GACtC,IACE8P,EAAE8vB,QACF,MAAO5/B,GACP9N,OAAO2tC,KAAK59B,EAAe,WAI/BJ,WAAW,KACTiO,EAAEkG,SACFipB,GAAYA,KACX,KASE,eAAe1mC,EAA0BunC,GAC9C,MAAM5B,EAAWttC,KAAKstC,SAAS3lC,GAQ/B,OAPA2lC,EAAuBtnC,KAAKmwB,IAC1B,MAAM/B,EAAY9iB,IAAIC,gBAAgB4kB,GACtCn2B,KAAKmvC,qBAAqB/a,EAAW8a,EAAc,KACjD59B,IAAI89B,gBAAgBhb,OAIjBkZ,EAGF,gBAAgB/f,EAA6B8hB,EAAoB,Q,QAKtE,MAAMC,EAA2C,QAAnC,EAAAtvC,KAAKqtC,YAAY9f,EAAMrlB,GAAGqlB,EAAM3tB,WAAG,QAAKI,KAAKqtC,YAAY9f,EAAMrlB,GAAGqlB,EAAM3tB,IAAM,GAC5F,OAAuB,QAAhB,EAAA0vC,EAAMD,UAAU,QAAKC,EAAMD,GAAa,CAAClb,WAAY,EAAG9iB,IAAK,MAKxE,MAAmB,IAAe4iB,mBAAqBA,GACxC,O,gCC5Rf,2GAkCO,MAAMsb,EAWX,cAVQ,KAAAC,OAEJ,GAEG,KAAAC,QAAU,EACV,KAAAC,QAAU,EAOf,MAAM9b,EAAS,mBAAoBtyB,OAASA,OAAOquC,eAAiBruC,OAC9D4B,EAAM,KACVlD,KAAKyvC,QAAU7b,EAAE3wB,OAAS2wB,EAAEgc,WAC5B5vC,KAAK0vC,QAAU9b,EAAExnB,QAAUwnB,EAAEic,aAE/Bjc,EAAEhyB,iBAAiB,SAAUsB,GAC7BA,IAGK,UAAU8O,EAAchO,G,MAC7B,GAAe,eAAZgO,EAAM9J,EAAoB,OAY7B,MAAM4nC,EAAW9vC,KAAKwvC,OAAOx9B,EAAMpS,IAMnC,GALGoS,EAAM2jB,iBACP,YAAyB,iBAAkBma,EAAU99B,GACrD,IAAkB+9B,YAAY/9B,EAAM2jB,eAAgB3xB,IAGxC,QAAX,EAAAgO,EAAM+hB,aAAK,eAAEnxB,OAAQ,CACtB,MAAM4L,EAAOwD,EAAM+hB,MAAM/hB,EAAM+hB,MAAMnxB,OAAS,GAChC,yBAAX4L,EAAKtG,IACNsG,EAAKA,KAAOA,EAAKulB,MAAMvlB,EAAKulB,MAAMnxB,OAAS,IAI/C,OAAGktC,EACMx8B,OAAOiC,OAAOu6B,EAAU99B,GAG1BhS,KAAKwvC,OAAOx9B,EAAMpS,IAAMoS,EAG1B,gBAAgBA,EAA6Bg+B,EAAW,EAAGC,EAAY,EAAGC,GAAW,GACvF5uC,OAAO6uC,iBAAmB,IAC3BH,GAAY,EACZC,GAAa,GAcf,IAAIG,EAA2B,CAACloC,EAAG,iBAAkBuH,KAAM,IAC3D,MAAMskB,EAAU/hB,EAAkB+hB,OAAU/hB,EAAqB0iB,OACjE,GAAGX,aAAK,EAALA,EAAOnxB,OAAQ,CAChB,IAAI,IAAI6C,EAAI,EAAG7C,EAASmxB,EAAMnxB,OAAQ6C,EAAI7C,IAAU6C,EAAG,CACrD,MAAMkuB,EAAYI,EAAMtuB,GACxB,KAAK,MAAOkuB,MAAgB,MAAOA,GAAY,SAE/Cyc,EAAgBzc,EAEhB,MAAMnlB,EAAO,YAAemlB,EAAUC,EAAGD,EAAUE,EAAGmc,EAAUC,GAChE,GAAGzhC,EAAKvL,OAAS+sC,GAAYxhC,EAAKpC,QAAU6jC,EAC1C,MAIDC,GAAgC,mBAApBE,EAAcloC,GAAyC,sBAAf6rB,EAAM,GAAG7rB,IAC9DkoC,EAAgBrc,EAAM,IAI1B,OAAOqc,EAGF,cAAcp7B,EAAgBuM,EAAgB,IAAK5G,EAAgB,IACxE,MAAM01B,EAAY,IAAgB50B,aAAazG,GAC/C,OAAO,IAAW4sB,mBAAmB,uBAAwB,CAC3D3sB,QAASo7B,EACT31B,OAAQ,EACRC,QACAsQ,OAAQ1J,GACP,CAAC+uB,aAAc,KAAKtqC,KAAMuqC,IAC3B,IAAgBj6B,aAAai6B,EAAav8B,OAC1C,MAAMw8B,EAAqBD,EAAaf,OAAO1uC,IAAI,CAACkR,EAAOtR,KACzD6vC,EAAaf,OAAO9uC,GAAOV,KAAKiS,UAAUD,EAAO,CAACvC,KAAM,eAAgBnP,OAAQ0U,IACzEhD,EAAMpS,KAGf,MAAO,CACLsb,MAAQq1B,EAAgDr1B,OAASq1B,EAAaf,OAAO5sC,OACrF4sC,OAAQgB,KAKP,uBAAuBlhC,EAA8BmhC,GAAY,GACtE,IAAIC,EASAxC,EARAuC,EAKFC,EAAMphC,aAAiBqhC,WAAarhC,EAAQ,IAAIqhC,WAAWrhC,IAJ3DohC,EAAM,IAAIC,WAAWpB,EAAiBqB,WAAWx1B,OAAOrW,MAAMzC,KAAKgN,EAAMzG,MAAM,IAAK0mC,EAAiBsB,WACrGH,EAAI,KAAOphC,EAAM,GACjBohC,EAAI,KAAOphC,EAAM,IAOjB4+B,EADCuC,EACU,WAAW,YAAc,aAEzB,aAGb,MAAMta,EAAO,IAAI/kB,KAAK,CAACs/B,GAAM,CAACjhC,KAAMy+B,IACpC,OAAO58B,IAAIC,gBAAgB4kB,GAMtB,yBAAyB3nB,GAC9B,MAAMc,EAAQd,EAAKc,MAGnB,IAAIwhC,EAAO,IACX,IAAI,IAAIrrC,EAAI,EAAG7C,EAAS0M,EAAM1M,OAAQ6C,EAAI7C,IAAU6C,EAAG,CACrD,MAAMu3B,EAAM1tB,EAAM7J,GAEfu3B,GAAO,IACR8T,GAPW,mEAOI9T,EAAM,IAAM,KAExBA,GAAO,IACR8T,GAAQ,IACA9T,GAAO,KACf8T,GAAQ,KAEVA,GAAQ,IAAY,GAAN9T,IAKlB,OAFA8T,GAAQ,IAEDA,EAGF,uBAAuB9+B,EAA6B2iB,EAAgE8b,GAAY,GACrI,MAAMzc,EAAe,IAAmBE,gBAAgBliB,EAAO2iB,EAAMllB,MACrE,OAAOukB,EAAa3iB,MAAQ2iB,EAAa3iB,IAAMrR,KAAK+wC,uBAAuBpc,EAAMrlB,MAAOmhC,IAGnF,0BAA0Bz+B,EAA6B2iB,EAAgEqc,GAC5H,MAAM3/B,EAAMrR,KAAKixC,uBAAuBj/B,EAAO2iB,GAAO,GAEhD8R,EAAQ,IAAI16B,MAClB06B,EAAMyK,UAAUpvC,IAAI,aAEpB,MAAM0kC,GAAewK,EAAU,YAAK3/B,GAAOnK,QAAQC,QAAQkK,IAAMrL,KAAKqL,GAC7D,IAAInK,QAAcC,IACvB,YAAmBs/B,EAAOp1B,EAAKlK,MAInC,MAAO,CAACs/B,QAAOD,eAGV,kBAAkBx0B,EAA6B/P,EAAgD+tC,EAAkBC,EAAmBkB,GAAS,EAAM9oC,GACxJ,MAAMsrB,EAAY3zB,KAAKoxC,gBAAgBp/B,EAAOg+B,EAAUC,GAGxD,IAAIzhC,EAEFA,EADa,aAAZwD,EAAM9J,EACA,YAAc8J,EAAM4hB,GAAK,IAAK5hB,EAAM6hB,GAAK,KAEzC,YAAc,MAAOF,EAAYA,EAAUC,EAAI,IAAK,MAAOD,EAAYA,EAAUE,EAAI,KAG9F,IAAIwd,EAAU,YAAcrB,EAAUC,GAEtCoB,EAAU7iC,EAAOA,EAAK8iC,OAAOD,EAASF,GAEtC,IAAII,GAAQ,EAmCZ,OAjCe,UAAZv/B,EAAM9J,GAAiB,CAAC,QAAS,OAAOsd,SAASxT,EAAMvC,SACrD4hC,EAAQpuC,MAAQ,KAAOouC,EAAQjlC,OAAS,MACzCilC,EAAU7iC,EAAOA,EAAKgjC,cAAc,YAAc,IAAK,OAGtDnpC,IACAA,EAAQA,SACPA,EAAQklB,MAAM3b,SACbvJ,EAAQqwB,SAAWrwB,EAAQqwB,QAAQpwB,OAAO6wB,UAA2C,MAA/B9wB,EAAQqwB,QAAQ1N,aAGtEqmB,EAAQpuC,MAAQ,MACjBouC,EAAU,YAAc,IAAKA,EAAQjlC,QACrCmlC,GAAQ,GAITA,GAASF,EAAQpuC,MAAQ,MAC1BouC,EAAU,YAAc,IAAKA,EAAQjlC,QACrCmlC,GAAQ,IAUVtvC,EAAQusC,MAAMvrC,MAAQouC,EAAQpuC,MAAQ,KACtChB,EAAQusC,MAAMpiC,OAASilC,EAAQjlC,OAAS,KAGnC,CAACunB,YAAWnlB,OAAM+iC,SAGpB,yBAAyBv/B,EAA6BgiB,EAA0Bgd,EAAkBS,GAAc,GACrH,IAAIzd,EAAaG,YAAe,CAAC,QAAS,OAAgC3O,SAAUxT,EAAqBvC,OAASgiC,EAAa,CAC7H,GAAe,aAAZz/B,EAAM9J,GAAoB8rB,EAAaG,aAAesd,EACvD,OAAO,KAGT,MAAM1d,EAAS/hB,EAAkB+hB,OAAU/hB,EAAqB0iB,OAC1DC,GAAQZ,aAAK,EAALA,EAAOnxB,QAASmxB,EAAMzP,KAAK9V,GAAmB,sBAAXA,EAAKtG,GAA6B,KACnF,GAAGysB,GAAU,UAAWA,EACtB,OAAON,EAAiBqd,0BAA0B1/B,EAAO2iB,EAAcqc,GAI3E,OAAO,KAGF,wBAAwBh/B,EAA6B2hB,EAAsBge,EAAkB5D,GAClG,MAAM9a,EAAyB,aAAZjhB,EAAM9J,EAEzB,IAAIyrB,GAA6B,mBAAhBA,EAAUzrB,EAEzB,MAAM,IAAI4G,MAAM,mBAIlB,MAAMskB,GAA2B,cAAhBO,EAAUzrB,GAAqC,yBAAhByrB,EAAUzrB,IAAiC8J,EAAMuH,aAAevH,EAAM2jB,eAChH7B,EAAmG,CACvG5rB,EAAG+qB,EAAa,4BAA8B,yBAC9CrzB,GAAIoS,EAAMpS,GACV2Z,YAAavH,EAAMuH,YACnBoc,eAAgB3jB,EAAM2jB,eACtBic,WAAYje,EAAUlkB,MAGxB,MAAO,CACLoiC,KAAM7/B,EAAM8/B,MACZhe,WACAtlB,KAAM4kB,EAAWO,EAAkCnlB,UAAO/O,EAC1DkyC,UACA5D,aAwBG,aAAagE,EAAwCpe,EAAuBge,EAAkB5D,GACnG,MAAM/7B,EAAQhS,KAAKmlC,SAAS4M,GAG5B,IAAI//B,GAAqB,eAAZA,EAAM9J,EACjB,MAAM,IAAI4G,MAAM,4BAGlB,IAAI6kB,EAAW,CACb,MAAMqe,EAAYhyC,KAAKyvC,QACjBwC,EAAajyC,KAAK0vC,QAExB/b,EAAY3zB,KAAKoxC,gBAAgBp/B,EAAOggC,EAAWC,GAGrD,MAAMje,EAAe,IAAmBE,gBAAgBliB,EAAO2hB,EAAUlkB,MACzE,GAAGukB,EAAaG,aAAe,SAAUR,EAAYA,EAAUnlB,KAAO,IAAMwlB,EAAa3iB,IACvF,OAAOnK,QAAQC,UAGjB,MAAMm+B,EAAkBtlC,KAAKulC,wBAAwBvzB,EAAO2hB,EAAWge,EAAS5D,GAC1Ejb,EAAW,YAAsBwS,EAAgBxR,UAEvD,IAAIwZ,EAAW,IAAmB4E,YAAYpf,GAC9C,OAAGwa,IAIHA,EAAW,IAAmBA,SAAShI,GACvCgI,EAAStnC,KAAKmwB,IACZ,IAAInC,EAAaG,YAAcH,EAAaG,WAAagC,EAAK3nB,KAAM,CAClE,MAAM6C,EAAMC,IAAIC,gBAAgB4kB,GAChCnC,EAAaG,WAAagC,EAAK3nB,KAC/BwlB,EAAa3iB,IAAMA,EAKrB,OAAO8kB,IACNb,MAAM,QAEFgY,GAGF,SAASyE,GACd,OAAO,YAASA,GAAWA,EAAqB/xC,KAAKwvC,OAAOuC,GAGvD,SAAS//B,GACd,MAAO,CACL9J,EAAG,kBACHtI,GAAI,CACFsI,EAAG,aACHtI,GAAIoS,EAAMpS,GACV2Z,YAAavH,EAAMuH,YACnBoc,eAAgB3jB,EAAM2jB,gBAExBgI,YAAa,GAIV,cAAc3rB,EAA6B2/B,GAChD,MAAMQ,EAAgBnyC,KAAKoxC,gBAAgBp/B,EAAO,MAAQ,OAC1D,GAAyB,cAApBmgC,EAAcjqC,GAAyC,yBAApBiqC,EAAcjqC,EACpD,OAGF,MAAMo9B,EAAkBtlC,KAAKulC,wBAAwBvzB,EAAOmgC,EAAeR,GAC3ErM,EAAgBxS,SAAW,QAAU9gB,EAAMpS,GAAK,OAChD,IAAmBwyC,eAAe9M,EAAiBA,EAAgBxS,WAzWtD,EAAA8d,WAAa,YAAa,kuCAC1B,EAAAC,SAAW,YAAa,QA4WzC,MAAMxc,EAAmB,IAAIkb,EAC7B,IAAelb,iBAAmBA,EACnB,O,gCCzZf,mLA+BO,MAAMge,EAYX,cAXQ,KAAAC,SAAgB,GAChB,KAAAC,UAA+C,GAChD,KAAAtZ,UAAsC,GACrC,KAAAuZ,aAAiG,GAEjG,KAAAC,gBAIJ,GAGF,UAAUvsC,2BAA2B,CACnCwsC,uBAAyBtsC,IACvB,MAAMklC,EAAellC,EAAOklC,aAC5B,GAAsB,qBAAnBA,EAAapjC,EAA0B,CACxC,MAAM6gC,EAASuC,EAAatN,QACtBqN,EAAWrrC,KAAKi5B,UAAU8P,QAChBtpC,IAAb4rC,IACDA,EAASC,aAAeA,EACxB,UAAUzjC,UAAU,mBAAoBkhC,MAK9C4J,yBAA2BvsC,IACzB,MAAMilC,EAAWrrC,KAAKi5B,UAAU7yB,EAAO43B,SACvC,QAAgBv+B,IAAb4rC,EAAwB,CACzB,MAAMQ,EAAgBR,EAASC,aACzBA,EAAeO,EAAcP,cAAgB,GACnD,IAAI,IAAI7lC,EAAI,EAAG7C,EAAS0oC,EAAa1oC,OAAQ6C,EAAI7C,EAAQ6C,IACvD,GAAG6lC,EAAa7lC,GAAGwP,UAAY7O,EAAO6O,QACpC,OAIJq2B,EAAahgC,KAAK,CAChBpD,EAAG,kBACH+M,QAAS7O,EAAO6O,QAChB29B,WAAYxsC,EAAOwsC,WACnBhpC,KAAM,aAAM,KAGdiiC,EAAcgH,QAAUzsC,EAAOysC,QAC/B,UAAUhrC,UAAU,mBAAoBzB,EAAO43B,WAInD8U,4BAA8B1sC,IAC5B,MAAMilC,EAAWrrC,KAAKi5B,UAAU7yB,EAAO43B,SACvC,QAAgBv+B,IAAb4rC,EAAwB,CACzB,MAAMQ,EAAgBR,EAASC,aACzBA,EAAeO,EAAcP,cAAgB,GACnD,IAAI,IAAI7lC,EAAI,EAAG7C,EAAS0oC,EAAa1oC,OAAQ6C,EAAI7C,EAAQ6C,IACvD,GAAG6lC,EAAa7lC,GAAGwP,UAAY7O,EAAO6O,QAIpC,OAHAq2B,EAAaxqB,OAAOrb,EAAG,GACvBomC,EAAcgH,QAAUzsC,EAAOysC,aAC/B,UAAUhrC,UAAU,mBAAoBzB,EAAO43B,aAQzD,UAAUlpB,GAAG,cAAgBi0B,I,MAC3B,MAAMgK,EAAW/yC,KAAKi5B,UAAU8P,GAC1BpnB,EAAkB,IAAgB/B,QAAQmpB,GAChD,IAAIpnB,EAAK3P,QAAU+gC,EACjB,OAGF,MAAMC,EAA8B,mBAAjBrxB,EAAK3P,MAAM9J,EAE9B,GAAG6qC,EAASE,YAAcD,KAA0C,eAA1BD,EAASE,WAAW/qC,GAG5D,cAFOlI,KAAKi5B,UAAU8P,QACtB,UAAUlhC,UAAU,mBAAoBkhC,GAG1C,GAAGiK,EACD,OAGF,MAAMjB,EAAWpwB,EAAK3P,MAA8B44B,UACT,QAAnB,EAAAmI,EAASE,kBAAU,eAAErzC,MACtBmyC,WACd/xC,KAAKi5B,UAAU8P,GACtB,UAAUlhC,UAAU,mBAAoBkhC,MAKvC,YAAYmK,GACjB,MAAMC,EAAQD,GAAWA,EAAQj+B,QACjC,IAAIk+B,EACF,OAAO,KAGT,MAAMC,EAAgB,GAKtB,OAJAF,EAAQE,SAAS3xC,QAAS4xC,IACxBD,EAASC,EAAW1jC,SAAW0jC,EAAWrgC,cAGrChT,KAAKsyC,SAASa,GAAS,CAC5BvzC,GAAIuzC,EACJN,QAASK,EAAQL,QACjBS,UAAWJ,EAAQK,WACnBvgC,YAAakgC,EAAQlgC,YACrBogC,SAAUA,GAIP,WAAWxzC,EAAY+Y,GAC5B,OAAG3Y,KAAKuyC,UAAU3yC,KAAQ+Y,EACjBzR,QAAQC,QAAQnH,KAAKuyC,UAAU3yC,IAGrCI,KAAKwyC,aAAa5yC,GACZI,KAAKwyC,aAAa5yC,GAGpBI,KAAKwyC,aAAa5yC,GAAM,IAAWwH,UAAU,oBAAqB,CACvExH,GAAI,IAAgB6b,aAAa7b,KAChCoG,KAAMwtC,IACP,MAAMh/B,EAAOg/B,EAASh/B,KAqBtB,OApBA,IAAgBc,YAAYd,GAAM,GAE/Bg/B,EAASC,gBACVD,EAASC,cAAgB,IAAiBxhC,UAAUuhC,EAASC,cAAe,CAAChkC,KAAM,eAAgBnP,OAAQV,UAGvFH,IAAnB+zC,EAASjI,QACViI,EAASE,OAAS,IAAkBjhC,aAAa+gC,EAASjI,MAAO,CAAC54B,cAAc,KAGlF,IAAwBqQ,iBAAiBpjB,EAAI4zC,EAAStzB,iBAEnDszB,EAASG,WACVH,EAASG,SAAW3zC,KAAK4zC,YAAYJ,EAASG,kBAKzC3zC,KAAKwyC,aAAa5yC,GAElBI,KAAKuyC,UAAU3yC,GAAM4zC,IAIzB,mBAAmBlzC,EAAgBqY,GACxC,OAAGrY,EAAS,EAAUN,KAAK8pC,aAAaxpC,EAAQqY,GACpC3Y,KAAK6zC,WAAWvzC,EAAQqY,GAG/B,aAAarY,GAClB,OAAON,KAAK8zC,mBAAmBxzC,GAAQ0F,KAAK+tC,IAC1C,OAAOA,EAAQ7rC,GACb,IAAK,WACH,OAAO6rC,EAAQN,cACjB,IAAK,cACL,IAAK,WACH,OAAOM,EAAQd,cA6BhB,YAAYrzC,EAAY+Y,GAC7B,GAAG,IAAgB6G,UAAU5f,GAC3B,OAAOI,KAAKg0C,eAAep0C,EAAI+Y,GAGjC,MAAMo6B,EAAW/yC,KAAKi5B,UAAUr5B,GAChC,GAAGmzC,IAAap6B,EAAU,CACxB,MAAMgJ,EAAO,IAAgB/B,QAAQhgB,GACrC,GAAG+hB,EAAKkxB,UAAaE,EAASzH,aAAmDuH,SAC/ElxB,EAAKrZ,OAAOsZ,KACZ,OAAO1a,QAAQC,QAAQ4rC,GAI3B,MAAMzyC,GAAUV,EAChB,YAAiCH,IAA9BO,KAAKwyC,aAAalyC,GACZN,KAAKwyC,aAAalyC,GAIpBN,KAAKwyC,aAAalyC,GAAU,IAAW8G,UAAU,uBAAwB,CAC9E42B,QAASp+B,IACRoG,KAAMoK,IACP,IAAgBuG,aAAavG,EAAOwG,OAAO,GAC3C,IAAgBN,aAAalG,EAAO4D,OACpC,MAAM++B,EAAW3iC,EAAO6jC,UAWxB,OAVGlB,GAAYA,EAASE,YAAcF,EAASE,WAAWrzC,KACxDmzC,EAASE,WAAa,IAAiBhhC,UAAU8gC,EAASE,WAAY,CAACxjC,KAAM,eAAgBnP,OAAQA,KAIvG,IAAwB0iB,iBAAiB1iB,EAAQyyC,EAAS7yB,wBACnDlgB,KAAKwyC,aAAalyC,GACzBN,KAAKi5B,UAAUr5B,GAAMmzC,EACrB,UAAUlrC,UAAU,mBAAoBjI,GAEjCmzC,IAIJ,kBAAkBnzC,EAAYwkC,GACnC,OAAOpkC,KAAK8pC,YAAYlqC,GAAIoG,KAAMqlC,IAC5BjH,GACFiH,EAAS6I,iBACqB,sBAA9B7I,EAAS6I,gBAAgBhsC,EAClBmjC,EAAS6I,gBAAgBC,KAG3B,IAAW/sC,UAAU,4BAA6B,CACvDZ,KAAM,IAAgBgD,kBAAkB5J,KACvCoG,KAAMouC,SACmB30C,IAAvBO,KAAKi5B,UAAUr5B,KAChBI,KAAKi5B,UAAUr5B,GAAIs0C,gBAAkBE,GAG/BA,EAAyDD,QAKhE,uBAAuBv0C,EAAYsX,EAAoC,CAAChP,EAAG,6BAA8ByS,EAAQ,IAAKD,EAAS,GACpI,GAAgB,8BAAbxD,EAAOhP,EAAmC,CAC3C,MAAMyZ,EAAO,IAAgB/B,QAAQhgB,GACrC,GAAG+hB,GACCA,EAAKrZ,SACHqZ,EAAKrZ,OAAOuZ,QACZF,EAAKrZ,OAAOT,YAAc8Z,EAAKrZ,OAAOy7B,UAAYpiB,EAAK0X,cAE3D,OAAOnyB,QAAQyD,SAInB,OAAO,IAAWi3B,mBAAmB,2BAA4B,CAC/DjiB,QAAS,IAAgBsc,gBAAgBr8B,GACzCsX,SACAwD,SACAC,QACAC,KAAM,GACL,CAAC01B,aAAc,KAAKtqC,KAAKoK,IAC1B,IAAgBkG,aAAclG,EAAmE4D,OAC1F5D,IA6BJ,sBAAsBxQ,EAAYU,GACvC,OAAO,IAAWg6B,gBAAgB,0BAA2B,CAC3D3a,QAAS,IAAgBsc,gBAAgBr8B,GACzCosC,YAAa,IAAgBxiC,iBAAiBlJ,KAC7C0F,KAAKquC,IACN,IAAgB/9B,aAAa+9B,EAAmBrgC,OACzCqgC,EAAmBrI,cAIvB,eAAepsC,EAAY+Y,GAChC,QAA0BlZ,IAAvBO,KAAKi5B,UAAUr5B,KAAsB+Y,EACtC,OAAOzR,QAAQC,QAAQnH,KAAKi5B,UAAUr5B,IAGxC,MAAMU,GAAUV,EAChB,YAAiCH,IAA9BO,KAAKwyC,aAAalyC,GACZN,KAAKwyC,aAAalyC,GAGpBN,KAAKwyC,aAAalyC,GAAU,IAAW8G,UAAU,0BAA2B,CACjFuY,QAAS,IAAgBsc,gBAAgBr8B,KACxCoG,KAAMoK,IACP,IAAgBuG,aAAavG,EAAOwG,OAAO,GAC3C,IAAgBN,aAAalG,EAAO4D,OACpC,MAAMsgC,EAAclkC,EAAO6jC,UAW3B,OAVGK,GAAeA,EAAYrB,WAAWrzC,KACvC00C,EAAYrB,WAAa,IAAiBhhC,UAAUqiC,EAAYrB,WAAY,CAACxjC,KAAM,eAAgBnP,YAGrG,IAAwB0iB,iBAAiB1iB,EAAQg0C,EAAYp0B,wBAEtDlgB,KAAKwyC,aAAalyC,GACzBN,KAAKi5B,UAAUr5B,GAAM00C,EACrB,UAAUzsC,UAAU,mBAAoBjI,GAEjC00C,GACL/lC,IACF,OAAQA,EAAMkB,MACZ,IAAK,kBACH,IAAIkQ,EAAU,IAAgBC,QAAQhgB,GACtC+f,EAAU,CAACzX,EAAG,mBAAoBqR,YAAaoG,EAAQpG,YAAajH,MAAOqN,EAAQrN,OACnF,IAAkB7K,qBAAqB,CACrCS,EAAG,UACHb,QAAS,CAAC,CACRa,EAAG,gBACH8iB,WAAYprB,IAEdgX,MAAO,CAAC+I,GACR3L,MAAO,KAKb,OAAO9M,QAAQyD,OAAO4D,KAInB,8BAA8B3O,UAC5BI,KAAKi5B,UAAUr5B,UACfI,KAAKwyC,cAAc5yC,GAC1B,IAAW8sB,WAAW,2BAA6BnjB,GAAYA,EAAOoW,QAAsCqL,aAAeprB,GAC3H,UAAUiI,UAAU,mBAAoBjI,GAGnC,cAAc4V,EAAoBC,EAAmB81B,GAC1D,OAAO,IAAWnkC,UAAU,wBAAyB,CACnDoO,aACAC,YACA81B,UACCvlC,KAAKwO,IACN,IAAgBc,YAAYd,GAErBxU,KAAK6zC,WAAW,UAAU37B,MAAM,KAIpC,mBAAmBke,GACxB,OAAO,IAAWhvB,UAAU,4BAA6B,CACvDqrB,KAAM2D,IACLpwB,KAAMuuC,IACP,IAAgBj+B,aAAai+B,EAAavgC,OAE1C,MAAMkE,EAAO,UAAUA,KACvB,IAAiBjG,UAAUsiC,EAAaviC,MAAO,CAC7CvC,KAAM,eACNnP,OAAQ4X,IAGV,IAAkBzQ,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,kBACH+M,QAASiD,EACTtO,KAAM,aAAM,GACZoI,MAAO,IAAgBoE,QAAQ8B,GAAMlG,MACrCwiC,UAAU,OAMX,uBAAuBl0C,GACzBN,KAAKyyC,gBAAgBnyC,WACfN,KAAKyyC,gBAAgBnyC,GAIzB,WAAWA,EAAgB0R,EAAgExD,GAChG,MAAM2oB,EAAY,IAAgB3tB,iBAAiBlJ,GAEnD,IACIm0C,EADA/I,GAAS,EAETgJ,EAAQ10C,KAAKyyC,gBAAgBnyC,GACjC,GAAIo0C,GAAUA,EAAMlmC,GAiCc,iBAAjBkmC,EAAMlmC,GACrBimC,EAAmBC,EAAMlmC,IAEzBimC,EAAmBvtC,QAAQC,QAAQutC,EAAMlmC,IACzCk9B,GAAS,OArCgB,CACrBgJ,IACFA,EAAQ10C,KAAKyyC,gBAAgBnyC,GAAU,IAIzC,MAAMq0C,EAAsE,CAC1EzsC,EAAG,6BACHI,OAAQ,GACR9B,KAAM2wB,EACNyT,SAAU54B,EAAM44B,UAGN,cAATp8B,IACDmmC,EAAsBrsC,OAAOssC,KAAM,GAGrC,MAAMtP,EAAkB,CAACuM,KAAM7/B,EAAM8/B,MAAOhe,SAAU6gB,GAQhDpqC,EAAU,IAAmB+iC,SAAShI,GAC5CmP,EAAmBC,EAAMlmC,GAAQjE,EAAQvE,KAAKmwB,GACrCue,EAAMlmC,GAAQ8C,IAAIC,gBAAgB4kB,IAa7C,MAAO,CAACuV,SAAQlF,YAAaiO,GAGxB,UAAUI,EAAkBv0C,EAAgB0R,EAAgExD,EAAqB1C,EAAM,IAAIC,OAChJ,MAAM,OAAC2/B,EAAM,YAAElF,GAAexmC,KAAKumC,WAAWjmC,EAAQ0R,EAAOxD,GAE7D,IAAI+B,EACJ,GAAGm7B,EAEDn7B,EAAW,KACT,YAAeskC,EAAK/oC,GACpB+oC,EAAIhyC,QAAQiyC,MAAQ,QAEjB,CACL,MAAMC,EAAU,UAAUjlB,SAASklB,kBAChCD,GACDjpC,EAAIolC,UAAUpvC,IAAI,WAGpByO,EAAW,KACT,YAAeskC,EAAK/oC,GAEpBmF,WAAW,KACN4jC,EAAII,oBACLJ,EAAIhyC,QAAQiyC,MAAQ,GAEjBC,GACD,IAAcG,cAAcppC,EAAK,KAC/BA,EAAIolC,UAAU9rB,OAAO,eAI1B2vB,EAAU,IAAM,IAiBvB,MAAO,CAACrJ,SAAQlF,YAbMA,EAAYxgC,KAAMqL,GAK/B,IAAInK,QAAeC,IACxB,YAAmB2E,EAAKuF,EAAK,KAC3Bd,IACApJ,UASD,SAAS0tC,EAAkBv0C,EAAgB60C,GAAW,EAAO7iC,EAAQ,I,MAC1E,MAAMN,EAAQ,IAAgBs0B,aAAahmC,GAGrC80C,IAAoBpjC,EACpBqjC,EAAiBR,EAAIS,oBAAuBT,EAAIS,kBAAkCpE,UAAUqE,SAAS,SAErGr9B,EAAO,UAAUA,KAGvB,GAAG5X,IAAW4X,GAAQi9B,EAKpB,OAJAN,EAAIW,UAAY,GAChBX,EAAIhyC,QAAQiyC,MAAQ,GACpBD,EAAI3D,UAAUpvC,IAAI,oBAClB+yC,EAAI3D,UAAU9rB,OAAO,wBAIvB,GAAG9kB,EAAS,EAAG,CACb,MAAMkU,EAAO,IAAgB4B,QAAQ9V,GACrC,GAAGkU,GAAQA,EAAKlM,QAAUkM,EAAKlM,OAAO2Q,QAKpC,OAJA47B,EAAIW,UAAY,GAChBX,EAAIhyC,QAAQiyC,MAAQ,IAAgBW,iBAAiBn1C,GACrDu0C,EAAI3D,UAAUpvC,IAAI,6BAClB+yC,EAAI3D,UAAU9rB,OAAO,eAKzB,IAAIgwB,IAAoBC,IAAmBr1C,KAAKyyC,gBAAgBnyC,GAAS,CACvE,IASIo1C,EATAZ,EAAQ,GAUZ,IATGx0C,GAAWA,IAAW4X,GAASi9B,IAChCL,EAAQ,IAAgBW,iBAAiBn1C,IAG3Cu0C,EAAIW,UAAY,GAChBX,EAAI3D,UAAU9rB,OAAO,cAAe,wBACpCyvB,EAAIhyC,QAAQiyC,MAAQA,EAGhBxiC,EAIFojC,EAAO,IAAkBv8B,gBAAgB7G,OAJhC,CAETojC,EAAoB,QAAb,EADM,IAAgB7+B,QAAQvW,GACzB4Y,gBAAQ,QAAI,GAK1B27B,EAAIlhC,UAAY+hC,EAIlB,OAAGN,EACMp1C,KAAK21C,UAAUd,EAAKv0C,EAAQ0R,EAjDT,oBAgD5B,GAMJ,MAAMgnB,EAAoB,IAAIqZ,EAC9B,IAAerZ,kBAAoBA,EACpB,a,gCCrlBf,sG,sSAyaA,MAAMjE,EAAiB,IA5YhB,MAIL,cAHQ,KAAA6gB,KAAsC,GACtC,KAAAC,oBAA+C,GAMhD,KAAAC,oBAAsB,KAC3B,IAAI,MAAMl2C,KAAMI,KAAK41C,KAAM,CACzB,MAAMle,EAAM13B,KAAK41C,KAAKh2C,GAEtB,GAAG83B,EAAIqe,kBAAmB,QACjBre,EAAIqe,yBACU,IAAmB7hB,gBAAgBwD,GACpCrmB,OAVxB,IAAWykC,oBAAsB91C,KAAK81C,oBAejC,QAAQpe,EAAe1zB,GAC5B,GAAa,kBAAV0zB,EAAIxvB,EACL,OAGF,MAAM8tC,EAASh2C,KAAK41C,KAAKle,EAAI93B,IAQ7B,GANG83B,EAAI/B,iBACL,YAAyB,iBAAkBqgB,EAAQte,GACnD,IAAkBqY,YAAYrY,EAAI/B,eAAgB3xB,IAIjDgyC,EAaD,OAXKte,EAAIhD,SACDshB,EAAOthB,SAAQshB,EAAOthB,OAASgD,EAAIhD,SAUpCshB,EA+ET,GAzEAh2C,KAAK41C,KAAKle,EAAI93B,IAAM83B,EAQpBA,EAAIvE,WAAW1xB,QAAQ8xB,IACrB,OAAOA,EAAUrrB,GACf,IAAK,4BACHwvB,EAAIjD,UAAY,IAAkB0L,cAAc5M,EAAUkB,WAC1D,MAEF,IAAK,yBACHiD,EAAIjE,SAAWF,EAAUE,SACzBiE,EAAIue,WAAa1iB,EAAUjhB,MAC3BolB,EAAIwe,eAAiB3iB,EAAU4iB,UAC/Bze,EAAIjoB,KAAO8jB,EAAUjrB,OAAOkrB,OAA2B,cAAlBkE,EAAI7E,UAA4B,QAAU,QAI/E,MAEF,IAAK,yBACH6E,EAAIjE,SAAWF,EAAUE,SACzBiE,EAAI9D,EAAIL,EAAUK,EAClB8D,EAAI7D,EAAIN,EAAUM,EAEQN,EAAUjrB,OAAOisB,cACzCmD,EAAIjoB,KAAO,QAEXioB,EAAIjoB,KAAO,QAEb,MAEF,IAAK,gCACkBhQ,IAAlB8zB,EAAU6iB,MACX1e,EAAI2H,gBAAkB9L,EAAU6iB,IAChC1e,EAAI4H,aAAe,IAAkB7sB,aAAailB,EAAI2H,gBAAiB,CAAC3sB,SAAS,EAAMC,cAAc,KAGpG4gB,EAAU8iB,aACmB,yBAA3B9iB,EAAU8iB,WAAWnuC,SACfqrB,EAAU8iB,WACkB,sBAA3B9iB,EAAU8iB,WAAWnuC,IAC7BwvB,EAAI4e,gBAAkB/iB,EAAU8iB,aAKQ,eAAlB3e,EAAI7E,YAA+B6E,EAAIhD,QAAU,IAAqB6hB,qBAC9F7e,EAAIjoB,KAAO,UACXioB,EAAIwJ,QAAU,GAEhB,MAEF,IAAK,6BACHxJ,EAAIjoB,KAAO,QACXioB,EAAI9D,EAAIL,EAAUK,EAClB8D,EAAI7D,EAAIN,EAAUM,EAClB,MAEF,IAAK,4BACmB,cAAlB6D,EAAI7E,WAA+C,cAAlB6E,EAAI7E,YACvC6E,EAAIjoB,KAAO,OAGbioB,EAAI8e,UAAW,MAKjB9e,EAAI7E,UACN,OAAO6E,EAAIjoB,MACT,IAAK,MACL,IAAK,QACL,IAAK,QACHioB,EAAI7E,UAAY,YAChB,MACF,IAAK,UACH6E,EAAI7E,UAAY,aAChB,MACF,IAAK,QACH6E,EAAI7E,UAAY,aAChB,MACF,IAAK,QACH6E,EAAI7E,UAAY,YAChB,MACF,QACE6E,EAAI7E,UAAY,2BActB,GATqB,oBAAlB6E,EAAI7E,YACL6E,EAAIjoB,KAAO,OAGG,UAAbioB,EAAIjoB,MAAiC,UAAbioB,EAAIjoB,OAE7BioB,EAAIjD,UAAYiD,EAAIjoB,KAAO,IAAM,YAAY,IAAIkK,KAAgB,IAAX+d,EAAI9tB,MAAc,CAAC6sC,eAAe,EAAMC,aAAa,IAAOr3C,QAAQ,SAAU,KAAKA,QAAQ,KAAM,MAGtJ,IAAWs3C,0BACK,QAAbjf,EAAIjoB,MAAkBioB,EAAIlpB,KAAO,KAAqB,UAAbkpB,EAAIjoB,MAAiC,UAAbioB,EAAIjoB,MAAkB,CACzFioB,EAAIqe,mBAAoB,EAExB,MAAM/hB,EAAe,IAAmBE,gBAAgBwD,GACpD1D,EAAa3iB,MACf2iB,EAAa3iB,IAAMrR,KAAK42C,WAAWlf,IAuBzC,OAdIA,EAAIjD,YACNiD,EAAIjD,UAAY,IAGG,4BAAlBiD,EAAI7E,WAA6D,wBAAlB6E,EAAIjD,YACpDiD,EAAIjoB,KAAO,UACXioB,EAAI8e,UAAW,EACf9e,EAAIwJ,QAAU,GAOTxJ,EAGF,OAAOmf,GACZ,OAAO,YAASA,IAA4B,iBAAZ,EAAuBA,EAAe72C,KAAK41C,KAAKiB,GAG3E,cAAcnf,GACnB,MAAO,CACLxvB,EAAG,qBACHtI,GAAI,CACFsI,EAAG,gBACHtI,GAAI83B,EAAI93B,GACR2Z,YAAame,EAAIne,YACjBoc,eAAgB+B,EAAI/B,gBAEtBgI,YAAa,GAIV,SAASjG,EAAiB2X,GAC/B,MAAO,CACLnnC,EAAG,4BACHtI,GAAI83B,EAAI93B,GACR2Z,YAAame,EAAIne,YACjBoc,eAAgB+B,EAAI/B,eACpBic,WAAYvC,GAIT,uBAAuB3X,EAAiB/C,EAA6Bgd,EAAkB5D,GAC5F,MAAM+I,EAAoB92C,KAAKy3B,SAASC,EAAK/C,aAAK,EAALA,EAAOllB,MAEpD,IAAIy+B,EAOJ,OALEA,EADCvZ,EACU+C,EAAIwJ,QAAU,aAAe,aAE7BxJ,EAAI7E,WAAa,2BAGvB,CACLgf,KAAMna,EAAIoa,MACVhe,SAAUgjB,EACVtoC,KAAMmmB,EAAQA,EAAMnmB,KAAOkpB,EAAIlpB,KAC/B0/B,WACApb,SAAU4E,EAAIjD,UACdkd,UACA5D,aAIG,WAAWrW,EAAiB4V,GAAW,EAAO3Y,GACnD,IAAIllB,EAWJ,OATEA,EADC69B,EACM,WACC3Y,EACD,QACC+C,EAAIqe,kBACL,SAEA,WAGF,YAAWtmC,EAAMzP,KAAK+2C,uBAAuBrf,EAAK/C,IAGpD,YAAY+C,EAAiB/C,GAClC,IAAIpqB,EAAwBrD,QAAQC,UAEpC,MAAM6sB,EAAe,IAAmBE,gBAAgBwD,EAAK/C,EAAMllB,MAYnE,OAXIukB,EAAa3iB,MAEb9G,EADC,UAAWoqB,EACF,YAAK,IAAiBoc,uBAAuBpc,EAAMrlB,QAASooB,EAAIwJ,UAAUl7B,KAAKqL,IACvF2iB,EAAa3iB,IAAMA,IAIX,IAAiB2lC,aAAatf,EAAK/C,IAI1C,CAACA,QAAOX,eAAczpB,WAGxB,SAASmtB,EAAiBuf,GAAmB,GAClD,MAAMtiB,EAAQ,IAAiByc,gBAAgB1Z,EAAK,EAAG,GAAIuf,GAC3D,MAAe,mBAAZtiB,EAAMzsB,EAA+B,KACjClI,KAAKk3C,YAAYxf,EAAK/C,GAGxB,iBAAiB+C,EAAiB2X,GACvC,OAAO,YAAsBrvC,KAAKy3B,SAASC,EAAK2X,GAAY,CAACvc,SAAU4E,EAAIjD,YAGtE,YAAYiD,EAAiBia,EAAkB5D,GACpD,MAAMjb,EAAW9yB,KAAK2lC,iBAAiBjO,GAEvC,IAAI4V,EAAyB,IAAmB4E,YAAYpf,GAC5D,GAAGwa,EACD,OAAOA,EAGT,MAAMhI,EAAkBtlC,KAAK+2C,uBAAuBrf,OAAKj4B,EAAWkyC,EAAS5D,GAC7ET,EAAW,IAAmBA,SAAShI,GAEvC,MAAMtR,EAAe,IAAmBE,gBAAgBwD,GAClDyf,EAAkB7J,EA8BxB,OA7BA6J,EAAgBnxC,KAAMmwB,IACpBnC,EAAa3iB,IAAMC,IAAIC,gBAAgB4kB,GACvCnC,EAAaG,WAAagC,EAAK3nB,MAC9B,QAEa,UAAbkpB,EAAIjoB,MAAqB,IAAqB2nC,oBAC/C9J,EAAW6J,EAAgBnxC,KAAWmwB,GAAS,EAAD,gCAC5C,MAAMkhB,EAAS,IAAIC,WAkBnB,aAhBM,IAAIpwC,QAAc,CAACC,EAASwD,KAChC0sC,EAAOE,UAAanoC,IAClB,MAAMooC,EAAQ,IAAI7G,WAAWvhC,EAAEm/B,OAAOn+B,QAEtC,IAAqBqnC,OAAOD,GAAOxxC,KAAKoK,IACtC4jB,EAAa3iB,IAAMjB,EAAOiB,IAC1BlK,KACEkE,WACK2oB,EAAaG,WACpBxpB,EAAOU,MAIXgsC,EAAOK,kBAAkBvhB,KAGpBA,OAIJmX,EAGF,kBAAkB5V,EAAiBzzB,EAA2B0zC,GACnE,MAAM91C,EAAM61B,EAAI93B,GAAK,IAAM+3C,EAC3B,GAAG33C,KAAK61C,oBAAoBh0C,GAAoB,OAE5C61B,EAAIkgB,sBACN,YAA6BlgB,EAAK,CAAC,wBACnCA,EAAIkgB,oBAAsB,IAG5B,MAAMjjB,EAAQ+C,EAAIkgB,oBAAoBD,GACnChjB,GAASA,EAAMf,GAAK3vB,EAAOhB,OAAS0xB,EAAMd,GAAK5vB,EAAOmI,SASzDpM,KAAK61C,oBAAoBh0C,IAAO,EAChCoC,EAAO4zC,OAAQ1hB,IAGb,MAAMxB,EAAQ,CACZtjB,IAAKC,IAAIC,gBAAgB4kB,GACzBvC,EAAG3vB,EAAOhB,MACV4wB,EAAG5vB,EAAOmI,QAGZsrB,EAAIkgB,oBAAoBD,GAAahjB,SAE9B30B,KAAK61C,oBAAoBh0C,MA6B7B,YAAY61B,EAAiBia,GAGlC,MAAMpnC,EAAUvK,KAAK83C,YAAYpgB,EAAKia,GAKtC,OAJApnC,EAAQvE,KAAK,KACX,MAAMguB,EAAe,IAAmBE,gBAAgBwD,GACxD,IAAmByX,qBAAqBnb,EAAa3iB,IAAKqmB,EAAIjD,aAEzDlqB,IAKX,IAAewqB,eAAiBA,EACjB,O,gCC3af,4EAmBA,MAAMgjB,EAA2C,IAAIC,QAErD,IAAeC,iBAAmBF,EAElC,UAAUjjC,GAAG,kBAAoBxU,IACdyE,MAAMzC,KAAK4B,SAASg0C,iBAAiB,6BAA6B53C,QAC1EmB,QAAQQ,IACf,MAAM+9B,EAAY+X,EAAQ51C,IAAIF,GAG3B+9B,GACDA,EAAU55B,aAKD,MAAM+xC,EAOnB,YAAYxwC,GAJL,KAAAkhC,WAAY,EACZ,KAAAC,eAAgB,EAChB,KAAApsB,QAAS,EAGd1c,KAAKiC,QAAUiC,SAASC,cAAc,QACtCnE,KAAKiC,QAAQivC,UAAUpvC,IAAI,cAC3B9B,KAAKiC,QAAQoB,aAAa,MAAO,QAEjCrD,KAAKoG,OAAOuB,GACZowC,EAAQ70C,IAAIlD,KAAKiC,QAASjC,MAGrB,OAAO2H,GACZ,GAAGA,EACD,IAAI,IAAIlC,KAAKkC,EAEX3H,KAAKiC,QAAQY,QAAQ4C,GAAKkC,EAAQlC,GAAK,IAA6B,kBAAhBkC,EAAQlC,IAAqBkC,EAAQlC,GAAKkC,EAAQlC,IAAM,IAE5GzF,KAAKyF,GAAKkC,EAAQlC,GAInBzF,KAAKM,SAAW,UAAU4X,MAASlY,KAAK0c,OAGzC,YAAe1c,KAAKiC,QAAS,eAAKjC,KAAK8oC,cAAgB,QAAU,kBAFjE9oC,KAAKiC,QAAQ0R,UAAY,IAAgBusB,aAAalgC,KAAKM,OAAQN,KAAK6oC,UAAW7oC,KAAK8oC,kB,gCC9D9F,wIAqBO,MAAMsP,EAAa,CAAC1H,EAAe2H,IAAyB3H,EAAI5E,OAAO,CAACC,EAAK1zB,IAAU0zB,EAAM1zB,EAAOggC,GAEpG,SAASC,EAAoBC,EAAiB1b,GACnD,MAAM7a,EAAoB,GAC1B,IAAIthB,GAAO,EACX,MAA2C,KAApCA,EAAM63C,EAAMl5B,UAAUwd,KAC3B7a,EAAI1W,KAAKitC,EAAMz3B,OAAOpgB,EAAK,GAAG,IAGhC,OAAOshB,EAGF,SAASw2B,EAAkBD,EAAiBhoC,GACjD,IAAI,IAA2B9K,EAAd8yC,EAAM31C,OAAqB,EAAG6C,GAAK,IAAKA,EACvD8K,EAASgoC,EAAM9yC,GAAIA,EAAG8yC,GAInB,SAASE,EAAgFF,EAAiBt2C,EAAYy2C,EAAa73B,QAC7HphB,IAARohB,IAEW,KADZA,EAAM03B,EAAM53C,QAAQsB,KAElBs2C,EAAMz3B,OAAOD,EAAK,GAItB,MAAM83B,EAAuB12C,EAAQy2C,GAC/B/yC,EAAM4yC,EAAM31C,OAClB,IAAI+C,GAAOgzC,GAAgBJ,EAAM5yC,EAAM,GAAG+yC,GACxC,OAAOH,EAAMjtC,KAAKrJ,GAAW,EACxB,GAAG02C,GAAgBJ,EAAM,GAAGG,GAEjC,OADAH,EAAMpgC,QAAQlW,GACP,EAEP,IAAI,IAAIwD,EAAI,EAAGA,EAAIE,EAAKF,IACtB,GAAGkzC,EAAeJ,EAAM9yC,GAAGizC,GAEzB,OADAH,EAAMz3B,OAAOrb,EAAG,EAAGxD,GACZwD,EAMb,OADAwG,QAAQsC,MAAM,MAAOgqC,EAAOt2C,GACrBs2C,EAAM53C,QAAQsB,K,gCChEvB,kEAupBA,MAAMqF,EAAoB,IA9mBnB,MAAP,cACS,KAAAC,aAA6B,CAClCqxC,kBAAmB,GACnBC,kBAAmB,GACnBC,YAAa,KACbtxC,YAAa,MAGR,KAAAmZ,cAAqD,GACpD,KAAAo4B,UAAW,EAEX,KAAA7sC,IAAM,YAAO,UAAW,IAAS4C,MAAQ,IAASwY,KAAO,IAASD,KAClE,KAAA2xB,MAAQ,IAiHT,KAAAvxC,qBAAuB,CAACikB,EAAoB/jB,EAE9C,MAEH,MAAMsxC,EAAc,CAClBrvC,KAAM8hB,EAAc9hB,KACpByoB,IAAK3G,EAAc2G,IACnB6mB,SAAUxtB,EAAcytB,WAM1B,OAFAn5C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,uBAAwBttB,GAE9CA,EAAcxjB,GACnB,IAAK,iBACL,IAAK,sBACHlI,KAAKo5C,qBACL,MAEF,IAAK,cACHp5C,KAAKq5C,cAAc3tB,EAActlB,OAAQ6yC,GACzC,MAEF,IAAK,qBACL,IAAK,yBAA0B,CAC7Bj5C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,8CAA+C,OAAF,UAAMttB,IAChF,MAAMN,EAAQM,EAAcpjB,OAAO0Z,IAC7BxB,EAASkL,EAAc3J,UAAYqJ,EAAQ,UAAUlT,KAAOwT,EAAczW,SAC1EqkC,EAAO5tB,EAAcsS,SACtBtS,EAAcsS,QACdtS,EAAczW,SAAW,UAAUiD,KAExClY,KAAKq5C,cAAc,CACjBnxC,EAAG,mBACHG,QAAS,CACPH,EAAG,UACHI,OAAQojB,EAAcpjB,OACtB1I,GAAI8rB,EAAc9rB,GAClBmiB,QAAS,IAAgBxJ,cAAciI,GACvClI,QAAS,IAAgBC,cAAc+gC,GACvC1vC,KAAM8hB,EAAc9hB,KACpBvB,QAASqjB,EAAcrjB,QACvBgiB,SAAUqB,EAAcrB,SACxBwB,SAAUH,EAAcG,SACxBzjB,SAAUsjB,EAActjB,UAE1BqY,IAAKiL,EAAcjL,IACnB6R,UAAW5G,EAAc4G,WACxB2mB,GACH,MAGF,IAAK,kBACL,IAAK,UACH,IAAgB3iC,aAAaoV,EAAc1X,MAAOrM,EAAQgR,UAC1D,IAAgBhC,aAAa+U,EAAc9U,MAAOjP,EAAQgR,UAE1D+S,EAAcrkB,QAAQ5F,QAAS2E,IAC7BpG,KAAKq5C,cAAcjzC,EAAQ6yC,KAE7B,MAEF,QACEj5C,KAAKkM,IAAIkJ,KAAK,yBAA0BsW,KA9KtC,WACN,MAAM1U,EAAOhX,KACbA,KAAKuH,aAAe,IAAIgyC,MAAMv5C,KAAKuH,aAAc,CAC/CrE,IAAK,SAASqrC,EAA2C1sC,EAA8CwW,GAIrG,OAFAk2B,EAAO1sC,GAAOwW,EACdrB,EAAKwiC,oBACE,KAKN,mBACL,MAAMC,EAAKz5C,KAAKuH,aAChB,UAAgB8O,YAAY,UAAW,CACrCgc,IAAKonB,EAAGpnB,IACR5R,IAAKg5B,EAAGh5B,IACR7W,KAAM6vC,EAAG7vC,OAIL,sBACN,MAAMkM,EAAQ9V,KAAKuH,aACbmyC,EAAU5jC,EAAMuc,IAAM,EACtBsnB,EAAqB7jC,EAAM+iC,kBAAkBa,GACnD,IAAIC,EACF,OAAO,EAGT,MAAMtyC,EAAUsyC,EAAmBtyC,QACnC,IAAI,IAAI5B,EAAI,EAAG7C,EAASyE,EAAQzE,OAAQ6C,EAAI7C,IAAU6C,EACpDzF,KAAK0hB,WAAWra,EAAQ5B,IAqB1B,OAlBAqQ,EAAMuc,IAAMsnB,EAAmBtnB,IAC5BsnB,EAAmB/vC,MAAQkM,EAAMlM,KAAO+vC,EAAmB/vC,OAC5DkM,EAAMlM,KAAO+vC,EAAmB/vC,aAE3BkM,EAAM+iC,kBAAkBa,IAE3B15C,KAAK45C,uBACP9jC,EAAMgjC,aACNhjC,EAAMgjC,YAAYe,aAClB/jC,EAAMuc,KAAOvc,EAAMgjC,YAAYe,cAC3B/jC,EAAMgjC,YAAYgB,mBAIbhkC,EAAMgjC,YAAYe,aAHzBxpC,aAAayF,EAAMgjC,YAAYxoC,SAC/BwF,EAAMgjC,YAAc,QAMjB,EAGD,oBAAoBv5B,GAC1B,MAAMw6B,EAAWx6B,EAAYvf,KAAKg6C,gBAAgBz6B,GAAavf,KAAKuH,aACpE,IAAIwyC,EAASnB,kBAAkBh2C,OAC7B,OAAO,EAGTm3C,EAASnB,kBAAkBnhC,KAAK,CAACyH,EAAGpR,IAC3BoR,EAAEuB,IAAM3S,EAAE2S,KAInB,IAAIw5B,EAASF,EAASt5B,IAClBy5B,EAAU,EACVC,EAAY,EAChB,IAAI,IAAI10C,EAAI,EAAG7C,EAASm3C,EAASnB,kBAAkBh2C,OAAQ6C,EAAI7C,IAAU6C,EAAG,CAC1E,MAAMW,EAAS2zC,EAASnB,kBAAkBnzC,GAC1Cw0C,GAAU7zC,EAAOksB,UACd2nB,GAAU7zC,EAAOqa,MAClBy5B,EAAU9zC,EAAOqa,IACjB05B,EAAY10C,GAIhB,IAAIy0C,EACF,OAAO,EAGTl6C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,0BAA2BkB,EAASH,EAASnB,kBAAkB/vC,MAAM,EAAGsxC,EAAY,IAEjHJ,EAASt5B,IAAMy5B,EACf,IAAI,IAAIz0C,EAAI,EAAGA,GAAK00C,IAAa10C,EAAG,CAClC,MAAMW,EAAS2zC,EAASnB,kBAAkBnzC,GAG1CzF,KAAK0hB,WAAWtb,GAalB,OAXA2zC,EAASnB,kBAAkB93B,OAAO,EAAGq5B,EAAY,IAE7CJ,EAASnB,kBAAkBh2C,QAAUm3C,EAASjB,cAC5CiB,EAASjB,YAAYe,mBAIhBE,EAASjB,YAAYgB,aAH5BzpC,aAAa0pC,EAASjB,YAAYxoC,SAClCypC,EAASjB,YAAc,QAMpB,EAGF,qBACD94C,KAAKuH,aAAaC,aACpBxH,KAAKo6C,gBAuED,cAAcrwB,GAAQ,GAE5B,MAAMxiB,EAAevH,KAAKuH,aAC1B,IAAI8yC,EAAa9yC,EAAaC,YAC1B6yC,IACF9yC,EAAasxC,kBAAoB,GACjCtxC,EAAaqxC,kBAAoB,IAGhCrxC,EAAauxC,cACdzoC,aAAa9I,EAAauxC,YAAYxoC,SACtC/I,EAAauxC,YAAc,MAG7B,MAAMvuC,EAAU,IAAWnD,UAAU,wBAAyB,CAC5DqZ,IAAKlZ,EAAakZ,IAClB7W,KAAMrC,EAAaqC,KACnB+iC,KAAM,GACL,CACDr8B,QAAS,aACRtK,KAAMs0C,IAGP,GAFAt6C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,kBAAmBsB,GAEtB,4BAAvBA,EAAiBpyC,EAIlB,OAHAlI,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,mBAAoBsB,EAAiBjoB,KAClE9qB,EAAaqC,KAAO0wC,EAAiB1wC,UACrCrC,EAAa8qB,IAAMioB,EAAiBjoB,KAStC,GAJGtI,GACD,UAAUliB,UAAU,uBAGI,8BAAvByyC,EAAiBpyC,EAAmC,CACrD,IAAgBoO,aAAagkC,EAAiBtmC,OAC9C,IAAgB2C,aAAa2jC,EAAiB1jC,OAK9C0jC,EAAiBC,cAAc94C,QAAS2E,IACtC,OAAOA,EAAO8B,GACZ,IAAK,uBACL,IAAK,0BACL,IAAK,2BAEH,YADAlI,KAAKq5C,cAAcjzC,GAIvBpG,KAAK0hB,WAAWtb,KAIlBk0C,EAAiBE,aAAa/4C,QAASg5C,IACrCz6C,KAAK0hB,WAAW,CACdxZ,EAAG,mBACHG,QAASoyC,EACTh6B,IAAKlZ,EAAakZ,IAClB6R,UAAW,MAIf,MAAMooB,EAAmC,uBAAvBJ,EAAiBpyC,EAA6BoyC,EAAiBxkC,MAAQwkC,EAAiBK,mBAC1GpzC,EAAa8qB,IAAMqoB,EAAUroB,IAC7B9qB,EAAakZ,IAAMi6B,EAAUj6B,IAC7BlZ,EAAaqC,KAAO8wC,EAAU9wC,UAE9BrC,EAAakZ,IAAM65B,EAAiB75B,WAC7BlZ,EAAa8qB,WACb9qB,EAAaqC,KAKtB,GAA0B,4BAAvB0wC,EAAiBpyC,EAClB,OAAOlI,KAAKo6C,gBAEZp6C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,uBAQjC,OAJIqB,GACFr6C,KAAK46C,UAAUrzC,EAAcgD,GAGxBA,EAGD,qBAAqBgV,GAC3B,MAAMs7B,EAAe76C,KAAKg6C,gBAAgBz6B,GACpC86B,EAAaQ,EAAarzC,YAC5B6yC,IACFQ,EAAajC,kBAAoB,IAGhCiC,EAAa/B,cACdzoC,aAAawqC,EAAa/B,YAAYxoC,SACtCuqC,EAAa/B,YAAc,MAI7B,MAAMvuC,EAAU,IAAWnD,UAAU,+BAAgC,CACnEuY,QAAS,IAAgBsc,gBAAgB1c,GACzCrI,OAAQ,CAAChP,EAAG,8BACZuY,IAAKo6B,EAAap6B,IAClB9F,MAAO,IACN,CAACrK,QAAS,aAAatK,KAAMs0C,IAI9B,GAHAt6C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,0BAA2BsB,GACxDO,EAAap6B,IAAM,QAAS65B,EAAmBA,EAAiB75B,SAAMhhB,EAE5C,mCAAvB66C,EAAiBpyC,EAApB,CAKA,GAA0B,qCAAvBoyC,EAAiBpyC,EAMlB,OALAlI,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,wBAAyBsB,UAC/Ct6C,KAAK2gB,cAAcpB,QAG1Bvf,KAAK0hB,WAAW,CAACxZ,EAAG,sBAAuB8iB,WAAYzL,IAyBzD,GArBA,IAAgBjJ,aAAagkC,EAAiBtmC,OAC9C,IAAgB2C,aAAa2jC,EAAiB1jC,OAG9C5W,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,WAAYsB,EAAiBC,cAAc33C,OAAQ,yBAChF03C,EAAiBC,cAAc94C,QAAS2E,IACtCpG,KAAK0hB,WAAWtb,KAGlBpG,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,WAAYsB,EAAiBE,aAAa53C,OAAQ,wBAC/E03C,EAAiBE,aAAa/4C,QAASg5C,IACrCz6C,KAAK0hB,WAAW,CACdxZ,EAAG,0BACHG,QAASoyC,EACTh6B,IAAKo6B,EAAap6B,IAClB6R,UAAW,MAIftyB,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,qBAAsB6B,EAAap6B,KAEtC,8BAAvB65B,EAAiBpyC,IACjBoyC,EAAiBhyC,OAAc,MAChC,OAAOtI,KAAK86C,qBAAqBv7B,GAEjCvf,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,kCAtC7Bh5C,KAAKg5C,OAASh5C,KAAKkM,IAAI8sC,MAAM,2BAA4BsB,KA8C7D,OAJID,GACFr6C,KAAK46C,UAAUC,EAActwC,EAASgV,GAGjChV,EAGD,UAAUuL,EAAqBvL,EAAsCgV,GAC3EzJ,EAAMtO,YAAc+C,EACpB,UAAU1C,UAAU,sBAAuB0X,GAE3ChV,EAAQvE,KAAK,KACX8P,EAAMtO,YAAc,KACpB,UAAUK,UAAU,qBAAsB0X,IACzC,KACDzJ,EAAMtO,YAAc,OAIjB,gBAAgB+X,EAAmBkB,GACxC,IAAIA,EACF,MAAM,IAAI3R,MAAM,iCAAmCyQ,GAGrD,QAAKA,KAAavf,KAAK2gB,iBACrB3gB,KAAK2gB,cAAcpB,GAAa,CAC9BkB,MACAm4B,kBAAmB,GACnBE,YAAa,KACbtxC,YAAa,OAGR,GAMH,gBAAgB+X,EAAmBkB,GAKzC,YAJqChhB,IAAlCO,KAAK2gB,cAAcpB,IACpBvf,KAAKijB,gBAAgB1D,EAAWkB,GAG3BzgB,KAAK2gB,cAAcpB,GAGpB,cAAcnZ,EAAauB,EAK9B,IACH,IAAI4X,EAAY,EAChB,OAAOnZ,EAAO8B,GACZ,IAAK,0BACL,IAAK,2BACHqX,GAAa,IAAgBhZ,UAAUH,EAAOiC,QAAQiQ,SACtD,MACF,IAAK,8BACHiH,EAAYnZ,EAAO4kB,WACnB,MACF,IAAK,uBAEH,GADAzL,EAAYnZ,EAAO4kB,aACdzL,KAAavf,KAAK2gB,eACrB,OAAO,EAKb,MAAMo5B,EAAWx6B,EAAYvf,KAAKg6C,gBAAgBz6B,EAAWnZ,EAAOqa,KAAOzgB,KAAKuH,aAIhF,GAAGwyC,EAASvyC,YACV,OAAO,EAGT,GAAgB,yBAAbpB,EAAO8B,EAMR,QALI6xC,EAASgB,mBACThB,EAASgB,kBAAqBphC,KAAK5O,MA5a1B,IA8aX/K,KAAK86C,qBAAqBv7B,IAErB,EAGT,GAAgB,qBAAbnZ,EAAO8B,GACO,sBAAb9B,EAAO8B,GACM,4BAAb9B,EAAO8B,GACM,6BAAb9B,EAAO8B,EAAkC,CAC3C,MAAMG,EAAUjC,EAAOiC,QACjB2yC,EAAW,IAAgBz0C,UAAU8B,EAAQiQ,SAC7CmhB,EAAYpxB,EAAQgiB,UAAY,GACtC,IAAI4T,GAAc,EAClB,GAAG51B,EAAQ0Z,UAAY,IAAgByL,QAAQ,IAAgBjnB,UAAU8B,EAAQ0Z,SAAU1Z,EAAQC,OAAOixB,QAA2B0E,EAAS,WAC1IxE,EAAU1X,UAAY,IAAgByL,QAAQ,IAAgBjnB,UAAUkzB,EAAU1X,WAAY0X,EAAUzO,cAAgBiT,EAAS,cACjIxE,EAAUzO,aAAe,IAAgB8V,QAAQrH,EAAUzO,YAAY,KAAUiT,EAAS,eAC1F+c,EAAW,IAAM,IAAgBxtB,QAAQwtB,KAAc/c,EAAS,gBAChE+c,EAAW,IAAM,IAAgBla,SAASka,KAAc/c,EAAS,eAOnE,OANAj+B,KAAKkM,IAAIkJ,KAAK,qCAAsC4lC,EAAU/c,EAAQ51B,GACnEkX,GAAa,IAAgBuhB,QAAQvhB,GACtCvf,KAAK86C,qBAAqBv7B,GAE1Bvf,KAAKo5C,sBAEA,OAEJ,GAAG75B,IAAc,IAAgBuhB,QAAQvhB,GAE9C,OAAO,EAGT,IAAI07B,EACAC,EAEJ,GAAG90C,EAAOqa,IAAK,CAEb,GADes5B,EAASt5B,KAAOra,EAAOksB,WAAa,GACvClsB,EAAOqa,IAsBjB,OArBAzgB,KAAKg5C,OAASh5C,KAAKkM,IAAIkJ,KAAK,WAAY2kC,EAAU3zC,EAAQmZ,GAAa,IAAgBK,QAAQL,IAC/Fw6B,EAASnB,kBAAkBttC,KAAKlF,GAC5B2zC,EAASjB,aAAgBiB,EAASvyC,cACpCuyC,EAASjB,YAAc,CACrBxoC,QAAShP,OAAO2P,WAAW,KACzB8oC,EAASjB,YAAc,KAEpBiB,EAASvyC,cAIT+X,EACDvf,KAAK86C,qBAAqBv7B,GAE1Bvf,KAAKo6C,kBAjeF,KAueXL,EAASjB,YAAYgB,aAAc,GAC5B,EAGT,GAAG1zC,EAAOqa,IAAMs5B,EAASt5B,IACvBs5B,EAASt5B,IAAMra,EAAOqa,IACtBw6B,GAAS,EAETlB,EAASgB,kBAAoBphC,KAAK5O,WAC7B,GAAG3E,EAAOksB,UAEf,OAAO,EAGN/S,GAAa5X,EAAQiC,MAAQ5J,KAAKuH,aAAaqC,KAAOjC,EAAQiC,OAC/D5J,KAAKuH,aAAaqC,KAAOjC,EAAQiC,WAE9B,IAAI2V,GAAa5X,EAAQ0qB,IAAM,EAAG,CACvC,MAAMA,EAAM1qB,EAAQ0qB,IACd6mB,EAAWvxC,EAAQuxC,UAAY7mB,EAErC,GAAG6mB,IAAaa,EAAS1nB,IAAM,GAC1B6mB,EAAWa,EAAS1nB,IA0BrB,OAzBAryB,KAAKg5C,OAASh5C,KAAKkM,IAAIkJ,KAAK,WAAY2kC,EAAUA,EAASjB,aAAeiB,EAASjB,YAAYe,kBAEnDp6C,IAAzCs6C,EAASlB,kBAAkBK,KAC5Ba,EAASlB,kBAAkBK,GAAY,CAAC7mB,MAAKzoB,KAAMjC,EAAQiC,KAAMvC,QAAS,KAE5E0yC,EAASlB,kBAAkBK,GAAU7xC,QAAQiE,KAAKlF,GAE9C2zC,EAASjB,cACXiB,EAASjB,YAAc,CACrBxoC,QAAShP,OAAO2P,WAAW,KACzB8oC,EAASjB,YAAc,KAEpBiB,EAASvyC,aAIZxH,KAAKo6C,iBA9gBF,OAmhBLL,EAASjB,YAAYe,aACvBE,EAASjB,YAAYe,YAAcX,KACnCa,EAASjB,YAAYe,YAAcX,IAE9B,EAIRa,EAAS1nB,MAAQA,IAClB0nB,EAAS1nB,IAAMA,EACZ1qB,EAAQiC,MAAQmwC,EAASnwC,KAAOjC,EAAQiC,OACzCmwC,EAASnwC,KAAOjC,EAAQiC,MAG1BsxC,GAAS,GAIbl7C,KAAK0hB,WAAWtb,GAEb60C,EACDj7C,KAAKm7C,oBAAoB57B,GACjB27B,GACRl7C,KAAK45C,sBAIF,WAAWxzC,GAEhB,UAAU2oC,cAAc3oC,EAAO8B,EAAG9B,GAG7B,SACFpG,KAAK+4C,WAIR/4C,KAAKkM,IAAI,UAETlM,KAAK+4C,UAAW,EAEhB,UAAgBljC,WAAW7P,KAAKo1C,IAC9B,MAAMtlC,EAAQslC,EAAO/zC,QAGjByO,GAAUA,EAAM2K,KAAQ3K,EAAMlM,MAASkM,EAAMuc,KA4B/C/e,OAAOiC,OAAOvV,KAAKuH,aAAcuO,GAEjC9V,KAAKkM,IAAI,sBAAuBoH,OAAOiC,OAAO,GAAIO,IAElD9V,KAAKo6C,eAAc,KA/BnBp6C,KAAKkM,IAAI,sBAETlM,KAAKuH,aAAaC,YAAc,IAAIN,QAASC,IAC3C,IAAWC,UAAU,mBAAoB,GAAI,CAACszB,YAAY,IAAO10B,KAAMq1C,IACrEr7C,KAAKuH,aAAa8qB,IAAMgpB,EAAYhpB,IACpCryB,KAAKuH,aAAakZ,IAAM46B,EAAY56B,IACpCzgB,KAAKuH,aAAaqC,KAAOyxC,EAAYzxC,KACrC5J,KAAKw5C,mBAEHx5C,KAAKuH,aAAaC,YAAc,KAChCL,SA4BR,IAAWm0C,oBAAoBt7C,KAAKyH,sBAEpCzH,KAAKuH,aAAaC,YAAYxB,KAAK,KACjChG,KAAKu7C,kBAOb,IAAej0C,kBAAoBA,EACpB,O,gCCzpBf,kCAMO,MAAMk0C,EAAuC,GAC9Ct4C,EAAM,CAACu4C,EAA2EpqC,KACnFoqC,aAAgBC,kBAAoBD,aAAgBE,iBAAkBF,EAAKptC,IAAMgD,EAC5EoqC,aAAgBG,gBAAiBH,EAAKI,eAAe,KAAM,OAAQxqC,GACtEoqC,EAAKjN,MAAMsN,gBAAkB,OAASzqC,EAAM,KAIpC,SAAS0qC,EAAmBN,EAA2EpqC,EAAad,EAAkCyrC,GAAW,GAC9K,IAAI3qC,EAGF,OAFApF,QAAQsC,MAAM,8BAA+BktC,EAAMpqC,IAE5C,EAGT,GAAKmqC,EAAWnqC,IAAwB2qC,GAAaP,aAAgBE,iBAMnE,OALGF,GACDv4C,EAAIu4C,EAAMpqC,GAGZd,GAAYA,KACL,EACF,CACL,MAAM0rC,EAAUR,aAAgBC,iBAC1BQ,EAASD,EAAUR,EAA2B,IAAI1vC,MA0BxD,OAxBAmwC,EAAO7tC,IAAMgD,EAEb6qC,EAAOt6C,iBAAiB,OAAQ,MAC1Bq6C,GAAWR,GACbv4C,EAAIu4C,EAAMpqC,GAGZmqC,EAAWnqC,IAAO,EAEfd,GAKDA,MAMDA,GACD2rC,EAAOt6C,iBAAiB,QAAS2O,IAG5B,K,4LC/CI,MAAM4rC,EAKnB,YAAYC,GAHJ,KAAA9xC,MAAkC,IAAIvJ,IACtC,KAAAs7C,QAAS,EAGfr8C,KAAKs8C,SAAW,IAAIC,qBAAsBC,IACxC,GAAGx8C,KAAKq8C,OACN,OAGF,MAAMI,EAAoD,GAE1DD,EAAQ/6C,QAAQi7C,IACd,MAAMnO,EAASmO,EAAMnO,OAElBvuC,KAAKsK,MAAMnI,IAAIosC,KAAYmO,EAAMC,iBAGlC38C,KAAKsK,MAAMpH,IAAIqrC,EAAQmO,EAAMC,gBAW/BF,EAAQC,EAAMC,eAAiB,UAAY,QAAQ,CAACpO,SAAQqO,QAASF,EAAMC,oBAK7EF,EAAQh7C,QAAQsmC,IACdqU,EAAmBrU,EAAKwG,OAAQxG,EAAK6U,aAKpC,aACL,MAAMtyC,EAAsB,GAO5B,OANAtK,KAAKsK,MAAM7I,QAAQ,CAAC4W,EAAOxW,KACtBwW,GACD/N,EAAMgB,KAAKzJ,KAIRyI,EAGF,eACL,MAAMsyC,EAAU58C,KAAK68C,aACrB,IAAI,MAAMtO,KAAUqO,EAClB58C,KAAKsK,MAAMpH,IAAIqrC,GAAQ,GAIpB,UAAUA,GACf,OAAOvuC,KAAKsK,MAAMnI,IAAIosC,GAGjB,aACLvuC,KAAKs8C,SAASQ,aACd98C,KAAKsK,MAAM3I,QAGN,UACL3B,KAAKs8C,SAASQ,aAGZ,MAAMC,EAAU,IAAI/8C,KAAKsK,MAAMiJ,QAC/B,IAAI,MAAMg7B,KAAUwO,EAElB/8C,KAAKs8C,SAASU,QAAQzO,GAKrB,iBACL,MAAMqO,EAAU58C,KAAK68C,aACrB,IAAI,MAAMtO,KAAUqO,EAClB58C,KAAKs8C,SAASW,UAAU1O,GAG1B,IAAI,MAAMA,KAAUqO,EAClB58C,KAAKs8C,SAASU,QAAQzO,GAInB,QAAQA,GACbvuC,KAAKsK,MAAMpH,IAAIqrC,GAAQ,GACvBvuC,KAAKs8C,SAASU,QAAQzO,GAGjB,UAAUA,GACfvuC,KAAKs8C,SAASW,UAAU1O,GACxBvuC,KAAKsK,MAAM7F,OAAO8pC,GAGb,SACLvuC,KAAKq8C,QAAS,EAGT,mBACLr8C,KAAKk9C,SACLl9C,KAAKm9C,UAGA,OACLn9C,KAAKq8C,QAAS,G,kTCjGX,MAAM,EAWX,YAAsBe,EAbD,GAaC,KAAAA,gBAVf,KAAAzL,QAAU,EACP,KAAAvnC,MAAoC,GACpC,KAAAizC,UAAsC,IAAIp8C,IAE1C,KAAAq8C,YAA6B,KAC7B,KAAAC,cAA4B,KAE5B,KAAArxC,IAAM,OAAAib,EAAA,GAAO,KAAM,IAASrY,OAIpC9O,KAAKw9C,aAAe,YAAS,IAAMx9C,KAAKy9C,gBAAiB,IAAI,GAGxD,QACLz9C,KAAKq9C,UAAU17C,QAEf3B,KAAKoK,MAAMxH,OAAS,EAOf,OACF5C,KAAKs9C,cAGRt9C,KAAKs9C,YAAc,IAAIp2C,QAAQ,CAACC,EAASwD,KACvC3K,KAAKu9C,cAAgBp2C,KAUlB,SACDnH,KAAKu9C,gBAETv9C,KAAKu9C,gBACLv9C,KAAKu9C,cAAgBv9C,KAAKs9C,YAAc,KAExCt9C,KAAKw9C,gBAGS,YAAYE,G,yCAC1B,IAAG19C,KAAKs9C,YAAR,CAIAt9C,KAAKq9C,UAAUv7C,IAAI47C,GAMnB,UAIQ19C,KAAK29C,SAASD,GACpB,MAAMryC,GACF,CAAC,iBAAkB,mBAAmBma,SAASna,IACjDrL,KAAKkM,IAAIqC,MAAM,wBAAyBlD,GAI5CrL,KAAKq9C,UAAU54C,OAAOi5C,GAMtB19C,KAAKw9C,mBAGG,SAASE,GACjB,OAAOA,EAAK7nB,OAGJ,UACR,OAAO71B,KAAKoK,MAAMe,QAGV,WAAWd,EAA4Bq0B,GAC/C1+B,KAAKoK,MAAMC,GAAQq0B,GACnB1+B,KAAKw9C,eAGG,cAAcE,GACtB,IAAI19C,KAAKoK,MAAMxH,QAAU5C,KAAKs9C,aAAgBt9C,KAAKo9C,cAAgB,GAAKp9C,KAAKq9C,UAAU7uC,MAAQxO,KAAKo9C,cAAgB,OAIpH,EAAG,CAOD,GANGM,EACD19C,KAAKoK,MAAM6N,cAAcxS,GAAKA,IAAMi4C,GAEpCA,EAAO19C,KAAK49C,WAGXF,EAGD,MAFA19C,KAAK69C,YAAYH,GAKnBA,EAAO,WAED19C,KAAKq9C,UAAU7uC,KAAOxO,KAAKo9C,eAAiBp9C,KAAKoK,MAAMxH,QAI1D,KAAK87B,GACV1+B,KAAK89C,WAAW,OAAQpf,GAGnB,QAAQA,GACb1+B,KAAK89C,WAAW,UAAWpf,IAIxB,MAAM,UAAiC,EAO5C,YAAsB0e,EAvID,GAwInB54C,MAAM44C,GADc,KAAAA,gBANZ,KAAAhzC,MAAgC,GAChC,KAAAizC,UAAkC,IAAIp8C,IASzC,OACLuD,MAAMu5C,OACN/9C,KAAKg+C,YAAYD,OAGZ,SACLv5C,MAAM04C,SACNl9C,KAAKg+C,YAAYd,SAGZ,mBACL14C,MAAM04C,SACNl9C,KAAKg+C,YAAYC,mBAGZ,QACLz5C,MAAM7C,QACN3B,KAAKg+C,YAAYlB,aAGZ,UACL98C,KAAKg+C,YAAYb,UAGT,SAASO,GACjB,OAAOA,EAAK7nB,KAAK6nB,EAAK7I,KAGd,WAAWxqC,EAA4Bq0B,GAE/C,GADa1+B,KAAKoK,MAAMka,KAAK7e,GAAKA,EAAEovC,MAAQnW,EAAGmW,KAAOpvC,EAAEowB,OAAS6I,EAAG7I,MAElE,OAAO,EAEP,IAAI,MAAM6nB,KAAQ19C,KAAKq9C,UACrB,GAAGK,EAAK7I,MAAQnW,EAAGmW,KAAO6I,EAAK7nB,OAAS6I,EAAG7I,KACzC,OAAO,EAMb,OADA71B,KAAKoK,MAAMC,GAAQq0B,IACZ,EAGC,yBACJ1+B,KAAKk+C,qBACPl+C,KAAKk+C,mBAAqB58C,OAAO2P,WAAW,KAC1CjR,KAAKk+C,mBAAqB,EAC1Bl+C,KAAKw9C,gBACJ,IAIA,KAAK9e,GACVl6B,MAAM8G,KAAKozB,GAGN,QAAQA,GACbl6B,MAAM2T,QAAQumB,GAGT,UAAUA,GACf,YAAiB1+B,KAAKoK,MAAQ3E,GAAMA,EAAEovC,MAAQnW,GAE9C1+B,KAAKg+C,YAAYf,UAAUve,IAIhB,MAAM,UAAsB,EACzC,YAAsB0e,EAhND,GAiNnB54C,MAAM44C,GADc,KAAAA,gBAMd,KAAAhB,mBAAqB,CAAC7N,EAAqBqO,KAC9CA,IAMD,YAAiB58C,KAAKoK,MAAQ3E,GAAMA,EAAEovC,MAAQtG,GAAQ9sC,QAAQi8C,IAC5DA,EAAKS,SAAU,EACfn+C,KAAKoK,MAAM+N,QAAQulC,KAIrB19C,KAAKo+C,2BAhBPp+C,KAAKg+C,YAAc,IAAI7B,EAAsBn8C,KAAKo8C,oBAoB1C,UACR,OAAOp8C,KAAKoK,MAAM6N,cAAcylC,GAAQA,EAAKS,SAGlC,YAAYT,G,qHACjB,EAAMG,YAAW,UAACH,GACxB19C,KAAKg+C,YAAYf,UAAUS,EAAK7I,QAGxB,WAAWxqC,EAA4Bq0B,GAG/C,QAFiBl6B,MAAMs5C,WAAWzzC,EAAQq0B,KAI1C1+B,KAAKg+C,YAAYhB,QAAQte,EAAGmW,KAGdnW,EAAGlc,eAAe,aAC9Bkc,EAAGyf,SAAU,IAGR,IAIJ,MAAM,UAA4B,EAGvC,YAAsBf,EAnQD,EAmQ2ChB,GAC9D53C,MAAM44C,GADc,KAAAA,gBAA0C,KAAAhB,qBAFxD,KAAAiC,OAA4C,IAAIt9C,IAKtDf,KAAKg+C,YAAc,IAAI7B,EAAsB,CAAC5N,EAAQqO,KACpD,MAAM0B,EAAU,YAAiBt+C,KAAKoK,MAAQ3E,GAAMA,EAAEovC,MAAQtG,GAC9D,GAAGqO,EAAS,EACI0B,EAAQ17C,OAAS07C,EAAU,CAACt+C,KAAKq+C,OAAOl8C,IAAIosC,KACpD9sC,QAAQi8C,IACZ19C,KAAKoK,MAAM+N,QAAQulC,GAAQ19C,KAAKq+C,OAAOl8C,IAAIosC,MAI/CvuC,KAAKo8C,oBAAsBp8C,KAAKo8C,mBAAmB7N,EAAQqO,GAC3D58C,KAAKo+C,2BAIF,QACL55C,MAAM7C,QACN3B,KAAKq+C,OAAO18C,QAYP,QAAQ+8B,GACb1+B,KAAKq+C,OAAOn7C,IAAIw7B,EAAGmW,IAAKnW,GACxB1+B,KAAKg+C,YAAYhB,QAAQte,EAAGmW,MAIzB,MAAM,UAA6B,EACxC,YAAsBuI,EAzSD,EAyS2ChB,GAC9D53C,MAAM44C,GADc,KAAAA,gBAA0C,KAAAhB,qBAG9Dp8C,KAAKg+C,YAAc,IAAI7B,EAAsB,CAAC5N,EAAQqO,KACpD,MAAM0B,EAAU,YAAiBt+C,KAAKoK,MAAQ3E,GAAMA,EAAEovC,MAAQtG,GAC3DqO,GAAW0B,EAAQ17C,QACpB07C,EAAQ78C,QAAQi8C,IACd19C,KAAKoK,MAAM+N,QAAQulC,KAIvB19C,KAAKo8C,oBAAsBp8C,KAAKo8C,mBAAmB7N,EAAQqO,GAC3D58C,KAAKo+C,2BAIF,QAAQ1f,GACb1+B,KAAKg+C,YAAYhB,QAAQte,M,gCC/U7B,kHAiuBA,MAAM5iB,EAA0B,IAtrBzB,MA2CL,cAzCQ,KAAAyiC,mBAAsD,GACtD,KAAAC,kBAAoB,EACpB,KAAAC,mBAAqB,EACrB,KAAAC,aAAwC,GACxC,KAAAC,iBAAmBC,UAAUC,QAG7B,KAAAC,aAAe,CACrB10B,WAAY,GACZ20B,YAAa,KACbC,YAAa,KACbC,iBAAkB,MAIZ,KAAAC,UAA6Bh7C,SAASi7C,KAAKC,cAAc,oBAEzD,KAAAC,YAAcn7C,SAASoO,MACvB,KAAAgtC,cAAe,EAGf,KAAAC,SAAU,EAEV,KAAAzvB,SAOH,GAGG,KAAA0vB,YAAa,EA+Ld,KAAAC,oBAAsB,KAC3Bv4C,QAAQkhB,IAAI,CAAC,mBAAoB,gBAAiB,mBAAoB,mBAAoB,iBAAiBtnB,IAAIqE,GAAK,IAAehD,IAAIgD,KACtIa,KAAM05C,IACL1/C,KAAK8vB,SAAS6vB,UAAYD,EAAY,GACtC1/C,KAAK8vB,SAAS8vB,YAA4BngD,IAAnBigD,EAAY,GAAmB,GAAMA,EAAY,GACxE1/C,KAAK8vB,SAAS+vB,UAAYH,EAAY,GACtC1/C,KAAK8vB,SAASgwB,UAAYJ,EAAY,GACtC1/C,KAAK8vB,SAASiwB,OAASL,EAAY,KAiBrC,UAAgB7pC,WAAW7P,KAAK8P,IAC9B9V,KAAK8vB,SAASkwB,SAAWlqC,EAAMga,SAASmwB,cAAcC,SA8LlD,KAAAC,kBAAoB,KAC1BC,aAAaD,oBACb7+C,OAAO++C,oBAAoB,QAASrgD,KAAKmgD,oBA9YzCvB,UAAUC,QAAUD,UAAUC,SAAWD,UAAU0B,YAAc1B,UAAU2B,cAE3EvgD,KAAKwgD,uBAA0B,iBAAkBl/C,QAAY,oBAAqBs9C,UAElF5+C,KAAKygD,oBAAsB,cAE3BzgD,KAAK0gD,cAAgBx8C,SAASC,cAAc,OAC5CnE,KAAK0gD,cAAc9gD,GAAK,eACxBsE,SAASyqC,KAAKhQ,OAAO3+B,KAAK0gD,eAQ1B,UAAU5rC,GAAG,OAAS6rC,IACjB3gD,KAAKu/C,UAIJoB,GACF3gD,KAAK2B,QAGP3B,KAAK4gD,mBAGP,UAAU16C,2BAA2B,CACnCypB,qBAAuBvpB,IACrBpG,KAAKgjB,iBAAmC,eAAlB5c,EAAOI,KAAK0B,EAAqB,IAAgB3B,UAAUH,EAAOI,KAAKA,MAAQJ,EAAOI,KAAK0B,EAAG9B,EAAO8Z,iBAC3H,UAAUrY,UAAU,kBAAmBzB,MAuB3C,UAAUxE,iBAAiB,sBAAuB,KAEhD5B,KAAKygD,oBAAoBt5C,YACxB,GAsDG,cAAc05C,EAAS,UAAU54B,KAAKC,QAC5C,GAAG,WAAU,OAEb,MAAM44B,EAAa,KACjB9gD,KAAKs/C,cAAe,EACpBp7C,SAASoO,MAAQtS,KAAKq/C,YACtBr/C,KAAK+gD,cAGPz/C,OAAO0/C,cAAchhD,KAAKihD,eAC1BjhD,KAAKihD,cAAgB,EAEjBJ,EAGF7gD,KAAKihD,cAAgB3/C,OAAOuT,YAAY,KACtC,GAAI7U,KAAKy+C,mBAEF,GAAGz+C,KAAKs/C,aACbwB,QACK,CACL9gD,KAAKs/C,cAAe,EACpBp7C,SAASoO,MAAQ,UAAK2E,OAAO,uBAAuB,EAAM,CAACjX,KAAKy+C,qBAS9D,MAAMx6C,EAASC,SAASC,cAAc,UACtCF,EAAOhB,MAAQ,GAAK3B,OAAO6uC,iBAC3BlsC,EAAOmI,OAASnI,EAAOhB,MAEvB,MAAMoJ,EAAMpI,EAAOG,WAAW,MAC9BiI,EAAI60C,YACJ70C,EAAI80C,IAAIl9C,EAAOhB,MAAQ,EAAGgB,EAAOmI,OAAS,EAAGnI,EAAOhB,MAAQ,EAAG,EAAG,EAAIS,KAAK09C,IAAI,GAC/E/0C,EAAIg1C,UAAY,UAChBh1C,EAAIi1C,OAEJ,IAAIC,EAAW,GACXC,EAAM,GAAKxhD,KAAKy+C,mBACjBz+C,KAAKy+C,mBAAqB,GAC3B8C,EAAW,GACHvhD,KAAKy+C,mBAAqB,IAClC8C,EAAW,IAEXC,EAAM,MACND,EAAW,IAGbA,GAAYjgD,OAAO6uC,iBAEnB9jC,EAAI7J,KAAO,OAAO++C,OAAc,MAChCl1C,EAAIo1C,aAAe,SACnBp1C,EAAIq1C,UAAY,SAChBr1C,EAAIg1C,UAAY,QAChBh1C,EAAIs1C,SAASH,EAAKv9C,EAAOhB,MAAQ,EAAmB,MAAhBgB,EAAOmI,QAK3CpM,KAAK+gD,WAAW98C,EAAOmK,kBA9CzBpO,KAAK4gD,eAAc,IAiDpB,KArDHE,IAsFG,mBACL,OAAO9gD,KAAK8vB,SAGP,kBAAkBtpB,GACvB,IAAI3E,EAAW,YAAqB2E,EAAK0B,GACrC0f,EAAW5nB,KAAK8+C,aAAaj9C,GAOjC,MALc,oBAAX2E,EAAK0B,IACNrG,EAAM,IAAgB0E,UAAUC,EAAKA,MACrCohB,EAAMA,EAAI/lB,IAGT+lB,KAIKA,GAAO5nB,KAAK8+C,cAAcj9C,GAAO,IAAWuF,UAAU,4BAA6B,CAACZ,SAC3FR,KAAK8pB,IACJ9vB,KAAKgjB,iBAAiBnhB,EAAKiuB,GACpBA,KAIJ,4BACL,GAAG9vB,KAAK4hD,yBAA0B,OAAO5hD,KAAK4hD,yBAE9C,MAAMrqB,EAAY,CAAC,wBAAyB,mBAAoB,oBAC/Dz2B,IAAK+gD,GACG7hD,KAAKsoB,kBAAkB,CAACpgB,EAAG25C,KAGpC,OAAO7hD,KAAK4hD,yBAA2B16C,QAAQkhB,IAAImP,GAG9C,qBAAqB/wB,EAAuBspB,GAMjD,OAAO,IAAW1oB,UAAU,+BAAgC,CAC1DZ,OACAspB,aACC9pB,KAAKqS,IACHA,GACD,IAAkB5Q,qBAAqB,CACrCS,EAAG,cACH9B,OAAQ,CACN8B,EAAG,uBACH1B,KAAM,OAAF,wBACCA,GAAI,CACP0B,EAAG,YAAqB1B,EAAK0B,KAE/BgY,gBAAiB,OAAF,wBACV4P,GAAQ,CACX5nB,EAAG,4BAQR,sBACL,IAAWd,UAAU,8BAA+B,CAAC06C,eAAe,IACnE97C,KAAMqB,IACL,IAAkBI,qBAAqBJ,KAIpC,+BACL,OAAGrH,KAAK+hD,qBAA6B/hD,KAAK+hD,qBACnC/hD,KAAK+hD,qBAAuB,IAAW36C,UAAU,wCAGnD,6BAA6BgrB,GAClC,IAAWhrB,UAAU,uCAAwC,CAACgrB,WAC7DpsB,KAAKqS,IACJrY,KAAK+hD,qBAAuB76C,QAAQC,SAASirB,KAIzC,WAAWkc,EAAe,0BAChC,GAAGtuC,KAAKgiD,cAAgB1T,EACtB,OAGF,MAAM6F,EAAOn0C,KAAKk/C,UAAU+C,YAC5B9N,EAAK7F,KAAOA,EACZtuC,KAAKk/C,UAAUgD,WAAWC,aAAahO,EAAMn0C,KAAKk/C,WAClDl/C,KAAKk/C,UAAY/K,EAEjBn0C,KAAKgiD,YAAc1T,EAGd,iBAAiBzsC,EAAsDiuB,GAC5E,IAAIlI,EACe,iBAAV,IACPA,EAAM5nB,KAAK8+C,aAAyB,aAGrCl3B,GAAO5nB,KAAK8+C,cAAcj9C,GAAOiuB,EAEf,iBAAV,GACP,UAAUjoB,UAAU,4BAA6B,CAAChG,MAAKiuB,aAMpD,QAAQsyB,GACb,MAAgC,uBAAzBA,EAAmBl6C,IACU,IAAhCk6C,EAAmBrd,WAAqB,eAAWqd,EAAmBhwB,QAGrE,aAAa9xB,GAClB,MAAM+hD,EAAMriD,KAAKsoB,kBAAkB,CAACpgB,EAAG,kBAAmB1B,KAAM,IAAgBgD,iBAAiBlJ,KACjG,OAAQ+hD,aAAen7C,QAAUm7C,EAAMn7C,QAAQC,QAAQk7C,IACtDr8C,KAAMo8C,GAAuBpiD,KAAKsiD,QAAQF,IAGtC,qBAAqB9hD,EAAgBiiD,GAAc,GACxD,MAAM/8C,EAAwB,CAC5B0C,EAAG,sBAGCs6C,EAAiBxiD,KAAK8+C,aAAyB,WAAEx+C,GAMvD,IAJGkiD,GAAoBA,aAA0Bt7C,SAC/CoM,OAAOiC,OAAO/P,EAAGg9C,GAGhBD,EAAa,CACd,MAAME,EAAc,IAAgBl6B,uBAAuBjoB,GAAQ,GAC7DuB,EAAM,YAAqB4gD,EAAYv6C,GACvCw6C,EAAqB1iD,KAAK8+C,aAAaj9C,GAC7C,GAAG6gD,KAAwBA,aAA8Bx7C,SACvD,IAAI,IAAIzB,KAAKi9C,OAECjjD,IAAT+F,EAAEC,KAEHD,EAAEC,GAAKi9C,EAAmBj9C,IAMlC,OAAOD,EAGF,iBAAiBlF,EAAgBiiD,GAAc,GACpD,GAAGjiD,IAAW,UAAU4X,KAAM,OAAO,EAErC,MAAMsqC,EAAiBxiD,KAAK2iD,qBAAqBriD,EAAQiiD,GACzD,OAAOviD,KAAKsiD,QAAQE,GAGf,QAKL,GAJAxiD,KAAKy/C,sBACL,UAAU3qC,GAAG,mBAAoB9U,KAAKy/C,sBAGlCz/C,KAAKwgD,uBACP,OAAO,EAGN,iBAAkBl/C,QAAsC,YAA5B8+C,aAAawC,YAAwD,WAA5BxC,aAAawC,YACnFthD,OAAOM,iBAAiB,QAAS5B,KAAKmgD,mBAGxC,IACK,mBAAoB7+C,QACrBA,OAAOM,iBAAiB,eAAgB5B,KAAK2B,OAE/C,MAAOyN,KAGH,OACNpP,KAAK2B,QACLL,OAAO0/C,cAAchhD,KAAKihD,eAC1BjhD,KAAKihD,cAAgB,EACrBjhD,KAAK+gD,aACL/gD,KAAKu/C,SAAU,EAQV,OAAOzyC,GAGZ,GAAG9M,KAAKu/C,QACN,OAkBUzyC,EAAK25B,QACf35B,EAAK25B,MAAQ,sCAIfzmC,KAAKy+C,qBACDz+C,KAAKihD,eACPjhD,KAAK4gD,gBAGP,MAAM71C,EAAM,cAYZ,GAXG/K,KAAK8vB,SAAS8vB,OAAS,IAAM5/C,KAAK8vB,SAASkwB,UAO5ChgD,KAAK6iD,UAAU7iD,KAAK8vB,SAAS8vB,QAC7B5/C,KAAK0+C,aAAa5xC,EAAKs5B,KAAOr7B,IAG5B/K,KAAKwgD,wBACP,iBAAkBl/C,QAAsC,YAA5B8+C,aAAawC,WACzC,OAAO,EAGT,GAAG5iD,KAAK8vB,SAAS6vB,UACf,OAAG3/C,KAAK2+C,iBAAmB3+C,KAAK8vB,SAAS+vB,eACvCjB,UAAUC,QAAQ,CAAC,IAAK,IAAK,WAI/B,EAGF,MAAMn+C,IAAQV,KAAKw+C,kBACb38C,EAAMiL,EAAKjL,KAAO,IAAMnB,EAC9B,IAAIolC,EAEJ,GAAG,iBAAkBxkC,OAArB,CACE,IACE,GAAGwL,EAAKs5B,IACN,IAAI,IAAI3gC,KAAKzF,KAAKu+C,mBAAoB,CACpC,MAAMzY,EAAe9lC,KAAKu+C,mBAAmB94C,GAC1CqgC,GACCA,EAAaM,MAAQt5B,EAAKs5B,MAC5BN,EAAapE,QAAS,GAK5BoE,EAAe,IAAIsa,aAAatzC,EAAKwF,MAAO,CAC1CwwC,KAAMh2C,EAAK25B,OAAS,GACpBkI,KAAM7hC,EAAKzE,SAAW,GACtB+9B,IAAKt5B,EAAKs5B,KAAO,GACjBhU,OAAQtlB,EAAKslB,SAAU,IAIzB,MAAMhjB,GAGN,YAFApP,KAAKwgD,wBAAyB,GAiBlC1a,EAAaK,QAAU,KACrBL,EAAaid,QAEb/iD,KAAK2B,QACFmL,EAAKq5B,SACNr5B,EAAKq5B,WAITL,EAAakd,QAAU,KACjBld,EAAapE,gBACR1hC,KAAKu+C,mBAAmB18C,GAC/B7B,KAAK2B,UAINmkC,EAAamd,MACdnd,EAAamd,OAEfjjD,KAAKu+C,mBAAmB18C,GAAOikC,EAE3B,YACF70B,WAAW,KACTjR,KAAKkjD,KAAKrhD,IACT,MAIA,UAAU+9C,GACf,MAAM70C,EAAM,cACZ,GAAG/K,KAAKmjD,aAAep4C,EAAM/K,KAAKmjD,aAAenjD,KAAKojD,kBAAoBxD,EACxE,OAGF5/C,KAAKmjD,YAAcp4C,EAAM,IACzB/K,KAAKojD,gBAAkBxD,EACvB,MAAMyD,EAAW,gCACXr0C,EAAQ9K,SAASC,cAAc,SACrC6K,EAAMs0C,UAAW,EACjBt0C,EAAM3L,aAAa,kBAAmB,gBACtC2L,EAAM4wC,OAASA,EACf5wC,EAAM2E,UAAY,wBACD0vC,6FACuD,IAATzD,WAAsByD,cAErFrjD,KAAK0gD,cAAc/hB,OAAO3vB,GAE1BA,EAAMpN,iBAAiB,QAAS,KAC9BoN,EAAMoW,UACL,CAACm+B,MAAM,IAGL,OAAO1hD,GACZ,MAAMikC,EAAe9lC,KAAKu+C,mBAAmB18C,GAC7C,GAAGikC,EAAc,CACZ9lC,KAAKy+C,mBAAqB,GAC3Bz+C,KAAKy+C,qBAGP,IACK3Y,EAAaid,QACdjd,EAAapE,QAAS,EACtBoE,EAAaid,SAKf,MAAO3zC,WAEFpP,KAAKu+C,mBAAmB18C,IAI3B,KAAKA,GACX,MAAMikC,EAAe9lC,KAAKu+C,mBAAmB18C,GAC7C,GAAGikC,EACD,IACKA,EAAaid,QACdjd,EAAapE,QAAS,EACtBoE,EAAaid,SAEf,MAAO3zC,KAIN,WAAWg3B,UACTpmC,KAAK0+C,aAAatY,GAGpB,QAIH,IAAI,IAAI3gC,KAAKzF,KAAKu+C,mBAAoB,CACpC,MAAMzY,EAAe9lC,KAAKu+C,mBAAmB94C,GAC7C,IACKqgC,EAAaid,OACdjd,EAAaid,QAEf,MAAO3zC,KAGbpP,KAAKu+C,mBAAqB,GAC1Bv+C,KAAKy+C,mBAAqB,EAKpB,eAAe+E,GACrB,GAAGxjD,KAAKyjD,kBACJ,YAAUzjD,KAAKyjD,iBAAkBD,GACnC,OAAO,EAGT,IAAWp8C,UAAU,yBAA0B,CAC7Cs8C,WAAYF,EAAUG,UACtBC,MAAOJ,EAAUK,WACjBC,WAAY,GACZC,aAAa,EACbC,OAAQ,IAAIrT,aACX3qC,KAAK,KACNhG,KAAKyjD,iBAAmBD,GACtBj1C,IACFA,EAAM4iB,SAAU,IAIZ,iBAAiBqyB,GACvB,IAAIxjD,KAAKyjD,iBACP,OAAO,EAGT,IAAWr8C,UAAU,2BAA4B,CAC/Cs8C,WAAYF,EAAUG,UACtBC,MAAOJ,EAAUK,WACjBC,WAAY,KACX99C,KAAK,KACNhG,KAAKyjD,kBAAmB,GACtBl1C,IACFA,EAAM4iB,SAAU,IAIb,oBACL,OAAOnxB,KAAK2+C,iBAKhB,IAAe7iC,wBAA0BA,EAC1B,O,gCCnuBf,sFAgBe,MAAMmoC,EAqBnB,YAAYt8C,GAfJ,KAAAohB,OAAS,EACT,KAAAm7B,UAAW,EAEZ,KAAA35C,QAAmC,KAEnC,KAAA4qB,UAAW,EACV,KAAAgvB,YAAa,EACb,KAAAC,YAAa,EACb,KAAAlvB,gBAAiB,EACjB,KAAAD,aAAqC,SAoFtC,KAAAovB,QAAWj1C,IACbA,GACD,YAAYA,GAGXpP,KAAKg1B,UAAUkc,UAAUqE,SAAS,UAChCv1C,KAAKskD,UACNtkD,KAAKskD,WAGJtkD,KAAKuK,SAAWvK,KAAKuK,QAAQwhB,QAC9B/rB,KAAKuK,QAAQwhB,UAlFdpkB,GACD,YAAW3H,KAAM2H,GAId,mBAAmBA,EAGrB,IACC3H,KAAKg1B,YACPh1B,KAAKg1B,UAAY9wB,SAASC,cAAc,OACxCnE,KAAKg1B,UAAUkc,UAAUpvC,IAAI,uBAE1B6F,EAAQmtC,OACT90C,KAAKg1B,UAAUkc,UAAUpvC,IAAI,aAAe6F,EAAQmtC,OAGnDntC,EAAQ48C,MACTvkD,KAAKg1B,UAAUkc,UAAUpvC,IAAI,kBAG5B9B,KAAKokD,YACNpkD,KAAKg1B,UAAUkc,UAAUpvC,IAAI,yBAK5B,wBACL9B,KAAKwkD,qBAGA,YACLxkD,KAAKykD,UAAY,KAEjBzkD,KAAKwkD,qBAELxkD,KAAKg1B,UAAUrhB,UAAY,0HAEmD3T,KAAKokD,WAAa,cAAgB,+DACvEpkD,KAAKokD,WAAa,KAAO,aAAapkD,KAAKokD,WAAa,KAAO,YAAYpkD,KAAKokD,WAAa,GAAK,mEAIxIpkD,KAAKmkD,YACNnkD,KAAKg1B,UAAUrhB,WAAa,kxEAc5B3T,KAAK0kD,YAAc1kD,KAAKg1B,UAAU2vB,iBAClC3kD,KAAK4kD,UAAY5kD,KAAK0kD,YAAYG,wBAElC7kD,KAAKg1B,UAAUkc,UAAUpvC,IAAI,mBAG/B9B,KAAK8kD,OAAS9kD,KAAKg1B,UAAUsgB,kBAAkBA,kBAAkBA,kBAE9Dt1C,KAAKmkD,YACN,YAAiBnkD,KAAKg1B,UAAWh1B,KAAKqkD,SAoBnC,oBAAoBviB,GACzB9hC,KAAKskD,SAAWxiB,EAGX,YACL9hC,KAAKg1B,UAAUkc,UAAUpvC,IAAI,UAC7B9B,KAAK+kD,YAAY,GAGZ,cAAcx6C,GACnB,GAAGvK,KAAKm1B,UAAYn1B,KAAKuK,QAAS,OAElCvK,KAAKuK,QAAUA,EAEf,MAAMwe,IAAW/oB,KAAK+oB,OAChBi8B,EAAYrrC,KAAK5O,MAEjBk6C,EAAS55C,IAGb,GAFAd,EAAQ3D,OAAS,KAEdmiB,IAAW/oB,KAAK+oB,OACjB,OAGF,MAAMm8B,EAAcvrC,KAAK5O,MAAQi6C,EAIjC,IAAI35C,GAAOrL,KAAKmkD,WAAY,CAC1BnkD,KAAK+kD,YAAY,KAEjB,MAAMI,EAAQC,IAEXF,EAAcC,EACfnlD,KAAKqlD,SAELp0C,WAAW,KACN8X,IAAW/oB,KAAK+oB,QACjB/oB,KAAKqlD,UAENF,QAGFnlD,KAAKk1B,gBACN,YAAcl1B,KAAKg1B,UAAW,IAAI,EAjKpB,KAkKd,YAAQ,KACNh1B,KAAKslD,eAGPtlD,KAAKqlD,SAITrlD,KAAKuK,QAAUA,EAAU,MAG3BA,EACCvE,KAAK,IAAMi/C,EAAM,OACjB3vB,MAAOjqB,GAAQ45C,EAAM55C,IAEnBd,EAAQ8rB,mBACT9rB,EAAQ8rB,kBAAmBW,IAKzB,GAAGjO,IAAW/oB,KAAK+oB,OAAQ,OAG3B,MAAMwN,EAAWS,EAAQf,KAAOe,EAAQd,MAAQ,IAChDl2B,KAAK+kD,YAAYxuB,KAKhB,OAAOklB,EAAe/9B,GAAQ,EAAOnT,GACvCA,GACDvK,KAAKq1B,cAAc9qB,GAKrBvK,KAAKkkD,UAAW,EAKXlkD,KAAKykD,WACNzkD,KAAKykD,YAGJzkD,KAAKg1B,UAAUuwB,eAChBvlD,KAAKg1B,UAAUkc,UAAU9rB,OAAO,UAG/BplB,KAAKg1B,UAAUuwB,gBAAkB9J,GAClCA,EAAKz7C,KAAKi1B,cAAcj1B,KAAKg1B,WAG/B,YAAQ,KAGHh1B,KAAKkkD,UAIR,YAAclkD,KAAKg1B,UAAW,cAAc,EA/N5B,OAkOfh1B,KAAKmkD,YAAczmC,GACpB1d,KAAK+kD,YAAY,GAKhB,SAGL/kD,KAAKkkD,UAAW,EAIblkD,KAAKg1B,WAAah1B,KAAKg1B,UAAUuwB,eAKhC,YAAQ,KAGFvlD,KAAKkkD,UAAalkD,KAAKg1B,UAAUuwB,eAIrC,YAAcvlD,KAAKg1B,UAAW,cAAc,EA3P9B,IA2PsD,KAClEh1B,KAAKg1B,UAAU5P,aAOlB,YAAYmR,GACjB,GAAI,YAAQv2B,KAAK8kD,QAIjB,GAAgB,IAAbvuB,EAKH,IACMv2B,KAAKwlD,cACPxlD,KAAKwlD,YAAcxlD,KAAK8kD,OAAOW,kBAIjCzlD,KAAK8kD,OAAOtW,MAAMkX,gBAAuBhiD,KAAKC,IAAI,EAAG4yB,EAAW,IAAMv2B,KAAKwlD,aAAe,KAAOxlD,KAAKwlD,YACtG,MAAMn6C,SAXNrL,KAAK8kD,OAAOtW,MAAMkX,gBAAkB,M,gCCvR1C,WAyCe,IAjCO,CAACzjD,EAAsB0jD,EAAmBC,EAAmBnyB,EAAkBoyB,KACnG,MAAMv1C,EAAUrO,EAAQY,QAAQyN,aACjB7Q,IAAZ6Q,GACDD,cAAcC,GAGbs1C,GAAYD,GACb1jD,EAAQivC,UAAUpvC,IAAI6jD,GAGxB,MAAMG,EAAe,YACZ7jD,EAAQY,QAAQyN,SACnBs1C,GAAYD,GACd1jD,EAAQivC,UAAU9rB,OAAO,YAAaugC,GAGxC1jD,EAAQivC,UAAU9rB,OAAO,aAEzBygC,GAAmBA,KAGrB,IAAI,UAAU/1B,SAASklB,kBAGrB,OAFA/yC,EAAQivC,UAAU9rB,OAAO,YAAa,kBACtC0gC,IAIF7jD,EAAQivC,UAAUpvC,IAAI,aAEtBG,EAAQivC,UAAU6U,OAAO,aAAcH,GACvC3jD,EAAQY,QAAQyN,QAAU,GAAKW,WAAW60C,EAAcryB,K,gCCtC1D,6L,sSAmBO,SAASuyB,EAAsBC,GACpC,OAAO,IAAI/+C,QAAQ,CAACC,EAASwD,KAC3Bs7C,EAAMC,SAAW,KACf,MAAMjiD,EAASC,SAASC,cAAc,UACtCF,EAAOhB,MAAQS,KAAKmV,IAAI,KAAMotC,EAAME,YACpCliD,EAAOmI,OAAS1I,KAAKmV,IAAI,IAAKotC,EAAMG,aACxBniD,EAAOG,WAAW,MAC1BkI,UAAU25C,EAAO,EAAG,GACxBhiD,EAAO4zC,OAAO1hB,IACZhvB,EAAQgvB,IACP,aAAc,IAGnB8vB,EAAMI,QAAU17C,EAChBs7C,EAAMK,YAAc5iD,KAAKmV,IAAIotC,EAAMxyB,SAAU,KAI1C,SAAe8yB,EAAqBl1C,G,yCACzC,MAAM40C,QA7BD,SAAsB50C,GAC3B,OAAO,IAAInK,QAAQ,CAACC,EAASwD,KAC3B,MAAMs7C,EAAQ/hD,SAASC,cAAc,SACrC8hD,EAAMrG,OAAS,EACfqG,EAAMO,iBAAmB,IAAMr/C,EAAQ8+C,GACvCA,EAAMI,QAAU17C,EAChBs7C,EAAM53C,IAAMgD,IAuBMo1C,CAAap1C,GAEjC,OAAOnK,QAAQw/C,KAAK,CAClB,YAAM,KACNV,EAAsBC,QAInB,SAASU,EAAYV,GAC1B,OAAO,IAAI/+C,QAAeC,IACrB8+C,EAAMW,YAAcX,EAAMY,cAC3B1/C,IAIF8+C,EAAMrkD,iBAAiB,gBAAgB,aAAe,UAAW,IAAMuF,IAAW,CAACo8C,MAAM,MAItF,SAAeuD,EAAkB13C,EAA+B23C,GAAY,G,yCACjF,MAAMnwB,EAAe,GAEfowB,EAAY,CAAMtK,EAAYgB,IAA2B,EAAD,gCAC5D,GAAGhB,EAAMuK,YAAa,CACpB,MAAMC,EAAkBxK,EAAMyK,qBACxB,IAAIjgD,QAAc,CAACC,EAASwD,KAChCu8C,EAAgBE,YAAkB5K,GAAiB,EAAD,gCAChD,IAAI,MAAME,KAASF,QACXwK,EAAUtK,EAAOgB,GAGzBv2C,eAGC,GAAGu1C,EACR,GAAGqK,EACDnwB,EAAMtrB,KAAKoxC,EAAMjtC,UACZ,CACL,MAAM43C,EAAW3J,EAAK4J,YAChB70B,EAAOiqB,aAAiB3pB,KAC5B2pB,EAEEA,aAAiB6K,iBACf7K,EAAM4K,kBACA,IAAIpgD,QAAQ,CAACC,EAASwD,IAAW+xC,EAAMjqB,KAAKtrB,EAAUkE,GAAalE,EAAQkgD,KAOvF,IAAI50B,EAAM,OACVmE,EAAMtrB,KAAKmnB,OAKjB,GAAGrjB,aAAao4C,WAAap4C,EAAEq4C,aAAa7wB,QAAUxnB,EAAEq4C,aAAan9C,MACnE,IAAI,IAAI7E,EAAI,EAAGA,EAAI2J,EAAEq4C,aAAa7wB,MAAMh0B,OAAQ6C,IAAK,CACnD,MAAMgtB,EAAOrjB,EAAEq4C,aAAa7wB,MAAMnxB,GAClCmxB,EAAMtrB,KAAKy7C,EAAYt0B,EAAKhjB,KAAOgjB,OAEhC,CAEL,MAAMnoB,GAAS8E,EAAEq4C,cAAgBr4C,EAAEs4C,eAAiBt4C,EAAEu4C,cAAcD,eAAep9C,MAE7EitB,EAA2B,GACjC,IAAI,IAAI9xB,EAAI,EAAGA,EAAI6E,EAAM1H,SAAU6C,EAAG,CACpC,MAAMi4C,EAAyBpzC,EAAM7E,GACrC,GAAiB,SAAdi4C,EAAK1c,KAAiB,CACvB,MAAM0b,GAASqK,EAAYrJ,EAAOA,EAAKkK,qBAAuBlK,EAAK4J,YACnE/vB,EAASjsB,KAAK07C,EAAUtK,EAAOgB,WAI7Bx2C,QAAQkhB,IAAImP,GAOpB,OAAOX,KAGF,SAASixB,EAAYC,GAC1B,MAAMtc,EAAQtnC,SAASC,cAAc,SACrCqnC,EAAM/7B,KAAO,OACb+7B,EAAMgD,MAAMuZ,QAAU,OAEnBD,IACDtc,EAAMsc,OAASA,GAGjB5jD,SAASyqC,KAAKhQ,OAAO6M,GAErB,MAAMjhC,EAAU,IAAIrD,QAAc,CAACC,EAASwD,KAC1C6gC,EAAM5pC,iBAAiB,SAAWwN,IAChC,MAAMqjB,EAAarjB,EAAEm/B,OAAO3X,MAAM,GAC9BnE,EAKJtrB,EAAQsrB,GAJN9nB,EAAO,qBAKR,CAAC44C,MAAM,MACT/3C,QAAQ,KACTggC,EAAMpmB,WAKR,OAFAomB,EAAMwD,QAECzkC,I,gCChJM,SAASg2B,EAAW9sB,GACjC,MAAMu0C,EAAO9jD,SAASC,cAAc,QAEpC,OADA6jD,EAAKr0C,UAAYF,EACVu0C,EATT,mC,gCCAA,kCAQO,MAAMC,EAAkB,Y,gCCR/B,2CA2JA,MAAMjgB,EAAoB,IAzH1B,MAKE,cAJQ,KAAAkgB,SAAmD,IAAInnD,IAEvD,KAAAonD,MAAyC,GAG/C,IAAWC,gBAAgB,kBAAoBj4C,IAC7C,GAAGA,EAAK5B,MAAO,CACb,MAAMq/B,EAAWr/B,IACf,GAAmB,4BAAhBA,aAAK,EAALA,EAAOkB,MAAmC,CAE3C,MAAMH,EAAQa,EAAKk4C,gBAAgB,GAAG1yB,eACtCqS,EAAkB6F,iBAAiBv+B,GAAOtJ,KAAK,KAE7CmK,EAAKk4C,gBAAgB,GAAG1yB,eAAiBqS,EAAkBsgB,mBAAmBh5C,GAC9E,MAAMi5C,EAA6B,CACjC94C,KAAMU,EAAKV,KACX7P,GAAIuQ,EAAKvQ,GACT4oD,QAASr4C,EAAKk4C,iBAGhB,IAAW34C,YAAY64C,KACtBjzB,MAAMsY,QAETgR,UAAU6J,cAAcC,WAAWh5C,YAAYS,IAInDy9B,EAAQz9B,EAAK5B,YAEbqwC,UAAU6J,cAAcC,WAAWh5C,YAAYS,KAK9C,YAAYw4C,EAA2B3kD,EAA2BkkD,IACtEA,EAAUS,GAAa3oD,KAAK4oD,YAAYD,GACrCT,IACFA,EAAW,IAAIjnD,IACfjB,KAAKkoD,SAAShlD,IAAIylD,EAAWT,GAC7BloD,KAAKmoD,MAAM,YAAWQ,IAAcA,GAGtC,IAAI,MAAME,KAAYX,EACpB,GAAG,YAAUW,EAAU7kD,GACrB,OAIJkkD,EAASpmD,IAAIkC,GAGR,mBAAmB2kD,GACxB,OAAO3oD,KAAKmoD,MAAM,YAAWQ,IAGxB,YAAYA,GAEjB,MAAO,CADU3oD,KAAKkoD,SAAS/lD,IAAIwmD,KAAeA,EAAY3oD,KAAKsoD,mBAAmBK,IAAcA,EAAW3oD,KAAKkoD,SAAS/lD,IAAIwmD,IAC/GA,GAGb,WAAWA,GAChB,MAAMT,EAAWloD,KAAK4oD,YAAYD,GAClC,OAAOT,EAAW,CAACA,EAAS,GAAGY,SAASC,OAAO1wC,MAAO6vC,EAAS,SAAMzoD,EAGhE,cAAckpD,EAA2B3kD,EAA2BkkD,GAEzE,IADCA,EAAUS,GAAa3oD,KAAK4oD,YAAYD,GACtCT,EACD,IAAI,MAAMW,KAAYX,EACpB,GAAG,YAAUW,EAAU7kD,GAMrB,OALAkkD,EAASzjD,OAAOokD,GACZX,EAAS15C,OACXxO,KAAKkoD,SAASzjD,OAAOkkD,UACd3oD,KAAKmoD,MAAM,YAAWQ,MAExB,EAKb,OAAO,EAGF,iBAAiBA,EAA2B3kD,GAEjD,QADCA,EAAS2kD,GAAa3oD,KAAKoE,WAAWukD,GAChC3kD,aAAO,EAAPA,EAASyL,MACd,IAAK,UACH,OAAO,IAAmBme,kBAAkB5pB,EAAQ1D,OAAQ0D,EAAQ2nB,WAAW,GAMjF,QAEE,OADA1f,QAAQmJ,KAAK,kDAAmDpR,GACzDkD,QAAQyD,YA0BvB,IAAeq9B,kBAAoBA,EACpB,O,gCC7Jf,wEAcYghB,EAdZ,QAcA,SAAYA,GACV,mBACA,iBACA,uBACA,mBAJF,CAAYA,MAAQ,KAwBL,MAAMC,EAInB,cAEEjpD,KAAKkpD,iBAAmBD,EAAYE,oBAAoBnpD,MAExD,MAAM+pB,EAAQ/pB,KAAKknC,iBAEnBlnC,KAAKopD,OAAS,CAACr/B,GAGT,2BAA2Bs/B,GACjC,OAAO,cAAoBtkD,MAApB,c,oBAEL,KAAAukD,IAAgBN,EAASO,KAOzB,MAAMC,GACJ,IAAIxpD,KAAKspD,IAAME,KAAUA,EACvB,OAAO,EAKT,IAAI9mC,GAAQ,EACZ,GAAG8mC,IAASR,EAASxhB,IAAK,CACxB,MAAM3+B,EAAQwgD,EAAYI,KAC1B/mC,KAAQ7Z,EAAMygD,IAAME,IAAOxpD,KAAKwlB,SAAS3c,EAAMA,EAAMjG,OAAS,SACzD,GAAG4mD,IAASR,EAASrmC,OAAQ,CAClC,MAAM9Z,EAAQwgD,EAAYt/B,MAC1BrH,KAAQ7Z,EAAMygD,IAAME,IAAOxpD,KAAKwlB,SAAS3c,EAAM,SAC1C,GAAG2gD,IAASR,EAAShiB,KAC1B,OAAOhnC,KAAK0iB,MAAMsmC,EAASxhB,MAAQxnC,KAAK0iB,MAAMsmC,EAASrmC,QAOzD,OAJGD,GACD1iB,KAAK6iB,OAAO2mC,GAGP9mC,EAGT,OAAO8mC,GACLxpD,KAAKspD,KAAOE,EAGd,SAASA,GACPxpD,KAAKspD,KAAOE,EAGd,OAAO3+C,EAAe6+C,KAAwBp/C,GAC5C,MAAM+3C,EAAM79C,MAAMsc,OAAOjW,EAAO6+C,KAAgBp/C,GAEhD,IAAItK,KAAK4C,OAAQ,CACf,MAAMwmD,EAASC,EAAYD,OACrB1oD,EAAM0oD,EAAOzoD,QAAQX,OACf,IAATU,IACoB,IAAlB0oD,EAAOxmD,OACR5C,KAAK4mC,SAASoiB,EAAShiB,MAEvBoiB,EAAOtoC,OAAOpgB,EAAK,IAKzB,OAAO2hD,IAKN,kBAAkB/3C,GAGvB,MAAMzB,EAAQ,IAAI7I,KAAKkpD,iBAAiB5+C,EAAM1H,QAC9C,IAAI,IAAI6C,EAAI,EAAG7C,EAAS0H,EAAM1H,OAAQ6C,EAAI7C,IAAU6C,EAClDoD,EAAMpD,GAAK6E,EAAM7E,GAEnB,OAAOoD,EAgDF,YAAYA,EAAmB8gD,GAAU,GAC9C,IAAI9gD,EAAMjG,OACR,OAGF,MAAMmnB,EAAQ/pB,KAAKopD,OAAO,GAC1B,IAAIr/B,EAAMnnB,OAER,OADAmnB,EAAMze,QAAQzC,GACPkhB,EAGT,MAAM6/B,EAAa/gD,EAAMA,EAAMjG,OAAS,GAClCinD,EAAahhD,EAAM,GAEzB,IAAI6+B,EAAmBoiB,GAAc,EAAGC,GAAc,EAAGC,EAAkB,EAC3E,KAAMA,EAAkBhqD,KAAKopD,OAAOxmD,SAClC8kC,EAAa1nC,KAAKopD,OAAOY,GACzBF,EAAapiB,EAAW/mC,QAAQipD,GAChCG,EAAariB,EAAW/mC,QAAQkpD,IAEb,IAAhBE,IAAsB,IAAMD,MAEL,IAAhBC,IAAsB,IAAMD,KAPME,GAY9C,IAAmB,IAAhBD,IAAsB,IAAMD,QAExB,IAAmB,IAAhBC,EAAmB,CAC3B,MAAME,EAASphD,EAAMA,MAAM6+B,EAAW9kC,OAASmnD,GAC/CriB,EAAWp8B,QAAQ2+C,QACd,IAAmB,IAAhBH,EAAmB,CAC3B,MAAMG,EAASphD,EAAMA,MAAM,EAAGA,EAAMjG,OAASknD,EAAa,GAC1DpiB,EAAWvvB,WAAW8xC,OACjB,CACL,IAAIC,EAAc,EAClB,IAAI,MAAMtnD,EAAS5C,KAAKopD,OAAOxmD,OAAQsnD,EAActnD,IAAUsnD,EAAa,CAC1E,MAAMC,EAAInqD,KAAKopD,OAAOc,GACtB,GAAGrhD,EAAM,GAAKshD,EAAE,GACd,MAIJnqD,KAAKopD,OAAOtoC,OAAOopC,EAAa,EAAGlqD,KAAKknC,kBAAkBr+B,IAC1DmhD,EAAkBE,EAGpB,OAAGP,EACM3pD,KAAK2pD,QAAQK,QADtB,EAKM,QAAQA,GACd,GAAGhqD,KAAKopD,OAAOxmD,QAAU,EACvB,IAAI,IAAI6C,EAAI,EAAG7C,EAAS5C,KAAKopD,OAAOxmD,OAAQ6C,EAAK7C,EAAS,IAAM6C,EAAG,CACjE,MAAM2kD,EAAYpqD,KAAKopD,OAAO3jD,GACxB4kD,EAAYrqD,KAAKopD,OAAO3jD,EAAI,IAGf,IADA2kD,EAAUzpD,QAAQ0pD,EAAU,MAE7CD,EAAUvnC,OAAOwnC,EAAUf,KAC3BtpD,KAAKopD,OAAOtoC,OAAOrb,EAAI,EAAG,GAEvBA,EAAIukD,KACHA,IAGFpnD,IACA6C,EAEFzF,KAAK4iB,YAAYynC,GAAW,IAKlC,OAAOrqD,KAAKopD,OAAOY,GAKrB,YACE,OAAOhqD,KAAKopD,OAAO,GAGrB,WACE,OAAOppD,KAAKopD,OAAOppD,KAAKopD,OAAOxmD,OAAS,GAG1C,YACE,OAAO5C,KAAK+pB,MAGd,aACE,OAAO/pB,KAAK6I,MAAMjG,OAGb,UAAU86C,GACf,IAAI,IAAIj4C,EAAI,EAAG7C,EAAS5C,KAAKopD,OAAOxmD,OAAQ6C,EAAI7C,IAAU6C,EAAG,CAC3D,MAAMoD,EAAQ7I,KAAKopD,OAAO3jD,GACpBgT,EAAQ5P,EAAMlI,QAAQ+8C,GAC5B,IAAc,IAAXjlC,EACD,MAAO,CAAC5P,QAAO4P,UAOd,gBAAgB8I,GACrB,IAAI1Y,EACJ,IAAI,IAAIpD,EAAI,EAAGA,EAAIzF,KAAKopD,OAAOxmD,SAAU6C,EAAG,CAC1C,IAAIiV,EAAS,EAEb,GADA7R,EAAQ7I,KAAKopD,OAAO3jD,KACjBoD,EAAMjG,OAAS,GAIlB,KAAM8X,EAAS7R,EAAMjG,OAAQ8X,IAC3B,GAAG6G,GAAS1Y,EAAM6R,GAKhB,MAAO,CACL7R,QACA6R,OAAQ6G,IAAU1Y,EAAM6R,GAAUA,EAASA,EAAS,GAM5D,GAAG7R,GAASA,EAAM6Z,MAAMsmC,EAASxhB,KAC/B,MAAO,CACL3+B,QACA6R,OAAQ7R,EAAMjG,QAQb,QAAQqgC,EAAkBH,EAAoBnoB,GACnD,IAAI9R,EAAQ7I,KAAK6I,MACb6R,EAAS,EACT4vC,EAAc,EAElB,GAAGrnB,EAAU,CACX,MAAMpiB,EAAM7gB,KAAKuqD,gBAAgBtnB,GACjC,IAAIpiB,EACF,OAGFhY,EAAQgY,EAAIhY,MACZ6R,EAAS4vC,EAAczpC,EAAInG,OAExB7R,EAAM2c,SAASyd,KAChBqnB,GAAe,GAQnB,IAAIE,EAAa9mD,KAAKC,IAAI2mD,EAAcxnB,EAAY,GAChD2nB,EAAWH,EAAcxnB,EAAanoB,EAI1C,MAAMsvC,EAASphD,EAAMA,MAAM2hD,EAAYC,GAEjCpjB,EAAoBvE,EAAa,EAAInoB,EAAQmoB,EAAanoB,EAC1D+vC,EAAuBhnD,KAAKinD,IAAI7nB,GAIhC8nB,EAAgB/hD,EAAMjG,OAAS0nD,GAAgBjjB,KAAsBx+B,EAAM6Z,MAAMsmC,EAASxhB,OAAQyiB,EAAOpnC,OAAOmmC,EAASxhB,MAAM,GAC/HqjB,EAAmBP,EAAcI,GAAyB,KAAM7hD,EAAM6Z,MAAMsmC,EAASrmC,UAAWsnC,EAAOpnC,OAAOmmC,EAASrmC,SAAS,GAItI,MAAO,CACL9Z,MAAOohD,EACP9iB,eAAgBzsB,EAChBqsB,UAAWiiB,EAASO,MAAQqB,GAAgBC,EAAkB7B,EAAShiB,MAAS4jB,EAAe5B,EAASxhB,IAAMwhB,EAASO,OAASsB,EAAkB7B,EAASrmC,OAASqmC,EAASO,QAI1K,WAAWj/C,GAChB,IAAIzB,EAAQ7I,KAAK+pB,MACblhB,EAAMjG,OAECiG,EAAM6Z,MAAMsmC,EAASrmC,UAC9B9Z,EAAQ7I,KAAKknC,iBACbr+B,EAAMga,OAAOmmC,EAASrmC,QACtB3iB,KAAKopD,OAAOjxC,QAAQtP,IAJpBA,EAAMga,OAAOmmC,EAASrmC,QAOxB9Z,EAAMsP,WAAW7N,GAGZ,QAAQA,GACb,IAAIzB,EAAQ7I,KAAKypD,KACb5gD,EAAMjG,OAECiG,EAAM6Z,MAAMsmC,EAASxhB,OAC9B3+B,EAAQ7I,KAAKknC,iBACbr+B,EAAMga,OAAOmmC,EAASxhB,KACtBxnC,KAAKopD,OAAO99C,KAAKzC,IAJjBA,EAAMga,OAAOmmC,EAASxhB,KAOxB3+B,EAAMyC,QAAQhB,GAGT,OAAOozC,GACZ,MAAMl9C,EAAQR,KAAK6pB,UAAU6zB,GAC7B,QAAGl9C,IACDA,EAAMqI,MAAMiY,OAAOtgB,EAAMiY,MAAO,IACzB,IAOb,MAAmB,IAAewwC,YAAcA,I,gCC5YhD,oEAWO,SAAS6B,EAAsBh3B,EAA6BnsB,GAGjE,MACMwmC,EADW,MACavrC,OAAS,IAAM,GAE7C,IAAI4+C,EACJ,OAAO1tB,EAAS5rB,GACd,IAAK,yBACHs5C,EAAM,CAAC,QANM,GAMY,GAAI1tB,EAASl0B,GAAIk0B,EAAS8d,YAAY16B,OAAOC,SAASC,KAX7D,KAYlB,MAGF,IAAK,4BACHoqC,EAAM,CAAC,WAXM,GAWe,GAAI1tB,EAASl0B,GAAIk0B,EAAS8d,YAAY16B,OAAOC,SAASC,KAhBhE,KAiBlB,MAGF,IAAK,6BACHoqC,EAAM,CAAC,YAAa1tB,EAAS8W,SAAU9W,EAASxrB,OAAOssC,IAAM,MAAQ,SAASx9B,KArB5D,KAsBlB,MAEF,IAAK,uBAKHoqC,EAAM,CAAC,kBAJK1tB,EAASuiB,WAAiDz2C,IACnEk0B,EAASuiB,WAAwD0U,YACjEj3B,EAASuiB,WAAmDtX,UAC7DjL,EAASuiB,WAAWnuC,EACQ4rB,EAASk3B,eAAe5zC,KA7BpC,KA8BlB,MAGF,IAAK,oBACHoqC,EAAM1tB,EAASm3B,UAAY,IAAMn3B,EAASo3B,SAC1C,MAGF,QACEj/C,QAAQsC,MAAM,yBAA0BulB,GACxC0tB,EAAM,GAKV,OAAOA,GAAOrT,EAAM,IAAMA,EAAMA,GAI3B,SAASyI,EAAWnnC,EAAmB9H,GAM5C,MAAO,IAAM8H,EAAO,IAHJ07C,mBAAmBC,KAAKC,UAAU1jD,M,gCC7DpD,kFA4OA,MAAMowB,EAAkB,IA9JjB,MAML,cALO,KAAA6N,MAA8B,GAC9B,KAAAl7B,QAAuC,GAEtC,KAAAwB,IAAM,YAAO,QAAS,IAAS4C,OAGrC,UAAU5I,2BAA2B,CACnColD,kBAAoBllD,IAClBpG,KAAKkM,IAAI,qBAAsB9F,GAE/B,IAAI0xB,EAAa1xB,EAAO0xB,MAAQ93B,KAAK4lC,MAAMx/B,EAAOmlD,SAC9CzzB,IAIJA,EAAO93B,KAAKg4B,SAASF,EAAM1xB,EAAOsE,SAClC,UAAU7C,UAAU,cAAe,CAACiwB,OAAMptB,QAAStE,EAAOsE,cAKzD,SAASotB,EAAYptB,GAC1B,MAAM9K,EAAKk4B,EAAKl4B,GAChB,OAAGI,KAAK4lC,MAAMhmC,IACZk4B,EAAOxkB,OAAOiC,OAAOvV,KAAK4lC,MAAMhmC,GAAKk4B,GACrC93B,KAAKwrD,YAAY1zB,EAAMptB,GAChBotB,IAGT93B,KAAK4lC,MAAMhmC,GAAMk4B,EAEjBA,EAAK2zB,UAAY,IAAkBzsB,cAAclH,EAAKmH,UACtDnH,EAAKoH,OAAS,IAAkBF,cAAc,MAAQ,KAAOlH,EAAK2zB,WAAa,QAC/E3zB,EAAK4zB,cAAgB,GACrB1rD,KAAKwrD,YAAY1zB,EAAMptB,GAChBotB,GAGF,YAAYA,EAAYptB,G,MAC1B1K,KAAK0K,QAAQotB,EAAKl4B,IACnB8K,EAAU4I,OAAOiC,OAAOvV,KAAK0K,QAAQotB,EAAKl4B,IAAK8K,GAE/C1K,KAAK0K,QAAQotB,EAAKl4B,IAAM8K,EAGtBA,EAAQpC,OAAOuQ,MACjBif,EAAK4zB,cAAc9oD,OAAS,GACT,QAAhB,EAAA8H,aAAO,EAAPA,EAASA,eAAO,eAAE9H,SACnB8H,EAAQA,QAAQjJ,QAAQ,CAACkqD,EAAQjrD,K,OACf,QAAb,EAAAirD,EAAOrjD,cAAM,eAAEsjD,SAChB9zB,EAAK4zB,cAAcpgD,KAAK5K,MAO3B,QAAQmrD,GACb,MAAO,CACL/zB,KAAM93B,KAAK4lC,MAAMimB,GACjBnhD,QAAS1K,KAAK0K,QAAQmhD,IAInB,kBAAkB/zB,EAAYg0B,EAA+BC,EAAmBC,GAWrF,OAVGD,GACGC,IACFA,EAAmB,IAGrBD,EAAW,IAAkBn7B,cAAcm7B,EAAUC,IAErDD,OAAWtsD,EAGN,CACLyI,EAAG,iBACH4vB,OACAm0B,gBAAiBH,EACjBC,WACAG,kBAAmBH,EAAWC,OAAmBvsD,GAI9C,SAAS4I,EAAc8jD,GAC5B,MAAMr0B,EAAazvB,EAAQklB,MAAMuK,KAE3BnwB,EAAwBwkD,EAAUrrD,IAAI2X,GACnCqf,EAAKs0B,QAAQ3zC,GAAO4zC,QAGvB1gC,EAAYtjB,EAAQyJ,IACpBxR,EAAS+H,EAAQ/H,OACjB62B,EAAY,IAAgB3tB,iBAAiBlJ,GAEnD,OAAG+H,EAAQC,OAAOiY,YACT,IAAmBmQ,yBAAyB/E,EAAW,WAAatjB,IACzErI,KAAKkM,IAAI,4BACFlM,KAAKssD,SAASjkD,EAAS8jD,KAI3B,IAAW/kD,UAAU,oBAAqB,CAC/CZ,KAAM2wB,EACNuM,OAAQ,IAAmBh6B,mBAAmBrB,EAAQyJ,KACtDnK,YACC3B,KAAKqB,IACNrH,KAAKkM,IAAI,oBAAqB7E,GAC9B,IAAkBI,qBAAqBJ,KAIpC,WAAWgB,GAChB,MAAM8uB,EAAY,IAAgB3tB,iBAAiBnB,EAAQ/H,QAE3D,OAAO,IAAW8G,UAAU,0BAA2B,CACrDZ,KAAM2wB,EACNuM,OAAQ,IAAmBh6B,mBAAmBrB,EAAQyJ,OACrD9L,KAAKqB,IACN,IAAkBI,qBAAqBJ,GACvCrH,KAAKkM,IAAI,sBAAuB7E,KAI7B,SAASgB,EAAcgkD,EAAqB3xC,EAAiBC,EAAQ,IAC1E,OAAO,IAAWvT,UAAU,wBAAyB,CACnDZ,KAAM,IAAgBgD,iBAAiBnB,EAAQ/H,QAC/CV,GAAI,IAAmB8J,mBAAmBrB,EAAQyJ,KAClDu6C,SACA3xC,SACAC,UACC3U,KAAMumD,IACPvsD,KAAKkM,IAAI,yBAA0BqgD,GAEnC,IAAgBj2C,aAAai2C,EAAUv4C,OAEhCu4C,IAIJ,SAASlkD,GACd,MAAMyvB,EAAazvB,EAAQklB,MAAMuK,KAEjC,GAAGA,EAAKxvB,OAAOkkD,OAAQ,OAAOtlD,QAAQC,UAEtC,MAAMslD,EAAU,YAAK30B,GAErB,OADA20B,EAAQnkD,OAAOkkD,QAAS,EACjB,IAAmB77B,YAAYtoB,OAAS5I,EAAW,CACxDuxB,SAAUhxB,KAAK0sD,kBAAkBD,KAChCzmD,KAAK,OAELqF,IACDrL,KAAKkM,IAAIqC,MAAM,kBAAmBlD,OAMxC,IAAe0sB,gBAAkBA,EAClB","file":"3.05c1bf72a5127601ec23.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Config from './config';\r\n\r\nexport type SearchIndex = {\r\n  fullTexts: {\r\n    [peerId: string]: string\r\n  }/* ,\r\n  shortIndexes: {\r\n    [shortStr: string]: number[]\r\n  } */\r\n};\r\n\r\nclass SearchIndexManager {\r\n  public static badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\r\n  public static trimRe = /^\\s+|\\s$/g;\r\n\r\n  public createIndex(): SearchIndex {\r\n    return {\r\n      fullTexts: {}/* ,\r\n      shortIndexes: {} */\r\n    };\r\n  }\r\n\r\n  public cleanSearchText(text: string, latinize = true) {\r\n    const hasTag = text.charAt(0) === '%';\r\n    text = text.replace(SearchIndexManager['badCharsRe'], '').replace(SearchIndexManager['trimRe'], '');\r\n    if(latinize) {\r\n      text = text.replace(/[^A-Za-z0-9]/g, (ch) => {\r\n        const latinizeCh = Config.LatinizeMap[ch];\r\n        return latinizeCh !== undefined ? latinizeCh : ch;\r\n      });\r\n    }\r\n    \r\n    text = text.toLowerCase();\r\n    if(hasTag) {\r\n      text = '%' + text;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  public cleanUsername(username: string) {\r\n    return username && username.toLowerCase() || '';\r\n  }\r\n\r\n  public indexObject(id: number, searchText: string, searchIndex: SearchIndex) {\r\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\r\n      return false;\r\n    } */\r\n\r\n    if(searchText.trim()) {\r\n      searchText = this.cleanSearchText(searchText);\r\n    }\r\n\r\n    if(!searchText) {\r\n      delete searchIndex.fullTexts[id];\r\n      return false;\r\n    }\r\n\r\n    searchIndex.fullTexts[id] = searchText;\r\n    \r\n    /* const shortIndexes = searchIndex.shortIndexes;\r\n    searchText.split(' ').forEach((searchWord) => {\r\n      let len = Math.min(searchWord.length, 3),\r\n        wordPart, i;\r\n      for(i = 1; i <= len; i++) {\r\n        wordPart = searchWord.substr(0, i);\r\n        if(shortIndexes[wordPart] === undefined) {\r\n          shortIndexes[wordPart] = [id];\r\n        } else {\r\n          shortIndexes[wordPart].push(id);\r\n        }\r\n      }\r\n    }); */\r\n  }\r\n\r\n  public search(query: string, searchIndex: SearchIndex) {\r\n    const fullTexts = searchIndex.fullTexts;\r\n    //const shortIndexes = searchIndex.shortIndexes;\r\n\r\n    query = this.cleanSearchText(query);\r\n\r\n    const newFoundObjs: {[peerId: string]: true} = {};\r\n    const queryWords = query.split(' ');\r\n    for(const peerId in fullTexts) {\r\n      const fullText = fullTexts[peerId];\r\n\r\n      let found = true;\r\n      for(const word of queryWords) { // * verify that all words are found\r\n        const idx = fullText.indexOf(word);\r\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\r\n          found = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(found) {\r\n        newFoundObjs[peerId] = true;\r\n      }\r\n    }\r\n    \r\n\r\n    /* const queryWords = query.split(' ');\r\n    let foundArr: number[];\r\n    for(let i = 0; i < queryWords.length; i++) {\r\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\r\n      if(!newFound) {\r\n        foundArr = [];\r\n        break;\r\n      }\r\n      \r\n      if(foundArr === undefined || foundArr.length > newFound.length) {\r\n        foundArr = newFound;\r\n      }\r\n    }\r\n\r\n    for(let j = 0; j < foundArr.length; j++) {\r\n      let found = true;\r\n      let searchText = fullTexts[foundArr[j]];\r\n      for(let i = 0; i < queryWords.length; i++) {\r\n        if(searchText.indexOf(queryWords[i]) === -1) {\r\n          found = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(found) {\r\n        newFoundObjs[foundArr[j]] = true;\r\n      }\r\n    } */\r\n\r\n    return newFoundObjs;\r\n  }\r\n}\r\n\r\nexport default new SearchIndexManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// Thanks to https://stackoverflow.com/a/49349813\r\nimport { clamp } from \"../helpers/number\";\r\n\r\n/**\r\n * Attibute modifier to create middle ellipsis\r\n * When the attribute value is left blank the ellipsis will be in the middle\r\n * When positive the attribute value will be used as a percentage\r\n * When negative the attribute value will be used as character index counted from the end\r\n * @example\r\n *   <div data-middle-ellipsis>A Javascript solution to middle ellipsis</div>\r\n *   <div data-middle-ellipsis=\"20\">A Javascript solution to middle ellipsis</div>\r\n *   <div data-middle-ellipsis=\"-3\">A Javascript solution to middle ellipsis</div>\r\n */\r\nconst ellipsis = '…';\r\nconst map: Map<HTMLElement, {\r\n  text: string,\r\n  textLength: number,\r\n  from: number,\r\n  multiplier: number,\r\n  font: string,\r\n  textWidth: number,\r\n  elementWidth: number\r\n}> = new Map();\r\n\r\nconst testQueue: Set<HTMLElement> = new Set();\r\nexport const fontFamily = 'Roboto, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif';\r\nconst fontSize = '16px';\r\nlet timeoutId: number;\r\n\r\nconst setTestQueue = () => {\r\n  cancelAnimationFrame(timeoutId);\r\n  timeoutId = window.requestAnimationFrame(testQueueElements);\r\n};\r\n\r\nconst testQueueElements = () => {\r\n  testQueue.forEach(testElement);\r\n  testQueue.clear();\r\n};\r\n\r\nwindow.addEventListener('resize', () => {\r\n  for(const [key] of map) {\r\n    testQueue.add(key);\r\n  }\r\n  \r\n  setTestQueue();\r\n}, {capture: true, passive: true});\r\n\r\nconst testElement = (element: HTMLElement) => {\r\n  //const perf = performance.now();\r\n  // do not recalculate variables a second time\r\n  let mapped = map.get(element);\r\n  const firstTime = !mapped;\r\n\r\n  let {text, textLength, from, multiplier, font, textWidth, elementWidth} = mapped || {};\r\n  //console.log('[MEE] testElement got mapped', mapped);\r\n\r\n  if(firstTime) {\r\n    text = element.textContent;\r\n    textLength = text.length;\r\n    from = /* parseFloat(element.getAttribute(attributeName)) ||  */50;\r\n    multiplier = from > 0 && from / 100;\r\n\r\n    //const perf = performance.now();\r\n    font = `${element.dataset.fontWeight || 400} ${fontSize} ${fontFamily}`;\r\n    /* const computedStyle = window.getComputedStyle(elm, null);\r\n    font = `${computedStyle.getPropertyValue('font-weight')} ${computedStyle.getPropertyValue('font-size')} ${computedStyle.getPropertyValue('font-family')}`; */\r\n    //console.log('testMiddleEllipsis get computed style:', performance.now() - perf, font);\r\n\r\n    textWidth = getTextWidth(text, font);\r\n    //const perf = performance.now();\r\n    elementWidth = element.getBoundingClientRect().width;\r\n    //console.log('testMiddleEllipsis get offsetWidth:', performance.now() - perf, font);\r\n    mapped = {text, textLength, from, multiplier, font, textWidth, elementWidth};\r\n    map.set(element, mapped);\r\n\r\n    //console.log('[MEE] testElement map set', element);\r\n  }\r\n  \r\n  const newElementWidth = element.getBoundingClientRect().width;\r\n  const widthChanged = firstTime || elementWidth !== newElementWidth;\r\n  !firstTime && widthChanged && (mapped.elementWidth = elementWidth = newElementWidth);\r\n  \r\n  if(widthChanged) {\r\n    if(textWidth > elementWidth) {\r\n      element.setAttribute('title', text);\r\n      let smallerText = text;\r\n      let smallerWidth = elementWidth;\r\n      while(smallerText.length > 3) {\r\n        let smallerTextLength = smallerText.length;\r\n        const half = multiplier &&\r\n          clamp(multiplier * smallerTextLength << 0, 1, smallerTextLength - 2) ||\r\n          Math.max(smallerTextLength + from - 1, 1);\r\n        const half1 = smallerText.substr(0, half).replace(/\\s*$/,'');\r\n        const half2 = smallerText.substr(half + 1).replace(/^\\s*/,'');\r\n        smallerText = half1 + half2;\r\n        smallerWidth = getTextWidth(smallerText + ellipsis, font);\r\n        if(smallerWidth < elementWidth) {\r\n          element.textContent = half1 + ellipsis + half2;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // * set new width after cutting text\r\n      mapped.elementWidth = element.getBoundingClientRect().width;\r\n      //mapped.textWidth = smallerWidth;\r\n    } else {\r\n      element.removeAttribute('title');\r\n    }\r\n  }\r\n\r\n  //console.log('testMiddleEllipsis for element:', elm, performance.now() - perf);\r\n};\r\n\r\nlet context: CanvasRenderingContext2D;\r\n/**\r\n * Get the text width\r\n * @param {string} text\r\n * @param {string} font\r\n */\r\nfunction getTextWidth(text: string, font: string) {\r\n  //const perf = performance.now();\r\n  if(!context) {\r\n    const canvas = document.createElement('canvas');\r\n    context = canvas.getContext('2d');\r\n    context.font = font;\r\n  }\r\n\r\n  //context.font = font;\r\n  const metrics = context.measureText(text);\r\n  //console.log('getTextWidth perf:', performance.now() - perf);\r\n  return metrics.width;\r\n  //return Math.round(metrics.width);\r\n}\r\n\r\nexport class MiddleEllipsisElement extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    //console.log('[MEE]: connectedCallback before', map.has(this), testQueue.has(this), map.size, this.textContent, map);\r\n\r\n    map.set(this, null);\r\n    testQueue.add(this);\r\n    setTestQueue();\r\n    //testElement(this);\r\n\r\n    //console.log('[MEE]: connectedCallback after', map.has(this), map.size, testQueue.has(this), testQueue.size);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    const deleted = map.delete(this);\r\n    //console.log('[MEE]: disconnectedCallback', deleted, map.has(this), map.size, this.textContent, map);\r\n  }\r\n}\r\n\r\ncustomElements.define(\"middle-ellipsis-element\", MiddleEllipsisElement);\r\n","'use strict'\r\n//@flow\r\n\r\n/** * * * * * * * * * *\r\n * Big Integer Library *\r\n * Created 2000        *\r\n * Leemon Baird        *\r\n * www.leemon.com      *\r\n * * * * * * * * * * * */\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\r\n// For most functions, if it needs a BigInt as a local variable it will actually use\r\n// a global, and will only allocate to it only when it's not the right size.  This ensures\r\n// that when a function is called repeatedly with same-sized parameters, it only allocates\r\n// memory on the first call.\r\n//\r\n// Note that for cryptographic purposes, the calls to Math.random() must\r\n// be replaced with calls to a better pseudorandom number generator.\r\n//\r\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\r\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\r\n// can be negative.  Negative bigInts are 2s complement.\r\n//\r\n// The following functions do not modify their inputs.\r\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\r\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\r\n// Those returning boolean or int will not allocate memory except possibly on the first\r\n// time they're called with a given parameter size.\r\n//\r\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\r\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\r\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\r\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\r\n// bigInt  dup(x)                 //return a copy of bigInt x\r\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\r\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\r\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\r\n// Array   findPrimes(n)          //return array of all primes less than integer n\r\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\r\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\r\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\r\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\r\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\r\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\r\n// boolean isZero(x)              //is the bigInt x equal to zero?\r\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\r\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\r\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\r\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\r\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\r\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\r\n// boolean negative(x)            //is bigInt x negative?\r\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\r\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\r\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\r\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\r\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\r\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\r\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\r\n//\r\n//\r\n// The following functions each have a non-underscored version, which most users should call instead.\r\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\r\n// passed in is large enough to hold the result.\r\n//\r\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\r\n// void    add_(x,y)             //do x=x+y for bigInts x and y\r\n// void    copy_(x,y)            //do x=y on bigInts x and y\r\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\r\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\r\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\r\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\r\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\r\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\r\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\r\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\r\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\r\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\r\n//\r\n// The following functions do NOT have a non-underscored version.\r\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\r\n// ensuring the arrays passed in are large enough to hold the results.\r\n//\r\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\r\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\r\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\r\n// void eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\r\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\r\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\r\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\r\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\r\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\r\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\r\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\r\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\r\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\r\n//\r\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\r\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\r\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\r\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\r\n//    mont_()             = algorithm 14.36, Montgomery multiplication\r\n//    divide_()           = algorithm 14.20  Multiple-precision division\r\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\r\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\r\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\r\n//\r\n// Profiling shows:\r\n//     randTruePrime_() spends:\r\n//         10% of its time in calls to powMod_()\r\n//         85% of its time in calls to millerRabin()\r\n//     millerRabin() spends:\r\n//         99% of its time in calls to powMod_()   (always with a base of 2)\r\n//     powMod_() spends:\r\n//         94% of its time in calls to mont_()  (almost always with x==y)\r\n//\r\n// This suggests there are several ways to speed up this library slightly:\r\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\r\n//         -- this should especially focus on being fast when raising 2 to a power mod n\r\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\r\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\r\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\r\n//       within the loop when all the parameters are the same length.\r\n//\r\n// There are several ideas that look like they wouldn't help much at all:\r\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\r\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\r\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\r\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\r\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\r\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\r\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\r\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\r\n//       Montgomery reduction, but that's obviously wrong.\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport type Bool = 1 | 0\r\n\r\n//globals\r\nexport var bpe = 0 //bits stored per array element\r\nvar mask = 0 //AND this with an array element to chop it down to bpe bits\r\nvar radix = mask + 1 //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\r\n\r\n//the digits for converting to different bases\r\nvar digitsStr =\r\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\"+-'\r\n\r\n//initialize the global variables\r\n\r\n//bpe=number of bits in the mantissa on this platform\r\nfor (bpe = 0; 1 << (bpe + 1) > 1 << bpe; bpe++);\r\nbpe >>= 1 //bpe=number of bits in one element of the array representing the bigInt\r\nmask = (1 << bpe) - 1 //AND the mask with an integer to get its bpe least significant bits\r\nradix = mask + 1 //2^bpe.  a single 1 bit to the left of the first bit of mask\r\nexport var one = int2bigInt(1, 1, 1) //constant used in powMod_()\r\nexport var zero = int2bigInt(0, 1, 1)\r\n\r\n//the following global variables are scratchpad memory to\r\n//reduce dynamic memory allocation in the inner loop\r\nvar t: number[] | number = new Array(0)\r\nvar ss = t //used in mult_()\r\nvar s0 = t //used in multMod_(), squareMod_()\r\n// var s1=t;    //used in powMod_(), multMod_(), squareMod_()\r\n// var s2=t;    //used in powMod_(), multMod_()\r\nvar s3 = t //used in powMod_()\r\nvar s4 = t,\r\n    s5 = t //used in mod_()\r\nvar s6 = t //used in bigInt2str()\r\nvar s7 = t //used in powMod_()\r\nvar T = t //used in GCD_()\r\nvar sa = t //used in mont_()\r\nvar mr_x1 = t,\r\n    mr_r = t,\r\n    mr_a = t, //used in millerRabin()\r\n    eg_v = t,\r\n    eg_u = t,\r\n    eg_A = t,\r\n    eg_B = t,\r\n    eg_C = t,\r\n    eg_D = t, //used in eGCD_(), inverseMod_()\r\n    //, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\r\n\r\n    primes = t,\r\n    pows = t,\r\n    s_i = t,\r\n    s_i2 = t,\r\n    s_R = t,\r\n    s_rm = t,\r\n    s_q = t,\r\n    s_n1 = t,\r\n    s_a = t,\r\n    s_r2 = t,\r\n    s_n = t,\r\n    s_b = t,\r\n    s_d = t,\r\n    s_x1 = t,\r\n    s_x2 = t,\r\n    s_aa = t, //used in randTruePrime_()\r\n    rpprb = t //used in randProbPrimeRounds() (which also uses \"primes\")\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nvar k, buff\r\n\r\n/**\r\n * return array of all primes less than integer n\r\n *\r\n * @param {number} n\r\n * @returns {number[]}\r\n */\r\nexport function findPrimes(n: number): number[] {\r\n  var i, s, p, ans\r\n  s = new Array(n)\r\n  for (i = 0; i < n; i++) s[i] = 0\r\n  s[0] = 2\r\n  p = 0 //first p elements of s are primes, the rest are a sieve\r\n  for (; s[p] < n; ) {\r\n    //s[p] is the pth prime\r\n    for (\r\n      i = s[p] * s[p];\r\n      i < n;\r\n      i += s[p] //mark multiples of s[p]\r\n    )\r\n      s[i] = 1\r\n    p++\r\n    s[p] = s[p - 1] + 1\r\n    for (; s[p] < n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\r\n  }\r\n  ans = new Array(p)\r\n  for (i = 0; i < p; i++) ans[i] = s[i]\r\n  return ans\r\n}\r\n\r\n/**\r\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\r\n *\r\n * x is a bigInt, and b is an integer, with b<x\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} b\r\n * @returns {(0 | 1)}\r\n */\r\nexport function millerRabinInt(x: number[], b: number): Bool {\r\n  if (mr_x1.length !== x.length) {\r\n    mr_x1 = dup(x)\r\n    mr_r = dup(x)\r\n    mr_a = dup(x)\r\n  }\r\n\r\n  copyInt_(mr_a, b)\r\n  return millerRabin(x, mr_a)\r\n}\r\n\r\n/**\r\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\r\n *\r\n * x and b are bigInts with b<x\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} b\r\n * @returns {(0 | 1)}\r\n */\r\nexport function millerRabin(x: number[], b: number[]): Bool {\r\n  var i, j, k, s\r\n\r\n  if (mr_x1.length !== x.length) {\r\n    mr_x1 = dup(x)\r\n    mr_r = dup(x)\r\n    mr_a = dup(x)\r\n  }\r\n\r\n  copy_(mr_a, b)\r\n  copy_(mr_r, x)\r\n  copy_(mr_x1, x)\r\n\r\n  addInt_(mr_r, -1)\r\n  addInt_(mr_x1, -1)\r\n\r\n  //s=the highest power of two that divides mr_r\r\n  k = 0\r\n  for (i = 0; i < mr_r.length; i++)\r\n    for (j = 1; j < mask; j <<= 1)\r\n      if (x[i] & j) {\r\n        s = k < mr_r.length + bpe ? k : 0\r\n        i = mr_r.length\r\n        j = mask\r\n      } else k++\r\n\r\n  if (s) rightShift_(mr_r, s)\r\n\r\n  powMod_(mr_a, mr_r, x)\r\n\r\n  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\r\n    j = 1\r\n    //$off\r\n    while (j <= s - 1 && !equals(mr_a, mr_x1)) {\r\n      squareMod_(mr_a, x)\r\n      if (equalsInt(mr_a, 1)) {\r\n        return 0\r\n      }\r\n      j++\r\n    }\r\n    if (!equals(mr_a, mr_x1)) {\r\n      return 0\r\n    }\r\n  }\r\n  return 1\r\n}\r\n\r\n/**\r\n * returns how many bits long the bigInt is, not counting leading zeros.\r\n *\r\n * @param {number[]} x\r\n * @returns {number}\r\n */\r\nexport function bitSize(x: number[]): number {\r\n  var j, z, w\r\n  for (j = x.length - 1; x[j] == 0 && j > 0; j--);\r\n  for (z = 0, w = x[j]; w; w >>= 1, z++);\r\n  z += bpe * j\r\n  return z\r\n}\r\n\r\n/**\r\n * return a copy of x with at least n elements, adding leading zeros if needed\r\n *\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {number[]}\r\n */\r\nexport function expand(x: number[], n: number): number[] {\r\n  var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0)\r\n  copy_(ans, x)\r\n  return ans\r\n}\r\n\r\n/**\r\n * return a k-bit true random prime using Maurer's algorithm.\r\n *\r\n * @export\r\n * @param {number} k\r\n * @returns {number[]}\r\n */\r\nexport function randTruePrime(k: number): number[] {\r\n  var ans = int2bigInt(0, k, 0)\r\n  randTruePrime_(ans, k)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * return a k-bit random probable prime with probability of error < 2^-80\r\n *\r\n * @export\r\n * @param {number} k\r\n * @returns {number[]}\r\n */\r\nexport function randProbPrime(k: number): number[] {\r\n  if (k >= 600) return randProbPrimeRounds(k, 2) //numbers from HAC table 4.3\r\n  if (k >= 550) return randProbPrimeRounds(k, 4)\r\n  if (k >= 500) return randProbPrimeRounds(k, 5)\r\n  if (k >= 400) return randProbPrimeRounds(k, 6)\r\n  if (k >= 350) return randProbPrimeRounds(k, 7)\r\n  if (k >= 300) return randProbPrimeRounds(k, 9)\r\n  if (k >= 250) return randProbPrimeRounds(k, 12) //numbers from HAC table 4.4\r\n  if (k >= 200) return randProbPrimeRounds(k, 15)\r\n  if (k >= 150) return randProbPrimeRounds(k, 18)\r\n  if (k >= 100) return randProbPrimeRounds(k, 27)\r\n  return randProbPrimeRounds(k, 40) //number from HAC remark 4.26 (only an estimate)\r\n}\r\n\r\n/**\r\n * return a k-bit probable random prime using n rounds of Miller Rabin\r\n * (after trial division with small primes)\r\n *\r\n * @export\r\n * @param {number} k\r\n * @param {number} n\r\n * @returns {number[]}\r\n */\r\nexport function randProbPrimeRounds(k: number, n: number): number[] {\r\n  var ans, i, divisible, B\r\n  B = 30000 //B is largest prime to use in trial division\r\n  ans = int2bigInt(0, k, 0)\r\n\r\n  //optimization: try larger and smaller B to find the best limit.\r\n\r\n  if (primes.length === 0) primes = findPrimes(30000) //check for divisibility by primes <=30000\r\n\r\n  if (rpprb.length !== ans.length) rpprb = dup(ans)\r\n\r\n  for (;;) {\r\n    //keep trying random values for ans until one appears to be prime\r\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\r\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\r\n    //   This can reduce the amount of random number generation.\r\n\r\n    randBigInt_(ans, k, 0) //ans = a random odd number to check\r\n    ans[0] |= 1\r\n    divisible = 0\r\n\r\n    //check ans for divisibility by small primes up to B\r\n    for (i = 0; i < primes.length && primes[i] <= B; i++)\r\n      if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {\r\n        divisible = 1\r\n        break\r\n      }\r\n\r\n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\r\n\r\n    //do n rounds of Miller Rabin, with random bases less than ans\r\n    for (i = 0; i < n && !divisible; i++) {\r\n      randBigInt_(rpprb, k, 0)\r\n      while (\r\n        !greater(ans, rpprb) //pick a random rpprb that's < ans\r\n      )\r\n        randBigInt_(rpprb, k, 0)\r\n      if (!millerRabin(ans, rpprb)) divisible = 1\r\n    }\r\n\r\n    if (!divisible) return ans\r\n  }\r\n  /*::\r\n  declare var never: empty\r\n  return never\r\n  */\r\n}\r\n\r\n/**\r\n * return a new bigInt equal to (x mod n) for bigInts x and n.\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} n\r\n * @returns {number[]}\r\n */\r\nexport function mod(x: number[], n: number[]): number[] {\r\n  var ans = dup(x)\r\n  mod_(ans, n)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * return (x+n) where x is a bigInt and n is an integer.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {number[]}\r\n */\r\nexport function addInt(x: number[], n: number): number[] {\r\n  var ans = expand(x, x.length + 1)\r\n  addInt_(ans, n)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * return x*y for bigInts x and y. This is faster when y<x.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {number[]}\r\n */\r\nexport function mult(x: number[], y: number[]): number[] {\r\n  var ans = expand(x, x.length + y.length)\r\n  mult_(ans, y)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.\r\n *\r\n * 0**0=1.\r\n *\r\n * Faster for odd n.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} n\r\n * @returns {number[]}\r\n */\r\nexport function powMod(x: number[], y: number[], n: number[]): number[] {\r\n  var ans = expand(x, n.length)\r\n  powMod_(\r\n    //this should work without the trim, but doesn't\r\n    ans,\r\n    trim(y, 2),\r\n    trim(n, 2),\r\n  )\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * Simple pow with no optimizations (in 40x times slower than jsbn's pow)\r\n * @param x bigInt\r\n * @param e\r\n */\r\nexport function pow(x: number[], e: number) {\r\n  let ans = dup(x);\r\n  e -= 1;\r\n  for(let i = 0; i < e; ++i) {\r\n    ans = mult(ans, x);\r\n  }\r\n  return trim(ans, 1);\r\n}\r\n\r\n/**\r\n * return (x-y) for bigInts x and y\r\n *\r\n * Negative answers will be 2s complement\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {number[]}\r\n */\r\nexport function sub(x: number[], y: number[]): number[] {\r\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1)\r\n  sub_(ans, y)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * return (x+y) for bigInts x and y\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {number[]}\r\n */\r\nexport function add(x: number[], y: number[]): number[] {\r\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1)\r\n  add_(ans, y)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * return (x**(-1) mod n) for bigInts x and n.\r\n *\r\n * If no inverse exists, it returns null\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} n\r\n * @returns {(number[] | null)}\r\n */\r\nexport function inverseMod(x: number[], n: number[]): number[] | null {\r\n  var ans = expand(x, n.length)\r\n  var s = inverseMod_(ans, n)\r\n  return s ? trim(ans, 1) : null\r\n}\r\n\r\n/**\r\n * return (x*y mod n) for bigInts x,y,n.\r\n *\r\n * For greater speed, let y<x.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} n\r\n * @returns {number[]}\r\n */\r\nexport function multMod(x: number[], y: number[], n: number[]): number[] {\r\n  var ans = expand(x, n.length)\r\n  multMod_(ans, y, n)\r\n  return trim(ans, 1)\r\n}\r\n\r\n/**\r\n * generate a k-bit true random prime using Maurer's algorithm, and put it into ans.\r\n *\r\n * The bigInt ans must be large enough to hold it.\r\n *\r\n * @export\r\n * @param {number[]} ans\r\n * @param {number} k\r\n * @return {void}\r\n */\r\nexport function randTruePrime_(ans: number[], k: number): void {\r\n  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize\r\n  var w\r\n  if (primes.length == 0) primes = findPrimes(30000) //check for divisibility by primes <=30000\r\n\r\n  if (pows.length == 0) {\r\n    pows = new Array(512)\r\n    for (j = 0; j < 512; j++) {\r\n      pows[j] = Math.pow(2, j / 511 - 1)\r\n    }\r\n  }\r\n\r\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\r\n  c = 0.1 //c=0.1 in HAC\r\n  m = 20 //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\r\n  var recLimit = 20 //stop recursion when k <=recLimit.  Must have recLimit >= 2\r\n\r\n  if (s_i2.length != ans.length) {\r\n    s_i2 = dup(ans)\r\n    s_R = dup(ans)\r\n    s_n1 = dup(ans)\r\n    s_r2 = dup(ans)\r\n    s_d = dup(ans)\r\n    s_x1 = dup(ans) //TODO Seems like a bug in eslint, reports as unused\r\n    s_x2 = dup(ans)\r\n    s_b = dup(ans)\r\n    s_n = dup(ans)\r\n    s_i = dup(ans)\r\n    s_rm = dup(ans)\r\n    s_q = dup(ans)\r\n    s_a = dup(ans)\r\n    s_aa = dup(ans)\r\n  }\r\n\r\n  if (k <= recLimit) {\r\n    //generate small random primes by trial division up to its square root\r\n    pm = (1 << ((k + 2) >> 1)) - 1 //pm is binary number with all ones, just over sqrt(2^k)\r\n    copyInt_(ans, 0)\r\n    for (dd = 1; dd; ) {\r\n      dd = 0\r\n      ans[0] = 1 | (1 << (k - 1)) | Math.floor(Math.random() * (1 << k)) //random, k-bit, odd integer, with msb 1\r\n      for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {\r\n        //trial division by all primes 3...sqrt(2^k)\r\n        if (0 == ans[0] % primes[j]) {\r\n          dd = 1\r\n          break\r\n        }\r\n      }\r\n    }\r\n    carry_(ans)\r\n    return\r\n  }\r\n\r\n  B = c * k * k //try small primes up to B (or all the primes[] array if the largest is less than B).\r\n  if (k > 2 * m)\r\n    //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\r\n    for (r = 1; k - k * r <= m; ) r = pows[Math.floor(Math.random() * 512)] //r=Math.pow(2,Math.random()-1);\r\n  else r = 0.5\r\n\r\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\r\n\r\n  recSize = Math.floor(r * k) + 1\r\n\r\n  randTruePrime_(s_q, recSize)\r\n  copyInt_(s_i2, 0)\r\n  s_i2[Math.floor((k - 2) / bpe)] |= 1 << ((k - 2) % bpe) //s_i2=2^(k-2)\r\n  divide_(s_i2, s_q, s_i, s_rm) //s_i=floor((2^(k-1))/(2q))\r\n\r\n  z = bitSize(s_i)\r\n\r\n  for (;;) {\r\n    for (;;) {\r\n      //generate z-bit numbers until one falls in the range [0,s_i-1]\r\n      randBigInt_(s_R, z, 0)\r\n      if (greater(s_i, s_R)) break\r\n    } //now s_R is in the range [0,s_i-1]\r\n    addInt_(s_R, 1) //now s_R is in the range [1,s_i]\r\n    add_(s_R, s_i) //now s_R is in the range [s_i+1,2*s_i]\r\n\r\n    copy_(s_n, s_q)\r\n    mult_(s_n, s_R)\r\n    multInt_(s_n, 2)\r\n    addInt_(s_n, 1) //s_n=2*s_R*s_q+1\r\n\r\n    copy_(s_r2, s_R)\r\n    multInt_(s_r2, 2) //s_r2=2*s_R\r\n\r\n    //check s_n for divisibility by small primes up to B\r\n    for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++)\r\n      if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {\r\n        divisible = 1\r\n        break\r\n      }\r\n\r\n    if (!divisible)\r\n      if (!millerRabinInt(s_n, 2))\r\n        //if it passes small primes check, then try a single Miller-Rabin base 2\r\n        //this line represents 75% of the total runtime for randTruePrime_\r\n        divisible = 1\r\n\r\n    if (!divisible) {\r\n      //if it passes that test, continue checking s_n\r\n      addInt_(s_n, -3)\r\n      for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--); //strip leading zeros\r\n      for (zz = 0, w = s_n[j]; w; w >>= 1, zz++);\r\n      zz += bpe * j //zz=number of bits in s_n, ignoring leading zeros\r\n      for (;;) {\r\n        //generate z-bit numbers until one falls in the range [0,s_n-1]\r\n        randBigInt_(s_a, zz, 0)\r\n        if (greater(s_n, s_a)) break\r\n      } //now s_a is in the range [0,s_n-1]\r\n      addInt_(s_n, 3) //now s_a is in the range [0,s_n-4]\r\n      addInt_(s_a, 2) //now s_a is in the range [2,s_n-2]\r\n      copy_(s_b, s_a)\r\n      copy_(s_n1, s_n)\r\n      addInt_(s_n1, -1)\r\n      powMod_(s_b, s_n1, s_n) //s_b=s_a^(s_n-1) modulo s_n\r\n      addInt_(s_b, -1)\r\n      if (isZero(s_b)) {\r\n        copy_(s_b, s_a)\r\n        powMod_(s_b, s_r2, s_n)\r\n        addInt_(s_b, -1)\r\n        copy_(s_aa, s_n)\r\n        copy_(s_d, s_b)\r\n        GCD_(s_d, s_n) //if s_b and s_n are relatively prime, then s_n is a prime\r\n        if (equalsInt(s_d, 1)) {\r\n          copy_(ans, s_aa)\r\n          return //if we've made it this far, then s_n is absolutely guaranteed to be prime\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\r\n *\r\n * @export\r\n * @param {number} n\r\n * @param {number} s\r\n * @returns {number[]}\r\n */\r\nexport function randBigInt(n: number, s: number): number[] {\r\n  var a, b\r\n  a = Math.floor((n - 1) / bpe) + 2 //# array elements to hold the BigInt with a leading 0 element\r\n  b = int2bigInt(0, 0, a)\r\n  randBigInt_(b, n, s)\r\n  return b\r\n}\r\n\r\n/**\r\n * Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\r\n *\r\n * Array b must be big enough to hold the result. Must have n>=1\r\n *\r\n * @export\r\n * @param {number[]} b\r\n * @param {number} n\r\n * @param {number} s\r\n * @return {void}\r\n */\r\nexport function randBigInt_(b: number[], n: number, s: number): void {\r\n  var i, a\r\n  for (i = 0; i < b.length; i++) b[i] = 0\r\n  a = Math.floor((n - 1) / bpe) + 1 //# array elements to hold the BigInt\r\n  for (i = 0; i < a; i++) {\r\n    b[i] = Math.floor(Math.random() * (1 << (bpe - 1)))\r\n  }\r\n  b[a - 1] &= (2 << ((n - 1) % bpe)) - 1\r\n  if (s == 1) b[a - 1] |= 1 << ((n - 1) % bpe)\r\n}\r\n\r\n/**\r\n * Return the greatest common divisor of bigInts x and y (each with same number of elements).\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {number[]}\r\n */\r\nexport function GCD(x: number[], y: number[]): number[] {\r\n  var xc, yc\r\n  xc = dup(x)\r\n  yc = dup(y)\r\n  GCD_(xc, yc)\r\n  return xc\r\n}\r\n\r\n/**\r\n * set x to the greatest common divisor of bigInts x and y (each with same number of elements).\r\n *\r\n * y is destroyed.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n */\r\nexport function GCD_(x: number[], y: number[]): void {\r\n  var i: number, xp: number, yp: number, A: number, B, C: number, D: number, q, sing\r\n  var qp\r\n  if (T.length !== x.length) T = dup(x)\r\n\r\n  sing = 1\r\n  while (sing) {\r\n    //while y has nonzero elements other than y[0]\r\n    sing = 0\r\n    for (\r\n      i = 1;\r\n      i < y.length;\r\n      i++ //check if y has nonzero elements other than 0\r\n    )\r\n      if (y[i]) {\r\n        sing = 1\r\n        break\r\n      }\r\n    if (!sing) break //quit when y all zero elements except possibly y[0]\r\n\r\n    for (i = x.length; !x[i] && i >= 0; i--); //find most significant element of x\r\n    xp = x[i]\r\n    yp = y[i]\r\n    A = 1\r\n    B = 0\r\n    C = 0\r\n    D = 1\r\n    while (yp + C && yp + D) {\r\n      q = Math.floor((xp + A) / (yp + C))\r\n      qp = Math.floor((xp + B) / (yp + D))\r\n      if (q != qp) break\r\n      t = A - q * C\r\n      A = C\r\n      C = t //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\r\n      t = B - q * D\r\n      B = D\r\n      D = t\r\n      t = xp - q * yp\r\n      xp = yp\r\n      yp = t\r\n    }\r\n    if (B) {\r\n      copy_(T, x)\r\n      linComb_(x, y, A, B) //x=A*x+B*y\r\n      linComb_(y, T, D, C) //y=D*y+C*T\r\n    } else {\r\n      mod_(x, y)\r\n      copy_(T, x)\r\n      copy_(x, y)\r\n      copy_(y, T)\r\n    }\r\n  }\r\n  if (y[0] === 0) return\r\n  t = modInt(x, y[0])\r\n  copyInt_(x, y[0])\r\n  y[0] = t\r\n  while (y[0]) {\r\n    x[0] %= y[0]\r\n    t = x[0]\r\n    x[0] = y[0]\r\n    y[0] = t\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x**(-1) mod n, for bigInts x and n.\r\n *\r\n * If no inverse exists, it sets x to zero and returns 0, else it returns 1.\r\n * The x array must be at least as large as the n array.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} n\r\n * @returns {(0 | 1)}\r\n */\r\nexport function inverseMod_(x: number[], n: number[]): Bool {\r\n  var k = 1 + 2 * Math.max(x.length, n.length)\r\n\r\n  if (!(x[0] & 1) && !(n[0] & 1)) {\r\n    //if both inputs are even, then inverse doesn't exist\r\n    copyInt_(x, 0)\r\n    return 0\r\n  }\r\n\r\n  if (eg_u.length != k) {\r\n    eg_u = new Array(k)\r\n    eg_v = new Array(k)\r\n    eg_A = new Array(k)\r\n    eg_B = new Array(k)\r\n    eg_C = new Array(k)\r\n    eg_D = new Array(k)\r\n  }\r\n\r\n  copy_(eg_u, x)\r\n  copy_(eg_v, n)\r\n  copyInt_(eg_A, 1)\r\n  copyInt_(eg_B, 0)\r\n  copyInt_(eg_C, 0)\r\n  copyInt_(eg_D, 1)\r\n  for (;;) {\r\n    while (!(eg_u[0] & 1)) {\r\n      //while eg_u is even\r\n      halve_(eg_u)\r\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\r\n        //if eg_A==eg_B==0 mod 2\r\n        halve_(eg_A)\r\n        halve_(eg_B)\r\n      } else {\r\n        add_(eg_A, n)\r\n        halve_(eg_A)\r\n        sub_(eg_B, x)\r\n        halve_(eg_B)\r\n      }\r\n    }\r\n\r\n    while (!(eg_v[0] & 1)) {\r\n      //while eg_v is even\r\n      halve_(eg_v)\r\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\r\n        //if eg_C==eg_D==0 mod 2\r\n        halve_(eg_C)\r\n        halve_(eg_D)\r\n      } else {\r\n        add_(eg_C, n)\r\n        halve_(eg_C)\r\n        sub_(eg_D, x)\r\n        halve_(eg_D)\r\n      }\r\n    }\r\n\r\n    if (!greater(eg_v, eg_u)) {\r\n      //eg_v <= eg_u\r\n      sub_(eg_u, eg_v)\r\n      sub_(eg_A, eg_C)\r\n      sub_(eg_B, eg_D)\r\n    } else {\r\n      //eg_v > eg_u\r\n      sub_(eg_v, eg_u)\r\n      sub_(eg_C, eg_A)\r\n      sub_(eg_D, eg_B)\r\n    }\r\n\r\n    if (equalsInt(eg_u, 0)) {\r\n      while (\r\n        negative(eg_C) //make sure answer is nonnegative\r\n      )\r\n        add_(eg_C, n)\r\n      copy_(x, eg_C)\r\n\r\n      if (!equalsInt(eg_v, 1)) {\r\n        //if GCD_(x,n)!=1, then there is no inverse\r\n        copyInt_(x, 0)\r\n        return 0\r\n      }\r\n      return 1\r\n    }\r\n  }\r\n  /*::\r\n  declare var never: empty\r\n  return never\r\n  */\r\n}\r\n\r\n/**\r\n * return x**(-1) mod n, for integers x and n.\r\n *\r\n * Return 0 if there is no inverse\r\n *\r\n * @param {number} x\r\n * @param {number} n\r\n * @returns {number}\r\n */\r\nexport function inverseModInt(x: number, n: number): number {\r\n  var a = 1,\r\n      b = 0,\r\n      t\r\n  for (;;) {\r\n    if (x === 1) return a\r\n    if (x === 0) return 0\r\n    b -= a * Math.floor(n / x)\r\n    //$off\r\n    n %= x\r\n\r\n    if (n === 1) return b //to avoid negatives, change this b to n-b, and each -= to +=\r\n    if (n === 0) return 0\r\n    a -= b * Math.floor(x / n)\r\n    //$off\r\n    x %= n\r\n  }\r\n  /*::\r\n  declare var never: empty\r\n  return never\r\n  */\r\n}\r\n\r\n//this deprecated function is for backward compatibility only.\r\nfunction inverseModInt_(x: number, n: number) {\r\n  return inverseModInt(x, n)\r\n}\r\n\r\n/**\r\n * Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\r\n *\r\n *      v = GCD_(x,y) = a*x-b*y\r\n *\r\n * The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} v\r\n * @param {number[]} a\r\n * @param {number[]} b\r\n * @return {void}\r\n */\r\nexport function eGCD_(\r\n  x: number[],\r\n  y: number[],\r\n  v: number[],\r\n  a: number[],\r\n  b: number[],\r\n): void {\r\n  var g = 0\r\n  var k = Math.max(x.length, y.length)\r\n  if (eg_u.length != k) {\r\n    eg_u = new Array(k)\r\n    eg_A = new Array(k)\r\n    eg_B = new Array(k)\r\n    eg_C = new Array(k)\r\n    eg_D = new Array(k)\r\n  }\r\n  while (!(x[0] & 1) && !(y[0] & 1)) {\r\n    //while x and y both even\r\n    halve_(x)\r\n    halve_(y)\r\n    g++\r\n  }\r\n  copy_(eg_u, x)\r\n  copy_(v, y)\r\n  copyInt_(eg_A, 1)\r\n  copyInt_(eg_B, 0)\r\n  copyInt_(eg_C, 0)\r\n  copyInt_(eg_D, 1)\r\n  for (;;) {\r\n    while (!(eg_u[0] & 1)) {\r\n      //while u is even\r\n      halve_(eg_u)\r\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\r\n        //if A==B==0 mod 2\r\n        halve_(eg_A)\r\n        halve_(eg_B)\r\n      } else {\r\n        add_(eg_A, y)\r\n        halve_(eg_A)\r\n        sub_(eg_B, x)\r\n        halve_(eg_B)\r\n      }\r\n    }\r\n\r\n    while (!(v[0] & 1)) {\r\n      //while v is even\r\n      halve_(v)\r\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\r\n        //if C==D==0 mod 2\r\n        halve_(eg_C)\r\n        halve_(eg_D)\r\n      } else {\r\n        add_(eg_C, y)\r\n        halve_(eg_C)\r\n        sub_(eg_D, x)\r\n        halve_(eg_D)\r\n      }\r\n    }\r\n\r\n    if (!greater(v, eg_u)) {\r\n      //v<=u\r\n      sub_(eg_u, v)\r\n      sub_(eg_A, eg_C)\r\n      sub_(eg_B, eg_D)\r\n    } else {\r\n      //v>u\r\n      sub_(v, eg_u)\r\n      sub_(eg_C, eg_A)\r\n      sub_(eg_D, eg_B)\r\n    }\r\n    if (equalsInt(eg_u, 0)) {\r\n      while (negative(eg_C)) {\r\n        //make sure a (C) is nonnegative\r\n        add_(eg_C, y)\r\n        sub_(eg_D, x)\r\n      }\r\n      multInt_(eg_D, -1) ///make sure b (D) is nonnegative\r\n      copy_(a, eg_C)\r\n      copy_(b, eg_D)\r\n      leftShift_(v, g)\r\n      return\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * is bigInt x negative?\r\n *\r\n * @param {number[]} x\r\n * @returns {(1 | 0)}\r\n */\r\nexport function negative(x: number[]) {\r\n  //TODO Flow Bool type inference\r\n  return (x[x.length - 1] >> (bpe - 1)) & 1\r\n}\r\n\r\n/**\r\n * is (x << (shift*bpe)) > y?\r\n *\r\n * x and y are nonnegative bigInts\r\n * shift is a nonnegative integer\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number} shift\r\n * @returns {(1 | 0)}\r\n */\r\nexport function greaterShift(x: number[], y: number[], shift: number): Bool {\r\n  var i,\r\n      kx = x.length,\r\n      ky = y.length\r\n  k = kx + shift < ky ? kx + shift : ky\r\n  for (i = ky - 1 - shift; i < kx && i >= 0; i++) if (x[i] > 0) return 1 //if there are nonzeros in x to the left of the first column of y, then x is bigger\r\n  for (i = kx - 1 + shift; i < ky; i++) if (y[i] > 0) return 0 //if there are nonzeros in y to the left of the first column of x, then x is not bigger\r\n  for (i = k - 1; i >= shift; i--)\r\n    if (x[i - shift] > y[i]) return 1\r\n    else if (x[i - shift] < y[i]) return 0\r\n  return 0\r\n}\r\n\r\n/**\r\n * is x > y?\r\n *\r\n * x and y both nonnegative\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {(1 | 0)}\r\n */\r\nexport function greater(x: number[], y: number[]): Bool {\r\n  var i\r\n  var k = x.length < y.length ? x.length : y.length\r\n\r\n  for (i = x.length; i < y.length; i++) if (y[i]) return 0 //y has more digits\r\n\r\n  for (i = y.length; i < x.length; i++) if (x[i]) return 1 //x has more digits\r\n\r\n  for (i = k - 1; i >= 0; i--)\r\n    if (x[i] > y[i]) return 1\r\n    else if (x[i] < y[i]) return 0\r\n  return 0\r\n}\r\n\r\n/**\r\n * divide x by y giving quotient q and remainder r.\r\n *\r\n *     q = floor(x/y)\r\n *     r = x mod y\r\n *\r\n * All 4 are bigints.\r\n *\r\n * * x must have at least one leading zero element.\r\n * * y must be nonzero.\r\n * * q and r must be arrays that are exactly the same length as x. (Or q can have more).\r\n * * Must have x.length >= y.length >= 2.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} q\r\n * @param {number[]} r\r\n * @return {void}\r\n */\r\nexport function divide_(\r\n  x: number[],\r\n  y: number[],\r\n  q: number[],\r\n  r: number[],\r\n): void {\r\n  var kx, ky\r\n  var i, j, y1, y2, c, a, b\r\n  copy_(r, x)\r\n  for (ky = y.length; y[ky - 1] === 0; ky--); //ky is number of elements in y, not including leading zeros\r\n\r\n  //normalize: ensure the most significant element of y has its highest bit set\r\n  b = y[ky - 1]\r\n  for (a = 0; b; a++) b >>= 1\r\n  a = bpe - a //a is how many bits to shift so that the high order bit of y is leftmost in its array element\r\n  leftShift_(y, a) //multiply both by 1<<a now, then divide both by that at the end\r\n  leftShift_(r, a)\r\n\r\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\r\n  for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--); //kx is number of elements in normalized x, not including leading zeros\r\n\r\n  copyInt_(q, 0) // q=0\r\n  while (!greaterShift(y, r, kx - ky)) {\r\n    // while (leftShift_(y,kx-ky) <= r) {\r\n    subShift_(r, y, kx - ky) //   r=r-leftShift_(y,kx-ky)\r\n    q[kx - ky]++ //   q[kx-ky]++;\r\n  } // }\r\n\r\n  for (i = kx - 1; i >= ky; i--) {\r\n    if (r[i] == y[ky - 1]) q[i - ky] = mask\r\n    else q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1])\r\n\r\n    //The following for(;;) loop is equivalent to the commented while loop,\r\n    //except that the uncommented version avoids overflow.\r\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\r\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\r\n    //    q[i-ky]--;\r\n    for (;;) {\r\n      y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky]\r\n      c = y2 >> bpe\r\n      y2 = y2 & mask\r\n      y1 = c + q[i - ky] * y[ky - 1]\r\n      c = y1 >> bpe\r\n      y1 = y1 & mask\r\n\r\n      if (\r\n        c == r[i]\r\n          ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1]\r\n          : c > r[i]\r\n      )\r\n        q[i - ky]--\r\n      else break\r\n    }\r\n\r\n    linCombShift_(r, y, -q[i - ky], i - ky) //r=r-q[i-ky]*leftShift_(y,i-ky)\r\n    if (negative(r)) {\r\n      addShift_(r, y, i - ky) //r=r+leftShift_(y,i-ky)\r\n      q[i - ky]--\r\n    }\r\n  }\r\n\r\n  rightShift_(y, a) //undo the normalization step\r\n  rightShift_(r, a) //undo the normalization step\r\n}\r\n\r\n/**\r\n * do carries and borrows so each element of the bigInt x fits in bpe bits.\r\n *\r\n * @param {number[]} x\r\n */\r\nexport function carry_(x: number[]): void {\r\n  var i, k, c, b\r\n  k = x.length\r\n  c = 0\r\n  for (i = 0; i < k; i++) {\r\n    c += x[i]\r\n    b = 0\r\n    if (c < 0) {\r\n      b = -(c >> bpe)\r\n      c += b * radix\r\n    }\r\n    x[i] = c & mask\r\n    c = (c >> bpe) - b\r\n  }\r\n}\r\n\r\n/**\r\n * return x mod n for bigInt x and integer n.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {number}\r\n */\r\nexport function modInt(x: number[], n: number): number {\r\n  var i,\r\n      c = 0\r\n  for (i = x.length - 1; i >= 0; i--) c = (c * radix + x[i]) % n\r\n  return c\r\n}\r\n\r\n/**\r\n * convert the integer t into a bigInt with at least the given number of bits.\r\n * the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\r\n * Pad the array with leading zeros so that it has at least minSize elements.\r\n *\r\n * There will always be at least one leading 0 element.\r\n *\r\n * @export\r\n * @param {number} t\r\n * @param {number} bits\r\n * @param {number} minSize\r\n * @returns {number[]}\r\n */\r\nexport function int2bigInt(t: number, bits: number, minSize: number): number[] {\r\n  var i, k\r\n  k = Math.ceil(bits / bpe) + 1\r\n  k = minSize > k ? minSize : k\r\n  var buff = new Array(k)\r\n  copyInt_(buff, t)\r\n  return buff\r\n}\r\n\r\n/**\r\n * return the bigInt given a string representation in a given base.\r\n * Pad the array with leading zeros so that it has at least minSize elements.\r\n * If base=-1, then it reads in a space-separated list of array elements in decimal.\r\n *\r\n * The array will always have at least one leading zero, unless base=-1.\r\n *\r\n * @export\r\n * @param {string} s\r\n * @param {number} base\r\n * @param {number} [minSize]\r\n * @returns {number[]}\r\n */\r\nexport function str2bigInt(\r\n  s: string,\r\n  base: number,\r\n  minSize?: number,\r\n): number[] {\r\n  var d, i, x, y, kk\r\n  var k = s.length\r\n  if (base === -1) {\r\n    //comma-separated list of array elements in decimal\r\n    x = new Array(0)\r\n    for (;;) {\r\n      y = new Array(x.length + 1)\r\n      for (i = 0; i < x.length; i++) y[i + 1] = x[i]\r\n      y[0] = parseInt(s, 10) //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\r\n      x = y\r\n      d = s.indexOf(',', 0)\r\n      if (d < 1) break\r\n      //$off\r\n      s = s.substring(d + 1)\r\n      if (s.length == 0) break\r\n    }\r\n    //$off\r\n    if (x.length < minSize) {\r\n      //$off\r\n      y = new Array(minSize)\r\n      copy_(y, x)\r\n      return y\r\n    }\r\n    return x\r\n  }\r\n\r\n  x = int2bigInt(0, base * k, 0)\r\n  for (i = 0; i < k; i++) {\r\n    d = digitsStr.indexOf(s.substring(i, i + 1), 0)\r\n    if (base <= 36 && d >= 36)\r\n      //convert lowercase to uppercase if base<=36\r\n      d -= 26\r\n    if (d >= base || d < 0) {\r\n      //stop at first illegal character\r\n      break\r\n    }\r\n    multInt_(x, base)\r\n    addInt_(x, d)\r\n  }\r\n\r\n  for (k = x.length; k > 0 && !x[k - 1]; k--); //strip off leading zeros\r\n  //$off\r\n  k = minSize > k + 1 ? minSize : k + 1\r\n  //$off\r\n  y = new Array(k)\r\n  //$off\r\n  kk = k < x.length ? k : x.length\r\n  //$off\r\n  for (i = 0; i < kk; i++) y[i] = x[i]\r\n  //$off\r\n  for (; i < k; i++) y[i] = 0\r\n  return y\r\n}\r\n\r\n//return the bigInt given a string representation in a given base.\r\n//Pad the array with leading zeros so that it has at least minSize elements.\r\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\r\n//The array will always have at least one leading zero, unless base=-1.\r\n// function str2bigInt(s,b,minSize) {\r\n//   var d, i, j, base, str, x, y, kk;\r\n//   if (typeof b === 'string') {\r\n//           base = b.length;\r\n//           str = b;\r\n//   } else {\r\n//           base = b;\r\n//           str = digitsStr;\r\n//   }\r\n//   var k=s.length;\r\n//   if (base==-1) { //comma-separated list of array elements in decimal\r\n//       x=new Array(0);\r\n//       for (;;) {\r\n//           y=new Array(x.length+1);\r\n//           for (i=0;i<x.length;i++)\r\n//               y[i+1]=x[i];\r\n//           y[0]=parseInt(s,10);\r\n//           x=y;\r\n//           d=s.indexOf(',',0);\r\n//           if (d<1)\r\n//               break;\r\n//           s=s.substring(d+1);\r\n//           if (s.length==0)\r\n//               break;\r\n//       }\r\n//       if (x.length<minSize) {\r\n//           y=new Array(minSize);\r\n//           copy_(y,x);\r\n//           return y;\r\n//       }\r\n//       return x;\r\n//   }\r\n\r\n//   x=int2bigInt(0,base*k,0);\r\n// for (i=0;i<k;i++) {\r\n//   d=str.indexOf(s.substring(i,i+1),0);\r\n//   if (base<=36 && d>=36) { //convert lowercase to uppercase if base<=36\r\n//       d-=26;\r\n//   }\r\n//   if (d>=base || d<0) {   //ignore illegal characters\r\n//   continue;\r\n//       }\r\n//       multInt_(x,base);\r\n//       addInt_(x,d);\r\n//   }\r\n\r\n//   for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\r\n//   k=minSize>k+1 ? minSize : k+1;\r\n//   y=new Array(k);\r\n//   kk=k<x.length ? k : x.length;\r\n//   for (i=0;i<kk;i++)\r\n//       y[i]=x[i];\r\n//   for (;i<k;i++)\r\n//       y[i]=0;\r\n//   return y;\r\n// }\r\n\r\n/**\r\n * is bigint x equal to integer y?\r\n *\r\n * y must have less than bpe bits\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} y\r\n * @returns {(1 | 0)}\r\n */\r\nexport function equalsInt(x: number[], y: number): Bool {\r\n  var i\r\n  if (x[0] != y) return 0\r\n  for (i = 1; i < x.length; i++) if (x[i]) return 0\r\n  return 1\r\n}\r\n\r\n/**\r\n * are bigints x and y equal?\r\n *\r\n * this works even if x and y are different lengths and have arbitrarily many leading zeros\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {(1 | 0)}\r\n */\r\nexport function equals(x: number[], y: number[]): Bool {\r\n  var i\r\n  var k = x.length < y.length ? x.length : y.length\r\n  for (i = 0; i < k; i++) if (x[i] !== y[i]) return 0\r\n  if (x.length > y.length) {\r\n    for (; i < x.length; i++) if (x[i]) return 0\r\n  } else {\r\n    for (; i < y.length; i++) if (y[i]) return 0\r\n  }\r\n  return 1\r\n}\r\n\r\n/**\r\n * is the bigInt x equal to zero?\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @returns {(1 | 0)}\r\n */\r\nexport function isZero(x: number[]): Bool {\r\n  var i\r\n  for (i = 0; i < x.length; i++) if (x[i]) return 0\r\n  return 1\r\n}\r\n\r\n/**\r\n * Convert a bigInt into a string in a given base, from base 2 up to base 95.\r\n *\r\n * Base -1 prints the contents of the array representing the number.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} base\r\n * @returns {string}\r\n */\r\nexport function bigInt2str(x: number[], base: number): string {\r\n  var i,\r\n      t,\r\n      s = ''\r\n\r\n  if (s6.length !== x.length) s6 = dup(x)\r\n  else copy_(s6, x)\r\n\r\n  if (base === -1) {\r\n    //return the list of array contents\r\n    for (i = x.length - 1; i > 0; i--) s += x[i] + ','\r\n    s += x[0]\r\n  } else {\r\n    //return it in the given base\r\n    while (!isZero(s6)) {\r\n      t = divInt_(s6, base) //t=s6 % base; s6=floor(s6/base);\r\n      s = digitsStr.substring(t, t + 1) + s\r\n    }\r\n  }\r\n  if (s.length === 0) s = '0'\r\n  return s\r\n}\r\n\r\n/**\r\n * Convert a bigInt into bytes\r\n * @param x bigInt\r\n * @param littleEndian byte order by default\r\n */\r\nexport function bigInt2bytes(x: number[], littleEndian = true) {\r\n  if(s6.length !== x.length) s6 = dup(x);\r\n  else copy_(s6, x);\r\n\r\n  const out: number[] = [];\r\n\r\n  //console.log('bigInt2bytes');\r\n  while(!isZero(s6)) {\r\n    t = divInt_(s6, 256); //t=s6 % base; s6=floor(s6/base);\r\n    out.push(t);\r\n    //console.log('bigInt2bytes', t);\r\n  }\r\n\r\n  if(littleEndian) {\r\n    out.reverse();\r\n  }\r\n\r\n  //console.log('bigInt2bytes', out);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Compare two bigInts and return -1 if x is less, 0 if equals, 1 if greater\r\n * @param x bigInt\r\n * @param y bigInt\r\n */\r\nexport function cmp(x: number[], y: number[]) {\r\n  return greater(x, y) ? 1 : (equals(x, y) ? 0 : -1);\r\n}\r\n\r\n/* Object.assign(self, {\r\n  cmp,\r\n  str2bigInt,\r\n  int2bigInt,\r\n  bigInt2str,\r\n  one,\r\n  divide_,\r\n  divInt_,\r\n  dup,\r\n  negative\r\n}); */\r\n\r\n/**\r\n * Returns a duplicate of bigInt x\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @returns {number[]}\r\n */\r\nexport function dup(x: number[]): number[] {\r\n  var i\r\n  buff = Array(x.length)\r\n  copy_(buff, x)\r\n  return buff\r\n}\r\n\r\n/**\r\n * do x=y on bigInts x and y.\r\n *\r\n * x must be an array at least as big as y (not counting the leading zeros in y).\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @returns {void}\r\n */\r\nexport function copy_(x: number[], y: number[]): void {\r\n  var i\r\n  var k = x.length < y.length ? x.length : y.length\r\n  for (i = 0; i < k; i++) x[i] = y[i]\r\n  for (i = k; i < x.length; i++) x[i] = 0\r\n}\r\n\r\n/**\r\n * do x=y on bigInt x and integer y.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {void}\r\n */\r\nexport function copyInt_(x: number[], n: number): void {\r\n  var i, c\r\n  var len = x.length //TODO .length in for loop have perfomance costs. Bench this\r\n  for (c = n, i = 0; i < len; i++) {\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x+n where x is a bigInt and n is an integer.\r\n *\r\n * x must be large enough to hold the result.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {void}\r\n */\r\nexport function addInt_(x: number[], n: number): void {\r\n  var i, k, c, b\r\n  x[0] += n\r\n  k = x.length\r\n  c = 0\r\n  for (i = 0; i < k; i++) {\r\n    c += x[i]\r\n    b = 0\r\n    if (c < 0) {\r\n      b = -(c >> bpe)\r\n      c += b * radix\r\n    }\r\n    x[i] = c & mask\r\n    c = (c >> bpe) - b\r\n    if (!c) return //stop carrying as soon as the carry is zero\r\n  }\r\n}\r\n\r\n/**\r\n * right shift bigInt x by n bits.\r\n *\r\n *     0 <= n < bpe.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} n\r\n */\r\nexport function rightShift_(x: number[], n: number): void {\r\n  var i\r\n  var k = Math.floor(n / bpe)\r\n  if (k) {\r\n    for (\r\n      i = 0;\r\n      i < x.length - k;\r\n      i++ //right shift x by k elements\r\n    )\r\n      x[i] = x[i + k]\r\n    for (; i < x.length; i++) x[i] = 0\r\n    //$off\r\n    n %= bpe\r\n  }\r\n  for (i = 0; i < x.length - 1; i++) {\r\n    x[i] = mask & ((x[i + 1] << (bpe - n)) | (x[i] >> n))\r\n  }\r\n  x[i] >>= n\r\n}\r\n\r\n/**\r\n * do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\r\n *\r\n * @param {number[]} x\r\n * @returns {void}\r\n */\r\nexport function halve_(x: number[]): void {\r\n  var i\r\n  for (i = 0; i < x.length - 1; i++) {\r\n    x[i] = mask & ((x[i + 1] << (bpe - 1)) | (x[i] >> 1))\r\n  }\r\n  x[i] = (x[i] >> 1) | (x[i] & (radix >> 1)) //most significant bit stays the same\r\n}\r\n\r\n/**\r\n * left shift bigInt x by n bits\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {void}\r\n */\r\nexport function leftShift_(x: number[], n: number): void {\r\n  var i\r\n  var k = Math.floor(n / bpe)\r\n  if (k) {\r\n    for (\r\n      i = x.length;\r\n      i >= k;\r\n      i-- //left shift x by k elements\r\n    )\r\n      x[i] = x[i - k]\r\n    for (; i >= 0; i--) x[i] = 0\r\n    //$off\r\n    n %= bpe\r\n  }\r\n  if (!n) return\r\n  for (i = x.length - 1; i > 0; i--) {\r\n    x[i] = mask & ((x[i] << n) | (x[i - 1] >> (bpe - n)))\r\n  }\r\n  x[i] = mask & (x[i] << n)\r\n}\r\n\r\n/**\r\n * do x=x*n where x is a bigInt and n is an integer.\r\n *\r\n * x must be large enough to hold the result.\r\n *\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {void}\r\n */\r\nexport function multInt_(x: number[], n: number): void {\r\n  var i, k, c, b\r\n  if (!n) return\r\n  k = x.length\r\n  c = 0\r\n  for (i = 0; i < k; i++) {\r\n    c += x[i] * n\r\n    b = 0\r\n    if (c < 0) {\r\n      b = -(c >> bpe)\r\n      c += b * radix\r\n    }\r\n    x[i] = c & mask\r\n    c = (c >> bpe) - b\r\n  }\r\n}\r\n\r\n/**\r\n * do x=floor(x/n) for bigInt x and integer n, and return the remainder\r\n *\r\n * @param {number[]} x\r\n * @param {number} n\r\n * @returns {number} remainder\r\n */\r\nexport function divInt_(x: number[], n: number): number {\r\n  var i,\r\n      r = 0,\r\n      s\r\n  for (i = x.length - 1; i >= 0; i--) {\r\n    s = r * radix + x[i]\r\n    x[i] = Math.floor(s / n)\r\n    r = s % n\r\n  }\r\n  return r\r\n}\r\n\r\n/**\r\n * do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\r\n *\r\n * x must be large enough to hold the answer.\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {void}\r\n */\r\nexport function linComb_(x: number[], y: number[], a: number, b: number): void {\r\n  var i, c, k, kk\r\n  k = x.length < y.length ? x.length : y.length\r\n  kk = x.length\r\n  for (c = 0, i = 0; i < k; i++) {\r\n    c += a * x[i] + b * y[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n  for (i = k; i < kk; i++) {\r\n    c += a * x[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\r\n *\r\n * x must be large enough to hold the answer.\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number} b\r\n * @param {number} ys\r\n * @returns {void}\r\n */\r\nexport function linCombShift_(\r\n  x: number[],\r\n  y: number[],\r\n  b: number,\r\n  ys: number,\r\n): void {\r\n  var i, c, k, kk\r\n  k = x.length < ys + y.length ? x.length : ys + y.length\r\n  kk = x.length\r\n  for (c = 0, i = ys; i < k; i++) {\r\n    c += x[i] + b * y[i - ys]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n  for (i = k; c && i < kk; i++) {\r\n    c += x[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x+(y<<(ys*bpe)) for bigInts x and y, and integer ys.\r\n *\r\n * x must be large enough to hold the answer.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number} ys\r\n * @return {void}\r\n */\r\nexport function addShift_(x: number[], y: number[], ys: number): void {\r\n  var i, c, k, kk\r\n  k = x.length < ys + y.length ? x.length : ys + y.length\r\n  kk = x.length\r\n  for (c = 0, i = ys; i < k; i++) {\r\n    c += x[i] + y[i - ys]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n  for (i = k; c && i < kk; i++) {\r\n    c += x[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x-(y<<(ys*bpe)) for bigInts x and y, and integer ys\r\n *\r\n * x must be large enough to hold the answer\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number} ys\r\n * @return {void}\r\n */\r\nexport function subShift_(x: number[], y: number[], ys: number): void {\r\n  var i, c, k, kk\r\n  k = x.length < ys + y.length ? x.length : ys + y.length\r\n  kk = x.length\r\n  for (c = 0, i = ys; i < k; i++) {\r\n    c += x[i] - y[i - ys]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n  for (i = k; c && i < kk; i++) {\r\n    c += x[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x-y for bigInts x and y\r\n *\r\n * x must be large enough to hold the answer\r\n *\r\n * negative answers will be 2s complement\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @return {void}\r\n */\r\nexport function sub_(x: number[], y: number[]): void {\r\n  var i, c, k, kk\r\n  k = x.length < y.length ? x.length : y.length\r\n  for (c = 0, i = 0; i < k; i++) {\r\n    c += x[i] - y[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n  for (i = k; c && i < x.length; i++) {\r\n    c += x[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x+y for bigInts x and y\r\n *\r\n * x must be large enough to hold the answer\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @return {void}\r\n */\r\nexport function add_(x: number[], y: number[]): void {\r\n  var i, c, k, kk\r\n  k = x.length < y.length ? x.length : y.length\r\n  for (c = 0, i = 0; i < k; i++) {\r\n    c += x[i] + y[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n  for (i = k; c && i < x.length; i++) {\r\n    c += x[i]\r\n    x[i] = c & mask\r\n    c >>= bpe\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x*y for bigInts x and y.\r\n *\r\n * This is faster when y<x.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @return {void}\r\n */\r\nexport function mult_(x: number[], y: number[]): void {\r\n  var i\r\n  if (ss.length != 2 * x.length) ss = new Array(2 * x.length)\r\n  copyInt_(ss, 0)\r\n  for (i = 0; i < y.length; i++) if (y[i]) linCombShift_(ss, x, y[i], i) //ss=1*ss+y[i]*(x<<(i*bpe))\r\n  copy_(x, ss)\r\n}\r\n\r\n/**\r\n * do x=x mod n for bigInts x and n\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} n\r\n * @return {void}\r\n */\r\nexport function mod_(x: number[], n: number[]): void {\r\n  if (s4.length !== x.length) s4 = dup(x)\r\n  else copy_(s4, x)\r\n  if (s5.length !== x.length) s5 = dup(x)\r\n  divide_(s4, n, s5, x) //x = remainder of s4 / n\r\n}\r\n\r\n/**\r\n * do x=x*y mod n for bigInts x,y,n.\r\n *\r\n * for greater speed, let y<x.\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} n\r\n * @return {void}\r\n */\r\nexport function multMod_(x: number[], y: number[], n: number[]): void {\r\n  var i\r\n  if (s0.length != 2 * x.length) s0 = new Array(2 * x.length)\r\n  copyInt_(s0, 0)\r\n  for (i = 0; i < y.length; i++) if (y[i]) linCombShift_(s0, x, y[i], i) //s0=1*s0+y[i]*(x<<(i*bpe))\r\n  mod_(s0, n)\r\n  copy_(x, s0)\r\n}\r\n\r\n/**\r\n * do x=x*x mod n for bigInts x,n.\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} n\r\n * @return {void}\r\n */\r\nexport function squareMod_(x: number[], n: number[]): void {\r\n  var i, j, d, c, kx, kn, k\r\n  for (kx = x.length; kx > 0 && !x[kx - 1]; kx--); //ignore leading zeros in x\r\n  k = kx > n.length ? 2 * kx : 2 * n.length //k=# elements in the product, which is twice the elements in the larger of x and n\r\n  if (s0.length != k) s0 = new Array(k)\r\n  copyInt_(s0, 0)\r\n  for (i = 0; i < kx; i++) {\r\n    c = s0[2 * i] + x[i] * x[i]\r\n    s0[2 * i] = c & mask\r\n    c >>= bpe\r\n    for (j = i + 1; j < kx; j++) {\r\n      c = s0[i + j] + 2 * x[i] * x[j] + c\r\n      s0[i + j] = c & mask\r\n      c >>= bpe\r\n    }\r\n    s0[i + kx] = c\r\n  }\r\n  mod_(s0, n)\r\n  copy_(x, s0)\r\n}\r\n\r\n/**\r\n * return x with exactly k leading zero elements\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number} k\r\n * @returns {number[]}\r\n */\r\nexport function trim(x: number[], k: number): number[] {\r\n  var i, y\r\n  for (i = x.length; i > 0 && !x[i - 1]; i--);\r\n  y = new Array(i + k)\r\n  copy_(y, x)\r\n  return y\r\n}\r\n\r\n/**\r\n * do `x=x**y mod n`, where x,y,n are bigInts and `**` is exponentiation.  `0**0=1`.\r\n *\r\n * this is faster when n is odd.\r\n *\r\n * x usually needs to have as many elements as n.\r\n *\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} n\r\n * @return {void}\r\n */\r\nexport function powMod_(x: number[], y: number[], n: number[]): void {\r\n  var k1, k2, kn, np\r\n  if (s7.length != n.length) s7 = dup(n)\r\n\r\n  //for even modulus, use a simple square-and-multiply algorithm,\r\n  //rather than using the more complex Montgomery algorithm.\r\n  if ((n[0] & 1) == 0) {\r\n    copy_(s7, x)\r\n    copyInt_(x, 1)\r\n    while (!equalsInt(y, 0)) {\r\n      if (y[0] & 1) multMod_(x, s7, n)\r\n      divInt_(y, 2)\r\n      squareMod_(s7, n)\r\n    }\r\n    return\r\n  }\r\n\r\n  //calculate np from n for the Montgomery multiplications\r\n  copyInt_(s7, 0)\r\n  for (kn = n.length; kn > 0 && !n[kn - 1]; kn--);\r\n  np = radix - inverseModInt(modInt(n, radix), radix)\r\n  s7[kn] = 1\r\n  multMod_(x, s7, n) // x = x * 2**(kn*bp) mod n\r\n\r\n  if (s3.length != x.length) s3 = dup(x)\r\n  else copy_(s3, x)\r\n  //$off\r\n  // @ts-ignore\r\n  for (k1 = y.length - 1; (k1 > 0) & !y[k1]; k1--); //k1=first nonzero element of y\r\n  if (y[k1] == 0) {\r\n    //anything to the 0th power is 1\r\n    copyInt_(x, 1)\r\n    return\r\n  }\r\n  for (k2 = 1 << (bpe - 1); k2 && !(y[k1] & k2); k2 >>= 1); //k2=position of first 1 bit in y[k1]\r\n  for (;;) {\r\n    if (!(k2 >>= 1)) {\r\n      //look at next bit of y\r\n      k1--\r\n      if (k1 < 0) {\r\n        mont_(x, one, n, np)\r\n        return\r\n      }\r\n      k2 = 1 << (bpe - 1)\r\n    }\r\n    mont_(x, x, n, np)\r\n\r\n    if (k2 & y[k1])\r\n      //if next bit is a 1\r\n      mont_(x, s3, n, np)\r\n  }\r\n}\r\n\r\n/**\r\n * do x=x*y*Ri mod n for bigInts x,y,n,\r\n * where Ri = 2**(-kn*bpe) mod n, and kn is the\r\n * number of elements in the n array, not\r\n * counting leading zeros.\r\n *\r\n * x array must have at least as many elemnts as the n array\r\n * It's OK if x and y are the same variable.\r\n *\r\n * must have:\r\n *  * x,y < n\r\n *  * n is odd\r\n *  * np = -(n^(-1)) mod radix\r\n *\r\n * @export\r\n * @param {number[]} x\r\n * @param {number[]} y\r\n * @param {number[]} n\r\n * @param {number} np\r\n * @return {void}\r\n */\r\nexport function mont_(x: number[], y: number[], n: number[], np: number): void {\r\n  var i, j, c, ui, t, ks\r\n  var kn = n.length\r\n  var ky = y.length\r\n\r\n  if (sa.length != kn) sa = new Array(kn)\r\n\r\n  copyInt_(sa, 0)\r\n\r\n  for (; kn > 0 && n[kn - 1] == 0; kn--); //ignore leading zeros of n\r\n  for (; ky > 0 && y[ky - 1] == 0; ky--); //ignore leading zeros of y\r\n  ks = sa.length - 1 //sa will never have more than this many nonzero elements.\r\n\r\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\r\n  for (i = 0; i < kn; i++) {\r\n    t = sa[0] + x[i] * y[0]\r\n    ui = ((t & mask) * np) & mask //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\r\n    c = (t + ui * n[0]) >> bpe\r\n    t = x[i]\r\n\r\n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\r\n    j = 1\r\n    for (; j < ky - 4; ) {\r\n      c += sa[j] + ui * n[j] + t * y[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j] + t * y[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j] + t * y[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j] + t * y[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j] + t * y[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n    }\r\n    for (; j < ky; ) {\r\n      c += sa[j] + ui * n[j] + t * y[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n    }\r\n    for (; j < kn - 4; ) {\r\n      c += sa[j] + ui * n[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n      c += sa[j] + ui * n[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n    }\r\n    for (; j < kn; ) {\r\n      c += sa[j] + ui * n[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n    }\r\n    for (; j < ks; ) {\r\n      c += sa[j]\r\n      sa[j - 1] = c & mask\r\n      c >>= bpe\r\n      j++\r\n    }\r\n    sa[j - 1] = c & mask\r\n  }\r\n\r\n  if (!greater(n, sa)) sub_(sa, n)\r\n  copy_(x, sa)\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../rootScope\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appMessagesManager from \"./appMessagesManager\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport RichTextProcessor from \"../richtextprocessor\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { MessageEntity, DraftMessage, MessagesSaveDraft } from \"../../layer\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { deepEqual } from \"../../helpers/object\";\r\nimport { isObject } from \"../mtproto/bin_utils\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport sessionStorage from \"../sessionStorage\";\r\n\r\nexport type MyDraftMessage = DraftMessage.draftMessage;\r\n\r\nexport class AppDraftsManager {\r\n  private drafts: {[peerIdAndThreadId: string]: MyDraftMessage} = {};\r\n  private getAllDraftPromise: Promise<void> = null;\r\n\r\n  constructor() {\r\n    sessionStorage.get('drafts').then(drafts => {\r\n      this.drafts = drafts || {};\r\n    });\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateDraftMessage: (update) => {\r\n        const peerID = appPeersManager.getPeerId(update.peer);\r\n        this.saveDraft(peerID, (update as any).threadId, update.draft, {notify: true});\r\n      }\r\n    });\r\n  }\r\n\r\n  private getKey(peerId: number, threadId?: number) {\r\n    return '' + peerId + (threadId ? '_' + threadId : '');\r\n  }\r\n\r\n  public getDraft(peerId: number, threadId?: number) {\r\n    return this.drafts[this.getKey(peerId, threadId)];\r\n  }\r\n\r\n  public addMissedDialogs() {\r\n    return this.getAllDrafts().then(() => {\r\n      for(const key in this.drafts) {\r\n        if(key.indexOf('_') !== -1) { // exclude threads\r\n          continue;\r\n        }\r\n\r\n        const peerId = +key;\r\n        const dialog = appMessagesManager.getDialogOnly(peerId);\r\n        if(!dialog) {\r\n          appMessagesManager.reloadConversation(peerId);\r\n          /* const dialog = appMessagesManager.generateDialog(peerId);\r\n          dialog.draft = this.drafts[key];\r\n          appMessagesManager.saveConversation(dialog);\r\n          appMessagesManager.newDialogsToHandle[peerId] = dialog;\r\n          appMessagesManager.scheduleHandleNewDialogs(); */\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public getAllDrafts() {\r\n    return this.getAllDraftPromise || (this.getAllDraftPromise = new Promise((resolve) => {\r\n      apiManager.invokeApi('messages.getAllDrafts').then((updates) => {\r\n        const p = apiUpdatesManager.updatesState.syncLoading || Promise.resolve();\r\n        p.then(() => {\r\n          apiUpdatesManager.processUpdateMessage(updates);\r\n        });\r\n        \r\n        resolve();\r\n      });\r\n    }));\r\n  }\r\n\r\n  public saveDraft(peerId: number, threadId: number, apiDraft: DraftMessage, options: Partial<{\r\n    notify: boolean\r\n  }> = {}) {\r\n    const draft = this.processApiDraft(apiDraft);\r\n\r\n    const key = this.getKey(peerId, threadId);\r\n    if(draft) {\r\n      this.drafts[key] = draft;\r\n    } else {\r\n      delete this.drafts[key];\r\n    }\r\n\r\n    sessionStorage.set({\r\n      drafts: this.drafts\r\n    });\r\n\r\n    if(options.notify) {\r\n      // console.warn(dT(), 'save draft', peerId, apiDraft, options)\r\n      rootScope.broadcast('draft_updated', {\r\n        peerId,\r\n        threadId,\r\n        draft\r\n      });\r\n    }\r\n\r\n    return draft;\r\n  }\r\n\r\n  public draftsAreEqual(draft1: DraftMessage, draft2: DraftMessage) {\r\n    if(typeof(draft1) !== typeof(draft2)) {\r\n      return false;\r\n    }\r\n\r\n    if(!isObject(draft1)) {\r\n      return true;\r\n    }\r\n\r\n    if(draft1._ !== draft2._) {\r\n      return false;\r\n    }\r\n  \r\n    if(draft1._ === 'draftMessage' && draft2._ === draft1._) {\r\n      if(draft1.reply_to_msg_id !== draft2.reply_to_msg_id) {\r\n        return false;\r\n      }\r\n  \r\n      if(!deepEqual(draft1.entities, draft2.entities)) {\r\n        return false;\r\n      }\r\n  \r\n      if(draft1.message !== draft2.message) {\r\n        return false;\r\n      }\r\n  \r\n      if(draft1.pFlags.no_webpage !== draft2.pFlags.no_webpage) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isEmptyDraft(draft: DraftMessage) {\r\n    if(!draft || draft._ === 'draftMessageEmpty') {\r\n      return true;\r\n    }\r\n    \r\n    if(draft.reply_to_msg_id > 0) {\r\n      return false;\r\n    }\r\n    \r\n    if(!draft.message.length) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public processApiDraft(draft: DraftMessage): MyDraftMessage {\r\n    if(!draft || draft._ !== 'draftMessage') {\r\n      return undefined;\r\n    }\r\n\r\n    const myEntities = RichTextProcessor.parseEntities(draft.message);\r\n    const apiEntities = draft.entities || [];\r\n    const totalEntities = RichTextProcessor.mergeEntities(apiEntities.slice(), myEntities); // ! only in this order, otherwise bold and emoji formatting won't work\r\n\r\n    draft.rMessage = RichTextProcessor.wrapDraftText(draft.message, {entities: totalEntities});\r\n    //draft.rReply = appMessagesManager.getRichReplyText(draft);\r\n    if(draft.reply_to_msg_id) {\r\n      draft.reply_to_msg_id = appMessagesManager.generateMessageId(draft.reply_to_msg_id);\r\n    }\r\n\r\n    return draft;\r\n  }\r\n\r\n  public async syncDraft(peerId: number, threadId: number, localDraft?: MyDraftMessage, saveOnServer = true) {\r\n    // console.warn(dT(), 'sync draft', peerID)\r\n    const serverDraft = this.getDraft(peerId, threadId);\r\n    if(this.draftsAreEqual(serverDraft, localDraft)) {\r\n      // console.warn(dT(), 'equal drafts', localDraft, serverDraft)\r\n      return true;\r\n    }\r\n\r\n    // console.warn(dT(), 'changed draft', localDraft, serverDraft)\r\n    let params: MessagesSaveDraft = {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      message: ''\r\n    };\r\n\r\n    let draftObj: DraftMessage;\r\n    if(this.isEmptyDraft(localDraft)) {\r\n      draftObj = {_: 'draftMessageEmpty'};\r\n    } else {\r\n      let message = localDraft.message;\r\n      let entities: MessageEntity[] = localDraft.entities;\r\n\r\n      if(localDraft.reply_to_msg_id) {\r\n        params.reply_to_msg_id = appMessagesManager.getServerMessageId(localDraft.reply_to_msg_id);\r\n      }\r\n\r\n      if(entities?.length) {\r\n        params.entities = entities;\r\n      }\r\n\r\n      if(localDraft.pFlags.no_webpage) {\r\n        params.no_webpage = localDraft.pFlags.no_webpage;\r\n      }\r\n\r\n      params.message = message;\r\n    }\r\n\r\n    const saveLocalDraft = draftObj || localDraft;\r\n    saveLocalDraft.date = tsNow(true) + serverTimeManager.serverTimeOffset;\r\n\r\n    this.saveDraft(peerId, threadId, saveLocalDraft, {notify: true});\r\n\r\n    if(saveOnServer && !threadId) {\r\n      return apiManager.invokeApi('messages.saveDraft', params);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nconst appDraftsManager = new AppDraftsManager();\r\nMOUNT_CLASS_TO.appDraftsManager = appDraftsManager;\r\nexport default appDraftsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { bufferConcats } from '../../helpers/bytes';\r\nimport { add_, bigInt2str, cmp, leftShift_, str2bigInt } from '../../vendor/leemon';\r\nimport { nextRandomInt } from '../../helpers/random';\r\n\r\n                       \r\n             \r\n                                                 \r\n\r\n                                                                           \r\n                                                                                 \r\n                                                                                             \r\n                                               \r\n                                                                          \r\n                                                              \r\n                \r\n \r\n          \r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\n/* export function bigint(num: number) {\r\n  return new BigInteger(num.toString(16), 16);\r\n} */\r\n\r\n/* export function bigStringInt(strNum: string) {\r\n  return new BigInteger(strNum, 10);\r\n} */\r\n\r\n/* export function base64ToBlob(base64str: string, mimeType: string) {\r\n  var sliceSize = 1024;\r\n  var byteCharacters = atob(base64str);\r\n  var bytesLength = byteCharacters.length;\r\n  var slicesCount = Math.ceil(bytesLength / sliceSize);\r\n  var byteArrays = new Array(slicesCount);\r\n\r\n  for(var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n    var begin = sliceIndex * sliceSize;\r\n    var end = Math.min(begin + sliceSize, bytesLength);\r\n\r\n    var bytes = new Array(end - begin);\r\n    for(var offset = begin, i = 0; offset < end; ++i, ++offset) {\r\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\r\n    }\r\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\r\n  }\r\n\r\n  return blobConstruct(byteArrays, mimeType);\r\n}\r\n\r\nexport function dataUrlToBlob(url: string) {\r\n  // var name = 'b64blob ' + url.length\r\n  // console.time(name)\r\n  var urlParts = url.split(',');\r\n  var base64str = urlParts[1];\r\n  var mimeType = urlParts[0].split(':')[1].split(';')[0];\r\n  var blob = base64ToBlob(base64str, mimeType);\r\n  // console.timeEnd(name)\r\n  return blob;\r\n} */\r\n\r\n/* export function bytesFromBigInt(bigInt: BigInteger, len?: number) {\r\n  var bytes = bigInt.toByteArray();\r\n\r\n  if(len && bytes.length < len) {\r\n    var padding = [];\r\n    for(var i = 0, needPadding = len - bytes.length; i < needPadding; i++) {\r\n      padding[i] = 0;\r\n    }\r\n    if(bytes instanceof ArrayBuffer) {\r\n      bytes = bufferConcat(padding, bytes);\r\n    } else {\r\n      bytes = padding.concat(bytes);\r\n    }\r\n  } else {\r\n    while (!bytes[0] && (!len || bytes.length > len)) {\r\n      bytes = bytes.slice(1);\r\n    }\r\n  }\r\n\r\n  return bytes;\r\n} */\r\n\r\nexport function longFromInts(high: number, low: number): string {\r\n  //let perf = performance.now();\r\n  //let str = bigint(high).shiftLeft(32).add(bigint(low)).toString(10);\r\n  //console.log('longFromInts jsbn', performance.now() - perf);\r\n  \r\n  //perf = performance.now();\r\n  const bigInt = str2bigInt(high.toString(16), 16, 32);//int2bigInt(high, 64, 64);\r\n  //console.log('longFromInts construct high', bigint(high).toString(10), bigInt2str(bigInt, 10));\r\n  leftShift_(bigInt, 32);\r\n  //console.log('longFromInts shiftLeft', bigint(high).shiftLeft(32).toString(10), bigInt2str(bigInt, 10));\r\n  add_(bigInt, str2bigInt(low.toString(16), 16, 32));\r\n  const _str = bigInt2str(bigInt, 10);\r\n\r\n  //console.log('longFromInts leemon', performance.now() - perf);\r\n\r\n  //console.log('longFromInts', high, low, str, _str, str === _str);\r\n\r\n  return _str;\r\n}\r\n\r\nexport function sortLongsArray(arr: string[]) {\r\n  return arr.map(long => {\r\n    return str2bigInt(long, 10);\r\n  }).sort((a, b) => {\r\n    return cmp(a, b);\r\n  }).map(bigInt => {\r\n    return bigInt2str(bigInt, 10);\r\n  });\r\n}\r\n\r\nexport function addPadding(bytes: any, blockSize: number = 16, zeroes?: boolean, full = false, prepend = false) {\r\n  let len = bytes.byteLength || bytes.length;\r\n  let needPadding = blockSize - (len % blockSize);\r\n  if(needPadding > 0 && (needPadding < blockSize || full)) {\r\n    ////console.log('addPadding()', len, blockSize, needPadding);\r\n    let padding = new Array(needPadding);\r\n    if(zeroes) {\r\n      for(let i = 0; i < needPadding; i++) {\r\n        padding[i] = 0;\r\n      }\r\n    } else {\r\n      for(let i = 0; i < padding.length; ++i) {\r\n        padding[i] = nextRandomInt(255);\r\n      }\r\n    }\r\n\r\n    if(bytes instanceof ArrayBuffer) {\r\n      bytes = (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)).buffer;\r\n    } else if(bytes instanceof Uint8Array) {\r\n      bytes = prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding);\r\n    } else {\r\n      bytes = prepend ? padding.concat(bytes) : bytes.concat(padding);\r\n    }\r\n  }\r\n\r\n  return bytes;\r\n}\r\n","/*\r\nSuperfast Blur - a fast Box Blur For Canvas\r\n\r\nVersion:     0.5\r\nAuthor:        Mario Klingemann\r\nContact:     mario@quasimondo.com\r\nWebsite:    http://www.quasimondo.com/BoxBlurForCanvas\r\nTwitter:    @quasimondo\r\n\r\nIn case you find this class useful - especially in commercial projects -\r\nI am not totally unhappy for a small donation to my PayPal account\r\nmario@quasimondo.de\r\n\r\nOr support me on flattr:\r\nhttps://flattr.com/thing/140066/Superfast-Blur-a-pretty-fast-Box-Blur-Effect-for-CanvasJavascript\r\n\r\nCopyright (c) 2011 Mario Klingemann\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n// eslint-disable-next-line max-len\r\nconst mul_table = [1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137, 241, 107, 3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141, 133, 249, 117, 221, 209, 197, 187, 177, 169, 5, 153, 73, 139, 133, 127, 243, 233, 223, 107, 103, 99, 191, 23, 177, 171, 165, 159, 77, 149, 9, 139, 135, 131, 253, 245, 119, 231, 224, 109, 211, 103, 25, 195, 189, 23, 45, 175, 171, 83, 81, 79, 155, 151, 147, 9, 141, 137, 67, 131, 129, 251, 123, 30, 235, 115, 113, 221, 217, 53, 13, 51, 50, 49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163, 5, 79, 155, 19, 75, 147, 145, 143, 35, 69, 17, 67, 33, 65, 255, 251, 247, 243, 239, 59, 29, 229, 113, 111, 219, 27, 213, 105, 207, 51, 201, 199, 49, 193, 191, 47, 93, 183, 181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159, 157, 155, 77, 19, 75, 37, 73, 145, 143, 141, 35, 138, 137, 135, 67, 33, 131, 129, 255, 63, 250, 247, 61, 121, 239, 237, 117, 29, 229, 227, 225, 111, 55, 109, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 48, 190, 47, 93, 185, 183, 181, 179, 178, 176, 175, 173, 171, 85, 21, 167, 165, 41, 163, 161, 5, 79, 157, 78, 154, 153, 19, 75, 149, 74, 147, 73, 144, 143, 71, 141, 140, 139, 137, 17, 135, 134, 133, 66, 131, 65, 129, 1];\r\n// eslint-disable-next-line max-len\r\nconst shg_table = [0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17, 12, 18, 16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20, 20, 20, 20, 20, 20, 15, 20, 19, 20, 20, 20, 21, 21, 21, 20, 20, 20, 21, 18, 21, 21, 21, 21, 20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22, 21, 22, 21, 19, 22, 22, 19, 20, 22, 22, 21, 21, 21, 22, 22, 22, 18, 22, 22, 21, 22, 22, 23, 22, 20, 23, 22, 22, 23, 23, 21, 19, 21, 21, 21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23, 18, 22, 23, 20, 22, 23, 23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24, 22, 21, 24, 23, 23, 24, 21, 24, 23, 24, 22, 24, 24, 22, 24, 24, 22, 23, 24, 24, 24, 20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23, 22, 23, 24, 24, 24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25, 25, 24, 22, 25, 25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 25, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 22, 25, 25, 23, 25, 25, 20, 24, 25, 24, 25, 25, 22, 24, 25, 24, 25, 24, 25, 25, 24, 25, 25, 25, 25, 22, 25, 25, 25, 24, 25, 24, 25, 18];\r\n\r\nexport default function boxBlurCanvasRGB(context, top_x, top_y, width, height, radius, iterations) {\r\n  if (Number.isNaN(radius) || radius < 1) return;\r\n\r\n  radius |= 0;\r\n\r\n  if (Number.isNaN(iterations)) iterations = 1;\r\n  iterations |= 0;\r\n  if (iterations > 3) iterations = 3;\r\n  if (iterations < 1) iterations = 1;\r\n\r\n  const imageData = context.getImageData(top_x, top_y, width, height);\r\n\r\n  const pixels = imageData.data;\r\n\r\n  let rsum;\r\n  let gsum;\r\n  let bsum;\r\n  let x;\r\n  let y;\r\n  let i;\r\n  let p;\r\n  let p1;\r\n  let p2;\r\n  let yp;\r\n  let yi;\r\n  let yw;\r\n  let wm = width - 1;\r\n  let hm = height - 1;\r\n  let rad1 = radius + 1;\r\n\r\n  let r = [];\r\n  let g = [];\r\n  let b = [];\r\n\r\n  let mul_sum = mul_table[radius];\r\n  let shg_sum = shg_table[radius];\r\n\r\n  let vmin = [];\r\n  let vmax = [];\r\n\r\n  while (iterations-- > 0) {\r\n    yw = yi = 0;\r\n\r\n    for (y = 0; y < height; y++) {\r\n      rsum = pixels[yw] * rad1;\r\n      gsum = pixels[yw + 1] * rad1;\r\n      bsum = pixels[yw + 2] * rad1;\r\n\r\n      for (i = 1; i <= radius; i++) {\r\n        p = yw + (((i > wm ? wm : i)) << 2);\r\n        rsum += pixels[p++];\r\n        gsum += pixels[p++];\r\n        bsum += pixels[p++];\r\n      }\r\n\r\n      for (x = 0; x < width; x++) {\r\n        r[yi] = rsum;\r\n        g[yi] = gsum;\r\n        b[yi] = bsum;\r\n\r\n        if (y == 0) {\r\n          vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\r\n          vmax[x] = ((p = x - radius) > 0 ? p << 2 : 0);\r\n        }\r\n\r\n        p1 = yw + vmin[x];\r\n        p2 = yw + vmax[x];\r\n\r\n        rsum += pixels[p1++] - pixels[p2++];\r\n        gsum += pixels[p1++] - pixels[p2++];\r\n        bsum += pixels[p1++] - pixels[p2++];\r\n\r\n        yi++;\r\n      }\r\n      yw += (width << 2);\r\n    }\r\n\r\n    for (x = 0; x < width; x++) {\r\n      yp = x;\r\n      rsum = r[yp] * rad1;\r\n      gsum = g[yp] * rad1;\r\n      bsum = b[yp] * rad1;\r\n\r\n      for (i = 1; i <= radius; i++) {\r\n        yp += (i > hm ? 0 : width);\r\n        rsum += r[yp];\r\n        gsum += g[yp];\r\n        bsum += b[yp];\r\n      }\r\n\r\n      yi = x << 2;\r\n      for (y = 0; y < height; y++) {\r\n        pixels[yi] = (rsum * mul_sum) >>> shg_sum;\r\n        pixels[yi + 1] = (gsum * mul_sum) >>> shg_sum;\r\n        pixels[yi + 2] = (bsum * mul_sum) >>> shg_sum;\r\n\r\n        if (x == 0) {\r\n          vmin[y] = ((p = y + rad1) < hm ? p : hm) * width;\r\n          vmax[y] = ((p = y - radius) > 0 ? p * width : 0);\r\n        }\r\n\r\n        p1 = x + vmin[y];\r\n        p2 = x + vmax[y];\r\n\r\n        rsum += r[p1] - r[p2];\r\n        gsum += g[p1] - g[p2];\r\n        bsum += b[p1] - b[p2];\r\n\r\n        yi += width << 2;\r\n      }\r\n    }\r\n  }\r\n\r\n  context.putImageData(imageData, top_x, top_y);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { CancellablePromise, deferredPromise } from \"./cancellablePromise\";\r\nimport { getHeavyAnimationPromise } from \"../hooks/useHeavyAnimationCheck\";\r\nimport { fastRaf } from \"./schedulers\";\r\n\r\ntype HeavyQueue<T> = {\r\n  items: any[], \r\n  process: (...args: any[]) => T,\r\n  context: any,\r\n  promise?: CancellablePromise<ReturnType<HeavyQueue<T>['process']>[]>\r\n};\r\nconst heavyQueue: HeavyQueue<any>[] = [];\r\nlet processingQueue = false;\r\n\r\nexport default function addHeavyTask<T>(queue: HeavyQueue<T>, method: 'push' | 'unshift' = 'push') {\r\n  if(!queue.items.length) {\r\n    return Promise.resolve([]);\r\n  }\r\n  \r\n  queue.promise = deferredPromise<T[]>();\r\n  heavyQueue[method](queue);\r\n  processHeavyQueue();\r\n\r\n  return queue.promise;\r\n}\r\n\r\nfunction processHeavyQueue() {\r\n  if(!processingQueue) {\r\n    const queue = heavyQueue.shift();\r\n    timedChunk(queue).finally(() => {\r\n      processingQueue = false;\r\n      if(heavyQueue.length) {\r\n        processHeavyQueue();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction timedChunk<T>(queue: HeavyQueue<T>) {\r\n  if(!queue.items.length) {\r\n    queue.promise.resolve([]);\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  const todo = queue.items.slice();\r\n  const results: T[] = [];\r\n\r\n  return new Promise<T[]>((resolve, reject) => {\r\n    const f = async() => {\r\n      const start = performance.now();\r\n\r\n      do {\r\n        await getHeavyAnimationPromise();\r\n        const possiblePromise = queue.process.apply(queue.context, todo.shift());\r\n        let realResult: T;\r\n        if(possiblePromise instanceof Promise) {\r\n          try {\r\n            realResult = await possiblePromise;\r\n          } catch(err) {\r\n            reject(err);\r\n            return;\r\n          }\r\n        } else {\r\n          realResult = possiblePromise;\r\n        }\r\n\r\n        results.push(realResult);\r\n      } while(todo.length > 0 && (performance.now() - start) < 6);\r\n\r\n      if(todo.length > 0) {\r\n        fastRaf(f);\r\n        //setTimeout(f, 25);\r\n      } else {\r\n        resolve(results);\r\n      }\r\n    };\r\n\r\n    fastRaf(f);\r\n    //setTimeout(f, 25);\r\n  }).then(queue.promise.resolve, queue.promise.reject);\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport _DEBUG from '../config/debug';\r\nimport fastBlur from '../vendor/fastBlur';\r\nimport addHeavyTask from './heavyQueue';\r\n\r\nconst RADIUS = 2;\r\nconst ITERATIONS = 2;\r\n\r\nconst DEBUG = _DEBUG && true;\r\n\r\nfunction processBlur(dataUri: string, radius: number, iterations: number) {\r\n  return new Promise<string>((resolve) => {\r\n    const img = new Image();\r\n    \r\n    const perf = performance.now();\r\n    if(DEBUG) {\r\n      console.log('[blur] start');\r\n    }\r\n    \r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      \r\n      const ctx = canvas.getContext('2d')!;\r\n      \r\n      //ctx.filter = 'blur(2px)';\r\n      ctx.drawImage(img, 0, 0);\r\n      fastBlur(ctx, 0, 0, canvas.width, canvas.height, radius, iterations);\r\n      \r\n      resolve(canvas.toDataURL());\r\n      if(DEBUG) {\r\n        console.log(`[blur] end, radius: ${radius}, iterations: ${iterations}, time: ${performance.now() - perf}`);\r\n      }\r\n      \r\n      /* canvas.toBlob(blob => {\r\n        resolve(URL.createObjectURL(blob));\r\n        \r\n        if(DEBUG) {\r\n          console.log(`[blur] end, radius: ${radius}, iterations: ${iterations}, time: ${performance.now() - perf}`);\r\n        }\r\n      }); */\r\n    };\r\n    \r\n    img.src = dataUri;\r\n  });\r\n}\r\n\r\nconst blurPromises: Map<string, Promise<string>> = new Map();\r\nconst CACHE_SIZE = 1000;\r\n\r\nexport default function blur(dataUri: string, radius: number = RADIUS, iterations: number = ITERATIONS) {\r\n  if(!dataUri) {\r\n    console.error('no dataUri for blur', dataUri);\r\n    return Promise.resolve(dataUri);\r\n  }\r\n\r\n  if(blurPromises.size > CACHE_SIZE) {\r\n    blurPromises.clear();\r\n  }\r\n  \r\n  if(blurPromises.has(dataUri)) return blurPromises.get(dataUri);\r\n  const promise = new Promise<string>((resolve) => {\r\n    //return resolve(dataUri);\r\n    addHeavyTask({\r\n      items: [[dataUri, radius, iterations]],\r\n      context: null,\r\n      process: processBlur\r\n    }, 'unshift').then(results => {\r\n      resolve(results[0]);\r\n    });\r\n  });\r\n\r\n  blurPromises.set(dataUri, promise);\r\n\r\n  return promise;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport { isSafari } from \"../helpers/userAgent\";\r\nimport { logger, LogTypes } from \"./logger\";\r\n\r\ntype Result = {\r\n  bytes: Uint8Array, \r\n  waveform?: Uint8Array\r\n};\r\n\r\ntype Task = {\r\n  pages: Uint8Array,\r\n  withWaveform: boolean,\r\n  waveform?: Uint8Array,\r\n  callback: {resolve: (result: Result) => void, reject: (err: any) => void},\r\n  timeout: number\r\n};\r\n\r\nexport class OpusDecodeController {\r\n  private worker: Worker;\r\n  private wavWorker : Worker;\r\n  private sampleRate = 48000;\r\n  private tasks: Array<Task> = [];\r\n  private keepAlive = false;\r\n  private isPlaySupportedResult: boolean;\r\n  private log = logger('OPUS', LogTypes.Error);\r\n\r\n  public isPlaySupported() {\r\n    if(this.isPlaySupportedResult !== undefined) return this.isPlaySupportedResult;\r\n\r\n    const audio = document.createElement('audio');\r\n    return this.isPlaySupportedResult = !!(audio.canPlayType && audio.canPlayType('audio/ogg;').replace(/no/, ''))/*  && false */;\r\n  }\r\n\r\n  public loadWavWorker() {\r\n    if(this.wavWorker) return;\r\n\r\n    this.wavWorker = new Worker('waveWorker.min.js');\r\n    this.wavWorker.addEventListener('message', (e) => {\r\n      const data = e.data;\r\n\r\n      this.log('[WAV] got message:', data);\r\n      if(data && data.page) {\r\n        const bytes = data.page;\r\n        this.onTaskEnd(this.tasks.shift(), bytes);\r\n      }\r\n    });\r\n  }\r\n\r\n  public loadWorker() {\r\n    if(this.worker) return;\r\n\r\n    this.worker = new Worker('decoderWorker.min.js');\r\n    this.worker.addEventListener('message', (e) => {\r\n      const data = e.data;\r\n      \r\n      this.log('[DECODER] got message', data);\r\n      if(data.type === 'done') {\r\n        //this.log('[DECODER] send done to wav');\r\n        this.wavWorker.postMessage({command: 'done'});\r\n\r\n        if(data.waveform) {\r\n          this.tasks[0].waveform = data.waveform;\r\n        }\r\n      } else { // e.data contains decoded buffers as float32 values\r\n        //this.log('[DECODER] send encode to wav');\r\n        this.wavWorker.postMessage({\r\n          command: 'encode',\r\n          buffers: e.data\r\n        }, isSafari ? undefined : data.map((typedArray: Uint8Array) => typedArray.buffer));\r\n      }\r\n    });\r\n  }\r\n\r\n  public setKeepAlive(keepAlive: boolean) {\r\n    this.keepAlive = keepAlive;\r\n    if(this.keepAlive) {\r\n      this.loadWorker();\r\n      this.loadWavWorker();\r\n    } else if(!this.tasks.length) {\r\n      this.terminateWorkers();\r\n    }\r\n  }\r\n\r\n  public onTaskEnd(task: Task, result?: Uint8Array) {\r\n    if(!result) {\r\n      task.callback.reject('timeout');\r\n    } else {\r\n      clearTimeout(task.timeout);\r\n      task.callback.resolve({bytes: result, waveform: task.waveform});\r\n    }\r\n\r\n    if(this.tasks.length) {\r\n      this.executeNewTask(this.tasks[0]);\r\n    }\r\n\r\n    this.terminateWorkers();\r\n  }\r\n\r\n  public terminateWorkers(kill = false) {\r\n    if((this.keepAlive || this.tasks.length) && !kill) return;\r\n\r\n    if(this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n    \r\n    if(this.wavWorker) {\r\n      this.wavWorker.terminate();\r\n      this.wavWorker = null;\r\n    }\r\n  }\r\n\r\n  public executeNewTask(task: Task) {\r\n    this.worker.postMessage({ \r\n      command: 'init',\r\n      decoderSampleRate: this.sampleRate,\r\n      outputBufferSampleRate: this.sampleRate\r\n    });\r\n\r\n    this.wavWorker.postMessage({ \r\n      command: 'init',\r\n      wavBitDepth: 16,\r\n      wavSampleRate: this.sampleRate\r\n    });\r\n\r\n    //console.log('sending command to worker:', task);\r\n    //setTimeout(() => {\r\n      this.log('[DECODER] send decode');\r\n      this.worker.postMessage({\r\n        command: 'decode',\r\n        pages: task.pages,\r\n        waveform: task.withWaveform\r\n      }, isSafari ? undefined : [task.pages.buffer]);\r\n    //}, 1e3);\r\n\r\n    task.timeout = window.setTimeout(() => {\r\n      this.log.error('decode timeout'/* , task */);\r\n\r\n      this.terminateWorkers(true);\r\n      if(this.tasks.length) {\r\n        this.loadWorker();\r\n        this.loadWavWorker();\r\n      }\r\n\r\n      this.onTaskEnd(this.tasks.shift());\r\n    }, 10e3);\r\n  }\r\n\r\n  public pushDecodeTask(pages: Uint8Array, withWaveform: boolean) {\r\n    return new Promise<Result>((resolve, reject) => {\r\n      const task = {\r\n        pages,\r\n        withWaveform,\r\n        callback: {resolve, reject},\r\n        timeout: 0\r\n      };\r\n\r\n      this.loadWorker();\r\n      this.loadWavWorker();\r\n\r\n      if(this.tasks.push(task) === 1) {\r\n        this.executeNewTask(task);\r\n      }\r\n    });\r\n  }\r\n\r\n  public async decode(typedArray: Uint8Array, withWaveform = false) {\r\n    return this.pushDecodeTask(typedArray, withWaveform).then(result => {\r\n      const dataBlob = new Blob([result.bytes], {type: \"audio/wav\"});\r\n      return {url: URL.createObjectURL(dataBlob), waveform: result.waveform};\r\n    });\r\n  }\r\n}\r\n\r\nconst opusDecodeController = new OpusDecodeController();\r\nMOUNT_CLASS_TO.opusDecodeController = opusDecodeController;\r\nexport default opusDecodeController;","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport appPhotosManager from \"./appPhotosManager\";\r\nimport appDocsManager from \"./appDocsManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport { ReferenceContext } from \"../mtproto/referenceDatabase\";\r\nimport rootScope from \"../rootScope\";\r\nimport { safeReplaceObject } from \"../../helpers/object\";\r\nimport { limitSymbols } from \"../../helpers/string\";\r\n\r\nexport class AppWebPagesManager {\r\n  private webpages: any = {};\r\n  private pendingWebPages: {\r\n    [webPageId: string]: {\r\n      [mid: string]: true\r\n    }\r\n  } = {};\r\n  \r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updateWebPage: (update) => {\r\n        this.saveWebPage(update.webpage);\r\n      }\r\n    });\r\n  }\r\n  \r\n  public saveWebPage(apiWebPage: any, mid?: number, mediaContext?: ReferenceContext) {\r\n    if(apiWebPage.photo && apiWebPage.photo._ === 'photo') {\r\n      //appPhotosManager.savePhoto(apiWebPage.photo, mediaContext);\r\n      apiWebPage.photo = appPhotosManager.savePhoto(apiWebPage.photo, mediaContext);\r\n    } else {\r\n      delete apiWebPage.photo;\r\n    }\r\n\r\n    if(apiWebPage.document && apiWebPage.document._ === 'document') {\r\n      apiWebPage.document = appDocsManager.saveDoc(apiWebPage.document, mediaContext); // warning 11.04.2020\r\n    } else {\r\n      if(apiWebPage.type === 'document') {\r\n        delete apiWebPage.type;\r\n      }\r\n\r\n      delete apiWebPage.document;\r\n    }\r\n    \r\n    const siteName = apiWebPage.site_name;\r\n    let shortTitle = apiWebPage.title || apiWebPage.author || siteName || '';\r\n    if(siteName && shortTitle === siteName) {\r\n      delete apiWebPage.site_name;\r\n    }\r\n\r\n    shortTitle = limitSymbols(shortTitle, 80, 100);\r\n\r\n    apiWebPage.rTitle = RichTextProcessor.wrapRichText(shortTitle, {noLinks: true, noLinebreaks: true});\r\n    let contextHashtag = '';\r\n    if(siteName === 'GitHub') {\r\n      const matches = apiWebPage.url.match(/(https?:\\/\\/github\\.com\\/[^\\/]+\\/[^\\/]+)/);\r\n      if(matches) {\r\n        contextHashtag = matches[0] + '/issues/{1}';\r\n      }\r\n    }\r\n\r\n    // delete apiWebPage.description\r\n    const shortDescriptionText = limitSymbols(apiWebPage.description || '', 150, 180);\r\n    apiWebPage.rDescription = RichTextProcessor.wrapRichText(shortDescriptionText, {\r\n      contextSite: siteName || 'external',\r\n      contextHashtag: contextHashtag\r\n    });\r\n    \r\n    if(apiWebPage.type !== 'photo' &&\r\n      apiWebPage.type !== 'video' &&\r\n      apiWebPage.type !== 'gif' &&\r\n      apiWebPage.type !== 'document' &&\r\n      !apiWebPage.description &&\r\n      apiWebPage.photo) {\r\n      apiWebPage.type = 'photo';\r\n    }\r\n    \r\n    if(mid) {\r\n      if(this.pendingWebPages[apiWebPage.id] === undefined) {\r\n        this.pendingWebPages[apiWebPage.id] = {};\r\n      }\r\n\r\n      this.pendingWebPages[apiWebPage.id][mid] = true;\r\n    }\r\n    \r\n    if(this.webpages[apiWebPage.id] === undefined) {\r\n      this.webpages[apiWebPage.id] = apiWebPage;\r\n    } else {\r\n      safeReplaceObject(this.webpages[apiWebPage.id], apiWebPage);\r\n    }\r\n    \r\n    if(!mid && this.pendingWebPages[apiWebPage.id] !== undefined) {\r\n      const msgs: number[] = [];\r\n      for(const msgId in this.pendingWebPages[apiWebPage.id]) {\r\n        msgs.push(+msgId);\r\n      }\r\n\r\n      rootScope.broadcast('webpage_updated', {\r\n        id: apiWebPage.id,\r\n        msgs\r\n      });\r\n    }\r\n\r\n    return apiWebPage;\r\n  }\r\n\r\n  public deleteWebPageFromPending(webPage: any, mid: number) {\r\n    const id = webPage.id;\r\n    if(this.pendingWebPages[id] && this.pendingWebPages[id][mid]) {\r\n      delete this.pendingWebPages[id][mid];\r\n\r\n      if(!Object.keys(this.pendingWebPages[id]).length) {\r\n        delete this.pendingWebPages[id];\r\n      }\r\n    }\r\n  }\r\n\r\n  public getWebPage(id: string) {\r\n    return this.webpages[id];\r\n  }\r\n}\r\n\r\nexport default new AppWebPagesManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToDocumentFragment(html: string) {\r\n  var template = document.createElement('template');\r\n  html = html.trim(); // Never return a text node of whitespace as the result\r\n  template.innerHTML = html;\r\n  return template.content;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { formatPhoneNumber } from \"../../components/misc\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\r\nimport { InputUser, Update, User as MTUser, UserStatus } from \"../../layer\";\r\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\r\n//import apiManager from '../mtproto/apiManager';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport searchIndexManager from \"../searchIndexManager\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\n\r\n// TODO: updateUserBlocked\r\n\r\nexport type User = MTUser.user;\r\n\r\nexport class AppUsersManager {\r\n  private storage = appStateManager.storages.users;\r\n  \r\n  private users: {[userId: number]: User} = {};\r\n  private usernames: {[username: string]: number} = {};\r\n  private contactsIndex = searchIndexManager.createIndex();\r\n  private contactsFillPromise: Promise<Set<number>>;\r\n  private contactsList: Set<number> = new Set();\r\n  private updatedContactsList = false;\r\n  \r\n  private getTopPeersPromise: Promise<number[]>;\r\n\r\n  constructor() {\r\n    setInterval(this.updateUsersStatuses, 60000);\r\n\r\n    rootScope.on('state_synchronized', this.updateUsersStatuses);\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateUserStatus: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          user.status = update.status;\r\n          if(user.status) {\r\n            if('expires' in user.status) {\r\n              user.status.expires -= serverTimeManager.serverTimeOffset;\r\n            }\r\n\r\n            if('was_online' in user.status) {\r\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\r\n            }\r\n          }\r\n\r\n          //user.sortStatus = this.getUserStatusForSort(user.status);\r\n          rootScope.broadcast('user_update', userId);\r\n          this.setUserToStateIfNeeded(user);\r\n        } //////else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserPhoto: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n\r\n          if(update.photo._ === 'userProfilePhotoEmpty') {\r\n            delete user.photo;\r\n          } else {\r\n            user.photo = safeReplaceObject(user.photo, update.photo);\r\n          }\r\n\r\n          this.setUserToStateIfNeeded(user);\r\n\r\n          rootScope.broadcast('user_update', userId);\r\n          rootScope.broadcast('avatar_update', userId);\r\n        } else console.warn('No user by id:', userId);\r\n      },\r\n\r\n      updateUserName: (update) => {\r\n        const userId = update.user_id;\r\n        const user = this.users[userId];\r\n        if(user) {\r\n          this.forceUserOnline(userId);\r\n          \r\n          this.saveApiUser(Object.assign({}, user, {\r\n            first_name: update.first_name,\r\n            last_name: update.last_name,\r\n            username: update.username\r\n          }), true);\r\n        }\r\n      }\r\n    });\r\n\r\n    /* case 'updateContactLink':\r\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\r\n    break; */\r\n\r\n    rootScope.on('language_change', (e) => {\r\n      const userId = this.getSelf().id;\r\n      searchIndexManager.indexObject(userId, this.getUserSearchText(userId), this.contactsIndex);\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const users = appStateManager.storagesResults.users;\r\n      if(users.length) {\r\n        this.users = {};\r\n        for(let i = 0, length = users.length; i < length; ++i) {\r\n          const user = users[i];\r\n          if(user) {\r\n            this.users[user.id] = user;\r\n          }\r\n        }\r\n      }\r\n\r\n      const contactsList = state.contactsList;\r\n      if(contactsList && Array.isArray(contactsList)) {\r\n        contactsList.forEach(userId => {\r\n          this.pushContact(userId);\r\n        });\r\n\r\n        if(contactsList.length) {\r\n          this.contactsFillPromise = Promise.resolve(this.contactsList);\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId < 0 || this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [peerId]: this.getUser(peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId < 0 || !this.storage.getFromCache(peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  private onContactsModified() {\r\n    const contactsList = [...this.contactsList];\r\n    appStateManager.pushToState('contactsList', contactsList);\r\n  }\r\n\r\n  public fillContacts() {\r\n    if(this.contactsFillPromise && this.updatedContactsList) {\r\n      return this.contactsFillPromise;\r\n    }\r\n\r\n    this.updatedContactsList = true;\r\n\r\n    const promise = apiManager.invokeApi('contacts.getContacts').then((result) => {\r\n      if(result._ === 'contacts.contacts') {\r\n        this.saveApiUsers(result.users);\r\n\r\n        result.contacts.forEach((contact) => {\r\n          this.pushContact(contact.user_id);\r\n        });\r\n\r\n        this.onContactsModified();\r\n      }\r\n\r\n      this.contactsFillPromise = promise;\r\n\r\n      return this.contactsList;\r\n    });\r\n\r\n    return this.contactsFillPromise || (this.contactsFillPromise = promise);\r\n  }\r\n\r\n  public resolveUsername(username: string) {\r\n    if(username[0] === '@') {\r\n      username = username.slice(1);\r\n    }\r\n\r\n    username = username.toLowerCase();\r\n    if(this.usernames[username]) {\r\n      return Promise.resolve(this.users[this.usernames[username]]);\r\n    }\r\n\r\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\r\n      this.saveApiUsers(resolvedPeer.users);\r\n      appChatsManager.saveApiChats(resolvedPeer.chats);\r\n\r\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\r\n    });\r\n  }\r\n\r\n  public pushContact(userId: number) {\r\n    this.contactsList.add(userId);\r\n    searchIndexManager.indexObject(userId, this.getUserSearchText(userId), this.contactsIndex);\r\n    appStateManager.requestPeer(userId, 'contacts');\r\n  }\r\n\r\n  public getUserSearchText(id: number) {\r\n    const user = this.users[id];\r\n    if(!user) {\r\n      return '';\r\n    }\r\n\r\n    const arr: string[] = [\r\n      user.first_name,\r\n      user.last_name,\r\n      user.phone,\r\n      user.username,\r\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\r\n      user.pFlags.self ? 'Saved Messages' : ''\r\n    ];\r\n\r\n    return arr.filter(Boolean).join(' ');\r\n  }\r\n\r\n  public getContacts(query?: string, includeSaved = false) {\r\n    return this.fillContacts().then(_contactsList => {\r\n      let contactsList = [..._contactsList];\r\n      if(query) {\r\n        const results = searchIndexManager.search(query, this.contactsIndex);\r\n        const filteredContactsList = [...contactsList].filter(id => !!results[id]);\r\n\r\n        contactsList = filteredContactsList;\r\n      }\r\n\r\n      contactsList.sort((userId1: number, userId2: number) => {\r\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n\r\n        return sortName1.localeCompare(sortName2);\r\n      });\r\n\r\n      if(includeSaved) {\r\n        if(this.testSelfSearch(query)) {\r\n          contactsList.findAndSplice(p => p === rootScope.myId);\r\n          contactsList.unshift(rootScope.myId);\r\n        }\r\n      }\r\n\r\n      /* contactsList.sort((userId1: number, userId2: number) => {\r\n        const sortName1 = (this.users[userId1] || {}).sortName || '';\r\n        const sortName2 = (this.users[userId2] || {}).sortName || '';\r\n        if(sortName1 === sortName2) {\r\n          return 0;\r\n        } \r\n        \r\n        return sortName1 > sortName2 ? 1 : -1;\r\n      }); */\r\n\r\n      return contactsList;\r\n    });\r\n  }\r\n\r\n  public toggleBlock(peerId: number, block: boolean) {\r\n    return apiManager.invokeApi(block ? 'contacts.block' : 'contacts.unblock', {\r\n      id: appPeersManager.getInputPeerById(peerId)\r\n    }).then(value => {\r\n      if(value) {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updatePeerBlocked',\r\n            peer_id: appPeersManager.getOutputPeer(peerId),\r\n            blocked: block\r\n          } as Update.updatePeerBlocked\r\n        });\r\n      }\r\n\r\n      return value;\r\n    });\r\n  }\r\n\r\n  public testSelfSearch(query: string) {\r\n    const user = this.getSelf();\r\n    const index = searchIndexManager.createIndex();\r\n    searchIndexManager.indexObject(user.id, this.getUserSearchText(user.id), index);\r\n    return !!searchIndexManager.search(query, index)[user.id];\r\n  }\r\n\r\n  public saveApiUsers(apiUsers: any[], override?: boolean) {\r\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\r\n  }\r\n\r\n  public saveApiUser(user: MTUser, override?: boolean) {\r\n    if(user._ === 'userEmpty') return;\r\n\r\n    const userId = user.id;\r\n    const oldUser = this.users[userId];\r\n\r\n    if(oldUser && !override) {\r\n      return;\r\n    }\r\n\r\n    if(user.pFlags === undefined) {\r\n      user.pFlags = {};\r\n    }\r\n\r\n    if(user.pFlags.min && oldUser !== undefined) {\r\n      return;\r\n    }\r\n\r\n    // * exclude from state\r\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\r\n\r\n    const fullName = user.first_name + ' ' + (user.last_name || '');\r\n    if(user.username) {\r\n      const searchUsername = searchIndexManager.cleanUsername(user.username);\r\n      this.usernames[searchUsername] = userId;\r\n    }\r\n\r\n    user.sortName = user.pFlags.deleted ? '' : searchIndexManager.cleanSearchText(fullName, false);\r\n\r\n    user.initials = RichTextProcessor.getAbbreviation(fullName);\r\n\r\n    if(user.status) {\r\n      if((user.status as UserStatus.userStatusOnline).expires) {\r\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\r\n      }\r\n\r\n      if((user.status as UserStatus.userStatusOffline).was_online) {\r\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\r\n      }\r\n    }\r\n\r\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\r\n\r\n    let changedTitle = false;\r\n    if(oldUser === undefined) {\r\n      this.users[userId] = user;\r\n    } else {\r\n      if(user.first_name !== oldUser.first_name \r\n        || user.last_name !== oldUser.last_name \r\n        || user.username !== oldUser.username) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      safeReplaceObject(oldUser, user);\r\n      rootScope.broadcast('user_update', userId);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.broadcast('peer_title_edit', user.id);\r\n    }\r\n\r\n    this.setUserToStateIfNeeded(user);\r\n  }\r\n\r\n  public setUserToStateIfNeeded(user: User) {\r\n    if(appStateManager.isPeerNeeded(user.id)) {\r\n      this.storage.set({\r\n        [user.id]: user\r\n      });\r\n    }\r\n  }\r\n\r\n  public formatUserPhone(phone: string) {\r\n    return '+' + formatPhoneNumber(phone).formatted;\r\n  }\r\n\r\n  public getUserStatusForSort(status: User['status'] | number) {\r\n    if(typeof(status) === 'number') {\r\n      status = this.getUser(status).status;\r\n    }\r\n\r\n    if(status) {\r\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\r\n      if(expires) {\r\n        return expires;\r\n      }\r\n\r\n      /* const timeNow = tsNow(true);\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return timeNow - 86400 * 3;\r\n        case 'userStatusLastWeek':\r\n          return timeNow - 86400 * 7;\r\n        case 'userStatusLastMonth':\r\n          return timeNow - 86400 * 30;\r\n      } */\r\n      switch(status._) {\r\n        case 'userStatusRecently':\r\n          return 3;\r\n        case 'userStatusLastWeek':\r\n          return 2;\r\n        case 'userStatusLastMonth':\r\n          return 1;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  public getUser(id: any): User {\r\n    if(isObject(id)) {\r\n      return id;\r\n    }\r\n\r\n    return this.users[id] || {id: id, pFlags: {deleted: true}, access_hash: ''} as User;\r\n  }\r\n\r\n  public getSelf() {\r\n    return this.getUser(rootScope.myId);\r\n  }\r\n\r\n  public getUserStatusString(userId: number): HTMLElement {\r\n    let key: LangPackKey;\r\n    let args: any[];\r\n\r\n    switch(userId) {\r\n      case REPLIES_PEER_ID:\r\n        key = 'Peer.RepliesNotifications';\r\n        break;\r\n      case 777000:\r\n        key = 'Peer.ServiceNotifications';\r\n        break;\r\n      default: {\r\n        if(this.isBot(userId)) {\r\n          key = 'Bot';\r\n          break;\r\n        }\r\n\r\n        const user = this.getUser(userId);\r\n        if(!user) {\r\n          key = '' as any;\r\n          break;\r\n        }\r\n\r\n        if(user.pFlags.support) {\r\n          key = 'SupportStatus';\r\n          break;\r\n        }\r\n\r\n        switch(user.status?._) {\r\n          case 'userStatusRecently': {\r\n            key = 'Lately';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastWeek': {\r\n            key = 'WithinAWeek';\r\n            break;\r\n          }\r\n    \r\n          case 'userStatusLastMonth': {\r\n            key = 'WithinAMonth';\r\n            break;\r\n          }\r\n          \r\n          case 'userStatusOffline': {\r\n            const date = user.status.was_online;\r\n            const now = Date.now() / 1000;\r\n            \r\n            if((now - date) < 60) {\r\n              key = 'Peer.Status.justNow';\r\n            } else if((now - date) < 3600) {\r\n              key = 'Peer.Status.minAgo';\r\n              const c = (now - date) / 60 | 0;\r\n              args = [c];\r\n            } else if(now - date < 86400) {\r\n              key = 'LastSeen.HoursAgo';\r\n              const c = (now - date) / 3600 | 0;\r\n              args = [c];\r\n            } else {\r\n              key = 'Peer.Status.LastSeenAt';\r\n              const d = new Date(date * 1000);\r\n              args = [('0' + d.getDate()).slice(-2) + '.' + ('0' + (d.getMonth() + 1)).slice(-2), \r\n                ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2)];\r\n            }\r\n            \r\n            break;\r\n          }\r\n    \r\n          case 'userStatusOnline': {\r\n            key = 'Online';\r\n            break;\r\n          }\r\n    \r\n          default: {\r\n            key = 'ALongTimeAgo';\r\n            break;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return i18n(key, args);\r\n  }\r\n\r\n  public isBot(id: number) {\r\n    return this.users[id] && this.users[id].pFlags.bot;\r\n  }\r\n\r\n  public isContact(id: number) {\r\n    return this.contactsList.has(id);\r\n  }\r\n  \r\n  public isRegularUser(id: number) {\r\n    const user = this.users[id];\r\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\r\n  }\r\n\r\n  public isNonContactUser(id: number) {\r\n    return this.isRegularUser(id) && !this.isContact(id) && id !== rootScope.myId;\r\n  }\r\n\r\n  public hasUser(id: number, allowMin?: boolean) {\r\n    var user = this.users[id];\r\n    return isObject(user) && (allowMin || !user.pFlags.min);\r\n  }\r\n\r\n  public canSendToUser(id: number) {\r\n    const user = this.getUser(id);\r\n    return !user.pFlags.deleted && user.username !== 'replies';\r\n  }\r\n\r\n  public getUserPhoto(id: number) {\r\n    const user = this.getUser(id);\r\n\r\n    return user && user.photo || {\r\n      _: 'userProfilePhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getUserString(id: number) {\r\n    const user = this.getUser(id);\r\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\r\n  }\r\n\r\n  public getUserInput(id: number): InputUser {\r\n    const user = this.getUser(id);\r\n    if(user.pFlags && user.pFlags.self) {\r\n      return {_: 'inputUserSelf'};\r\n    }\r\n\r\n    return {\r\n      _: 'inputUser',\r\n      user_id: id,\r\n      access_hash: user.access_hash\r\n    };\r\n  }\r\n\r\n  public updateUsersStatuses = () => {\r\n    const timestampNow = tsNow(true);\r\n    for(const i in this.users) {\r\n      const user = this.users[i];\r\n\r\n      if(user.status &&\r\n        user.status._ === 'userStatusOnline' &&\r\n        user.status.expires < timestampNow) {\r\n\r\n        user.status = {_: 'userStatusOffline', was_online: user.status.expires};\r\n        rootScope.broadcast('user_update', user.id);\r\n\r\n        this.setUserToStateIfNeeded(user);\r\n      }\r\n    }\r\n  };\r\n\r\n  public forceUserOnline(id: number, eventTimestamp?: number) {\r\n    if(this.isBot(id)) {\r\n      return;\r\n    }\r\n\r\n    const timestamp = tsNow(true);\r\n    const onlineTimeFor = 60;\r\n    if(eventTimestamp) {\r\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\r\n        return;\r\n      }\r\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\r\n      return;\r\n    }\r\n\r\n    const user = this.getUser(id);\r\n    if(user &&\r\n      user.status &&\r\n      user.status._ !== 'userStatusOnline' &&\r\n      user.status._ !== 'userStatusEmpty' &&\r\n      !user.pFlags.support &&\r\n      !user.pFlags.deleted) {\r\n\r\n      user.status = {\r\n        _: 'userStatusOnline',\r\n        expires: timestamp + onlineTimeFor\r\n      };\r\n      \r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.broadcast('user_update', id);\r\n\r\n      this.setUserToStateIfNeeded(user);\r\n    }\r\n  }\r\n\r\n  /* function importContact (phone, firstName, lastName) {\r\n      return MtpApiManager.invokeApi('contacts.importContacts', {\r\n        contacts: [{\r\n          _: 'inputPhoneContact',\r\n          client_id: '1',\r\n          phone: phone,\r\n          first_name: firstName,\r\n          last_name: lastName\r\n        }],\r\n        replace: false\r\n      }).then(function (importedContactsResult) {\r\n        saveApiUsers(importedContactsResult.users)\r\n\r\n        var foundUserID = false\r\n        angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n          onContactUpdated(foundUserID = importedContact.user_id, true)\r\n        })\r\n\r\n        return foundUserID || false\r\n      })\r\n  }\r\n\r\n  function importContacts (contacts) {\r\n    var inputContacts = [],\r\n      i\r\n    var j\r\n\r\n    for (i = 0; i < contacts.length; i++) {\r\n      for (j = 0; j < contacts[i].phones.length; j++) {\r\n        inputContacts.push({\r\n          _: 'inputPhoneContact',\r\n          client_id: (i << 16 | j).toString(10),\r\n          phone: contacts[i].phones[j],\r\n          first_name: contacts[i].first_name,\r\n          last_name: contacts[i].last_name\r\n        })\r\n      }\r\n    }\r\n\r\n    return MtpApiManager.invokeApi('contacts.importContacts', {\r\n      contacts: inputContacts,\r\n      replace: false\r\n    }).then(function (importedContactsResult) {\r\n      saveApiUsers(importedContactsResult.users)\r\n\r\n      var result = []\r\n      angular.forEach(importedContactsResult.imported, function (importedContact) {\r\n        onContactUpdated(importedContact.user_id, true)\r\n        result.push(importedContact.user_id)\r\n      })\r\n\r\n      return result\r\n    })\r\n  } */\r\n\r\n  /* public deleteContacts(userIds: number[]) {\r\n    var ids: any[] = [];\r\n    userIds.forEach((userId) => {\r\n      ids.push(this.getUserInput(userId));\r\n    })\r\n\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: ids\r\n    }).then(() => {\r\n      userIds.forEach((userId) => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  } */\r\n\r\n  public getTopPeers(): Promise<number[]> {\r\n    if(this.getTopPeersPromise) return this.getTopPeersPromise;\r\n\r\n    return this.getTopPeersPromise = appStateManager.getState().then((state) => {\r\n      if(state?.topPeers?.length) {\r\n        return state.topPeers;\r\n      }\r\n\r\n      return apiManager.invokeApi('contacts.getTopPeers', {\r\n        correspondents: true,\r\n        offset: 0,\r\n        limit: 15,\r\n        hash: 0,\r\n      }).then((result) => {\r\n        let peerIds: number[] = [];\r\n        if(result._ === 'contacts.topPeers') {\r\n          //console.log(result);\r\n          this.saveApiUsers(result.users);\r\n          appChatsManager.saveApiChats(result.chats);\r\n\r\n          if(result.categories.length) {\r\n            peerIds = result.categories[0].peers.map((topPeer) => {\r\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\r\n              appStateManager.requestPeer(peerId, 'topPeer');\r\n              return peerId;\r\n            });\r\n          }\r\n        }\r\n  \r\n        appStateManager.pushToState('topPeers', peerIds);\r\n  \r\n        return peerIds;\r\n      });\r\n    });\r\n  }\r\n\r\n  public getBlocked(offset = 0, limit = 0) {\r\n    return apiManager.invokeApi('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\r\n      this.saveApiUsers(contactsBlocked.users);\r\n      appChatsManager.saveApiChats(contactsBlocked.chats);\r\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\r\n\r\n      const peerIds = contactsBlocked.users.map(u => u.id).concat(contactsBlocked.chats.map(c => -c.id));\r\n\r\n      return {count, peerIds};\r\n    });\r\n  }\r\n\r\n  /* public searchContacts(query: string, limit = 20) {\r\n    return Promise.all([\r\n      this.getContacts(query),\r\n      apiManager.invokeApi('contacts.search', {\r\n        q: query,\r\n        limit\r\n      })\r\n    ]).then(results => {\r\n      const [myContacts, peers] = results;\r\n\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      // * contacts.search returns duplicates in my_results\r\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\r\n\r\n      const out = {\r\n        my_results: [...myResults].slice(0, limit),\r\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  } */\r\n  public searchContacts(query: string, limit = 20) {\r\n    return apiManager.invokeApi('contacts.search', {\r\n      q: query,\r\n      limit\r\n    }).then(peers => {\r\n      this.saveApiUsers(peers.users);\r\n      appChatsManager.saveApiChats(peers.chats);\r\n\r\n      const out = {\r\n        my_results: [...new Set(peers.my_results.map(p => appPeersManager.getPeerId(p)))], // ! contacts.search returns duplicates in my_results\r\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\r\n      };\r\n\r\n      return out;\r\n    });\r\n  }\r\n\r\n  private onContactUpdated(userId: number, isContact: boolean) {\r\n    const curIsContact = this.isContact(userId);\r\n    if(isContact !== curIsContact) {\r\n      if(isContact) {\r\n        this.pushContact(userId);\r\n      } else {\r\n        this.contactsList.delete(userId);\r\n      }\r\n\r\n      this.onContactsModified();\r\n\r\n      rootScope.broadcast('contacts_update', userId);\r\n    }\r\n  }\r\n\r\n  public updateUsername(username: string) {\r\n    return apiManager.invokeApi('account.updateUsername', {\r\n      username\r\n    }).then((user) => {\r\n      this.saveApiUser(user);\r\n    });\r\n  }\r\n\r\n  public setUserStatus(userId: number, offline: boolean) {\r\n    if(this.isBot(userId)) {\r\n      return;\r\n    }\r\n\r\n    const user = this.users[userId];\r\n    if(user) {\r\n      const status: any = offline ? {\r\n        _: 'userStatusOffline',\r\n        was_online: tsNow(true)\r\n      } : {\r\n        _: 'userStatusOnline',\r\n        expires: tsNow(true) + 500\r\n      };\r\n\r\n      user.status = status;\r\n      //user.sortStatus = this.getUserStatusForSort(user.status);\r\n      rootScope.broadcast('user_update', userId);\r\n    }\r\n  }\r\n\r\n  public addContact(userId: number, first_name: string, last_name: string, phone: string, showPhone?: true) {\r\n    return apiManager.invokeApi('contacts.addContact', {\r\n      id: this.getUserInput(userId),\r\n      first_name,\r\n      last_name,\r\n      phone,\r\n      add_phone_privacy_exception: showPhone\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      this.onContactUpdated(userId, true);\r\n    });\r\n  }\r\n\r\n  public deleteContacts(userIds: number[]) {\r\n    return apiManager.invokeApi('contacts.deleteContacts', {\r\n      id: userIds.map(userId => this.getUserInput(userId))\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\r\n\r\n      userIds.forEach(userId => {\r\n        this.onContactUpdated(userId, false);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst appUsersManager = new AppUsersManager();\r\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\r\nexport default appUsersManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { Chat, DialogPeer, Message, MessagesPeerDialogs, Update } from \"../../layer\";\r\nimport type { AppChatsManager } from \"../appManagers/appChatsManager\";\r\nimport type { AppMessagesManager, Dialog, MyMessage } from \"../appManagers/appMessagesManager\";\r\nimport type { AppPeersManager } from \"../appManagers/appPeersManager\";\r\nimport type { AppUsersManager } from \"../appManagers/appUsersManager\";\r\nimport type { AppDraftsManager } from \"../appManagers/appDraftsManager\";\r\nimport type { AppNotificationsManager } from \"../appManagers/appNotificationsManager\";\r\nimport type { ApiUpdatesManager } from \"../appManagers/apiUpdatesManager\";\r\nimport type { ServerTimeManager } from \"../mtproto/serverTimeManager\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport searchIndexManager from \"../searchIndexManager\";\r\nimport { forEachReverse, insertInDescendSortedArray } from \"../../helpers/array\";\r\nimport rootScope from \"../rootScope\";\r\nimport { safeReplaceObject } from \"../../helpers/object\";\r\nimport { AppStateManager } from \"../appManagers/appStateManager\";\r\nimport { SliceEnd } from \"../../helpers/slicedArray\";\r\n\r\nexport default class DialogsStorage {\r\n  private storage: AppStateManager['storages']['dialogs'];\r\n  \r\n  private dialogs: {[peerId: string]: Dialog} = {};\r\n  public byFolders: {[folderId: number]: Dialog[]} = {};\r\n\r\n  private allDialogsLoaded: {[folder_id: number]: boolean};\r\n  private dialogsOffsetDate: {[folder_id: number]: number};\r\n  private pinnedOrders: {[folder_id: number]: number[]};\r\n  private dialogsNum: number;\r\n\r\n  private dialogsIndex = searchIndexManager.createIndex();\r\n\r\n  private cachedResults: {\r\n    query: string,\r\n    count: number,\r\n    dialogs: Dialog[],\r\n    folderId: number\r\n  } = {\r\n    query: '',\r\n    count: 0,\r\n    dialogs: [],\r\n    folderId: 0\r\n  };\r\n\r\n  constructor(private appMessagesManager: AppMessagesManager, \r\n    private appChatsManager: AppChatsManager, \r\n    private appPeersManager: AppPeersManager, \r\n    private appUsersManager: AppUsersManager,\r\n    private appDraftsManager: AppDraftsManager,\r\n    private appNotificationsManager: AppNotificationsManager,\r\n    private appStateManager: AppStateManager,\r\n    private apiUpdatesManager: ApiUpdatesManager,\r\n    private serverTimeManager: ServerTimeManager\r\n  ) {\r\n    this.storage = this.appStateManager.storages.dialogs;\r\n\r\n    this.reset();\r\n\r\n    rootScope.on('language_change', (e) => {\r\n      const peerId = appUsersManager.getSelf().id;\r\n      const dialog = this.getDialogOnly(peerId);\r\n      if(dialog) {\r\n        const peerText = appPeersManager.getPeerSearchText(peerId);\r\n        searchIndexManager.indexObject(peerId, peerText, this.dialogsIndex);\r\n      }\r\n    });\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateFolderPeers: this.onUpdateFolderPeers,\r\n\r\n      updateDialogPinned: this.onUpdateDialogPinned,\r\n\r\n      updatePinnedDialogs: this.onUpdatePinnedDialogs,\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      this.pinnedOrders = state.pinnedOrders || {};\r\n      if(!this.pinnedOrders[0]) this.pinnedOrders[0] = [];\r\n      if(!this.pinnedOrders[1]) this.pinnedOrders[1] = [];\r\n      \r\n      const dialogs = appStateManager.storagesResults.dialogs;\r\n      if(dialogs.length) {\r\n        for(let i = 0, length = dialogs.length; i < length; ++i) {\r\n          const dialog = dialogs[i];\r\n          if(dialog) {\r\n            dialog.top_message = this.appMessagesManager.getServerMessageId(dialog.top_message); // * fix outgoing message to avoid copying dialog\r\n\r\n            if(dialog.topMessage) {\r\n              this.appMessagesManager.saveMessages([dialog.topMessage]);\r\n            }\r\n  \r\n            this.saveDialog(dialog);\r\n\r\n            // ! WARNING, убрать это когда нужно будет делать чтобы pending сообщения сохранялись\r\n            const message = this.appMessagesManager.getMessageByPeer(dialog.peerId, dialog.top_message);\r\n            if(message.deleted) {\r\n              this.appMessagesManager.reloadConversation(dialog.peerId);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.allDialogsLoaded = state.allDialogsLoaded || {};\r\n    });\r\n  }\r\n\r\n  public isDialogsLoaded(folderId: number) {\r\n    return !!this.allDialogsLoaded[folderId];\r\n  }\r\n\r\n  public setDialogsLoaded(folderId: number, loaded: boolean) {\r\n    this.allDialogsLoaded[folderId] = loaded;\r\n    this.appStateManager.pushToState('allDialogsLoaded', this.allDialogsLoaded);\r\n  }\r\n\r\n  public reset() {\r\n    this.allDialogsLoaded = {};\r\n    this.dialogsOffsetDate = {};\r\n    this.pinnedOrders = {\r\n      0: [],\r\n      1: []\r\n    };\r\n    this.dialogsNum = 0;\r\n  }\r\n\r\n  public getOffsetDate(folderId: number) {\r\n    return this.dialogsOffsetDate[folderId] || 0;\r\n  }\r\n\r\n  public getFolder(id: number) {\r\n    if(id <= 1) {\r\n      return this.byFolders[id] ?? (this.byFolders[id] = []);\r\n    }\r\n\r\n    const dialogs: {dialog: Dialog, index: number}[] = [];\r\n    const filter = this.appMessagesManager.filtersStorage.filters[id];\r\n\r\n    for(const peerId in this.dialogs) {\r\n      const dialog = this.dialogs[peerId];\r\n      if(this.appMessagesManager.filtersStorage.testDialogForFilter(dialog, filter)) {\r\n        let index: number;\r\n\r\n        const pinnedIndex = filter.pinned_peers.indexOf(dialog.peerId);\r\n        if(pinnedIndex !== -1) {\r\n          index = this.generateDialogIndex(this.generateDialogPinnedDateByIndex(filter.pinned_peers.length - 1 - pinnedIndex));\r\n        } else if(dialog.pFlags?.pinned) {\r\n          index = this.generateIndexForDialog(dialog, true);\r\n        } else {\r\n          index = dialog.index;\r\n        }\r\n\r\n        dialogs.push({dialog, index});\r\n      }\r\n    }\r\n\r\n    dialogs.sort((a, b) => b.index - a.index);\r\n    return dialogs.map(d => d.dialog);\r\n  }\r\n\r\n  public getDialog(peerId: number, folderId?: number): [Dialog, number] | [] {\r\n    const folders: Dialog[][] = [];\r\n\r\n    if(folderId === undefined) {\r\n      const dialogs = this.byFolders;\r\n      for(const folderId in dialogs) {\r\n        folders.push(dialogs[folderId]);\r\n      }\r\n    } else {\r\n      folders.push(this.getFolder(folderId));\r\n    }\r\n\r\n    for(let folder of folders) {\r\n      const index = folder.findIndex(dialog => dialog.peerId === peerId);\r\n      if(index !== -1) {\r\n        return [folder[index], index];\r\n      }\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  public getDialogOnly(peerId: number) {\r\n    return this.dialogs[peerId];\r\n  }\r\n\r\n  /*\r\n  var date = Date.now() / 1000 | 0;\r\n  var m = date * 0x10000;\r\n\r\n  var k = (date + 1) * 0x10000;\r\n  k - m;\r\n  65536\r\n  */\r\n  public generateDialogIndex(date?: number) {\r\n    if(date === undefined) {\r\n      date = tsNow(true) + this.serverTimeManager.serverTimeOffset;\r\n    }\r\n\r\n    return (date * 0x10000) + ((++this.dialogsNum) & 0xFFFF);\r\n  }\r\n\r\n  public generateIndexForDialog(dialog: Dialog, justReturn = false, message?: MyMessage) {\r\n    const channelId = this.appPeersManager.isChannel(dialog.peerId) ? -dialog.peerId : 0;\r\n    \r\n    let topDate = 0;\r\n    if(dialog.pFlags.pinned && !justReturn) {\r\n      topDate = this.generateDialogPinnedDate(dialog);\r\n    } else {\r\n      if(!message) {\r\n        message = this.appMessagesManager.getMessageByPeer(dialog.peerId, dialog.top_message);\r\n      }\r\n\r\n      topDate = (message as Message.message).date || topDate;\r\n      if(channelId) {\r\n        const channel = this.appChatsManager.getChat(channelId);\r\n        if(!topDate || (channel.date && channel.date > topDate)) {\r\n          topDate = channel.date;\r\n        }\r\n      }\r\n  \r\n      if(dialog.draft?._ === 'draftMessage' && dialog.draft.date > topDate) {\r\n        topDate = dialog.draft.date;\r\n      }\r\n    }\r\n\r\n    if(!topDate) {\r\n      topDate = Date.now() / 1000;\r\n    }\r\n\r\n    const index = this.generateDialogIndex(topDate);\r\n    if(justReturn) return index;\r\n    dialog.index = index;\r\n  }\r\n\r\n  public generateDialogPinnedDateByIndex(pinnedIndex: number) {\r\n    return 0x7fff0000 + (pinnedIndex & 0xFFFF); // 0xFFFF - потому что в папках может быть бесконечное число пиннедов\r\n  }\r\n\r\n  public generateDialogPinnedDate(dialog: Dialog) {\r\n    const order = this.pinnedOrders[dialog.folder_id];\r\n\r\n    const foundIndex = order.indexOf(dialog.peerId);\r\n    let pinnedIndex = foundIndex;\r\n    if(foundIndex === -1) {\r\n      pinnedIndex = order.push(dialog.peerId) - 1;\r\n      this.appStateManager.pushToState('pinnedOrders', this.pinnedOrders);\r\n    }\r\n\r\n    return this.generateDialogPinnedDateByIndex(pinnedIndex);\r\n  }\r\n\r\n  public generateDialog(peerId: number) {\r\n    const dialog: Dialog = {\r\n      _: 'dialog',\r\n      pFlags: {},\r\n      peer: this.appPeersManager.getOutputPeer(peerId),\r\n      top_message: 0,\r\n      read_inbox_max_id: 0,\r\n      read_outbox_max_id: 0,\r\n      unread_count: 0,\r\n      unread_mentions_count: 0,\r\n      notify_settings: {\r\n        _: 'peerNotifySettings',\r\n      },\r\n    };\r\n\r\n    return dialog;\r\n  }\r\n\r\n  public setDialogToState(dialog: Dialog) {\r\n    const historyStorage = this.appMessagesManager.getHistoryStorage(dialog.peerId);\r\n    const history = [].concat(historyStorage.history.slice);\r\n    let incomingMessage: any;\r\n    for(let i = 0, length = history.length; i < length; ++i) {\r\n      const mid = history[i];\r\n      const message = this.appMessagesManager.getMessageByPeer(dialog.peerId, mid);\r\n      if(!message.pFlags.is_outgoing) {\r\n        incomingMessage = message;\r\n  \r\n        if(message.fromId !== dialog.peerId) {\r\n          this.appStateManager.requestPeer(message.fromId, 'topMessage_' + dialog.peerId, 1);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    dialog.topMessage = incomingMessage;\r\n\r\n    if(dialog.peerId < 0 && dialog.pts) {\r\n      const newPts = this.apiUpdatesManager.channelStates[-dialog.peerId].pts;\r\n      dialog.pts = newPts;\r\n    }\r\n\r\n    this.storage.set({\r\n      [dialog.peerId]: dialog\r\n    });\r\n\r\n    this.appStateManager.requestPeer(dialog.peerId, 'dialog_' + dialog.peerId, 1);\r\n  }\r\n\r\n  public pushDialog(dialog: Dialog, offsetDate?: number) {\r\n    const dialogs = this.getFolder(dialog.folder_id);\r\n    const pos = dialogs.findIndex(d => d.peerId === dialog.peerId);\r\n    if(pos !== -1) {\r\n      dialogs.splice(pos, 1);\r\n    }\r\n\r\n    //if(!this.dialogs[dialog.peerId]) {\r\n      this.dialogs[dialog.peerId] = dialog;\r\n\r\n      this.setDialogToState(dialog);\r\n    //}\r\n\r\n    if(offsetDate &&\r\n      !dialog.pFlags.pinned &&\r\n      (!this.dialogsOffsetDate[dialog.folder_id] || offsetDate < this.dialogsOffsetDate[dialog.folder_id])) {\r\n      if(pos !== -1) {\r\n        // So the dialog jumped to the last position\r\n        return false;\r\n      }\r\n      this.dialogsOffsetDate[dialog.folder_id] = offsetDate;\r\n    }\r\n\r\n    insertInDescendSortedArray(dialogs, dialog, 'index', pos);\r\n  }\r\n\r\n  public dropDialog(peerId: number): [Dialog, number] | [] {\r\n    const foundDialog = this.getDialog(peerId);\r\n    if(foundDialog[0]) {\r\n      this.byFolders[foundDialog[0].folder_id].splice(foundDialog[1], 1);\r\n      delete this.dialogs[peerId];\r\n      searchIndexManager.indexObject(peerId, '', this.dialogsIndex);\r\n\r\n      // clear from state\r\n      this.appStateManager.keepPeerSingle(0, 'topMessage_' + peerId);\r\n      this.appStateManager.keepPeerSingle(0, 'dialog_' + peerId);\r\n      this.storage.delete(peerId);\r\n    }\r\n\r\n    return foundDialog;\r\n  }\r\n\r\n  public applyDialogs(dialogsResult: MessagesPeerDialogs.messagesPeerDialogs) {\r\n    // * В эту функцию попадут только те диалоги, в которых есть read_inbox_max_id и read_outbox_max_id, в отличие от тех, что будут в getTopMessages\r\n\r\n    // ! fix 'dialogFolder', maybe there is better way to do it, this only can happen by 'messages.getPinnedDialogs' by folder_id: 0\r\n    forEachReverse(dialogsResult.dialogs, (dialog, idx) => {\r\n      if(dialog._ === 'dialogFolder') {\r\n        dialogsResult.dialogs.splice(idx, 1);\r\n      }\r\n    });\r\n\r\n    this.appUsersManager.saveApiUsers(dialogsResult.users);\r\n    this.appChatsManager.saveApiChats(dialogsResult.chats);\r\n    this.appMessagesManager.saveMessages(dialogsResult.messages);\r\n\r\n    this.appMessagesManager.log('applyConversation', dialogsResult);\r\n\r\n    const updatedDialogs: {[peerId: number]: Dialog} = {};\r\n    (dialogsResult.dialogs as Dialog[]).forEach((dialog) => {\r\n      const peerId = this.appPeersManager.getPeerId(dialog.peer);\r\n      let topMessage = dialog.top_message;\r\n\r\n      const topPendingMessage = this.appMessagesManager.pendingTopMsgs[peerId];\r\n      if(topPendingMessage) {\r\n        if(!topMessage \r\n          || (this.appMessagesManager.getMessageByPeer(peerId, topPendingMessage) as MyMessage).date > (this.appMessagesManager.getMessageByPeer(peerId, topMessage) as MyMessage).date) {\r\n          dialog.top_message = topMessage = topPendingMessage;\r\n          this.appMessagesManager.getHistoryStorage(peerId).maxId = topPendingMessage;\r\n        }\r\n      }\r\n\r\n      /* const d = Object.assign({}, dialog);\r\n      if(peerId === 239602833) {\r\n        this.log.error('applyConversation lun', dialog, d);\r\n      } */\r\n\r\n      if(topMessage || (dialog.draft && dialog.draft._ === 'draftMessage')) {\r\n        this.saveDialog(dialog);\r\n        updatedDialogs[peerId] = dialog;\r\n      } else {\r\n        const dropped = this.dropDialog(peerId);\r\n        if(dropped.length) {\r\n          rootScope.broadcast('dialog_drop', {peerId, dialog: dropped[0]});\r\n        }\r\n      }\r\n\r\n      const updates = this.appMessagesManager.newUpdatesAfterReloadToHandle[peerId];\r\n      if(updates !== undefined) {\r\n        for(const update of updates) {\r\n          this.apiUpdatesManager.saveUpdate(update);\r\n        }\r\n\r\n        delete this.appMessagesManager.newUpdatesAfterReloadToHandle[peerId];\r\n      }\r\n    });\r\n\r\n    if(Object.keys(updatedDialogs).length) {\r\n      rootScope.broadcast('dialogs_multiupdate', updatedDialogs);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Won't save migrated from peer, forbidden peers, left and kicked\r\n   */\r\n  public saveDialog(dialog: Dialog, folderId = 0) {\r\n    const peerId = this.appPeersManager.getPeerId(dialog.peer);\r\n    if(!peerId) {\r\n      console.error('saveConversation no peerId???', dialog, folderId);\r\n      return false;\r\n    }\r\n\r\n    if(dialog._ !== 'dialog'/*  || peerId === 239602833 */) {\r\n      console.error('saveConversation not regular dialog', dialog, Object.assign({}, dialog));\r\n    }\r\n    \r\n    const channelId = this.appPeersManager.isChannel(peerId) ? -peerId : 0;\r\n\r\n    if(peerId < 0) {\r\n      const chat: Chat = this.appChatsManager.getChat(-peerId);\r\n      if(chat._ === 'channelForbidden' || chat._ === 'chatForbidden' || (chat as Chat.chat).pFlags.left || (chat as Chat.chat).pFlags.kicked) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const peerText = this.appPeersManager.getPeerSearchText(peerId);\r\n    searchIndexManager.indexObject(peerId, peerText, this.dialogsIndex);\r\n\r\n    let mid: number, message;\r\n    if(dialog.top_message) {\r\n      mid = this.appMessagesManager.generateMessageId(dialog.top_message);//dialog.top_message;\r\n      message = this.appMessagesManager.getMessageByPeer(peerId, mid);\r\n    } else {\r\n      mid = this.appMessagesManager.generateTempMessageId(peerId);\r\n      message = {\r\n        _: 'message',\r\n        id: mid,\r\n        mid,\r\n        from_id: this.appPeersManager.getOutputPeer(this.appUsersManager.getSelf().id),\r\n        peer_id: this.appPeersManager.getOutputPeer(peerId),\r\n        deleted: true,\r\n        pFlags: {out: true},\r\n        date: 0,\r\n        message: ''\r\n      };\r\n      this.appMessagesManager.saveMessages([message], {isOutgoing: true});\r\n    }\r\n\r\n    if(!message?.pFlags) {\r\n      this.appMessagesManager.log.error('saveConversation no message:', dialog, message);\r\n    }\r\n\r\n    if(!channelId && peerId < 0) {\r\n      const chat = this.appChatsManager.getChat(-peerId);\r\n      if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n        const migratedToPeer = this.appPeersManager.getPeerId(chat.migrated_to);\r\n        this.appMessagesManager.migratedFromTo[peerId] = migratedToPeer;\r\n        this.appMessagesManager.migratedToFrom[migratedToPeer] = peerId;\r\n        return;\r\n      }\r\n    }\r\n\r\n    const wasDialogBefore = this.getDialogOnly(peerId);\r\n\r\n    dialog.top_message = mid;\r\n    dialog.read_inbox_max_id = this.appMessagesManager.generateMessageId(wasDialogBefore && !dialog.read_inbox_max_id ? wasDialogBefore.read_inbox_max_id : dialog.read_inbox_max_id);\r\n    dialog.read_outbox_max_id = this.appMessagesManager.generateMessageId(wasDialogBefore && !dialog.read_outbox_max_id ? wasDialogBefore.read_outbox_max_id : dialog.read_outbox_max_id);\r\n\r\n    if(!dialog.hasOwnProperty('folder_id')) {\r\n      if(dialog._ === 'dialog') {\r\n        // ! СЛОЖНО ! СМОТРИ В getTopMessages\r\n        dialog.folder_id = wasDialogBefore ? wasDialogBefore.folder_id : folderId;\r\n      }/*  else if(dialog._ === 'dialogFolder') {\r\n        dialog.folder_id = dialog.folder.id;\r\n      } */\r\n    }\r\n\r\n    dialog.draft = this.appDraftsManager.saveDraft(peerId, 0, dialog.draft);\r\n    dialog.peerId = peerId;\r\n\r\n    // Because we saved message without dialog present\r\n    if(message.pFlags.is_outgoing) {\r\n      if(mid > dialog[message.pFlags.out ? 'read_outbox_max_id' : 'read_inbox_max_id']) message.pFlags.unread = true;\r\n      else delete message.pFlags.unread;\r\n    }\r\n\r\n    const historyStorage = this.appMessagesManager.getHistoryStorage(peerId);\r\n    const slice = historyStorage.history.slice;\r\n    /* if(historyStorage === undefined) { // warning\r\n      historyStorage.history.push(mid);\r\n      if(this.mergeReplyKeyboard(historyStorage, message)) {\r\n        rootScope.broadcast('history_reply_markup', {peerId});\r\n      }\r\n    } else  */if(!slice.length) {\r\n      historyStorage.history.unshift(mid);\r\n    } else if(!slice.isEnd(SliceEnd.Bottom)) { // * this will probably never happen, however, if it does, then it will fix slice with top_message\r\n      const slice = historyStorage.history.insertSlice([mid]);\r\n      slice.setEnd(SliceEnd.Bottom);\r\n    }\r\n\r\n    historyStorage.maxId = mid;\r\n    historyStorage.readMaxId = dialog.read_inbox_max_id;\r\n    historyStorage.readOutboxMaxId = dialog.read_outbox_max_id;\r\n\r\n    this.appNotificationsManager.savePeerSettings(peerId, dialog.notify_settings);\r\n\r\n    if(channelId && dialog.pts) {\r\n      this.apiUpdatesManager.addChannelState(channelId, dialog.pts);\r\n    }\r\n\r\n    this.generateIndexForDialog(dialog);\r\n\r\n    if(wasDialogBefore) {\r\n      safeReplaceObject(wasDialogBefore, dialog);\r\n    }\r\n\r\n    this.pushDialog(dialog, message.date);\r\n  }\r\n\r\n  public getDialogs(query = '', offsetIndex?: number, limit = 20, folderId = 0) {\r\n    const realFolderId = folderId > 1 ? 0 : folderId;\r\n    let curDialogStorage = this.getFolder(folderId);\r\n\r\n    if(query) {\r\n      if(!limit || this.cachedResults.query !== query || this.cachedResults.folderId !== folderId) {\r\n        this.cachedResults.query = query;\r\n        this.cachedResults.folderId = folderId;\r\n\r\n        const results = searchIndexManager.search(query, this.dialogsIndex);\r\n\r\n        this.cachedResults.dialogs = [];\r\n\r\n        for(const peerId in this.dialogs) {\r\n          const dialog = this.dialogs[peerId];\r\n          if(results[dialog.peerId] && dialog.folder_id === folderId) {\r\n            this.cachedResults.dialogs.push(dialog);\r\n          }\r\n        }\r\n\r\n        this.cachedResults.dialogs.sort((d1, d2) => d2.index - d1.index);\r\n\r\n        this.cachedResults.count = this.cachedResults.dialogs.length;\r\n      }\r\n\r\n      curDialogStorage = this.cachedResults.dialogs;\r\n    } else {\r\n      this.cachedResults.query = '';\r\n    }\r\n\r\n    let offset = 0;\r\n    if(offsetIndex > 0) {\r\n      for(; offset < curDialogStorage.length; offset++) {\r\n        if(offsetIndex > curDialogStorage[offset].index) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const loadedAll = this.isDialogsLoaded(realFolderId);\r\n    if(query || loadedAll || curDialogStorage.length >= offset + limit) {\r\n      return Promise.resolve({\r\n        dialogs: curDialogStorage.slice(offset, offset + limit),\r\n        count: loadedAll ? curDialogStorage.length : null,\r\n        isEnd: loadedAll && (offset + limit) >= curDialogStorage.length\r\n      });\r\n    }\r\n\r\n    return this.appMessagesManager.getTopMessages(limit, realFolderId).then(messagesDialogs => {\r\n      //const curDialogStorage = this[folderId];\r\n\r\n      offset = 0;\r\n      if(offsetIndex > 0) {\r\n        for(; offset < curDialogStorage.length; offset++) {\r\n          if(offsetIndex > curDialogStorage[offset].index) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      //this.log.warn(offset, offset + limit, curDialogStorage.dialogs.length, this.dialogs.length);\r\n\r\n      return {\r\n        dialogs: curDialogStorage.slice(offset, offset + limit),\r\n        count: messagesDialogs._ === 'messages.dialogs' ? messagesDialogs.dialogs.length : messagesDialogs.count,\r\n        isEnd: this.isDialogsLoaded(realFolderId) && (offset + limit) >= curDialogStorage.length\r\n      };\r\n    });\r\n  }\r\n\r\n  // only 0 and 1 folders\r\n  private onUpdateFolderPeers = (update: Update.updateFolderPeers) => {\r\n    //this.log('updateFolderPeers', update);\r\n    const peers = update.folder_peers;\r\n\r\n    peers.forEach((folderPeer) => {\r\n      const {folder_id, peer} = folderPeer;\r\n\r\n      const peerId = this.appPeersManager.getPeerId(peer);\r\n      const dialog = this.dropDialog(peerId)[0];\r\n      if(dialog) {\r\n        if(dialog.pFlags?.pinned) {\r\n          delete dialog.pFlags.pinned;\r\n          this.pinnedOrders[folder_id].findAndSplice(p => p === dialog.peerId);\r\n          this.appStateManager.pushToState('pinnedOrders', this.pinnedOrders);\r\n        }\r\n\r\n        dialog.folder_id = folder_id;\r\n        this.generateIndexForDialog(dialog);\r\n        this.pushDialog(dialog); // need for simultaneously updatePinnedDialogs\r\n      }\r\n\r\n      this.appMessagesManager.scheduleHandleNewDialogs(peerId, dialog);\r\n    });\r\n  };\r\n\r\n  private onUpdateDialogPinned = (update: Update.updateDialogPinned) => {\r\n    const folderId = update.folder_id ?? 0;\r\n    //this.log('updateDialogPinned', update);\r\n    const peerId = this.appPeersManager.getPeerId((update.peer as DialogPeer.dialogPeer).peer);\r\n    const dialog = this.getDialogOnly(peerId);\r\n\r\n    // этот код внизу никогда не сработает, в папках за пиннед отвечает updateDialogFilter\r\n    /* if(update.folder_id > 1) {\r\n      const filter = this.filtersStorage.filters[update.folder_id];\r\n      if(update.pFlags.pinned) {\r\n        filter.pinned_peers.unshift(peerId);\r\n      } else {\r\n        filter.pinned_peers.findAndSplice(p => p === peerId);\r\n      }\r\n    } */\r\n\r\n    if(dialog) {\r\n      if(!update.pFlags.pinned) {\r\n        delete dialog.pFlags.pinned;\r\n        this.pinnedOrders[folderId].findAndSplice(p => p === dialog.peerId);\r\n        this.appStateManager.pushToState('pinnedOrders', this.pinnedOrders);\r\n      } else { // means set\r\n        dialog.pFlags.pinned = true;\r\n      }\r\n\r\n      this.generateIndexForDialog(dialog);\r\n    } \r\n\r\n    this.appMessagesManager.scheduleHandleNewDialogs(peerId, dialog);\r\n  };\r\n\r\n  private onUpdatePinnedDialogs = (update: Update.updatePinnedDialogs) => {\r\n    const folderId = update.folder_id ?? 0;\r\n        \r\n    const handleOrder = (order: number[]) => {\r\n      this.pinnedOrders[folderId].length = 0;\r\n      order.reverse(); // index must be higher\r\n      order.forEach((peerId) => {\r\n        newPinned[peerId] = true;\r\n  \r\n        const dialog = this.getDialogOnly(peerId);\r\n        this.appMessagesManager.scheduleHandleNewDialogs(peerId, dialog);\r\n        if(!dialog) {\r\n          return;\r\n        }\r\n  \r\n        dialog.pFlags.pinned = true;\r\n        this.generateIndexForDialog(dialog);\r\n      });\r\n      \r\n      this.getFolder(folderId).forEach(dialog => {\r\n        const peerId = dialog.peerId;\r\n        if(dialog.pFlags.pinned && !newPinned[peerId]) {\r\n          this.appMessagesManager.scheduleHandleNewDialogs(peerId);\r\n        }\r\n      });\r\n    };\r\n\r\n    //this.log('updatePinnedDialogs', update);\r\n    const newPinned: {[peerId: number]: true} = {};\r\n    if(!update.order) {\r\n      apiManager.invokeApi('messages.getPinnedDialogs', {\r\n        folder_id: folderId\r\n      }).then((dialogsResult) => {\r\n        // * for test reordering and rendering\r\n        // dialogsResult.dialogs.reverse();\r\n\r\n        this.applyDialogs(dialogsResult);\r\n\r\n        handleOrder(dialogsResult.dialogs.map(d => d.peerId));\r\n\r\n        /* dialogsResult.dialogs.forEach((dialog) => {\r\n          newPinned[dialog.peerId] = true;\r\n        });\r\n\r\n        this.dialogsStorage.getFolder(folderId).forEach((dialog) => {\r\n          const peerId = dialog.peerId;\r\n          if(dialog.pFlags.pinned && !newPinned[peerId]) {\r\n            this.newDialogsToHandle[peerId] = {reload: true};\r\n            this.scheduleHandleNewDialogs();\r\n          }\r\n        }); */\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    //this.log('before order:', this.dialogsStorage[0].map(d => d.peerId));\r\n\r\n    handleOrder(update.order.map(peer => this.appPeersManager.getPeerId((peer as DialogPeer.dialogPeer).peer)));\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { copy } from \"../../helpers/object\";\r\nimport type { DialogFilter, Update } from \"../../layer\";\r\nimport type { Modify } from \"../../types\";\r\nimport type { AppPeersManager } from \"../appManagers/appPeersManager\";\r\nimport type { AppUsersManager } from \"../appManagers/appUsersManager\";\r\n//import type { ApiManagerProxy } from \"../mtproto/mtprotoworker\";\r\nimport type _rootScope from \"../rootScope\";\r\nimport type {AppMessagesManager, Dialog} from '../appManagers/appMessagesManager';\r\nimport type {AppNotificationsManager} from \"../appManagers/appNotificationsManager\";\r\nimport type { ApiUpdatesManager } from \"../appManagers/apiUpdatesManager\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport { forEachReverse } from \"../../helpers/array\";\r\nimport { AppStateManager } from \"../appManagers/appStateManager\";\r\n\r\nexport type MyDialogFilter = Modify<DialogFilter, {\r\n  pinned_peers: number[],\r\n  include_peers: number[],\r\n  exclude_peers: number[],\r\n  orderIndex?: number\r\n}>;\r\n\r\n// ! because 0 index is 'All Chats'\r\nconst START_ORDER_INDEX = 1;\r\n\r\nexport default class FiltersStorage {\r\n  public filters: {[filterId: string]: MyDialogFilter} = {};\r\n  private orderIndex = START_ORDER_INDEX;\r\n\r\n  constructor(private appMessagesManager: AppMessagesManager,\r\n    private appPeersManager: AppPeersManager, \r\n    private appUsersManager: AppUsersManager, \r\n    private appNotificationsManager: AppNotificationsManager, \r\n    private appStateManager: AppStateManager,\r\n    private apiUpdatesManager: ApiUpdatesManager, \r\n    /* private apiManager: ApiManagerProxy, */ \r\n    private rootScope: typeof _rootScope) {\r\n\r\n    this.appStateManager.getState().then((state) => {\r\n      this.filters = state.filters;\r\n    });\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateDialogFilter: this.onUpdateDialogFilter,\r\n\r\n      updateDialogFilters: (update) => {\r\n        //console.warn('updateDialogFilters', update);\r\n\r\n        const oldFilters = copy(this.filters);\r\n\r\n        this.getDialogFilters(true).then(filters => {\r\n          for(const _filterId in oldFilters) {\r\n            const filterId = +_filterId;\r\n            if(!filters.find(filter => filter.id === filterId)) { // * deleted\r\n              this.onUpdateDialogFilter({_: 'updateDialogFilter', id: filterId});\r\n            }\r\n          }\r\n\r\n          this.onUpdateDialogFilterOrder({_: 'updateDialogFilterOrder', order: filters.map(filter => filter.id)});\r\n        });\r\n      },\r\n\r\n      updateDialogFilterOrder: this.onUpdateDialogFilterOrder\r\n    });\r\n  }\r\n\r\n  private onUpdateDialogFilter = (update: Update.updateDialogFilter) => {\r\n    if(update.filter) {\r\n      this.saveDialogFilter(update.filter as any);\r\n    } else if(this.filters[update.id]) { // Папка удалена\r\n      //this.getDialogFilters(true);\r\n      this.rootScope.broadcast('filter_delete', this.filters[update.id]);\r\n      delete this.filters[update.id];\r\n    }\r\n\r\n    this.appStateManager.pushToState('filters', this.filters);\r\n  };\r\n\r\n  private onUpdateDialogFilterOrder = (update: Update.updateDialogFilterOrder) => {\r\n    //console.log('updateDialogFilterOrder', update);\r\n\r\n    this.orderIndex = START_ORDER_INDEX;\r\n    update.order.forEach((filterId, idx) => {\r\n      const filter = this.filters[filterId];\r\n      delete filter.orderIndex;\r\n      this.setOrderIndex(filter);\r\n    });\r\n\r\n    this.rootScope.broadcast('filter_order', update.order);\r\n\r\n    this.appStateManager.pushToState('filters', this.filters);\r\n  };\r\n\r\n  public testDialogForFilter(dialog: Dialog, filter: MyDialogFilter) {\r\n    // exclude_peers\r\n    for(const peerId of filter.exclude_peers) {\r\n      if(peerId === dialog.peerId) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // include_peers\r\n    for(const peerId of filter.include_peers) {\r\n      if(peerId === dialog.peerId) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    const pFlags = filter.pFlags;\r\n\r\n    // exclude_archived\r\n    if(pFlags.exclude_archived && dialog.folder_id === 1) {\r\n      return false;\r\n    }\r\n\r\n    // exclude_read\r\n    if(pFlags.exclude_read && !dialog.unread_count) {\r\n      return false;\r\n    }\r\n\r\n    // exclude_muted\r\n    if(pFlags.exclude_muted) {\r\n      const isMuted = this.appNotificationsManager.isPeerLocalMuted(dialog.peerId);\r\n      if(isMuted) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const peerId = dialog.peerId;\r\n    if(peerId < 0) {\r\n      // broadcasts\r\n      if(pFlags.broadcasts && this.appPeersManager.isBroadcast(peerId)) {\r\n        return true;\r\n      }\r\n\r\n      // groups\r\n      if(pFlags.groups && this.appPeersManager.isAnyGroup(peerId)) {\r\n        return true;\r\n      }\r\n    } else {\r\n      // bots\r\n      if(this.appPeersManager.isBot(peerId)) {\r\n        return !!pFlags.bots;\r\n      }\r\n      \r\n      // non_contacts\r\n      if(pFlags.non_contacts && !this.appUsersManager.isContact(peerId)) {\r\n        return true;\r\n      }\r\n\r\n      // contacts\r\n      if(pFlags.contacts && this.appUsersManager.isContact(peerId)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public toggleDialogPin(peerId: number, filterId: number) {\r\n    const filter = this.filters[filterId];\r\n\r\n    const wasPinned = filter.pinned_peers.findAndSplice(p => p === peerId);\r\n    if(!wasPinned) {\r\n      filter.pinned_peers.unshift(peerId);\r\n    }\r\n    \r\n    return this.updateDialogFilter(filter);\r\n  }\r\n\r\n  public createDialogFilter(filter: MyDialogFilter) {\r\n    let maxId = Math.max(1, ...Object.keys(this.filters).map(i => +i));\r\n    filter = copy(filter);\r\n    filter.id = maxId + 1;\r\n    return this.updateDialogFilter(filter);\r\n  }\r\n\r\n  public updateDialogFilter(filter: MyDialogFilter, remove = false) {\r\n    const flags = remove ? 0 : 1;\r\n\r\n    return apiManager.invokeApi('messages.updateDialogFilter', {\r\n      flags,\r\n      id: filter.id,\r\n      filter: remove ? undefined : this.getOutputDialogFilter(filter)\r\n    }).then((bool: boolean) => { // возможно нужна проверка и откат, если результат не ТРУ\r\n      //console.log('updateDialogFilter bool:', bool);\r\n\r\n      if(bool) {\r\n        /* if(!this.filters[filter.id]) {\r\n          this.saveDialogFilter(filter);\r\n        }\r\n\r\n        rootScope.$broadcast('filter_update', filter); */\r\n\r\n        this.onUpdateDialogFilter({\r\n          _: 'updateDialogFilter',\r\n          id: filter.id,\r\n          filter: remove ? undefined : filter as any\r\n        });\r\n      }\r\n\r\n      return bool;\r\n    });\r\n  }\r\n\r\n  public getOutputDialogFilter(filter: MyDialogFilter) {\r\n    const c: MyDialogFilter = copy(filter);\r\n    ['pinned_peers', 'exclude_peers', 'include_peers'].forEach(key => {\r\n      // @ts-ignore\r\n      c[key] = c[key].map((peerId: number) => this.appPeersManager.getInputPeerById(peerId));\r\n    });\r\n\r\n    forEachReverse(c.include_peers, (peerId, idx) => {\r\n      if(c.pinned_peers.includes(peerId)) {\r\n        c.include_peers.splice(idx, 1);\r\n      }\r\n    });\r\n\r\n    return c as any as DialogFilter;\r\n  }\r\n\r\n  public async getDialogFilters(overwrite = false): Promise<MyDialogFilter[]> {\r\n    const keys = Object.keys(this.filters);\r\n    if(keys.length && !overwrite) {\r\n      return keys.map(filterId => this.filters[filterId]).sort((a, b) => a.orderIndex - b.orderIndex);\r\n    }\r\n\r\n    const filters: MyDialogFilter[] = await apiManager.invokeApi('messages.getDialogFilters') as any;\r\n    for(const filter of filters) {\r\n      this.saveDialogFilter(filter, overwrite);\r\n    }\r\n\r\n    //console.log(this.filters);\r\n    return filters;\r\n  }\r\n\r\n  public saveDialogFilter(filter: MyDialogFilter, update = true) {\r\n    ['pinned_peers', 'exclude_peers', 'include_peers'].forEach(key => {\r\n      // @ts-ignore\r\n      filter[key] = filter[key].map((peer: any) => this.appPeersManager.getPeerId(peer));\r\n    });\r\n\r\n    forEachReverse(filter.include_peers, (peerId, idx) => {\r\n      if(filter.pinned_peers.includes(peerId)) {\r\n        filter.include_peers.splice(idx, 1);\r\n      }\r\n    });\r\n    \r\n    filter.include_peers = filter.pinned_peers.concat(filter.include_peers);\r\n\r\n    if(this.filters[filter.id]) {\r\n      Object.assign(this.filters[filter.id], filter);\r\n    } else {\r\n      this.filters[filter.id] = filter;\r\n    }\r\n\r\n    this.setOrderIndex(filter);\r\n\r\n    if(update) {\r\n      this.rootScope.broadcast('filter_update', filter);\r\n    }\r\n  }\r\n\r\n  public setOrderIndex(filter: MyDialogFilter) {\r\n    if(filter.hasOwnProperty('orderIndex')) {\r\n      if(filter.orderIndex >= this.orderIndex) {\r\n        this.orderIndex = filter.orderIndex + 1;\r\n      }\r\n    } else {\r\n      filter.orderIndex = this.orderIndex++;\r\n    }\r\n\r\n    this.appStateManager.pushToState('filters', this.filters);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { LazyLoadQueueBase } from \"../../components/lazyLoadQueue\";\r\nimport ProgressivePreloader from \"../../components/preloader\";\r\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { createPosterForVideo } from \"../../helpers/files\";\r\nimport { copy, getObjectKeysAndSort } from \"../../helpers/object\";\r\nimport { randomLong } from \"../../helpers/random\";\r\nimport { splitStringByLength, limitSymbols, escapeRegExp } from \"../../helpers/string\";\r\nimport { Chat, ChatFull, Dialog as MTDialog, DialogPeer, DocumentAttribute, InputMedia, InputMessage, InputPeerNotifySettings, InputSingleMedia, Message, MessageAction, MessageEntity, MessageFwdHeader, MessageMedia, MessageReplies, MessageReplyHeader, MessagesDialogs, MessagesFilter, MessagesMessages, MethodDeclMap, NotifyPeer, PeerNotifySettings, PhotoSize, SendMessageAction, Update, Photo } from \"../../layer\";\r\nimport { InvokeApiOptions } from \"../../types\";\r\nimport I18n, { i18n, join, langPack, LangPackKey, _i18n } from \"../langPack\";\r\nimport { logger, LogTypes } from \"../logger\";\r\nimport type { ApiFileManager } from '../mtproto/apiFileManager';\r\n//import apiManager from '../mtproto/apiManager';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport referenceDatabase, { ReferenceContext } from \"../mtproto/referenceDatabase\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport DialogsStorage from \"../storages/dialogs\";\r\nimport FiltersStorage from \"../storages/filters\";\r\n//import { telegramMeWebService } from \"../mtproto/mtproto\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appDocsManager, { MyDocument } from \"./appDocsManager\";\r\nimport appDownloadManager from \"./appDownloadManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appPhotosManager, { MyPhoto } from \"./appPhotosManager\";\r\nimport appPollsManager from \"./appPollsManager\";\r\nimport appStateManager from \"./appStateManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport appWebPagesManager from \"./appWebPagesManager\";\r\nimport appDraftsManager from \"./appDraftsManager\";\r\nimport { getFileNameByLocation } from \"../../helpers/fileName\";\r\nimport appProfileManager from \"./appProfileManager\";\r\nimport DEBUG, { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport SlicedArray, { Slice, SliceEnd } from \"../../helpers/slicedArray\";\r\nimport appNotificationsManager, { NotifyOptions } from \"./appNotificationsManager\";\r\nimport PeerTitle from \"../../components/peerTitle\";\r\nimport { forEachReverse } from \"../../helpers/array\";\r\nimport htmlToDocumentFragment from \"../../helpers/dom/htmlToDocumentFragment\";\r\nimport htmlToSpan from \"../../helpers/dom/htmlToSpan\";\r\nimport { REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\r\n\r\n//console.trace('include');\r\n// TODO: если удалить сообщение в непрогруженном диалоге, то при обновлении, из-за стейта, последнего сообщения в чатлисте не будет\r\n// TODO: если удалить диалог находясь в папке, то он не удалится из папки и будет виден в настройках\r\n\r\nconst APITIMEOUT = 0;\r\n\r\nexport type HistoryStorage = {\r\n  count: number | null,\r\n  history: SlicedArray,\r\n\r\n  maxId?: number,\r\n  readPromise?: Promise<void>,\r\n  readMaxId?: number,\r\n  readOutboxMaxId?: number,\r\n  triedToReadMaxId?: number,\r\n\r\n  maxOutId?: number,\r\n  reply_markup?: any\r\n};\r\n\r\nexport type HistoryResult = {\r\n  count: number,\r\n  history: Slice,\r\n  offsetIdOffset?: number,\r\n};\r\n\r\nexport type Dialog = MTDialog.dialog;\r\n\r\nexport type MyMessage = Message.message | Message.messageService;\r\nexport type MyInputMessagesFilter = 'inputMessagesFilterEmpty' \r\n  | 'inputMessagesFilterPhotos' \r\n  | 'inputMessagesFilterPhotoVideo' \r\n  | 'inputMessagesFilterVideo' \r\n  | 'inputMessagesFilterDocument' \r\n  | 'inputMessagesFilterVoice' \r\n  | 'inputMessagesFilterRoundVoice' \r\n  | 'inputMessagesFilterRoundVideo' \r\n  | 'inputMessagesFilterMusic' \r\n  | 'inputMessagesFilterUrl' \r\n  | 'inputMessagesFilterMyMentions'\r\n  | 'inputMessagesFilterChatPhotos'\r\n  | 'inputMessagesFilterPinned';\r\n\r\nexport type PinnedStorage = Partial<{\r\n  promise: Promise<PinnedStorage>,\r\n  count: number,\r\n  maxId: number\r\n}>;\r\nexport type MessagesStorage = {\r\n  //generateIndex: (message: any) => void\r\n  [mid: string]: any\r\n};\r\n\r\nexport type MyMessageActionType = Message.messageService['action']['_'];\r\n\r\nexport class AppMessagesManager {\r\n  public static MESSAGE_ID_INCREMENT = 0x10000;\r\n  public static MESSAGE_ID_OFFSET = 0xFFFFFFFF;\r\n\r\n  public messagesStorageByPeerId: {[peerId: string]: MessagesStorage} = {};\r\n  public groupedMessagesStorage: {[groupId: string]: MessagesStorage} = {}; // will be used for albums\r\n  public scheduledMessagesStorage: {[peerId: string]: MessagesStorage} = {};\r\n  public historiesStorage: {\r\n    [peerId: string]: HistoryStorage\r\n  } = {};\r\n  public threadsStorage: {\r\n    [peerId: string]: {\r\n      [threadId: string]: HistoryStorage\r\n    }\r\n  } = {};\r\n  public searchesStorage: {\r\n    [peerId: string]: Partial<{\r\n      [inputFilter in MyInputMessagesFilter]: {\r\n        count?: number,\r\n        history: number[]\r\n      }\r\n    }>\r\n  } = {};\r\n  public pinnedMessages: {[peerId: string]: PinnedStorage} = {};\r\n\r\n  public threadsServiceMessagesIdsStorage: {[peerId_threadId: string]: number} = {};\r\n  public threadsToReplies: {\r\n    [peerId_threadId: string]: string;\r\n  } = {};\r\n\r\n  public pendingByRandomId: {\r\n    [randomId: string]: {\r\n      peerId: number,\r\n      tempId: number,\r\n      threadId: number,\r\n      storage: MessagesStorage\r\n    }\r\n  } = {};\r\n  public pendingByMessageId: {[mid: string]: string} = {};\r\n  public pendingAfterMsgs: any = {};\r\n  public pendingTopMsgs: {[peerId: string]: number} = {};\r\n  public sendFilePromise: CancellablePromise<void> = Promise.resolve();\r\n  public tempNum = 0;\r\n  public tempFinalizeCallbacks: {\r\n    [tempId: string]: {\r\n      [callbackName: string]: Partial<{\r\n        deferred: CancellablePromise<void>, \r\n        callback: (message: any) => Promise<any>\r\n      }>\r\n    }\r\n  } = {};\r\n  \r\n  public sendSmthLazyLoadQueue = new LazyLoadQueueBase(1);\r\n\r\n  public needSingleMessages: {[peerId: string]: number[]} = {};\r\n  private fetchSingleMessagesPromise: Promise<void> = null;\r\n\r\n  public maxSeenId = 0;\r\n\r\n  public migratedFromTo: {[peerId: number]: number} = {};\r\n  public migratedToFrom: {[peerId: number]: number} = {};\r\n\r\n  public newMessagesHandleTimeout = 0;\r\n  public newMessagesToHandle: {[peerId: string]: Set<number>} = {};\r\n  public newDialogsHandlePromise: Promise<any>;\r\n  public newDialogsToHandle: {[peerId: string]: Dialog} = {};\r\n  public newUpdatesAfterReloadToHandle: {[peerId: string]: Set<Update>} = {};\r\n\r\n  private notificationsHandlePromise = 0;\r\n  private notificationsToHandle: {[peerId: string]: {\r\n    fwdCount: number,\r\n    fromId: number,\r\n    topMessage?: MyMessage\r\n  }} = {};\r\n\r\n  private reloadConversationsPromise: Promise<void>;\r\n  private reloadConversationsPeers: Set<number> = new Set();\r\n\r\n  public log = logger('MESSAGES', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn);\r\n\r\n  public dialogsStorage: DialogsStorage;\r\n  public filtersStorage: FiltersStorage;\r\n\r\n  private groupedTempId = 0;\r\n\r\n  private typings: {[peerId: string]: {type: SendMessageAction['_'], timeout?: number}} = {};\r\n\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updateMessageID: this.onUpdateMessageId,\r\n\r\n      updateNewDiscussionMessage: this.onUpdateNewMessage,\r\n      updateNewMessage: this.onUpdateNewMessage,\r\n      updateNewChannelMessage: this.onUpdateNewMessage,\r\n\r\n      updateDialogUnreadMark: this.onUpdateDialogUnreadMark,\r\n\r\n      updateEditMessage: this.onUpdateEditMessage,\r\n      updateEditChannelMessage: this.onUpdateEditMessage,\r\n\r\n      updateReadChannelDiscussionInbox: this.onUpdateReadHistory,\r\n      updateReadChannelDiscussionOutbox: this.onUpdateReadHistory,\r\n      updateReadHistoryInbox: this.onUpdateReadHistory,\r\n      updateReadHistoryOutbox: this.onUpdateReadHistory,\r\n      updateReadChannelInbox: this.onUpdateReadHistory,\r\n      updateReadChannelOutbox: this.onUpdateReadHistory,\r\n\r\n      updateChannelReadMessagesContents: this.onUpdateReadMessagesContents,\r\n      updateReadMessagesContents: this.onUpdateReadMessagesContents,\r\n\r\n      updateChannelAvailableMessages: this.onUpdateChannelAvailableMessages,\r\n\r\n      updateDeleteMessages: this.onUpdateDeleteMessages,\r\n      updateDeleteChannelMessages: this.onUpdateDeleteMessages,\r\n\r\n      updateChannel: this.onUpdateChannel,\r\n\r\n      // @ts-ignore\r\n      updateChannelReload: this.onUpdateChannelReload,\r\n\r\n      updateChannelMessageViews: this.onUpdateChannelMessageViews,\r\n\r\n      updateServiceNotification: this.onUpdateServiceNotification,\r\n\r\n      updatePinnedMessages: this.onUpdatePinnedMessages,\r\n      updatePinnedChannelMessages: this.onUpdatePinnedMessages,\r\n\r\n      updateNotifySettings: this.onUpdateNotifySettings,\r\n\r\n      updateNewScheduledMessage: this.onUpdateNewScheduledMessage,\r\n\r\n      updateDeleteScheduledMessages: this.onUpdateDeleteScheduledMessages\r\n    });\r\n\r\n    // ! Invalidate notify settings, can optimize though\r\n    rootScope.on('notify_peer_type_settings', ({key, settings}) => {\r\n      this.getConversationsAll().then(dialogs => {\r\n        let filterFunc: (dialog: Dialog) => boolean;\r\n        if(key === 'notifyUsers') filterFunc = (dialog) => dialog.peerId > 0;\r\n        else if(key === 'notifyBroadcasts') filterFunc = (dialog) => appChatsManager.isBroadcast(-dialog.peerId);\r\n        else filterFunc = (dialog) => appPeersManager.isAnyGroup(dialog.peerId);\r\n\r\n        dialogs\r\n        .filter(filterFunc)\r\n        .forEach(dialog => {\r\n          rootScope.broadcast('dialog_notify_settings', dialog);\r\n        });\r\n      });\r\n    });\r\n\r\n    rootScope.on('webpage_updated', (e) => {\r\n      const eventData = e;\r\n      eventData.msgs.forEach((mid) => {\r\n        const message = this.getMessageById(mid) as Message.message;\r\n        if(!message) return;\r\n        message.media = {\r\n          _: 'messageMediaWebPage', \r\n          webpage: appWebPagesManager.getWebPage(eventData.id)\r\n        };\r\n\r\n        const peerId = this.getMessagePeer(message);\r\n        const storage = this.getMessagesStorage(peerId);\r\n        rootScope.broadcast('message_edit', {\r\n          storage,\r\n          peerId,\r\n          mid\r\n        });\r\n      });\r\n    });\r\n\r\n    rootScope.on('draft_updated', (e) => {\r\n      const {peerId, threadId, draft} = e;\r\n\r\n      if(threadId) return;\r\n\r\n      const dialog = this.getDialogOnly(peerId);\r\n      if(dialog && !threadId) {\r\n        dialog.draft = draft;\r\n        this.dialogsStorage.generateIndexForDialog(dialog);\r\n        this.dialogsStorage.pushDialog(dialog);\r\n\r\n        rootScope.broadcast('dialog_draft', {\r\n          peerId,\r\n          draft,\r\n          index: dialog.index\r\n        });\r\n      } else {\r\n        this.reloadConversation(peerId);\r\n      }\r\n    });\r\n    \r\n    appStateManager.getState().then(state => {\r\n      if(state.maxSeenMsgId) {\r\n        this.maxSeenId = state.maxSeenMsgId;\r\n      }\r\n    });\r\n\r\n    appNotificationsManager.start();\r\n  }\r\n\r\n  public construct() {\r\n    this.filtersStorage = new FiltersStorage(this, appPeersManager, appUsersManager, appNotificationsManager, appStateManager, apiUpdatesManager, /* apiManager, */ rootScope);\r\n    this.dialogsStorage = new DialogsStorage(this, appChatsManager, appPeersManager, appUsersManager, appDraftsManager, appNotificationsManager, appStateManager, apiUpdatesManager, serverTimeManager);\r\n  }\r\n\r\n  public getInputEntities(entities: MessageEntity[]) {\r\n    var sendEntites = copy(entities);\r\n    sendEntites.forEach((entity: any) => {\r\n      if(entity._ === 'messageEntityMentionName') {\r\n        entity._ = 'inputMessageEntityMentionName';\r\n        entity.user_id = appUsersManager.getUserInput(entity.user_id);\r\n      }\r\n    });\r\n    return sendEntites;\r\n  }\r\n\r\n  public invokeAfterMessageIsSent(tempId: number, callbackName: string, callback: (message: any) => Promise<any>) {\r\n    const finalize = this.tempFinalizeCallbacks[tempId] ?? (this.tempFinalizeCallbacks[tempId] = {});\r\n    const obj = finalize[callbackName] ?? (finalize[callbackName] = {deferred: deferredPromise<void>()});\r\n\r\n    obj.callback = callback;\r\n\r\n    return obj.deferred;\r\n  }\r\n\r\n  public editMessage(message: any, text: string, options: Partial<{\r\n    noWebPage: true,\r\n    newMedia: any,\r\n    scheduleDate: number,\r\n    entities: MessageEntity[]\r\n  }> = {}): Promise<void> {\r\n    /* if(!this.canEditMessage(messageId)) {\r\n      return Promise.reject({type: 'MESSAGE_EDIT_FORBIDDEN'});\r\n    } */\r\n\r\n    const {mid, peerId} = message;\r\n\r\n    if(message.pFlags.is_outgoing) {\r\n      return this.invokeAfterMessageIsSent(mid, 'edit', (message) => {\r\n        //this.log('invoke editMessage callback', message);\r\n        return this.editMessage(message, text, options);\r\n      });\r\n    }\r\n\r\n    let entities = options.entities || [];\r\n    if(text) {\r\n      text = RichTextProcessor.parseMarkdown(text, entities);\r\n    }\r\n\r\n    const schedule_date = options.scheduleDate || (message.pFlags.is_scheduled ? message.date : undefined);\r\n    return apiManager.invokeApi('messages.editMessage', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      id: message.id,\r\n      message: text,\r\n      media: options.newMedia,\r\n      entities: entities.length ? this.getInputEntities(entities) : undefined,\r\n      no_webpage: options.noWebPage,\r\n      schedule_date\r\n    }).then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    }, (error) => {\r\n      this.log.error('editMessage error:', error);\r\n      \r\n      if(error && error.type === 'MESSAGE_NOT_MODIFIED') {\r\n        error.handled = true;\r\n        return;\r\n      }\r\n      if(error && error.type === 'MESSAGE_EMPTY') {\r\n        error.handled = true;\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n\r\n  public sendText(peerId: number, text: string, options: Partial<{\r\n    entities: any[],\r\n    replyToMsgId: number,\r\n    threadId: number,\r\n    viaBotId: number,\r\n    queryId: string,\r\n    resultId: string,\r\n    noWebPage: true,\r\n    reply_markup: any,\r\n    clearDraft: true,\r\n    webPage: any,\r\n    scheduleDate: number,\r\n    silent: true\r\n  }> = {}) {\r\n    if(typeof(text) !== 'string' || !text.length) {\r\n      return;\r\n    }\r\n\r\n    //this.checkSendOptions(options);\r\n\r\n    if(options.threadId && !options.replyToMsgId) {\r\n      options.replyToMsgId = options.threadId;\r\n    }\r\n\r\n    const MAX_LENGTH = 4096;\r\n    if(text.length > MAX_LENGTH) {\r\n      const splitted = splitStringByLength(text, MAX_LENGTH);\r\n      text = splitted[0];\r\n\r\n      if(splitted.length > 1) {\r\n        delete options.webPage;\r\n      }\r\n\r\n      for(let i = 1; i < splitted.length; ++i) {\r\n        setTimeout(() => {\r\n          this.sendText(peerId, splitted[i], options);\r\n        }, i);\r\n      }\r\n    }\r\n\r\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\r\n\r\n    let entities = options.entities || [];\r\n    if(!options.viaBotId) {\r\n      text = RichTextProcessor.parseMarkdown(text, entities);\r\n    }\r\n\r\n    let sendEntites = this.getInputEntities(entities);\r\n    if(!sendEntites.length) {\r\n      sendEntites = undefined;\r\n    }\r\n\r\n    const message = this.generateOutgoingMessage(peerId, options);\r\n    message.entities = entities;\r\n    message.message = text;\r\n\r\n    const replyToMsgId = options.replyToMsgId ? this.getServerMessageId(options.replyToMsgId) : undefined;\r\n    const isChannel = appPeersManager.isChannel(peerId);\r\n\r\n    if(options.webPage) {\r\n      message.media = {\r\n        _: 'messageMediaWebPage',\r\n        webpage: options.webPage\r\n      };\r\n    }\r\n\r\n    const toggleError = (on: any) => {\r\n      if(on) {\r\n        message.error = true;\r\n      } else {\r\n        delete message.error;\r\n      }\r\n      rootScope.broadcast('messages_pending');\r\n    };\r\n\r\n    message.send = () => {\r\n      toggleError(false);\r\n      const sentRequestOptions: InvokeApiOptions = {};\r\n      if(this.pendingAfterMsgs[peerId]) {\r\n        sentRequestOptions.afterMessageId = this.pendingAfterMsgs[peerId].messageId;\r\n      }\r\n\r\n      let apiPromise: any;\r\n      if(options.viaBotId) {\r\n        apiPromise = apiManager.invokeApiAfter('messages.sendInlineBotResult', {\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          random_id: message.random_id,\r\n          reply_to_msg_id: replyToMsgId || undefined,\r\n          query_id: options.queryId,\r\n          id: options.resultId,\r\n          clear_draft: options.clearDraft\r\n        }, sentRequestOptions);\r\n      } else {\r\n        apiPromise = apiManager.invokeApiAfter('messages.sendMessage', {\r\n          no_webpage: options.noWebPage,\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          message: text,\r\n          random_id: message.random_id,\r\n          reply_to_msg_id: replyToMsgId || undefined,\r\n          entities: sendEntites,\r\n          clear_draft: options.clearDraft,\r\n          schedule_date: options.scheduleDate || undefined,\r\n          silent: options.silent\r\n        }, sentRequestOptions);\r\n      }\r\n\r\n      //this.log('sendText', message.mid);\r\n      apiPromise.then((updates: any) => {\r\n        //this.log('sendText sent', message.mid);\r\n        if(updates._ === 'updateShortSentMessage') {\r\n          message.date = updates.date;\r\n          message.id = updates.id;\r\n          message.media = updates.media;\r\n          message.entities = updates.entities;\r\n\r\n          // * override with new updates\r\n          updates = {\r\n            _: 'updates',\r\n            users: [],\r\n            chats: [],\r\n            seq: 0,\r\n            updates: [{\r\n              _: 'updateMessageID',\r\n              random_id: message.random_id,\r\n              id: updates.id\r\n            }, {\r\n              _: options.scheduleDate ? 'updateNewScheduledMessage' : (isChannel ? 'updateNewChannelMessage' : 'updateNewMessage'),\r\n              message: message,\r\n              pts: updates.pts,\r\n              pts_count: updates.pts_count\r\n            }]\r\n          };\r\n        } else if(updates.updates) {\r\n          updates.updates.forEach((update: any) => {\r\n            if(update._ === 'updateDraftMessage') {\r\n              update.local = true;\r\n            }\r\n          });\r\n        }\r\n        // Testing bad situations\r\n        // var upd = angular.copy(updates)\r\n        // updates.updates.splice(0, 1)\r\n\r\n        apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n        // $timeout(function () {\r\n        // ApiUpdatesManager.processUpdateMessage(upd)\r\n        // }, 5000)\r\n      }, (/* error: any */) => {\r\n        toggleError(true);\r\n      }).finally(() => {\r\n        if(this.pendingAfterMsgs[peerId] === sentRequestOptions) {\r\n          delete this.pendingAfterMsgs[peerId];\r\n        }\r\n      });\r\n\r\n      this.pendingAfterMsgs[peerId] = sentRequestOptions;\r\n    }\r\n\r\n    this.beforeMessageSending(message, {\r\n      isScheduled: !!options.scheduleDate || undefined, \r\n      threadId: options.threadId,\r\n      clearDraft: options.clearDraft\r\n    });\r\n  }\r\n\r\n  public sendFile(peerId: number, file: File | Blob | MyDocument, options: Partial<{\r\n    isRoundMessage: true,\r\n    isVoiceMessage: true,\r\n    isGroupedItem: true,\r\n    isMedia: true,\r\n\r\n    replyToMsgId: number,\r\n    threadId: number,\r\n    groupId: string,\r\n    caption: string,\r\n    entities: MessageEntity[],\r\n    width: number,\r\n    height: number,\r\n    objectURL: string,\r\n    thumbBlob: Blob,\r\n    thumbURL: string,\r\n    duration: number,\r\n    background: true,\r\n    silent: true,\r\n    clearDraft: true,\r\n    scheduleDate: number,\r\n\r\n    waveform: Uint8Array,\r\n  }> = {}) {\r\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\r\n\r\n    //this.checkSendOptions(options);\r\n\r\n    const message = this.generateOutgoingMessage(peerId, options);\r\n    const replyToMsgId = options.replyToMsgId ? this.getServerMessageId(options.replyToMsgId) : undefined;\r\n\r\n    let attachType: string, apiFileName: string;\r\n\r\n    const fileType = 'mime_type' in file ? file.mime_type : file.type;\r\n    const fileName = file instanceof File ? file.name : '';\r\n    const isDocument = !(file instanceof File) && !(file instanceof Blob);\r\n    let caption = options.caption || '';\r\n\r\n    this.log('sendFile', file, fileType);\r\n\r\n    const entities = options.entities || [];\r\n    if(caption) {\r\n      caption = RichTextProcessor.parseMarkdown(caption, entities);\r\n    }\r\n\r\n    const attributes: DocumentAttribute[] = [];\r\n\r\n    const isPhoto = ['image/jpeg', 'image/png', 'image/bmp'].indexOf(fileType) >= 0;\r\n\r\n    let photo: MyPhoto, document: MyDocument;\r\n\r\n    let actionName: SendMessageAction['_'];\r\n    if(isDocument) { // maybe it's a sticker or gif\r\n      attachType = 'document';\r\n      apiFileName = '';\r\n    } else if(fileType.indexOf('audio/') === 0 || ['video/ogg'].indexOf(fileType) >= 0) {\r\n      attachType = 'audio';\r\n      apiFileName = 'audio.' + (fileType.split('/')[1] === 'ogg' ? 'ogg' : 'mp3');\r\n      actionName = 'sendMessageUploadAudioAction';\r\n\r\n      if(options.isVoiceMessage) {\r\n        attachType = 'voice';\r\n        message.pFlags.media_unread = true;\r\n      }\r\n\r\n      let attribute: DocumentAttribute.documentAttributeAudio = {\r\n        _: 'documentAttributeAudio',\r\n        pFlags: {\r\n          voice: options.isVoiceMessage\r\n        },\r\n        waveform: options.waveform,\r\n        duration: options.duration || 0\r\n      };\r\n\r\n      attributes.push(attribute);\r\n    } else if(!options.isMedia) {\r\n      attachType = 'document';\r\n      apiFileName = 'document.' + fileType.split('/')[1];\r\n      actionName = 'sendMessageUploadDocumentAction';\r\n    } else if(isPhoto) {\r\n      attachType = 'photo';\r\n      apiFileName = 'photo.' + fileType.split('/')[1];\r\n      actionName = 'sendMessageUploadPhotoAction';\r\n\r\n      const photoSize = {\r\n        _: 'photoSize',\r\n        w: options.width,\r\n        h: options.height,\r\n        type: 'full',\r\n        location: null,\r\n        size: file.size\r\n      } as PhotoSize.photoSize;\r\n\r\n      photo = {\r\n        _: 'photo',\r\n        id: '' + message.id,\r\n        sizes: [photoSize],\r\n        w: options.width,\r\n        h: options.height\r\n      } as any;\r\n\r\n      const cacheContext = appDownloadManager.getCacheContext(photo, photoSize.type);\r\n      cacheContext.downloaded = file.size;\r\n      cacheContext.url = options.objectURL || '';\r\n      \r\n      photo = appPhotosManager.savePhoto(photo);\r\n    } else if(fileType.indexOf('video/') === 0) {\r\n      attachType = 'video';\r\n      apiFileName = 'video.mp4';\r\n      actionName = 'sendMessageUploadVideoAction';\r\n\r\n      let videoAttribute: DocumentAttribute.documentAttributeVideo = {\r\n        _: 'documentAttributeVideo',\r\n        pFlags: {\r\n          round_message: options.isRoundMessage\r\n        }, \r\n        duration: options.duration,\r\n        w: options.width,\r\n        h: options.height\r\n      };\r\n\r\n      attributes.push(videoAttribute);\r\n    } else {\r\n      attachType = 'document';\r\n      apiFileName = 'document.' + fileType.split('/')[1];\r\n      actionName = 'sendMessageUploadDocumentAction';\r\n    }\r\n\r\n    attributes.push({_: 'documentAttributeFilename', file_name: fileName || apiFileName});\r\n\r\n    if(['document', 'video', 'audio', 'voice'].indexOf(attachType) !== -1 && !isDocument) {\r\n      const thumbs: PhotoSize[] = [];\r\n      document = {\r\n        _: 'document',\r\n        id: '' + message.id,\r\n        duration: options.duration,\r\n        attributes,\r\n        w: options.width,\r\n        h: options.height,\r\n        thumbs,\r\n        mime_type: fileType,\r\n        size: file.size\r\n      } as any;\r\n\r\n      const cacheContext = appDownloadManager.getCacheContext(document);\r\n      cacheContext.downloaded = file.size;\r\n      cacheContext.url = options.objectURL || '';\r\n\r\n      let thumb: PhotoSize.photoSize;\r\n      if(isPhoto) {\r\n        attributes.push({\r\n          _: 'documentAttributeImageSize',\r\n          w: options.width,\r\n          h: options.height\r\n        });\r\n\r\n        thumb = {\r\n          _: 'photoSize',\r\n          w: options.width,\r\n          h: options.height,\r\n          type: 'full',\r\n          size: file.size\r\n        };\r\n      } else if(attachType === 'video') {\r\n        if(options.thumbURL) {\r\n          thumb = {\r\n            _: 'photoSize',\r\n            w: options.width,\r\n            h: options.height,\r\n            type: 'full',\r\n            size: options.thumbBlob.size\r\n          };\r\n\r\n          const thumbCacheContext = appDownloadManager.getCacheContext(document, thumb.type);\r\n          thumbCacheContext.downloaded = thumb.size;\r\n          thumbCacheContext.url = options.thumbURL;\r\n        }\r\n      }\r\n\r\n      if(thumb) {\r\n        thumbs.push(thumb);\r\n      }\r\n\r\n      /* if(thumbs.length) {\r\n        const thumb = thumbs[0] as PhotoSize.photoSize;\r\n        const docThumb = appPhotosManager.getDocumentCachedThumb(document.id);\r\n        docThumb.downloaded = thumb.size;\r\n        docThumb.url = thumb.url;\r\n      } */\r\n      \r\n      document = appDocsManager.saveDoc(document);\r\n    }\r\n\r\n    this.log('sendFile', attachType, apiFileName, file.type, options);\r\n\r\n    const preloader = isDocument ? undefined : new ProgressivePreloader({\r\n      attachMethod: 'prepend',\r\n      tryAgainOnFail: false,\r\n      isUpload: true\r\n    });\r\n\r\n    const sentDeferred = deferredPromise<InputMedia>();\r\n\r\n    if(preloader) {\r\n      preloader.attachPromise(sentDeferred);\r\n      sentDeferred.cancel = () => {\r\n        const error = new Error('Download canceled');\r\n        error.name = 'AbortError';\r\n        sentDeferred.reject(error);\r\n      };\r\n\r\n      sentDeferred.catch(err => {\r\n        if(err.name === 'AbortError' && !uploaded) {\r\n          this.log('cancelling upload', media);\r\n\r\n          sentDeferred.reject(err);\r\n          this.cancelPendingMessage(message.random_id);\r\n          this.setTyping(peerId, {_: 'sendMessageCancelAction'});\r\n\r\n          if(uploadPromise?.cancel) {\r\n            uploadPromise.cancel();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    const media = isDocument ? undefined : {\r\n      _: photo ? 'messageMediaPhoto' : 'messageMediaDocument',\r\n      pFlags: {},\r\n      preloader,\r\n      photo,\r\n      document,\r\n      promise: sentDeferred\r\n    };\r\n\r\n    message.entities = entities;\r\n    message.message = caption;\r\n    message.media = isDocument ? {\r\n      _: 'messageMediaDocument',\r\n      pFlags: {},\r\n      document: file \r\n    } : media;\r\n\r\n    const toggleError = (on: boolean) => {\r\n      if(on) {\r\n        message.error = true;\r\n      } else {\r\n        delete message.error;\r\n      }\r\n\r\n      rootScope.broadcast('messages_pending');\r\n    };\r\n\r\n    let uploaded = false,\r\n      uploadPromise: ReturnType<ApiFileManager['uploadFile']> = null;\r\n\r\n    message.send = () => {\r\n      if(isDocument) {\r\n        const {id, access_hash, file_reference} = file as MyDocument;\r\n\r\n        const inputMedia: InputMedia = {\r\n          _: 'inputMediaDocument',\r\n          id: {\r\n            _: 'inputDocument',\r\n            id,\r\n            access_hash,\r\n            file_reference\r\n          }\r\n        };\r\n        \r\n        sentDeferred.resolve(inputMedia);\r\n      } else if(file instanceof File || file instanceof Blob) {\r\n        const load = () => {\r\n          if(!uploaded || message.error) {\r\n            uploaded = false;\r\n            uploadPromise = appDownloadManager.upload(file);\r\n            sentDeferred.notifyAll({done: 0, total: file.size});\r\n          }\r\n\r\n          let thumbUploadPromise: typeof uploadPromise;\r\n          if(attachType === 'video' && options.objectURL) {\r\n            thumbUploadPromise = new Promise((resolve, reject) => {\r\n              const blobPromise = options.thumbBlob ? Promise.resolve(options.thumbBlob) : createPosterForVideo(options.objectURL);\r\n              blobPromise.then(blob => {\r\n                if(!blob) {\r\n                  resolve(null);\r\n                } else {\r\n                  appDownloadManager.upload(blob).then(resolve, reject);\r\n                }\r\n              }, reject);\r\n            });\r\n          }\r\n  \r\n          uploadPromise && uploadPromise.then(async(inputFile) => {\r\n            /* if(DEBUG) {\r\n              this.log('appMessagesManager: sendFile uploaded:', inputFile);\r\n            } */\r\n\r\n            delete message.media.preloader;\r\n\r\n            inputFile.name = apiFileName;\r\n            uploaded = true;\r\n            let inputMedia: InputMedia;\r\n            switch(attachType) {\r\n              case 'photo':\r\n                inputMedia = {\r\n                  _: 'inputMediaUploadedPhoto', \r\n                  file: inputFile\r\n                };\r\n                break;\r\n\r\n              default:\r\n                inputMedia = {\r\n                  _: 'inputMediaUploadedDocument', \r\n                  file: inputFile, \r\n                  mime_type: fileType, \r\n                  attributes\r\n                };\r\n            }\r\n\r\n            if(thumbUploadPromise) {\r\n              try {\r\n                const inputFile = await thumbUploadPromise;\r\n                (inputMedia as InputMedia.inputMediaUploadedDocument).thumb = inputFile;\r\n              } catch(err) {\r\n                this.log.error('sendFile thumb upload error:', err);\r\n              }\r\n            }\r\n            \r\n            sentDeferred.resolve(inputMedia);\r\n          }, (/* error */) => {\r\n            toggleError(true);\r\n          });\r\n  \r\n          uploadPromise.addNotifyListener((progress: {done: number, total: number}) => {\r\n            /* if(DEBUG) {\r\n              this.log('upload progress', progress);\r\n            } */\r\n\r\n            const percents = Math.max(1, Math.floor(100 * progress.done / progress.total));\r\n            if(actionName) {\r\n              this.setTyping(peerId, {_: actionName, progress: percents | 0});\r\n            }\r\n            sentDeferred.notifyAll(progress);\r\n          });\r\n\r\n          return sentDeferred;\r\n        };\r\n\r\n        if(options.isGroupedItem) {\r\n          load();\r\n        } else {\r\n          this.sendSmthLazyLoadQueue.push({\r\n            load\r\n          });\r\n        }\r\n      }\r\n\r\n      return sentDeferred;\r\n    };\r\n\r\n    this.beforeMessageSending(message, {\r\n      isGroupedItem: options.isGroupedItem, \r\n      isScheduled: !!options.scheduleDate || undefined, \r\n      threadId: options.threadId,\r\n      clearDraft: options.clearDraft\r\n    });\r\n\r\n    if(!options.isGroupedItem) {\r\n      sentDeferred.then(inputMedia => {\r\n        this.setTyping(peerId, {_: 'sendMessageCancelAction'});\r\n\r\n        return apiManager.invokeApi('messages.sendMedia', {\r\n          background: options.background,\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          media: inputMedia,\r\n          message: caption,\r\n          random_id: message.random_id,\r\n          reply_to_msg_id: replyToMsgId,\r\n          schedule_date: options.scheduleDate,\r\n          silent: options.silent,\r\n          entities,\r\n          clear_draft: options.clearDraft\r\n        }).then((updates) => {\r\n          apiUpdatesManager.processUpdateMessage(updates);\r\n        }, (error) => {\r\n          if(attachType === 'photo' &&\r\n            error.code === 400 &&\r\n            (error.type === 'PHOTO_INVALID_DIMENSIONS' ||\r\n            error.type === 'PHOTO_SAVE_FILE_INVALID')) {\r\n            error.handled = true;\r\n            attachType = 'document';\r\n            message.send();\r\n            return;\r\n          }\r\n\r\n          toggleError(true);\r\n        });\r\n      });\r\n    }\r\n\r\n    return {message, promise: sentDeferred};\r\n  }\r\n\r\n  public async sendAlbum(peerId: number, files: File[], options: Partial<{\r\n    isMedia: true,\r\n    entities: MessageEntity[],\r\n    replyToMsgId: number,\r\n    threadId: number,\r\n    caption: string,\r\n    sendFileDetails: Partial<{\r\n      duration: number,\r\n      width: number,\r\n      height: number,\r\n      objectURL: string,\r\n      thumbBlob: Blob,\r\n      thumbURL: string\r\n    }>[],\r\n    silent: true,\r\n    clearDraft: true,\r\n    scheduleDate: number\r\n  }> = {}) {\r\n    //this.checkSendOptions(options);\r\n\r\n    if(options.threadId && !options.replyToMsgId) {\r\n      options.replyToMsgId = options.threadId;\r\n    }\r\n\r\n    if(files.length === 1) {\r\n      return this.sendFile(peerId, files[0], {...options, ...options.sendFileDetails[0]});\r\n    }\r\n\r\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\r\n    const replyToMsgId = options.replyToMsgId ? this.getServerMessageId(options.replyToMsgId) : undefined;\r\n\r\n    let caption = options.caption || '';\r\n    let entities = options.entities || [];\r\n    if(caption) {\r\n      caption = RichTextProcessor.parseMarkdown(caption, entities);\r\n    }\r\n\r\n    this.log('sendAlbum', files, options);\r\n\r\n    const groupId = '' + ++this.groupedTempId;\r\n\r\n    const messages = files.map((file, idx) => {\r\n      const details = options.sendFileDetails[idx];\r\n      const o: any = {\r\n        isGroupedItem: true,\r\n        isMedia: options.isMedia,\r\n        scheduleDate: options.scheduleDate,\r\n        silent: options.silent,\r\n        replyToMsgId,\r\n        threadId: options.threadId,\r\n        groupId,\r\n        ...details\r\n      };\r\n\r\n      if(idx === 0) {\r\n        o.caption = caption;\r\n        o.entities = entities;\r\n        //o.replyToMsgId = replyToMsgId;\r\n      }\r\n\r\n      return this.sendFile(peerId, file, o).message;\r\n    });\r\n\r\n    if(options.threadId) {\r\n      appDraftsManager.syncDraft(peerId, options.threadId);\r\n    } else {\r\n      appDraftsManager.saveDraft(peerId, options.threadId, null, {notify: true});  \r\n    }\r\n    \r\n    // * test pending\r\n    //return;\r\n\r\n    const toggleError = (message: any, on: boolean) => {\r\n      if(on) {\r\n        message.error = true;\r\n      } else {\r\n        delete message.error;\r\n      }\r\n\r\n      rootScope.broadcast('messages_pending');\r\n    };\r\n\r\n    const inputPeer = appPeersManager.getInputPeerById(peerId);\r\n    const invoke = (multiMedia: any[]) => {\r\n      this.setTyping(peerId, {_: 'sendMessageCancelAction'});\r\n\r\n      this.sendSmthLazyLoadQueue.push({\r\n        load: () => {\r\n          return apiManager.invokeApi('messages.sendMultiMedia', {\r\n            peer: inputPeer,\r\n            multi_media: multiMedia,\r\n            reply_to_msg_id: replyToMsgId,\r\n            schedule_date: options.scheduleDate,\r\n            silent: options.silent,\r\n            clear_draft: options.clearDraft\r\n          }).then((updates) => {\r\n            apiUpdatesManager.processUpdateMessage(updates);\r\n          }, (error) => {\r\n            messages.forEach(message => toggleError(message, true));\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    const promises: Promise<InputSingleMedia>[] = messages.map((message, idx) => {\r\n      return (message.send() as Promise<InputMedia>).then((inputMedia: InputMedia) => {\r\n        return apiManager.invokeApi('messages.uploadMedia', {\r\n          peer: inputPeer,\r\n          media: inputMedia\r\n        });\r\n      })\r\n      .then(messageMedia => {\r\n        let inputMedia: any;\r\n        if(messageMedia._ === 'messageMediaPhoto') {\r\n          const photo = appPhotosManager.savePhoto(messageMedia.photo);\r\n          inputMedia = appPhotosManager.getInput(photo);\r\n        } else if(messageMedia._ === 'messageMediaDocument') {\r\n          const doc = appDocsManager.saveDoc(messageMedia.document);\r\n          inputMedia = appDocsManager.getMediaInput(doc);\r\n        }\r\n\r\n        const inputSingleMedia: InputSingleMedia = {\r\n          _: 'inputSingleMedia',\r\n          media: inputMedia,\r\n          random_id: message.random_id,\r\n          message: caption,\r\n          entities\r\n        };\r\n\r\n        // * only 1 caption for all inputs\r\n        if(caption) {\r\n          caption = '';\r\n          entities = [];\r\n        }\r\n\r\n        return inputSingleMedia;\r\n      }).catch((err: any) => {\r\n        if(err.name === 'AbortError') {\r\n          return null;\r\n        }\r\n\r\n        this.log.error('sendAlbum upload item error:', err, message);\r\n        toggleError(message, true);\r\n        throw err;\r\n      });\r\n    });\r\n\r\n    Promise.all(promises).then(inputs => {\r\n      invoke(inputs.filter(Boolean));\r\n    });\r\n  }\r\n\r\n  public sendOther(peerId: number, inputMedia: any, options: Partial<{\r\n    replyToMsgId: number,\r\n    threadId: number,\r\n    viaBotId: number,\r\n    reply_markup: any,\r\n    clearDraft: true,\r\n    queryId: string\r\n    resultId: string,\r\n    scheduleDate: number,\r\n    silent: true\r\n  }> = {}) {\r\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\r\n\r\n    //this.checkSendOptions(options);\r\n    const message = this.generateOutgoingMessage(peerId, options);\r\n    const replyToMsgId = options.replyToMsgId ? this.getServerMessageId(options.replyToMsgId) : undefined;\r\n\r\n    let media;\r\n    switch(inputMedia._) {\r\n      case 'inputMediaPoll': {\r\n        inputMedia.poll.id = message.id;\r\n        appPollsManager.savePoll(inputMedia.poll, {\r\n          _: 'pollResults',\r\n          flags: 4,\r\n          total_voters: 0,\r\n          pFlags: {},\r\n        });\r\n\r\n        const {poll, results} = appPollsManager.getPoll('' + message.id);\r\n        media = {\r\n          _: 'messageMediaPoll',\r\n          poll,\r\n          results\r\n        };\r\n\r\n        break;\r\n      }\r\n      /* case 'inputMediaPhoto':\r\n        media = {\r\n          _: 'messageMediaPhoto',\r\n          photo: appPhotosManager.getPhoto(inputMedia.id.id),\r\n          caption: inputMedia.caption || ''\r\n        };\r\n        break;\r\n\r\n      case 'inputMediaDocument':\r\n        var doc = appDocsManager.getDoc(inputMedia.id.id);\r\n        if(doc.sticker && doc.stickerSetInput) {\r\n          appStickersManager.pushPopularSticker(doc.id);\r\n        }\r\n        media = {\r\n          _: 'messageMediaDocument',\r\n          'document': doc,\r\n          caption: inputMedia.caption || ''\r\n        };\r\n        break;\r\n\r\n      case 'inputMediaContact':\r\n        media = {\r\n          _: 'messageMediaContact',\r\n          phone_number: inputMedia.phone_number,\r\n          first_name: inputMedia.first_name,\r\n          last_name: inputMedia.last_name,\r\n          user_id: 0\r\n        };\r\n        break;\r\n\r\n      case 'inputMediaGeoPoint':\r\n        media = {\r\n          _: 'messageMediaGeo',\r\n          geo: {\r\n            _: 'geoPoint',\r\n            'lat': inputMedia.geo_point['lat'],\r\n            'long': inputMedia.geo_point['long']\r\n          }\r\n        };\r\n        break;\r\n\r\n      case 'inputMediaVenue':\r\n        media = {\r\n          _: 'messageMediaVenue',\r\n          geo: {\r\n            _: 'geoPoint',\r\n            'lat': inputMedia.geo_point['lat'],\r\n            'long': inputMedia.geo_point['long']\r\n          },\r\n          title: inputMedia.title,\r\n          address: inputMedia.address,\r\n          provider: inputMedia.provider,\r\n          venue_id: inputMedia.venue_id\r\n        };\r\n        break;\r\n\r\n      case 'messageMediaPending':\r\n        media = inputMedia;\r\n        break; */\r\n    }\r\n\r\n    message.media = media;\r\n\r\n    let toggleError = (on: boolean) => {\r\n      /* const historyMessage = this.messagesForHistory[messageId];\r\n      if (on) {\r\n        message.error = true\r\n        if (historyMessage) {\r\n          historyMessage.error = true\r\n        }\r\n      } else {\r\n        delete message.error\r\n        if (historyMessage) {\r\n          delete historyMessage.error\r\n        }\r\n      } */\r\n      rootScope.broadcast('messages_pending');\r\n    };\r\n\r\n    message.send = () => {\r\n      const sentRequestOptions: any = {};\r\n      if(this.pendingAfterMsgs[peerId]) {\r\n        sentRequestOptions.afterMessageId = this.pendingAfterMsgs[peerId].messageId;\r\n      }\r\n\r\n      let apiPromise: Promise<any>;\r\n      if(options.viaBotId) {\r\n        apiPromise = apiManager.invokeApiAfter('messages.sendInlineBotResult', {\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          random_id: message.random_id,\r\n          reply_to_msg_id: replyToMsgId || undefined,\r\n          query_id: options.queryId,\r\n          id: options.resultId,\r\n          clear_draft: options.clearDraft\r\n        }, sentRequestOptions);\r\n      } else {\r\n        apiPromise = apiManager.invokeApiAfter('messages.sendMedia', {\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          media: inputMedia,\r\n          random_id: message.random_id,\r\n          reply_to_msg_id: replyToMsgId || undefined,\r\n          message: '',\r\n          clear_draft: options.clearDraft,\r\n          schedule_date: options.scheduleDate,\r\n          silent: options.silent\r\n        }, sentRequestOptions);\r\n      }\r\n\r\n      apiPromise.then((updates) => {\r\n        if(updates.updates) {\r\n          updates.updates.forEach((update: any) => {\r\n            if(update._ === 'updateDraftMessage') {\r\n              update.local = true\r\n            }\r\n          });\r\n        }\r\n\r\n        apiUpdatesManager.processUpdateMessage(updates);\r\n      }, (error) => {\r\n        toggleError(true);\r\n      }).finally(() => {\r\n        if(this.pendingAfterMsgs[peerId] === sentRequestOptions) {\r\n          delete this.pendingAfterMsgs[peerId];\r\n        }\r\n      });\r\n      this.pendingAfterMsgs[peerId] = sentRequestOptions;\r\n    }\r\n\r\n    this.beforeMessageSending(message, {\r\n      isScheduled: !!options.scheduleDate || undefined, \r\n      threadId: options.threadId,\r\n      clearDraft: options.clearDraft\r\n    });\r\n  }\r\n\r\n  /* private checkSendOptions(options: Partial<{\r\n    scheduleDate: number\r\n  }>) {\r\n    if(options.scheduleDate) {\r\n      const minTimestamp = (Date.now() / 1000 | 0) + 10;\r\n      if(options.scheduleDate <= minTimestamp) {\r\n        delete options.scheduleDate;\r\n      }\r\n    }\r\n  } */\r\n\r\n  private beforeMessageSending(message: any, options: Partial<{\r\n    isGroupedItem: true, \r\n    isScheduled: true, \r\n    threadId: number, \r\n    clearDraft: true\r\n  }> = {}) {\r\n    const messageId = message.id;\r\n    const peerId = this.getMessagePeer(message);\r\n    const storage = options.isScheduled ? this.getScheduledMessagesStorage(peerId) : this.getMessagesStorage(peerId);\r\n\r\n    if(options.isScheduled) {\r\n      //if(!options.isGroupedItem) {\r\n      this.saveMessages([message], {storage, isScheduled: true, isOutgoing: true});\r\n      setTimeout(() => {\r\n        rootScope.broadcast('scheduled_new', {peerId, mid: messageId});\r\n      }, 0);\r\n    } else {\r\n      /* if(options.threadId && this.threadsStorage[peerId]) {\r\n        delete this.threadsStorage[peerId][options.threadId];\r\n      } */\r\n      const storages: HistoryStorage[] = [\r\n        this.getHistoryStorage(peerId),\r\n        options.threadId ? this.getHistoryStorage(peerId, options.threadId) : undefined\r\n      ];\r\n\r\n      for(const storage of storages) {\r\n        if(storage) {\r\n          storage.history.unshift(messageId);\r\n        }\r\n      }\r\n\r\n      //if(!options.isGroupedItem) {\r\n      this.saveMessages([message], {storage, isOutgoing: true});\r\n      setTimeout(() => {\r\n        this.setDialogTopMessage(message);\r\n        rootScope.broadcast('history_append', {storage, peerId, mid: messageId});\r\n      }, 0);\r\n    }\r\n\r\n    if(!options.isGroupedItem && options.clearDraft) {\r\n      if(options.threadId) {\r\n        appDraftsManager.syncDraft(peerId, options.threadId);\r\n      } else {\r\n        appDraftsManager.saveDraft(peerId, options.threadId, null, {notify: true});  \r\n      }\r\n    }\r\n    \r\n    this.pendingByRandomId[message.random_id] = {\r\n      peerId, \r\n      tempId: messageId, \r\n      threadId: options.threadId, \r\n      storage\r\n    };\r\n\r\n    if(!options.isGroupedItem && message.send) {\r\n      setTimeout(message.send, 0);\r\n      //setTimeout(message.send, 4000);\r\n      //setTimeout(message.send, 7000);\r\n    }\r\n  }\r\n\r\n  private generateOutgoingMessage(peerId: number, options: Partial<{\r\n    scheduleDate: number,\r\n    replyToMsgId: number,\r\n    threadId: number,\r\n    viaBotId: number,\r\n    groupId: string,\r\n    reply_markup: any,\r\n  }>) {\r\n    if(options.threadId && !options.replyToMsgId) {\r\n      options.replyToMsgId = options.threadId;\r\n    }\r\n\r\n    const message: any = {\r\n      _: 'message',\r\n      id: this.generateTempMessageId(peerId),\r\n      from_id: this.generateFromId(peerId),\r\n      peer_id: appPeersManager.getOutputPeer(peerId),\r\n      pFlags: this.generateFlags(peerId),\r\n      date: options.scheduleDate || (tsNow(true) + serverTimeManager.serverTimeOffset),\r\n      message: '',\r\n      grouped_id: options.groupId,\r\n      random_id: randomLong(),\r\n      reply_to: this.generateReplyHeader(options.replyToMsgId, options.threadId),\r\n      via_bot_id: options.viaBotId,\r\n      reply_markup: options.reply_markup,\r\n      replies: this.generateReplies(peerId),\r\n      views: appPeersManager.isBroadcast(peerId) && 1,\r\n      pending: true,\r\n    };\r\n\r\n    return message;\r\n  }\r\n\r\n  private generateReplyHeader(replyToMsgId: number, replyToTopId?: number) {\r\n    const header = {\r\n      _: 'messageReplyHeader',\r\n      reply_to_msg_id: replyToMsgId || replyToTopId,\r\n    } as MessageReplyHeader;\r\n\r\n    if(replyToTopId && header.reply_to_msg_id !== replyToTopId) {\r\n      header.reply_to_top_id = replyToTopId;\r\n    }\r\n\r\n    return header;\r\n  }\r\n\r\n  private generateReplies(peerId: number) {\r\n    let replies: MessageReplies.messageReplies;\r\n    if(appPeersManager.isBroadcast(peerId)) {\r\n      const channelFull = appProfileManager.chatsFull[-peerId] as ChatFull.channelFull;\r\n      if(channelFull?.linked_chat_id) {\r\n        replies = {\r\n          _: 'messageReplies',\r\n          flags: 1,\r\n          pFlags: {\r\n            comments: true\r\n          },\r\n          channel_id: channelFull.linked_chat_id,\r\n          replies: 0,\r\n          replies_pts: 0\r\n        };\r\n      }\r\n    }\r\n\r\n    return replies;\r\n  }\r\n\r\n  /**\r\n   * Generate correct from_id according to anonymous or broadcast\r\n   */\r\n  private generateFromId(peerId: number) {\r\n    if(peerId < 0 && (appPeersManager.isBroadcast(peerId) || appPeersManager.getPeer(peerId).admin_rights?.pFlags?.anonymous)) {\r\n      return undefined;\r\n    } else {\r\n      return appPeersManager.getOutputPeer(appUsersManager.getSelf().id);\r\n    }\r\n  }\r\n\r\n  private generateFlags(peerId: number) {\r\n    const pFlags: any = {};\r\n    const fromId = appUsersManager.getSelf().id;\r\n    if(peerId !== fromId) {\r\n      pFlags.out = true;\r\n\r\n      if(!appPeersManager.isChannel(peerId) && !appUsersManager.isBot(peerId)) {\r\n        pFlags.unread = true;\r\n      }\r\n    }\r\n\r\n    if(appPeersManager.isBroadcast(peerId)) {\r\n      pFlags.post = true;\r\n    }\r\n\r\n    return pFlags;\r\n  }\r\n\r\n  private generateForwardHeader(peerId: number, originalMessage: Message.message) {\r\n    const myId = appUsersManager.getSelf().id;\r\n    if(originalMessage.fromId === myId && originalMessage.peerId === myId && !originalMessage.fwd_from) {\r\n      return;\r\n    }\r\n\r\n    const fwdHeader: MessageFwdHeader.messageFwdHeader = {\r\n      _: 'messageFwdHeader',\r\n      flags: 0,\r\n      date: originalMessage.date\r\n    };\r\n\r\n    if(originalMessage.fwd_from) {\r\n      fwdHeader.from_id = originalMessage.fwd_from.from_id;\r\n      fwdHeader.from_name = originalMessage.fwd_from.from_name;\r\n      fwdHeader.post_author = originalMessage.fwd_from.post_author;\r\n    } else {\r\n      fwdHeader.from_id = appPeersManager.getOutputPeer(originalMessage.fromId);\r\n      fwdHeader.post_author = originalMessage.post_author;\r\n    }\r\n\r\n    if(appPeersManager.isBroadcast(originalMessage.peerId)) {\r\n      if(originalMessage.post_author) {\r\n        fwdHeader.post_author = originalMessage.post_author;\r\n      }\r\n\r\n      fwdHeader.channel_post = originalMessage.id;\r\n    }\r\n    \r\n    // * there is no way to detect whether user profile is hidden\r\n    if(peerId === myId) {\r\n      fwdHeader.saved_from_msg_id = originalMessage.id;\r\n      fwdHeader.saved_from_peer = appPeersManager.getOutputPeer(originalMessage.peerId);\r\n    }\r\n\r\n    return fwdHeader;\r\n  }\r\n\r\n  public generateFakeAvatarMessage(peerId: number, photo: Photo) {\r\n    const maxId = Number.MAX_SAFE_INTEGER;\r\n    const message = {\r\n      _: 'messageService',\r\n      action: {\r\n        _: 'messageActionChannelEditPhoto',\r\n        photo\r\n      },\r\n      mid: maxId,\r\n      peerId,\r\n      date: (photo as Photo.photo).date,\r\n      fromId: peerId\r\n    } as Message.messageService;\r\n\r\n    this.getMessagesStorage(peerId)[maxId] = message;\r\n    return message;\r\n  }\r\n\r\n  public setDialogTopMessage(message: MyMessage, dialog: MTDialog.dialog = this.getDialogOnly(message.peerId)) {\r\n    if(dialog) {\r\n      dialog.top_message = message.mid;\r\n      \r\n      const historyStorage = this.getHistoryStorage(message.peerId);\r\n      historyStorage.maxId = message.mid;\r\n\r\n      this.dialogsStorage.generateIndexForDialog(dialog, false, message);\r\n\r\n      this.scheduleHandleNewDialogs(message.peerId, dialog);\r\n    }\r\n  }\r\n\r\n  public cancelPendingMessage(randomId: string) {\r\n    const pendingData = this.pendingByRandomId[randomId];\r\n\r\n    /* if(DEBUG) {\r\n      this.log('cancelPendingMessage', randomId, pendingData);\r\n    } */\r\n\r\n    if(pendingData) {\r\n      const {peerId, tempId, storage} = pendingData;\r\n      const historyStorage = this.getHistoryStorage(peerId);\r\n\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updateDeleteMessages',\r\n          messages: [tempId]\r\n        }\r\n      });\r\n\r\n      historyStorage.history.delete(tempId);\r\n\r\n      delete this.pendingByRandomId[randomId];\r\n      delete storage[tempId];\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public async refreshConversations() {\r\n    const limit = 200, outDialogs: Dialog[] = [];\r\n    for(let folderId = 0; folderId < 2; ++folderId) {\r\n      let offsetDate = 0;\r\n      for(;;) {\r\n        const {dialogs} = await appMessagesManager.getTopMessages(limit, folderId, offsetDate);\r\n  \r\n        if(dialogs.length) {\r\n          outDialogs.push(...dialogs as Dialog[]);\r\n          const dialog = dialogs[dialogs.length - 1];\r\n\r\n          // * get peerId and mid manually, because dialog can be migrated peer and it won't be saved\r\n          const peerId = appPeersManager.getPeerId(dialog.peer);\r\n          const mid = this.generateMessageId(dialog.top_message);\r\n          offsetDate = this.getMessageByPeer(peerId, mid).date;\r\n\r\n          if(!offsetDate) {\r\n            console.error('refreshConversations: got no offsetDate', dialog);\r\n            break;\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let obj: {[peerId: string]: Dialog} = {};\r\n    outDialogs.forEach(dialog => {\r\n      obj[dialog.peerId] = dialog;\r\n    });\r\n    rootScope.broadcast('dialogs_multiupdate', obj);\r\n\r\n    return outDialogs;\r\n  }\r\n\r\n  public async getConversationsAll(query = '', folderId = 0) {\r\n    const limit = 200, outDialogs: Dialog[] = [];\r\n    for(; folderId < 2; ++folderId) {\r\n      let offsetIndex = 0;\r\n      for(;;) {\r\n        const {dialogs} = await appMessagesManager.getConversations(query, offsetIndex, limit, folderId);\r\n  \r\n        if(dialogs.length) {\r\n          outDialogs.push(...dialogs);\r\n          offsetIndex = dialogs[dialogs.length - 1].index || 0;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return outDialogs;\r\n  }\r\n\r\n  public getConversations(query = '', offsetIndex?: number, limit = 20, folderId = 0) {\r\n    return this.dialogsStorage.getDialogs(query, offsetIndex, limit, folderId);\r\n  }\r\n\r\n  public getReadMaxIdIfUnread(peerId: number, threadId?: number) {\r\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n    if(threadId) {\r\n      const chatHistoryStorage = this.getHistoryStorage(peerId);\r\n      const readMaxId = Math.max(chatHistoryStorage.readMaxId ?? 0, historyStorage.readMaxId);\r\n      const message = this.getMessageByPeer(peerId, historyStorage.maxId); // usually message is missing, so pFlags.out won't be there anyway\r\n      return !message.pFlags.out && readMaxId < historyStorage.maxId ? readMaxId : 0;\r\n    } else {\r\n      const message = this.getMessageByPeer(peerId, historyStorage.maxId);\r\n      const readMaxId = peerId > 0 ? Math.max(historyStorage.readMaxId, historyStorage.readOutboxMaxId) : historyStorage.readMaxId;\r\n      return !message.pFlags.out && readMaxId < historyStorage.maxId ? readMaxId : 0;\r\n    }\r\n  }\r\n\r\n  public getTopMessages(limit: number, folderId: number, offsetDate?: number) {\r\n    const dialogs = this.dialogsStorage.getFolder(folderId);\r\n    let offsetId = 0;\r\n    let offsetPeerId = 0;\r\n    let offsetIndex = 0;\r\n\r\n    if(offsetDate === undefined) {\r\n      offsetDate = this.dialogsStorage.getOffsetDate(folderId);\r\n    }\r\n\r\n    if(offsetDate) {\r\n      offsetIndex = offsetDate * 0x10000;\r\n      offsetDate += serverTimeManager.serverTimeOffset;\r\n    }\r\n\r\n    // ! ВНИМАНИЕ: ОЧЕНЬ СЛОЖНАЯ ЛОГИКА:\r\n    // ! если делать запрос сначала по папке 0, потом по папке 1, по индексу 0 в массиве будет один и тот же диалог, с dialog.pFlags.pinned, ЛОЛ???\r\n    // ! т.е., с запросом folder_id: 1, и exclude_pinned: 0, в результате будут ещё и закреплённые с папки 0\r\n    return apiManager.invokeApiSingle('messages.getDialogs', {\r\n      folder_id: folderId,\r\n      offset_date: offsetDate,\r\n      offset_id: offsetId,\r\n      offset_peer: appPeersManager.getInputPeerById(offsetPeerId),\r\n      limit,\r\n      hash: 0\r\n    }, {\r\n      //timeout: APITIMEOUT,\r\n      noErrorBox: true\r\n    }).then((dialogsResult) => {\r\n      if(dialogsResult._ === 'messages.dialogsNotModified') return null;\r\n\r\n      if(DEBUG) {\r\n        this.log('messages.getDialogs result:', dialogsResult.dialogs, {...dialogsResult.dialogs[0]});\r\n      }\r\n\r\n      /* if(!offsetDate) {\r\n        telegramMeWebService.setAuthorized(true);\r\n      } */\r\n\r\n      appUsersManager.saveApiUsers(dialogsResult.users);\r\n      appChatsManager.saveApiChats(dialogsResult.chats);\r\n      this.saveMessages(dialogsResult.messages);\r\n\r\n      let maxSeenIdIncremented = offsetDate ? true : false;\r\n      let hasPrepend = false;\r\n      const noIdsDialogs: {[peerId: number]: Dialog} = {};\r\n      forEachReverse((dialogsResult.dialogs as Dialog[]), dialog => {\r\n        //const d = Object.assign({}, dialog);\r\n        // ! нужно передавать folderId, так как по папке !== 0 нет свойства folder_id\r\n        this.dialogsStorage.saveDialog(dialog, dialog.folder_id ?? folderId);\r\n\r\n        if(dialog.peerId === undefined) {\r\n          return;\r\n        }\r\n\r\n        /* if(dialog.peerId === -1213511294) {\r\n          this.log.error('lun bot', folderId, d);\r\n        } */\r\n\r\n        if(offsetIndex && dialog.index > offsetIndex) {\r\n          this.scheduleHandleNewDialogs(dialog.peerId, dialog);\r\n          hasPrepend = true;\r\n        }\r\n\r\n        // ! это может случиться, если запрос идёт не по папке 0, а по 1. почему-то read'ов нет\r\n        // ! в итоге, чтобы получить 1 диалог, делается первый запрос по папке 0, потом запрос для архивных по папке 1, и потом ещё перезагрузка архивного диалога\r\n        if(!this.getServerMessageId(dialog.read_inbox_max_id) && !this.getServerMessageId(dialog.read_outbox_max_id)) {\r\n          noIdsDialogs[dialog.peerId] = dialog;\r\n\r\n          this.log.error('noIdsDialogs', dialog);\r\n\r\n          /* if(dialog.peerId === -1213511294) {\r\n            this.log.error('lun bot', folderId);\r\n          } */\r\n        }\r\n\r\n        if(!maxSeenIdIncremented &&\r\n            !appPeersManager.isChannel(appPeersManager.getPeerId(dialog.peer))) {\r\n          this.incrementMaxSeenId(dialog.top_message);\r\n          maxSeenIdIncremented = true;\r\n        }\r\n      });\r\n\r\n      if(Object.keys(noIdsDialogs).length) {\r\n        //setTimeout(() => { // test bad situation\r\n          this.reloadConversation(Object.keys(noIdsDialogs).map(id => +id)).then(() => {\r\n            rootScope.broadcast('dialogs_multiupdate', noIdsDialogs);\r\n  \r\n            for(let peerId in noIdsDialogs) {\r\n              rootScope.broadcast('dialog_unread', {peerId: +peerId});\r\n            }\r\n          });\r\n        //}, 10e3);\r\n      }\r\n\r\n      const count = (dialogsResult as MessagesDialogs.messagesDialogsSlice).count;\r\n\r\n      if(!dialogsResult.dialogs.length ||\r\n        !count ||\r\n        dialogs.length >= count) {\r\n        this.dialogsStorage.setDialogsLoaded(folderId, true);\r\n      }\r\n\r\n      if(hasPrepend) {\r\n        this.scheduleHandleNewDialogs();\r\n      } else {\r\n        rootScope.broadcast('dialogs_multiupdate', {});\r\n      }\r\n\r\n      return dialogsResult;\r\n    });\r\n  }\r\n\r\n  public forwardMessages(peerId: number, fromPeerId: number, mids: number[], options: Partial<{\r\n    withMyScore: true,\r\n    silent: true,\r\n    scheduleDate: number\r\n  }> = {}) {\r\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\r\n    mids = mids.slice().sort((a, b) => a - b);\r\n\r\n    const groups: {\r\n      [groupId: string]: {\r\n        tempId: string,\r\n        messages: any[]\r\n      }\r\n    } = {};\r\n\r\n    const newMessages = mids.map(mid => {\r\n      const originalMessage: Message.message = this.getMessageByPeer(fromPeerId, mid);\r\n      const message: Message.message = this.generateOutgoingMessage(peerId, options);\r\n      message.fwd_from = this.generateForwardHeader(peerId, originalMessage);\r\n\r\n      (['entities', 'forwards', 'message', 'media', 'reply_markup', 'views'] as any as Array<keyof MyMessage>).forEach(key => {\r\n        // @ts-ignore\r\n        message[key] = originalMessage[key];\r\n      });\r\n\r\n      const document = (message.media as MessageMedia.messageMediaDocument)?.document as MyDocument;\r\n      if(document) {\r\n        const types: MyDocument['type'][] = ['round', 'voice'];\r\n        if(types.includes(document.type)) {\r\n          (message as MyMessage).pFlags.media_unread = true;\r\n        }\r\n      }\r\n\r\n      if(originalMessage.grouped_id) {\r\n        const group = groups[originalMessage.grouped_id] ?? (groups[originalMessage.grouped_id] = {tempId: '' + ++this.groupedTempId, messages: []});\r\n        group.messages.push(message);\r\n      }\r\n\r\n      return message;\r\n    });\r\n\r\n    for(const groupId in groups) {\r\n      const group = groups[groupId];\r\n      if(group.messages.length > 1) {\r\n        group.messages.forEach(message => {\r\n          message.grouped_id = group.tempId;\r\n        });\r\n      }\r\n    }\r\n\r\n    newMessages.forEach(message => {\r\n      this.beforeMessageSending(message, {\r\n        isScheduled: !!options.scheduleDate || undefined\r\n      });\r\n    });\r\n\r\n    const sentRequestOptions: InvokeApiOptions = {};\r\n    if(this.pendingAfterMsgs[peerId]) {\r\n      sentRequestOptions.afterMessageId = this.pendingAfterMsgs[peerId].messageId;\r\n    }\r\n\r\n    const promise = /* true ? Promise.resolve() :  */apiManager.invokeApiAfter('messages.forwardMessages', {\r\n      from_peer: appPeersManager.getInputPeerById(fromPeerId),\r\n      id: mids.map(mid => this.getServerMessageId(mid)),\r\n      random_id: newMessages.map(message => message.random_id),\r\n      to_peer: appPeersManager.getInputPeerById(peerId),\r\n      with_my_score: options.withMyScore,\r\n      silent: options.silent,\r\n      schedule_date: options.scheduleDate\r\n    }, sentRequestOptions).then((updates) => {\r\n      this.log('forwardMessages updates:', updates);\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    }).finally(() => {\r\n      if(this.pendingAfterMsgs[peerId] === sentRequestOptions) {\r\n        delete this.pendingAfterMsgs[peerId];\r\n      }\r\n    });\r\n\r\n    this.pendingAfterMsgs[peerId] = sentRequestOptions;\r\n    return promise;\r\n  }\r\n\r\n  public getMessageFromStorage(storage: MessagesStorage, messageId: number) {\r\n    return storage && storage[messageId] || {\r\n      _: 'messageEmpty',\r\n      id: messageId,\r\n      deleted: true,\r\n      pFlags: {}\r\n    };\r\n  }\r\n\r\n  private createMessageStorage() {\r\n    const storage: MessagesStorage = {} as any;\r\n    \r\n    /* let num = 0;\r\n    Object.defineProperty(storage, 'num', {\r\n      get: () => ++num,\r\n      set: (_num: number) => num = _num, \r\n      enumerable: false\r\n    });\r\n\r\n    Object.defineProperty(storage, 'generateIndex', {\r\n      value: (message: any) => {\r\n        if(message.index === undefined) {\r\n          message.index = (message.date * 0x10000) + (storage.num & 0xFFFF);\r\n        }\r\n      },\r\n      enumerable: false\r\n    }); */\r\n\r\n    return storage;\r\n  }\r\n\r\n  public getMessagesStorage(peerId: number) {\r\n    return this.messagesStorageByPeerId[peerId] ?? (this.messagesStorageByPeerId[peerId] = this.createMessageStorage());\r\n  }\r\n\r\n  public getMessageById(messageId: number) {\r\n    for(const peerId in this.messagesStorageByPeerId) {\r\n      if(appPeersManager.isChannel(+peerId)) {\r\n        continue;\r\n      }\r\n\r\n      const message = this.messagesStorageByPeerId[peerId][messageId];\r\n      if(message) {\r\n        return message;\r\n      }\r\n    }\r\n\r\n    return this.getMessageFromStorage(null, messageId);\r\n  }\r\n\r\n  public getMessageByPeer(peerId: number, messageId: number) {\r\n    if(!peerId) {\r\n      return this.getMessageById(messageId);\r\n    }\r\n\r\n    return this.getMessageFromStorage(this.getMessagesStorage(peerId), messageId);\r\n  }\r\n\r\n  public getMessagePeer(message: any): number {\r\n    const toId = message.peer_id && appPeersManager.getPeerId(message.peer_id) || 0;\r\n\r\n    return toId;\r\n  }\r\n\r\n  public getDialogByPeerId(peerId: number): [Dialog, number] | [] {\r\n    return this.dialogsStorage.getDialog(peerId);\r\n  }\r\n\r\n  public getDialogOnly(peerId: number) {\r\n    return this.dialogsStorage.getDialogOnly(peerId);\r\n  }\r\n\r\n  public reloadConversation(peerId: number | number[]) {\r\n    [].concat(peerId).forEach(peerId => {\r\n      if(!this.reloadConversationsPeers.has(peerId)) {\r\n        this.reloadConversationsPeers.add(peerId);\r\n        //this.log('will reloadConversation', peerId);\r\n      }\r\n    });\r\n\r\n    if(this.reloadConversationsPromise) return this.reloadConversationsPromise;\r\n    return this.reloadConversationsPromise = new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const peers = Array.from(this.reloadConversationsPeers).map(peerId => appPeersManager.getInputDialogPeerById(peerId));\r\n        this.reloadConversationsPeers.clear();\r\n\r\n        apiManager.invokeApi('messages.getPeerDialogs', {peers}).then((result) => {\r\n          this.dialogsStorage.applyDialogs(result);\r\n          resolve();\r\n        }, reject).finally(() => {\r\n          this.reloadConversationsPromise = null;\r\n        });\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  private doFlushHistory(inputPeer: any, justClear?: boolean, revoke?: boolean): Promise<true> {\r\n    return apiManager.invokeApi('messages.deleteHistory', {\r\n      just_clear: justClear,\r\n      revoke: revoke,\r\n      peer: inputPeer,\r\n      max_id: 0\r\n    }).then((affectedHistory) => {\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updatePts',\r\n          pts: affectedHistory.pts,\r\n          pts_count: affectedHistory.pts_count\r\n        }\r\n      });\r\n\r\n      if(!affectedHistory.offset) {\r\n        return true;\r\n      }\r\n\r\n      return this.doFlushHistory(inputPeer, justClear);\r\n    })\r\n  }\r\n\r\n  public async flushHistory(peerId: number, justClear?: boolean, revoke?: boolean) {\r\n    if(appPeersManager.isChannel(peerId)) {\r\n      const promise = this.getHistory(peerId, 0, 1);\r\n\r\n      const historyResult = promise instanceof Promise ? await promise : promise;\r\n\r\n      const channelId = -peerId;\r\n      const maxId = historyResult.history[0] || 0;\r\n      return apiManager.invokeApi('channels.deleteHistory', {\r\n        channel: appChatsManager.getChannelInput(channelId),\r\n        max_id: maxId\r\n      }).then(() => {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateChannelAvailableMessages',\r\n            channel_id: channelId,\r\n            available_min_id: maxId\r\n          } as Update.updateChannelAvailableMessages\r\n        });\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return this.doFlushHistory(appPeersManager.getInputPeerById(peerId), justClear, revoke).then(() => {\r\n      delete this.historiesStorage[peerId];\r\n      delete this.messagesStorageByPeerId[peerId];\r\n\r\n      if(justClear) {\r\n        rootScope.broadcast('dialog_flush', {peerId});\r\n      } else {\r\n        this.dialogsStorage.dropDialog(peerId);\r\n\r\n        rootScope.broadcast('dialog_drop', {peerId});\r\n      }\r\n    });\r\n  }\r\n\r\n  public hidePinnedMessages(peerId: number) {\r\n    return Promise.all([\r\n      appStateManager.getState(),\r\n      this.getPinnedMessage(peerId)\r\n    ])\r\n    .then(([state, pinned]) => {\r\n      state.hiddenPinnedMessages[peerId] = pinned.maxId;\r\n      rootScope.broadcast('peer_pinned_hidden', {peerId, maxId: pinned.maxId});\r\n    });\r\n  }\r\n\r\n  public getPinnedMessage(peerId: number) {\r\n    const p = this.pinnedMessages[peerId] ?? (this.pinnedMessages[peerId] = {});\r\n    if(p.promise) return p.promise;\r\n    else if(p.maxId) return Promise.resolve(p);\r\n\r\n    return p.promise = this.getSearch({\r\n      peerId, \r\n      inputFilter: {_: 'inputMessagesFilterPinned'},\r\n      maxId: 0,\r\n      limit: 1\r\n    }).then(result => {\r\n      p.count = result.count;\r\n      p.maxId = result.history[0]?.mid;\r\n      return p;\r\n    }).finally(() => {\r\n      delete p.promise;\r\n    });\r\n  }\r\n\r\n  public updatePinnedMessage(peerId: number, mid: number, unpin?: true, silent?: true, oneSide?: true) {\r\n    return apiManager.invokeApi('messages.updatePinnedMessage', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      unpin,\r\n      silent,\r\n      pm_oneside: oneSide,\r\n      id: this.getServerMessageId(mid)\r\n    }).then(updates => {\r\n      //this.log('pinned updates:', updates);\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public unpinAllMessages(peerId: number): Promise<boolean> {\r\n    return apiManager.invokeApi('messages.unpinAllMessages', {\r\n      peer: appPeersManager.getInputPeerById(peerId)\r\n    }).then(affectedHistory => {\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updatePts',\r\n          pts: affectedHistory.pts,\r\n          pts_count: affectedHistory.pts_count\r\n        }\r\n      });\r\n\r\n      if(!affectedHistory.offset) {\r\n        const storage = this.getMessagesStorage(peerId);\r\n        for(const mid in storage) {\r\n          const message = storage[mid];\r\n          if(message.pFlags.pinned) {\r\n            delete message.pFlags.pinned;\r\n          }\r\n        }\r\n\r\n        rootScope.broadcast('peer_pinned_messages', {peerId, unpinAll: true});\r\n        delete this.pinnedMessages[peerId];\r\n\r\n        return true;\r\n      }\r\n\r\n      return this.unpinAllMessages(peerId);\r\n    });\r\n  }\r\n\r\n  public getAlbumText(grouped_id: string) {\r\n    const group = this.groupedMessagesStorage[grouped_id];\r\n    let foundMessages = 0, message: string, totalEntities: MessageEntity[], entities: MessageEntity[];\r\n    for(const i in group) {\r\n      const m = group[i];\r\n      if(m.message) {\r\n        if(++foundMessages > 1) break;\r\n        message = m.message;\r\n        totalEntities = m.totalEntities;\r\n        entities = m.entities;\r\n      }  \r\n    }\r\n\r\n    if(foundMessages > 1) {\r\n      message = undefined;\r\n      totalEntities = undefined;\r\n      entities = undefined;\r\n    }\r\n\r\n    return {message, entities, totalEntities};\r\n  }\r\n\r\n  public getMidsByAlbum(grouped_id: string) {\r\n    return getObjectKeysAndSort(this.groupedMessagesStorage[grouped_id], 'asc');\r\n    //return Object.keys(this.groupedMessagesStorage[grouped_id]).map(id => +id).sort((a, b) => a - b);\r\n  }\r\n\r\n  public getMidsByMessage(message: any) {\r\n    if(message?.grouped_id) return this.getMidsByAlbum(message.grouped_id);\r\n    else return [message.mid];\r\n  }\r\n\r\n  public filterMessages(message: any, verify: (message: MyMessage) => boolean) {\r\n    const out: MyMessage[] = [];\r\n    if(message.grouped_id) {\r\n      const storage = this.groupedMessagesStorage[message.grouped_id];\r\n      for(const mid in storage) {\r\n        const message = storage[mid];\r\n        if(verify(message)) {\r\n          out.push(message);\r\n        }\r\n      }\r\n    } else {\r\n      if(verify(message)) {\r\n        out.push(message);\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public generateTempMessageId(peerId: number) {\r\n    const dialog = this.getDialogOnly(peerId);\r\n    return this.generateMessageId(dialog?.top_message || 0, true);\r\n  }\r\n\r\n  public generateMessageId(messageId: number, temp = false) {\r\n    const q = AppMessagesManager.MESSAGE_ID_OFFSET;\r\n    const num = temp ? ++this.tempNum : 0;\r\n    if(messageId >= q) {\r\n      if(temp) {\r\n        return messageId + (num & (AppMessagesManager.MESSAGE_ID_INCREMENT - 1));\r\n      }\r\n\r\n      return messageId;\r\n    }\r\n\r\n    return q + (messageId * AppMessagesManager.MESSAGE_ID_INCREMENT + (num & (AppMessagesManager.MESSAGE_ID_INCREMENT - 1)));\r\n  }\r\n\r\n  /**\r\n   * * will ignore outgoing offset\r\n   */\r\n  public getServerMessageId(messageId: number) {\r\n    const q = AppMessagesManager.MESSAGE_ID_OFFSET;\r\n    if(messageId < q) { // id 0 -> mid 0xFFFFFFFF, so 0xFFFFFFFF must convert to 0\r\n      return messageId;\r\n    }\r\n\r\n    const l = AppMessagesManager.MESSAGE_ID_INCREMENT - 1;\r\n    const used = messageId & l;\r\n    if(used !== l) {\r\n      messageId -= used + 1;\r\n    }\r\n\r\n    return (messageId - q) / AppMessagesManager.MESSAGE_ID_INCREMENT;\r\n  }\r\n\r\n  public incrementMessageId(messageId: number, increment: number) {\r\n    return this.generateMessageId(this.getServerMessageId(messageId) + increment);\r\n  }\r\n\r\n  public saveMessages(messages: any[], options: Partial<{\r\n    storage: MessagesStorage,\r\n    isScheduled: true,\r\n    isOutgoing: true,\r\n    //isNew: boolean, // * new - from update\r\n  }> = {}) {\r\n    //let groups: Set<string>;\r\n    messages.forEach((message) => {\r\n      if(message.pFlags === undefined) {\r\n        message.pFlags = {};\r\n      }\r\n\r\n      if(message._ === 'messageEmpty') {\r\n        return;\r\n      }\r\n\r\n      // * exclude from state\r\n      // defineNotNumerableProperties(message, ['rReply', 'mid', 'savedFrom', 'fwdFromId', 'fromId', 'peerId', 'reply_to_mid', 'viaBotId']);\r\n\r\n      const peerId = this.getMessagePeer(message);\r\n      const storage = options.storage || this.getMessagesStorage(peerId);\r\n      const isChannel = message.peer_id._ === 'peerChannel';\r\n      const channelId = isChannel ? -peerId : 0;\r\n      const isBroadcast = isChannel && appChatsManager.isBroadcast(channelId);\r\n\r\n      if(options.isScheduled) {\r\n        message.pFlags.is_scheduled = true;\r\n      }\r\n\r\n      if(options.isOutgoing) {\r\n        message.pFlags.is_outgoing = true;\r\n      }\r\n      \r\n      const mid = this.generateMessageId(message.id);\r\n      message.mid = mid;\r\n\r\n      if(message.grouped_id) {\r\n        const storage = this.groupedMessagesStorage[message.grouped_id] ?? (this.groupedMessagesStorage[message.grouped_id] = {});\r\n        storage[mid] = message;\r\n      }\r\n\r\n      const dialog = this.getDialogOnly(peerId);\r\n      if(dialog && mid) {\r\n        if(mid > dialog[message.pFlags.out\r\n          ? 'read_outbox_max_id'\r\n          : 'read_inbox_max_id']) {\r\n          message.pFlags.unread = true;\r\n        }\r\n      }\r\n      // this.log(dT(), 'msg unread', mid, apiMessage.pFlags.out, dialog && dialog[apiMessage.pFlags.out ? 'read_outbox_max_id' : 'read_inbox_max_id'])\r\n\r\n      if(message.reply_to) {\r\n        if(message.reply_to.reply_to_msg_id) {\r\n          message.reply_to.reply_to_msg_id = message.reply_to_mid = this.generateMessageId(message.reply_to.reply_to_msg_id);\r\n        } \r\n\r\n        if(message.reply_to.reply_to_top_id) message.reply_to.reply_to_top_id = this.generateMessageId(message.reply_to.reply_to_top_id);\r\n      }\r\n\r\n      if(message.replies) {\r\n        if(message.replies.max_id) message.replies.max_id = this.generateMessageId(message.replies.max_id);\r\n        if(message.replies.read_max_id) message.replies.read_max_id = this.generateMessageId(message.replies.read_max_id);\r\n      }\r\n\r\n      const overwriting = !!message.peerId;\r\n      if(!overwriting) {\r\n        message.date -= serverTimeManager.serverTimeOffset;\r\n      }\r\n      \r\n      //storage.generateIndex(message);\r\n      const myId = appUsersManager.getSelf().id;\r\n\r\n      message.peerId = peerId;\r\n      if(message.peerId === myId/*  && !message.from_id && !message.fwd_from */) {\r\n        message.fromId = message.fwd_from ? (message.fwd_from.from_id ? appPeersManager.getPeerId(message.fwd_from.from_id) : 0) : myId;\r\n      } else {\r\n        //message.fromId = message.pFlags.post || (!message.pFlags.out && !message.from_id) ? peerId : appPeersManager.getPeerId(message.from_id);\r\n        message.fromId = message.pFlags.post || !message.from_id ? peerId : appPeersManager.getPeerId(message.from_id);\r\n      }\r\n\r\n      const fwdHeader = message.fwd_from as MessageFwdHeader;\r\n      if(fwdHeader) {\r\n        //if(peerId === myID) {\r\n          if(fwdHeader.saved_from_msg_id) fwdHeader.saved_from_msg_id = this.generateMessageId(fwdHeader.saved_from_msg_id);\r\n          if(fwdHeader.channel_post) fwdHeader.channel_post = this.generateMessageId(fwdHeader.channel_post);\r\n\r\n          const peer = fwdHeader.saved_from_peer || fwdHeader.from_id;\r\n          const msgId = fwdHeader.saved_from_msg_id || fwdHeader.channel_post;\r\n          if(peer && msgId) {\r\n            const savedFromPeerId = appPeersManager.getPeerId(peer);\r\n            const savedFromMid = this.generateMessageId(msgId);\r\n            message.savedFrom = savedFromPeerId + '_' + savedFromMid;\r\n          }\r\n\r\n          /* if(peerId < 0 || peerId === myID) {\r\n            message.fromId = appPeersManager.getPeerID(!message.from_id || deepEqual(message.from_id, fwdHeader.from_id) ? fwdHeader.from_id : message.from_id);\r\n          } */\r\n        /* } else {\r\n          apiMessage.fwdPostID = fwdHeader.channel_post;\r\n        } */\r\n\r\n        message.fwdFromId = appPeersManager.getPeerId(fwdHeader.from_id);\r\n\r\n        if(!overwriting) {\r\n          fwdHeader.date -= serverTimeManager.serverTimeOffset;\r\n        }\r\n      }\r\n\r\n      if(message.via_bot_id > 0) {\r\n        message.viaBotId = message.via_bot_id;\r\n      }\r\n\r\n      const mediaContext: ReferenceContext = {\r\n        type: 'message',\r\n        peerId,\r\n        messageId: mid\r\n      };\r\n\r\n      if(message.media) {\r\n        switch(message.media._) {\r\n          case 'messageMediaEmpty':\r\n            delete message.media;\r\n            break;\r\n          case 'messageMediaPhoto':\r\n            if(message.media.ttl_seconds) {\r\n              message.media = {_: 'messageMediaUnsupportedWeb'};\r\n            } else {\r\n              message.media.photo = appPhotosManager.savePhoto(message.media.photo, mediaContext);\r\n            }\r\n\r\n            if(!message.media.photo) { // * found this bug on test DC\r\n              delete message.media;\r\n            }\r\n            \r\n            break;\r\n          case 'messageMediaPoll':\r\n            message.media.poll = appPollsManager.savePoll(message.media.poll, message.media.results);\r\n            break;\r\n          case 'messageMediaDocument':\r\n            if(message.media.ttl_seconds) {\r\n              message.media = {_: 'messageMediaUnsupportedWeb'};\r\n            } else {\r\n              message.media.document = appDocsManager.saveDoc(message.media.document, mediaContext); // 11.04.2020 warning\r\n            }\r\n\r\n            break;\r\n          case 'messageMediaWebPage':\r\n            message.media.webpage = appWebPagesManager.saveWebPage(message.media.webpage, message.mid, mediaContext);\r\n            break;\r\n          /*case 'messageMediaGame':\r\n            AppGamesManager.saveGame(apiMessage.media.game, apiMessage.mid, mediaContext);\r\n            apiMessage.media.handleMessage = true;\r\n            break; */\r\n          case 'messageMediaInvoice':\r\n            message.media = {_: 'messageMediaUnsupportedWeb'};\r\n            break;\r\n        }\r\n      }\r\n\r\n      if(message.action) {\r\n        let migrateFrom: number;\r\n        let migrateTo: number;\r\n        const suffix = message.fromId === appUsersManager.getSelf().id ? 'You' : '';\r\n        switch(message.action._) {\r\n          //case 'messageActionChannelEditPhoto':\r\n          case 'messageActionChatEditPhoto':\r\n            message.action.photo = appPhotosManager.savePhoto(message.action.photo, mediaContext);\r\n            if(message.action.photo.video_sizes) {\r\n              message.action._ = isBroadcast ? 'messageActionChannelEditVideo' : 'messageActionChatEditVideo';\r\n            } else {\r\n              if(isBroadcast) { // ! messageActionChannelEditPhoto не существует в принципе, это используется для перевода.\r\n                message.action._ = 'messageActionChannelEditPhoto';\r\n              }\r\n            }\r\n            break;\r\n\r\n          case 'messageActionChatEditTitle':\r\n            /* if(options.isNew) {\r\n              const chat = appChatsManager.getChat(-peerId);\r\n              chat.title = message.action.title;\r\n              appChatsManager.saveApiChat(chat, true);\r\n            } */\r\n            \r\n            if(isBroadcast) {\r\n              message.action._ = 'messageActionChannelEditTitle';\r\n            }\r\n            break;\r\n\r\n          case 'messageActionChatDeletePhoto':\r\n            if(isBroadcast) {\r\n              message.action._ = 'messageActionChannelDeletePhoto';\r\n            }\r\n            break;\r\n\r\n          case 'messageActionChatAddUser':\r\n            if(message.action.users.length === 1) {\r\n              message.action.user_id = message.action.users[0];\r\n              if(message.fromId === message.action.user_id) {\r\n                if(isChannel) {\r\n                  message.action._ = 'messageActionChatJoined' + suffix;\r\n                } else {\r\n                  message.action._ = 'messageActionChatReturn' + suffix;\r\n                }\r\n              }\r\n            } else if(message.action.users.length > 1) {\r\n              message.action._ = 'messageActionChatAddUsers';\r\n            }\r\n            break;\r\n\r\n          case 'messageActionChatDeleteUser':\r\n            if(message.fromId === message.action.user_id) {\r\n              message.action._ = 'messageActionChatLeave' + suffix;\r\n            }\r\n            break;\r\n\r\n          case 'messageActionChannelMigrateFrom':\r\n            migrateFrom = -message.action.chat_id;\r\n            migrateTo = -channelId;\r\n            break\r\n\r\n          case 'messageActionChatMigrateTo':\r\n            migrateFrom = -channelId;\r\n            migrateTo = -message.action.channel_id;\r\n            break;\r\n\r\n          case 'messageActionHistoryClear':\r\n            //apiMessage.deleted = true;\r\n            message.clear_history = true;\r\n            delete message.pFlags.out;\r\n            delete message.pFlags.unread;\r\n            break;\r\n\r\n          case 'messageActionPhoneCall':\r\n            message.action.type = \r\n              (message.pFlags.out ? 'out_' : 'in_') +\r\n              (\r\n                message.action.reason._ === 'phoneCallDiscardReasonMissed' ||\r\n                message.action.reason._ === 'phoneCallDiscardReasonBusy'\r\n                   ? 'missed'\r\n                   : 'ok'\r\n              );\r\n            break;\r\n        }\r\n        \r\n        if(migrateFrom &&\r\n            migrateTo &&\r\n            !this.migratedFromTo[migrateFrom] &&\r\n            !this.migratedToFrom[migrateTo]) {\r\n          this.migrateChecks(migrateFrom, migrateTo);\r\n        }\r\n      }\r\n\r\n      /* if(message.grouped_id) {\r\n        if(!groups) {\r\n          groups = new Set();\r\n        }\r\n\r\n        groups.add(message.grouped_id);\r\n      } else {\r\n        message.rReply = this.getRichReplyText(message);\r\n      } */\r\n\r\n      if(message.message && message.message.length && !message.totalEntities) {\r\n        const myEntities = RichTextProcessor.parseEntities(message.message);\r\n        const apiEntities = message.entities || [];\r\n        message.totalEntities = RichTextProcessor.mergeEntities(apiEntities.slice(), myEntities); // ! only in this order, otherwise bold and emoji formatting won't work\r\n      }\r\n\r\n      storage[mid] = message;\r\n    });\r\n\r\n    /* if(groups) {\r\n      for(const groupId of groups) {\r\n        const mids = this.groupedMessagesStorage[groupId];\r\n        for(const mid in mids) {\r\n          const message = this.groupedMessagesStorage[groupId][mid];\r\n          message.rReply = this.getRichReplyText(message);\r\n        }\r\n      }\r\n    } */\r\n  }\r\n\r\n  public wrapMessageForReply(message: any, text: string, usingMids: number[], plain: true, highlightWord?: string): string;\r\n  public wrapMessageForReply(message: any, text?: string, usingMids?: number[], plain?: false, highlightWord?: string): DocumentFragment;\r\n  public wrapMessageForReply(message: any, text: string = message.message, usingMids?: number[], plain?: boolean, highlightWord?: string): DocumentFragment | string {\r\n    const parts: (HTMLElement | string)[] = [];\r\n\r\n    const addPart = (langKey: LangPackKey, part?: string | HTMLElement, text?: string) => {\r\n      if(langKey) {\r\n        part = plain ? I18n.format(langKey, true) : i18n(langKey);\r\n      }\r\n      \r\n      if(plain) {\r\n        parts.push(part);\r\n      } else {\r\n        const el = document.createElement('i');\r\n        if(typeof(part) === 'string') el.innerHTML = part;\r\n        else el.append(part);\r\n        parts.push(el);\r\n      }\r\n\r\n      if(text) {\r\n        parts.push(', ');\r\n      }\r\n    };\r\n\r\n    if(message.media) {\r\n      let usingFullAlbum = true;\r\n      if(message.grouped_id) {\r\n        if(usingMids) {\r\n          const mids = this.getMidsByMessage(message);\r\n          if(usingMids.length === mids.length) {\r\n            for(const mid of mids) {\r\n              if(!usingMids.includes(mid)) {\r\n                usingFullAlbum = false;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            usingFullAlbum = false;\r\n          }\r\n        }\r\n\r\n        if(usingFullAlbum) {\r\n          text = this.getAlbumText(message.grouped_id).message;\r\n          addPart('AttachAlbum', undefined, text);\r\n        }\r\n      } else {\r\n        usingFullAlbum = false;\r\n      }\r\n\r\n      if(!usingFullAlbum) {\r\n        const media = message.media;\r\n        switch(media._) {\r\n          case 'messageMediaPhoto':\r\n            addPart('AttachPhoto', undefined, message.message);\r\n            break;\r\n          case 'messageMediaDice':\r\n            addPart(undefined, plain ? media.emoticon : RichTextProcessor.wrapEmojiText(media.emoticon));\r\n            break;\r\n          case 'messageMediaVenue': {\r\n            const text = plain ? media.title : RichTextProcessor.wrapEmojiText(media.title);\r\n            addPart('AttachLocation', undefined, text);\r\n            parts.push(htmlToDocumentFragment(text) as any);\r\n            break;\r\n          }\r\n          case 'messageMediaGeo':\r\n            addPart('AttachLocation');\r\n            break;\r\n          case 'messageMediaGeoLive':\r\n            addPart('AttachLiveLocation');\r\n            break;\r\n          case 'messageMediaPoll':\r\n            addPart(undefined, plain ? '📊' + ' ' + (media.poll.question || 'poll') : media.poll.rReply);\r\n            break;\r\n          case 'messageMediaContact':\r\n            addPart('AttachContact');\r\n            break;\r\n          case 'messageMediaGame': {\r\n            const prefix = '🎮' + ' ';\r\n            addPart(undefined, plain ? prefix + media.game.title : RichTextProcessor.wrapEmojiText(prefix + media.game.title));\r\n            break;\r\n          }\r\n          case 'messageMediaDocument':\r\n            let document = media.document;\r\n  \r\n            if(document.type === 'video') {\r\n              addPart('AttachVideo', undefined, message.message);\r\n            } else if(document.type === 'voice') {\r\n              addPart('AttachAudio', undefined, message.message);\r\n            } else if(document.type === 'gif') {\r\n              addPart('AttachGif', undefined, message.message);\r\n            } else if(document.type === 'round') {\r\n              addPart('AttachRound', undefined, message.message);\r\n            } else if(document.type === 'sticker') {\r\n              addPart(undefined, ((plain ? document.stickerEmojiRaw : document.stickerEmoji) || '') + 'Sticker');\r\n              text = '';\r\n            } else {\r\n              addPart(document.file_name, undefined, message.message);\r\n            }\r\n  \r\n            break;\r\n  \r\n          default:\r\n            //messageText += media._;\r\n            ///////this.log.warn('Got unknown media type!', message);\r\n            break;\r\n        }\r\n      } \r\n    }\r\n\r\n    if(message.action) {\r\n      const actionWrapped = this.wrapMessageActionTextNew(message, plain);\r\n      if(actionWrapped) {\r\n        addPart(undefined, actionWrapped);\r\n      }\r\n    }\r\n\r\n    if(text) {\r\n      text = limitSymbols(text, 100);\r\n\r\n      if(plain) {\r\n        parts.push(text);\r\n      } else {\r\n        let entities = RichTextProcessor.parseEntities(text.replace(/\\n/g, ' '));\r\n\r\n        if(highlightWord) {\r\n          if(!entities) entities = [];\r\n          let found = false;\r\n          let match: any;\r\n          let regExp = new RegExp(escapeRegExp(highlightWord), 'gi');\r\n          while((match = regExp.exec(text)) !== null) {\r\n            entities.push({_: 'messageEntityHighlight', length: highlightWord.length, offset: match.index});\r\n            found = true;\r\n          }\r\n      \r\n          if(found) {\r\n            entities.sort((a, b) => a.offset - b.offset);\r\n          }\r\n        }\r\n\r\n        const messageWrapped = RichTextProcessor.wrapRichText(text, {\r\n          noLinebreaks: true, \r\n          entities, \r\n          noLinks: true,\r\n          noTextFormat: true\r\n        });\r\n  \r\n        parts.push(htmlToDocumentFragment(messageWrapped) as any);\r\n      }\r\n    }\r\n\r\n    if(plain) {\r\n      return parts.join('');\r\n    } else {\r\n      const fragment = document.createDocumentFragment();\r\n      fragment.append(...parts);\r\n      return fragment;\r\n    }\r\n  }\r\n\r\n  public getSenderToPeerText(message: MyMessage) {\r\n    let senderTitle = '', peerTitle: string;\r\n    \r\n    senderTitle = message.pFlags.out ? 'You' : appPeersManager.getPeerTitle(message.fromId, false, false);\r\n    peerTitle = appPeersManager.isAnyGroup(message.peerId) || (message.pFlags.out && message.peerId !== rootScope.myId) ? \r\n      appPeersManager.getPeerTitle(message.peerId, false, false) : \r\n      '';\r\n\r\n    if(peerTitle) {\r\n      senderTitle += ' ➝ ' + peerTitle;\r\n    }\r\n\r\n    return senderTitle;\r\n  }\r\n\r\n  public wrapMessageActionTextNew(message: any, plain: true): string;\r\n  public wrapMessageActionTextNew(message: any, plain?: false): HTMLElement;\r\n  public wrapMessageActionTextNew(message: any, plain: boolean): HTMLElement | string;\r\n  public wrapMessageActionTextNew(message: any, plain?: boolean): HTMLElement | string {\r\n    const element: HTMLElement = plain ? undefined : document.createElement('span');\r\n    const action = message.action as MessageAction;\r\n\r\n    // this.log('message action:', action);\r\n\r\n    if((action as MessageAction.messageActionCustomAction).message) {\r\n      if(plain) {\r\n        return RichTextProcessor.wrapPlainText(message.message);\r\n      } else {\r\n        element.innerHTML = RichTextProcessor.wrapRichText((action as MessageAction.messageActionCustomAction).message, {noLinebreaks: true});\r\n        return element;\r\n      }\r\n    } else {\r\n      let _ = action._;\r\n      //let suffix = '';\r\n      let langPackKey: LangPackKey;\r\n      let args: any[];\r\n\r\n      const getNameDivHTML = (peerId: number, plain: boolean) => {\r\n        return plain ? appPeersManager.getPeerTitle(peerId, plain) + ' ' : (new PeerTitle({peerId})).element;\r\n      };\r\n\r\n      switch(action._) {\r\n        case \"messageActionPhoneCall\": {\r\n          _ += '.' + (action as any).type;\r\n\r\n          const duration = action.duration || 1;\r\n          const d: string[] = [];\r\n    \r\n          d.push(duration % 60 + ' s');\r\n          if(duration >= 60) d.push((duration / 60 | 0) + ' min');\r\n          //if(duration >= 3600) d.push((duration / 3600 | 0) + ' h');\r\n\r\n          langPackKey = langPack[_];\r\n          args = [d.reverse().join(' ')];\r\n          break;\r\n        }\r\n\r\n        case 'messageActionPinMessage':\r\n        case 'messageActionContactSignUp':\r\n        case 'messageActionChatReturn':\r\n        case 'messageActionChatLeave':\r\n        case 'messageActionChatJoined':\r\n        case 'messageActionChatCreate':\r\n        case 'messageActionChatEditPhoto':\r\n        case 'messageActionChatDeletePhoto':\r\n        case 'messageActionChatEditVideo':\r\n        case 'messageActionChatJoinedByLink':\r\n        case 'messageActionChannelEditVideo':\r\n        case 'messageActionChannelDeletePhoto': {\r\n          langPackKey = langPack[_];\r\n          args = [getNameDivHTML(message.fromId, plain)];\r\n          break;\r\n        }\r\n\r\n        case 'messageActionChannelEditTitle':\r\n        case 'messageActionChatEditTitle': {\r\n          langPackKey = langPack[_];\r\n          \r\n          args = [];\r\n          if(action._ === 'messageActionChatEditTitle') {\r\n            args.push(getNameDivHTML(message.fromId, plain));\r\n          }\r\n\r\n          args.push(plain ? action.title : htmlToSpan(RichTextProcessor.wrapEmojiText(action.title)));\r\n          break;\r\n        }\r\n\r\n        case 'messageActionChatDeleteUser':\r\n        case 'messageActionChatAddUsers':\r\n        case 'messageActionChatAddUser': {\r\n          const users: number[] = (action as MessageAction.messageActionChatAddUser).users \r\n            || [(action as MessageAction.messageActionChatDeleteUser).user_id];\r\n\r\n          langPackKey = langPack[_];\r\n          args = [getNameDivHTML(message.fromId, plain)];\r\n\r\n          if(users.length > 1) {\r\n            if(plain) {\r\n              args.push(...users.map((userId: number) => (getNameDivHTML(userId, true) as string).trim()).join(', '));\r\n            } else {\r\n              const fragment = document.createElement('span');\r\n              fragment.append(\r\n                ...join(\r\n                  users.map((userId: number) => getNameDivHTML(userId, false)) as HTMLElement[],\r\n                  false\r\n                )\r\n              );\r\n              args.push(fragment);\r\n            }\r\n          } else {\r\n            args.push(getNameDivHTML(users[0], plain));\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        case 'messageActionBotAllowed': {\r\n          const anchorHTML = RichTextProcessor.wrapRichText(action.domain, {\r\n            entities: [{\r\n              _: 'messageEntityUrl',\r\n              length: action.domain.length,\r\n              offset: 0\r\n            }]\r\n          });\r\n\r\n          const node = htmlToSpan(anchorHTML);\r\n          \r\n          langPackKey = langPack[_];\r\n          args = [node];\r\n          break;\r\n        }\r\n\r\n        default:\r\n          langPackKey = (langPack[_] || `[${action._}]`) as any;\r\n          break;\r\n      }\r\n\r\n      if(!langPackKey) {\r\n        langPackKey = langPack[_];\r\n        if(langPackKey === undefined) {\r\n          langPackKey = '[' + _ + ']' as any;\r\n        }\r\n      }\r\n\r\n      if(plain) {\r\n        return I18n.format(langPackKey, true, args);\r\n      } else {\r\n        return _i18n(element, langPackKey, args);\r\n      }\r\n\r\n      //str = !langPackKey || langPackKey[0].toUpperCase() === langPackKey[0] ? langPackKey : getNameDivHTML(message.fromId) + langPackKey + (suffix ? ' ' : '');\r\n    }\r\n  }\r\n\r\n  public editPeerFolders(peerIds: number[], folderId: number) {\r\n    apiManager.invokeApi('folders.editPeerFolders', {\r\n      folder_peers: peerIds.map(peerId => {\r\n        return {\r\n          _: 'inputFolderPeer',\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          folder_id: folderId\r\n        };\r\n      })\r\n    }).then(updates => {\r\n      //this.log('editPeerFolders updates:', updates);\r\n      apiUpdatesManager.processUpdateMessage(updates); // WARNING! возможно тут нужно добавлять channelId, и вызывать апдейт для каждого канала отдельно\r\n    });\r\n  }\r\n\r\n  public toggleDialogPin(peerId: number, filterId?: number) {\r\n    if(filterId > 1) {\r\n      return this.filtersStorage.toggleDialogPin(peerId, filterId);\r\n    }\r\n\r\n    const dialog = this.getDialogOnly(peerId);\r\n    if(!dialog) return Promise.reject();\r\n\r\n    const pinned = dialog.pFlags?.pinned ? undefined : true;\r\n    return apiManager.invokeApi('messages.toggleDialogPin', {\r\n      peer: appPeersManager.getInputDialogPeerById(peerId),\r\n      pinned\r\n    }).then(bool => {\r\n      if(bool) {\r\n        const pFlags: Update.updateDialogPinned['pFlags'] = pinned ? {pinned} : {};\r\n        apiUpdatesManager.saveUpdate({\r\n          _: 'updateDialogPinned',\r\n          peer: appPeersManager.getDialogPeer(peerId),\r\n          folder_id: filterId,\r\n          pFlags\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public markDialogUnread(peerId: number, read?: true) {\r\n    const dialog = this.getDialogOnly(peerId);\r\n    if(!dialog) return Promise.reject();\r\n\r\n    const unread = read || dialog.pFlags?.unread_mark ? undefined : true;\r\n    return apiManager.invokeApi('messages.markDialogUnread', {\r\n      peer: appPeersManager.getInputDialogPeerById(peerId),\r\n      unread\r\n    }).then(bool => {\r\n      if(bool) {\r\n        const pFlags: Update.updateDialogUnreadMark['pFlags'] = unread ? {unread} : {};\r\n        this.onUpdateDialogUnreadMark({\r\n          _: 'updateDialogUnreadMark',\r\n          peer: appPeersManager.getDialogPeer(peerId),\r\n          pFlags\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public migrateChecks(migrateFrom: number, migrateTo: number) {\r\n    if(!this.migratedFromTo[migrateFrom] &&\r\n      !this.migratedToFrom[migrateTo] &&\r\n      appChatsManager.hasChat(-migrateTo)) {\r\n      const fromChat = appChatsManager.getChat(-migrateFrom);\r\n      if(fromChat &&\r\n        fromChat.migrated_to &&\r\n        fromChat.migrated_to.channel_id === -migrateTo) {\r\n          this.migratedFromTo[migrateFrom] = migrateTo;\r\n          this.migratedToFrom[migrateTo] = migrateFrom;\r\n\r\n        //setTimeout(() => {\r\n          rootScope.broadcast('dialog_migrate', {migrateFrom, migrateTo});\r\n\r\n          const dropped = this.dialogsStorage.dropDialog(migrateFrom);\r\n          if(dropped.length) {\r\n            rootScope.broadcast('dialog_drop', {peerId: migrateFrom, dialog: dropped[0]});\r\n          }\r\n        //}, 100);\r\n      }\r\n    }\r\n  }\r\n\r\n  private canMessageBeEdited(message: any, kind: 'text' | 'poll') {\r\n    if(message.pFlags.is_outgoing) {\r\n      return false;\r\n    }\r\n\r\n    const goodMedias = [\r\n      'messageMediaPhoto',\r\n      'messageMediaDocument',\r\n      'messageMediaWebPage'\r\n    ];\r\n\r\n    if(kind === 'poll') {\r\n      goodMedias.push('messageMediaPoll');\r\n    }\r\n\r\n    if(message._ !== 'message' ||\r\n        message.deleted ||\r\n        message.fwd_from ||\r\n        message.via_bot_id ||\r\n        message.media && goodMedias.indexOf(message.media._) === -1 ||\r\n        message.fromId && appUsersManager.isBot(message.fromId)) {\r\n      return false;\r\n    }\r\n    \r\n    if(message.media &&\r\n        message.media._ === 'messageMediaDocument' &&\r\n        (message.media.document.sticker || message.media.document.type === 'round')) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public canEditMessage(message: any, kind: 'text' | 'poll' = 'text') {\r\n    if(!message || !this.canMessageBeEdited(message, kind)) {\r\n      return false;\r\n    }\r\n\r\n    // * second rule for saved messages, because there is no 'out' flag\r\n    if(message.pFlags.out || this.getMessagePeer(message) === appUsersManager.getSelf().id) {\r\n      return true;\r\n    }\r\n\r\n    if((message.date < (tsNow(true) - (2 * 86400)) && message.media?._ !== 'messageMediaPoll') || !message.pFlags.out) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public canDeleteMessage(message: any) {\r\n    return message && (\r\n      message.peerId > 0 \r\n      || message.fromId === rootScope.myId \r\n      || appChatsManager.getChat(message.peerId)._ === 'chat' \r\n      || appChatsManager.hasRights(message.peerId, 'delete_messages')\r\n    ) && !message.pFlags.is_outgoing;\r\n  }\r\n\r\n  public mergeReplyKeyboard(historyStorage: HistoryStorage, message: any) {\r\n    // this.log('merge', message.mid, message.reply_markup, historyStorage.reply_markup)\r\n    if(!message.reply_markup &&\r\n      !message.pFlags?.out &&\r\n      !message.action) {\r\n      return false;\r\n    }\r\n    if(message.reply_markup &&\r\n      message.reply_markup._ === 'replyInlineMarkup') {\r\n      return false;\r\n    }\r\n    var messageReplyMarkup = message.reply_markup;\r\n    var lastReplyMarkup = historyStorage.reply_markup;\r\n    if(messageReplyMarkup) {\r\n      if(lastReplyMarkup && lastReplyMarkup.mid >= message.mid) {\r\n        return false;\r\n      }\r\n\r\n      if(messageReplyMarkup.pFlags.selective) {\r\n        return false;\r\n      }\r\n\r\n      if(historyStorage.maxOutId &&\r\n        message.mid < historyStorage.maxOutId &&\r\n        messageReplyMarkup.pFlags.single_use) {\r\n        messageReplyMarkup.pFlags.hidden = true;\r\n      }\r\n      messageReplyMarkup = Object.assign({\r\n        mid: message.mid\r\n      }, messageReplyMarkup);\r\n      if(messageReplyMarkup._ !== 'replyKeyboardHide') {\r\n        messageReplyMarkup.fromId = appPeersManager.getPeerId(message.from_id);\r\n      }\r\n      historyStorage.reply_markup = messageReplyMarkup;\r\n      // this.log('set', historyStorage.reply_markup)\r\n      return true;\r\n    }\r\n\r\n    if(message.pFlags.out) {\r\n      if(lastReplyMarkup) {\r\n        if(lastReplyMarkup.pFlags.single_use &&\r\n          !lastReplyMarkup.pFlags.hidden &&\r\n          (message.mid > lastReplyMarkup.mid || message.pFlags.is_outgoing) &&\r\n          message.message) {\r\n          lastReplyMarkup.pFlags.hidden = true;\r\n          // this.log('set', historyStorage.reply_markup)\r\n          return true;\r\n        }\r\n      } else if(!historyStorage.maxOutId ||\r\n        message.mid > historyStorage.maxOutId) {\r\n        historyStorage.maxOutId = message.mid;\r\n      }\r\n    }\r\n\r\n    if(message.action &&\r\n      message.action._ === 'messageActionChatDeleteUser' &&\r\n      (lastReplyMarkup\r\n        ? message.action.user_id === lastReplyMarkup.fromId\r\n        : appUsersManager.isBot(message.action.user_id)\r\n      )\r\n    ) {\r\n      historyStorage.reply_markup = {\r\n        _: 'replyKeyboardHide',\r\n        mid: message.mid,\r\n        pFlags: {}\r\n      };\r\n      // this.log('set', historyStorage.reply_markup)\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getSearchStorage(peerId: number, inputFilter: MyInputMessagesFilter) {\r\n    if(!this.searchesStorage[peerId]) this.searchesStorage[peerId] = {};\r\n    if(!this.searchesStorage[peerId][inputFilter]) this.searchesStorage[peerId][inputFilter] = {history: []};\r\n    return this.searchesStorage[peerId][inputFilter];\r\n  }\r\n\r\n  public getSearchCounters(peerId: number, filters: MessagesFilter[], canCache = true) {\r\n    const func = (canCache ? apiManager.invokeApiCacheable : apiManager.invokeApi).bind(apiManager);\r\n    return func('messages.getSearchCounters', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      filters\r\n    });\r\n  }\r\n\r\n  public getSearch({peerId, query, inputFilter, maxId, limit, nextRate, backLimit, threadId, folderId, minDate, maxDate}: {\r\n    peerId?: number,\r\n    maxId?: number,\r\n    limit?: number,\r\n    nextRate?: number,\r\n    backLimit?: number,\r\n    threadId?: number,\r\n    folderId?: number,\r\n    query?: string,\r\n    inputFilter?: {\r\n      _: MyInputMessagesFilter\r\n    },\r\n    minDate?: number,\r\n    maxDate?: number\r\n  }): Promise<{\r\n    count: number,\r\n    next_rate: number,\r\n    offset_id_offset: number,\r\n    history: MyMessage[]\r\n  }> {\r\n    if(!peerId) peerId = 0;\r\n    if(!query) query = '';\r\n    if(!inputFilter) inputFilter = {_: 'inputMessagesFilterEmpty'};\r\n    if(limit === undefined) limit = 20;\r\n    if(!nextRate) nextRate = 0;\r\n    if(!backLimit) backLimit = 0;\r\n\r\n    minDate = minDate ? minDate / 1000 | 0 : 0;\r\n    maxDate = maxDate ? maxDate / 1000 | 0 : 0;\r\n\r\n    const foundMsgs: Message.message[] = [];\r\n\r\n    //this.log('search', maxId);\r\n\r\n    if(backLimit) {\r\n      limit += backLimit;\r\n    }\r\n\r\n    //const beta = inputFilter._ === 'inputMessagesFilterPinned' && !backLimit;\r\n    const beta = false;\r\n\r\n    let storage: {\r\n      count?: number;\r\n      history: SlicedArray;\r\n    };\r\n\r\n    // * костыль для limit 1, если нужно и получить сообщение, и узнать количество сообщений\r\n    if(peerId && !backLimit && !maxId && !query && limit !== 1 && !threadId/*  && inputFilter._ !== 'inputMessagesFilterPinned' */) {\r\n      storage = beta ? \r\n        this.getSearchStorage(peerId, inputFilter._) as any : \r\n        this.getHistoryStorage(peerId);\r\n      let filtering = true;\r\n\r\n      const history = /* maxId ? storage.history.slice(storage.history.indexOf(maxId) + 1) :  */storage.history;\r\n\r\n      if(storage !== undefined && history.length) {\r\n        const neededContents: {\r\n          [messageMediaType: string]: boolean\r\n        } = {},\r\n          neededDocTypes: string[] = [], \r\n          excludeDocTypes: string[] = []/* ,\r\n          neededFlags: string[] = [] */;\r\n\r\n        switch(inputFilter._) {\r\n          case 'inputMessagesFilterPhotos':\r\n            neededContents['messageMediaPhoto'] = true;\r\n            break;\r\n\r\n          case 'inputMessagesFilterPhotoVideo':\r\n            neededContents['messageMediaPhoto'] = true;\r\n            neededContents['messageMediaDocument'] = true;\r\n            neededDocTypes.push('video');\r\n            break;\r\n\r\n          case 'inputMessagesFilterVideo':\r\n            neededContents['messageMediaDocument'] = true;\r\n            neededDocTypes.push('video');\r\n            break;\r\n\r\n          case 'inputMessagesFilterDocument':\r\n            neededContents['messageMediaDocument'] = true;\r\n            excludeDocTypes.push('video');\r\n            break;\r\n\r\n          case 'inputMessagesFilterVoice':\r\n            neededContents['messageMediaDocument'] = true;\r\n            neededDocTypes.push('voice');\r\n            break;\r\n\r\n          case 'inputMessagesFilterRoundVoice':\r\n            neededContents['messageMediaDocument'] = true;\r\n            neededDocTypes.push('round', 'voice');\r\n            break;\r\n\r\n          case 'inputMessagesFilterRoundVideo':\r\n            neededContents['messageMediaDocument'] = true;\r\n            neededDocTypes.push('round');\r\n            break;\r\n\r\n          case 'inputMessagesFilterMusic':\r\n            neededContents['messageMediaDocument'] = true;\r\n            neededDocTypes.push('audio');\r\n            break;\r\n\r\n          case 'inputMessagesFilterUrl':\r\n            neededContents['url'] = true;\r\n            break;\r\n\r\n          case 'inputMessagesFilterChatPhotos':\r\n            neededContents['avatar'] = true;\r\n            break;\r\n\r\n          /* case 'inputMessagesFilterPinned':\r\n            neededFlags.push('pinned');\r\n            break; */\r\n\r\n          /* case 'inputMessagesFilterMyMentions':\r\n            neededContents['mentioned'] = true;\r\n            break; */\r\n\r\n          default:\r\n            filtering = false;\r\n            break;\r\n            /* return Promise.resolve({\r\n              count: 0,\r\n              next_rate: 0,\r\n              history: [] as number[]\r\n            }); */\r\n        }\r\n\r\n        if(filtering) {\r\n          const storage = this.getMessagesStorage(peerId);\r\n          for(let i = 0, length = history.length; i < length; i++) {\r\n            const message = storage[history.slice[i]];\r\n\r\n            if(!message) continue;\r\n  \r\n            //|| (neededContents['mentioned'] && message.totalEntities.find((e: any) => e._ === 'messageEntityMention'));\r\n  \r\n            let found = false;\r\n            if(message.media && neededContents[message.media._] && !message.fwd_from) {\r\n              if(message.media._ === 'messageMediaDocument') {\r\n                if((neededDocTypes.length && !neededDocTypes.includes(message.media.document.type)) \r\n                  || excludeDocTypes.includes(message.media.document.type)) {\r\n                  continue;\r\n                }\r\n              }\r\n  \r\n              found = true;\r\n            } else if(neededContents['url'] && message.message) {\r\n              const goodEntities = ['messageEntityTextUrl', 'messageEntityUrl'];\r\n              if((message.totalEntities as MessageEntity[]).find(e => goodEntities.includes(e._)) || RichTextProcessor.matchUrl(message.message)) {\r\n                found = true;\r\n              }\r\n            } else if(neededContents['avatar'] && message.action && ['messageActionChannelEditPhoto', 'messageActionChatEditPhoto', 'messageActionChannelEditVideo', 'messageActionChatEditVideo'].includes(message.action._)) {\r\n              found = true;\r\n            }/*  else if(neededFlags.find(flag => message.pFlags[flag])) {\r\n              found = true;\r\n            } */\r\n  \r\n            if(found) {\r\n              foundMsgs.push(message);\r\n              if(foundMsgs.length >= limit) {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if(foundMsgs.length) {\r\n      if(foundMsgs.length < limit && (beta ? storage.count !== storage.history.length : true)) {\r\n        maxId = foundMsgs[foundMsgs.length - 1].mid;\r\n        limit = limit - foundMsgs.length;\r\n      } else {\r\n        return Promise.resolve({\r\n          count: beta ? storage.count : 0,\r\n          next_rate: 0,\r\n          offset_id_offset: 0,\r\n          history: foundMsgs\r\n        });\r\n      }\r\n    } else if(beta && storage?.count) {\r\n      return Promise.resolve({\r\n        count: storage.count,\r\n        next_rate: 0,\r\n        offset_id_offset: 0,\r\n        history: []\r\n      });\r\n    }\r\n\r\n    const canCache = false && (['inputMessagesFilterChatPhotos', 'inputMessagesFilterPinned'] as MyInputMessagesFilter[]).includes(inputFilter._);\r\n    const method = (canCache ? apiManager.invokeApiCacheable : apiManager.invokeApi).bind(apiManager);\r\n\r\n    let apiPromise: Promise<any>;\r\n    if(peerId && !nextRate && folderId === undefined/*  || !query */) {\r\n      apiPromise = method('messages.search', {\r\n        peer: appPeersManager.getInputPeerById(peerId),\r\n        q: query || '',\r\n        filter: inputFilter as any as MessagesFilter,\r\n        min_date: minDate,\r\n        max_date: maxDate,\r\n        limit,\r\n        offset_id: this.getServerMessageId(maxId) || 0,\r\n        add_offset: backLimit ? -backLimit : 0,\r\n        max_id: 0,\r\n        min_id: 0,\r\n        hash: 0,\r\n        top_msg_id: this.getServerMessageId(threadId) || 0\r\n      }, {\r\n        //timeout: APITIMEOUT,\r\n        noErrorBox: true\r\n      });\r\n    } else {\r\n      //var offsetDate = 0;\r\n      let offsetPeerId = 0;\r\n      let offsetId = 0;\r\n      let offsetMessage = maxId && this.getMessageByPeer(peerId, maxId);\r\n\r\n      if(offsetMessage && offsetMessage.date) {\r\n        //offsetDate = offsetMessage.date + serverTimeManager.serverTimeOffset;\r\n        offsetId = offsetMessage.id;\r\n        offsetPeerId = this.getMessagePeer(offsetMessage);\r\n      }\r\n\r\n      apiPromise = method('messages.searchGlobal', {\r\n        q: query,\r\n        filter: inputFilter as any as MessagesFilter,\r\n        min_date: minDate,\r\n        max_date: maxDate,\r\n        offset_rate: nextRate,\r\n        offset_peer: appPeersManager.getInputPeerById(offsetPeerId),\r\n        offset_id: offsetId,\r\n        limit,\r\n        folder_id: folderId\r\n      }, {\r\n        //timeout: APITIMEOUT,\r\n        noErrorBox: true\r\n      });\r\n    }\r\n\r\n    return apiPromise.then((searchResult: any) => {\r\n      appUsersManager.saveApiUsers(searchResult.users);\r\n      appChatsManager.saveApiChats(searchResult.chats);\r\n      this.saveMessages(searchResult.messages);\r\n\r\n      /* if(beta && storage && (!maxId || storage.history[storage.history.length - 1] === maxId)) {\r\n        const storage = this.getSearchStorage(peerId, inputFilter._);\r\n        const add = (searchResult.messages.map((m: any) => m.mid) as number[]).filter(mid => storage.history.indexOf(mid) === -1);\r\n        storage.history.push(...add);\r\n        storage.history.sort((a, b) => b - a);\r\n        storage.count = searchResult.count;\r\n      } */\r\n\r\n      if(DEBUG) {\r\n        this.log('getSearch result:', inputFilter, searchResult);\r\n      }\r\n\r\n      const foundCount: number = searchResult.count || (foundMsgs.length + searchResult.messages.length);\r\n\r\n      searchResult.messages.forEach((message: any) => {\r\n        const peerId = this.getMessagePeer(message);\r\n        if(peerId < 0) {\r\n          const chat = appChatsManager.getChat(-peerId);\r\n          if(chat.migrated_to) {\r\n            this.migrateChecks(peerId, -chat.migrated_to.channel_id);\r\n          }\r\n        }\r\n\r\n        foundMsgs.push(message);\r\n      });\r\n\r\n      return {\r\n        count: foundCount,\r\n        offset_id_offset: searchResult.offset_id_offset || 0,\r\n        next_rate: searchResult.next_rate,\r\n        history: foundMsgs\r\n      };\r\n    });\r\n  }\r\n\r\n  public subscribeRepliesThread(peerId: number, mid: number) {\r\n    const repliesKey = peerId + '_' + mid;\r\n    for(const threadKey in this.threadsToReplies) {\r\n      if(this.threadsToReplies[threadKey] === repliesKey) return;\r\n    }\r\n\r\n    this.getDiscussionMessage(peerId, mid);\r\n  }\r\n\r\n  public generateThreadServiceStartMessage(message: Message.message) {\r\n    const threadKey = message.peerId + '_' + message.mid;\r\n    if(this.threadsServiceMessagesIdsStorage[threadKey]) return;\r\n\r\n    const maxMessageId = this.getServerMessageId(Math.max(...this.getMidsByMessage(message)));\r\n    const serviceStartMessage: Message.messageService = {\r\n      _: 'messageService',\r\n      pFlags: {\r\n        is_single: true\r\n      } as any,\r\n      id: this.generateMessageId(maxMessageId, true),\r\n      date: message.date,\r\n      from_id: {_: 'peerUser', user_id: 0}/* message.from_id */,\r\n      peer_id: message.peer_id,\r\n      action: {\r\n        _: 'messageActionCustomAction',\r\n        message: 'Discussion started'\r\n      },\r\n      reply_to: this.generateReplyHeader(message.id)\r\n    };\r\n\r\n    this.saveMessages([serviceStartMessage], {isOutgoing: true});\r\n    this.threadsServiceMessagesIdsStorage[threadKey] = serviceStartMessage.mid;\r\n  } \r\n\r\n  public getDiscussionMessage(peerId: number, mid: number) {\r\n    return apiManager.invokeApiSingle('messages.getDiscussionMessage', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      msg_id: this.getServerMessageId(mid)\r\n    }).then(result => {\r\n      appChatsManager.saveApiChats(result.chats);\r\n      appUsersManager.saveApiUsers(result.users);\r\n      this.saveMessages(result.messages);\r\n\r\n      const message = this.filterMessages(result.messages[0], message => !!(message as Message.message).replies)[0] as Message.message;\r\n      const threadKey = message.peerId + '_' + message.mid;\r\n\r\n      this.generateThreadServiceStartMessage(message);\r\n      \r\n      const historyStorage = this.getHistoryStorage(message.peerId, message.mid);\r\n      result.max_id = historyStorage.maxId = this.generateMessageId(result.max_id) || 0;\r\n      result.read_inbox_max_id = historyStorage.readMaxId = this.generateMessageId(result.read_inbox_max_id ?? message.mid);\r\n      result.read_outbox_max_id = historyStorage.readOutboxMaxId = this.generateMessageId(result.read_outbox_max_id) || 0;\r\n\r\n      this.threadsToReplies[threadKey] = peerId + '_' + mid;\r\n\r\n      return message;\r\n    });\r\n  }\r\n\r\n  private handleNewMessage(peerId: number, mid: number) {\r\n    if(this.newMessagesToHandle[peerId] === undefined) {\r\n      this.newMessagesToHandle[peerId] = new Set();\r\n    }\r\n\r\n    this.newMessagesToHandle[peerId].add(mid);\r\n    if(!this.newMessagesHandleTimeout) {\r\n      this.newMessagesHandleTimeout = window.setTimeout(this.handleNewMessages, 0);\r\n    }\r\n  }\r\n\r\n  handleNewMessages = () => {\r\n    clearTimeout(this.newMessagesHandleTimeout);\r\n    this.newMessagesHandleTimeout = 0;\r\n\r\n    rootScope.broadcast('history_multiappend', this.newMessagesToHandle);\r\n    this.newMessagesToHandle = {};\r\n  };\r\n\r\n  handleNewDialogs = () => {\r\n    let newMaxSeenId = 0;\r\n    const obj = this.newDialogsToHandle;\r\n    for(const peerId in obj) {\r\n      const dialog = obj[peerId];\r\n      if(!dialog) {\r\n        this.reloadConversation(+peerId);\r\n        delete obj[peerId];\r\n      } else {\r\n        this.dialogsStorage.pushDialog(dialog);\r\n        if(!appPeersManager.isChannel(+peerId)) {\r\n          newMaxSeenId = Math.max(newMaxSeenId, dialog.top_message || 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    //this.log('after order:', this.dialogsStorage[0].map(d => d.peerId));\r\n\r\n    if(newMaxSeenId !== 0) {\r\n      this.incrementMaxSeenId(newMaxSeenId);\r\n    }\r\n\r\n    rootScope.broadcast('dialogs_multiupdate', obj);\r\n    this.newDialogsToHandle = {};\r\n  };\r\n\r\n  public scheduleHandleNewDialogs(peerId?: number, dialog?: Dialog) {\r\n    if(peerId !== undefined) {\r\n      this.newDialogsToHandle[peerId] = dialog;\r\n    }\r\n\r\n    if(this.newDialogsHandlePromise) return this.newDialogsHandlePromise;\r\n    return this.newDialogsHandlePromise = new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        this.newDialogsHandlePromise = undefined;\r\n        this.handleNewDialogs();\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  public deleteMessages(peerId: number, mids: number[], revoke?: true) {\r\n    let promise: Promise<any>;\r\n\r\n    const localMessageIds = mids.map(mid => this.getServerMessageId(mid));\r\n\r\n    if(peerId < 0 && appPeersManager.isChannel(peerId)) {\r\n      const channelId = -peerId;\r\n      const channel = appChatsManager.getChat(channelId);\r\n      if(!channel.pFlags.creator && !(channel.pFlags.editor && channel.pFlags.megagroup)) {\r\n        const goodMsgIds: number[] = [];\r\n        if(channel.pFlags.editor || channel.pFlags.megagroup) {\r\n          mids.forEach((msgId, i) => {\r\n            const message = this.getMessageByPeer(peerId, mids[i]);\r\n            if(message.pFlags.out) {\r\n              goodMsgIds.push(msgId);\r\n            }\r\n          });\r\n        }\r\n\r\n        if(!goodMsgIds.length) {\r\n          return;\r\n        }\r\n\r\n        mids = goodMsgIds;\r\n      }\r\n\r\n      promise = apiManager.invokeApi('channels.deleteMessages', {\r\n        channel: appChatsManager.getChannelInput(channelId),\r\n        id: localMessageIds\r\n      }).then((affectedMessages) => {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateDeleteChannelMessages',\r\n            channel_id: channelId,\r\n            messages: mids,\r\n            pts: affectedMessages.pts,\r\n            pts_count: affectedMessages.pts_count\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.deleteMessages', {\r\n        revoke,\r\n        id: localMessageIds\r\n      }).then((affectedMessages) => {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateDeleteMessages',\r\n            messages: mids,\r\n            pts: affectedMessages.pts,\r\n            pts_count: affectedMessages.pts_count\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  // TODO: cancel notification by peer when this function is being called\r\n  public readHistory(peerId: number, maxId = 0, threadId?: number, force = false) {\r\n    // return Promise.resolve();\r\n    // console.trace('start read')\r\n    this.log('readHistory:', peerId, maxId, threadId);\r\n    if(!this.getReadMaxIdIfUnread(peerId, threadId) && !force) {\r\n      this.log('readHistory: isn\\'t unread');\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n\r\n    if(historyStorage.triedToReadMaxId >= maxId) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    let apiPromise: Promise<any>;\r\n    if(threadId) {\r\n      if(!historyStorage.readPromise) {\r\n        apiPromise = apiManager.invokeApi('messages.readDiscussion', {\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          msg_id: this.getServerMessageId(threadId),\r\n          read_max_id: this.getServerMessageId(maxId)\r\n        });\r\n      }\r\n\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updateReadChannelDiscussionInbox',\r\n          channel_id: -peerId,\r\n          top_msg_id: threadId,\r\n          read_max_id: maxId\r\n        } as Update.updateReadChannelDiscussionInbox\r\n      });\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      if(!historyStorage.readPromise) {\r\n        apiPromise = apiManager.invokeApi('channels.readHistory', {\r\n          channel: appChatsManager.getChannelInput(-peerId),\r\n          max_id: this.getServerMessageId(maxId)\r\n        });\r\n      }\r\n\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updateReadChannelInbox',\r\n          max_id: maxId,\r\n          channel_id: -peerId\r\n        } as Update.updateReadChannelInbox\r\n      });\r\n    } else {\r\n      if(!historyStorage.readPromise) {\r\n        apiPromise = apiManager.invokeApi('messages.readHistory', {\r\n          peer: appPeersManager.getInputPeerById(peerId),\r\n          max_id: this.getServerMessageId(maxId)\r\n        }).then((affectedMessages) => {\r\n          apiUpdatesManager.processUpdateMessage({\r\n            _: 'updateShort',\r\n            update: {\r\n              _: 'updatePts',\r\n              pts: affectedMessages.pts,\r\n              pts_count: affectedMessages.pts_count\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updateReadHistoryInbox',\r\n          max_id: maxId,\r\n          peer: appPeersManager.getOutputPeer(peerId)\r\n        } as Update.updateReadHistoryInbox\r\n      });\r\n    }\r\n\r\n    appNotificationsManager.soundReset(appPeersManager.getPeerString(peerId));\r\n\r\n    if(historyStorage.readPromise) {\r\n      return historyStorage.readPromise;\r\n    }\r\n\r\n    historyStorage.triedToReadMaxId = maxId;\r\n\r\n    apiPromise.finally(() => {\r\n      delete historyStorage.readPromise;\r\n\r\n      this.log('readHistory: promise finally', maxId, historyStorage.readMaxId);\r\n\r\n      if(historyStorage.readMaxId > maxId) {\r\n        this.readHistory(peerId, historyStorage.readMaxId, threadId, true);\r\n      }\r\n    });\r\n\r\n    return historyStorage.readPromise = apiPromise;\r\n  }\r\n\r\n  public readAllHistory(peerId: number, threadId?: number, force = false) {\r\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n    if(historyStorage.maxId) {\r\n      this.readHistory(peerId, historyStorage.maxId, threadId, force); // lol\r\n    }\r\n  }\r\n\r\n  public readMessages(peerId: number, msgIds: number[]) {\r\n    msgIds = msgIds.map(mid => this.getServerMessageId(mid));\r\n    if(peerId < 0 && appPeersManager.isChannel(peerId)) {\r\n      const channelId = -peerId;\r\n      apiManager.invokeApi('channels.readMessageContents', {\r\n        channel: appChatsManager.getChannelInput(channelId),\r\n        id: msgIds\r\n      }).then(() => {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateChannelReadMessagesContents',\r\n            channel_id: channelId,\r\n            messages: msgIds\r\n          } as Update.updateChannelReadMessagesContents\r\n        });\r\n      });\r\n    } else {\r\n      apiManager.invokeApi('messages.readMessageContents', {\r\n        id: msgIds\r\n      }).then((affectedMessages) => {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateReadMessagesContents',\r\n            messages: msgIds,\r\n            pts: affectedMessages.pts,\r\n            pts_count: affectedMessages.pts_count\r\n          } as Update.updateReadMessagesContents\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  public getHistoryStorage(peerId: number, threadId?: number) {\r\n    if(threadId) {\r\n      //threadId = this.getLocalMessageId(threadId);\r\n      if(!this.threadsStorage[peerId]) this.threadsStorage[peerId] = {};\r\n      return this.threadsStorage[peerId][threadId] ?? (this.threadsStorage[peerId][threadId] = {count: null, history: new SlicedArray()});\r\n    }\r\n\r\n    return this.historiesStorage[peerId] ?? (this.historiesStorage[peerId] = {count: null, history: new SlicedArray()});\r\n  }\r\n\r\n  private handleNotifications = () => {\r\n    window.clearTimeout(this.notificationsHandlePromise);\r\n    this.notificationsHandlePromise = 0;\r\n\r\n    //var timeout = $rootScope.idle.isIDLE && StatusManager.isOtherDeviceActive() ? 30000 : 1000;\r\n    //const timeout = 1000;\r\n\r\n    for(const _peerId in this.notificationsToHandle) {\r\n      const peerId = +_peerId;\r\n\r\n      if(rootScope.peerId === peerId && !rootScope.idle.isIDLE) {\r\n        continue;\r\n      }\r\n\r\n      const notifyPeerToHandle = this.notificationsToHandle[peerId];\r\n\r\n      Promise.all([\r\n        appNotificationsManager.getNotifyPeerTypeSettings(),\r\n        appNotificationsManager.getNotifySettings(appPeersManager.getInputNotifyPeerById(peerId, true))\r\n      ]).then(([_, peerTypeNotifySettings]) => {\r\n        const topMessage = notifyPeerToHandle.topMessage;\r\n        if(appNotificationsManager.isPeerLocalMuted(peerId, true) || !topMessage.pFlags.unread) {\r\n          return;\r\n        }\r\n\r\n        //setTimeout(() => {\r\n          if(topMessage.pFlags.unread) {\r\n            this.notifyAboutMessage(topMessage, {\r\n              fwdCount: notifyPeerToHandle.fwdCount,\r\n              peerTypeNotifySettings\r\n            });\r\n          }\r\n        //}, timeout);\r\n      });\r\n    }\r\n\r\n    this.notificationsToHandle = {};\r\n  };\r\n\r\n  private onUpdateMessageId = (update: Update.updateMessageID) => {\r\n    const randomId = update.random_id;\r\n    const pendingData = this.pendingByRandomId[randomId];\r\n    //this.log('AMM updateMessageID:', update, pendingData);\r\n    if(pendingData) {\r\n      const {peerId, tempId, threadId, storage} = pendingData;\r\n      //const mid = update.id;\r\n      const mid = this.generateMessageId(update.id);\r\n      const message = this.getMessageFromStorage(storage, mid);\r\n      if(!message.deleted) {\r\n        [this.getHistoryStorage(peerId), threadId ? this.getHistoryStorage(peerId, threadId) : undefined]\r\n        .filter(Boolean)\r\n        .forEach(storage => {\r\n          storage.history.delete(tempId);\r\n        });\r\n\r\n        this.finalizePendingMessageCallbacks(storage, tempId, mid);\r\n      } else {\r\n        this.pendingByMessageId[mid] = randomId;\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateNewMessage = (update: Update.updateNewDiscussionMessage | Update.updateNewMessage | Update.updateNewChannelMessage) => {\r\n    const message = update.message as MyMessage;\r\n    const peerId = this.getMessagePeer(message);\r\n    const storage = this.getMessagesStorage(peerId);\r\n    const dialog = this.getDialogOnly(peerId);\r\n\r\n    // * local update\r\n    const isLocalThreadUpdate = update._ === 'updateNewDiscussionMessage';\r\n\r\n    // * temporary save the message for info (peerId, reply mids...)\r\n    this.saveMessages([message], {storage: {}});\r\n\r\n    const threadKey = this.getThreadKey(message);\r\n    const threadId = threadKey ? +threadKey.split('_')[1] : undefined;\r\n    if(threadId && !isLocalThreadUpdate && this.threadsStorage[peerId] && this.threadsStorage[peerId][threadId]) {\r\n      const update = {\r\n        _: 'updateNewDiscussionMessage',\r\n        message\r\n      } as Update.updateNewDiscussionMessage;\r\n\r\n      this.onUpdateNewMessage(update);\r\n    }\r\n\r\n    if(!dialog && !isLocalThreadUpdate) {\r\n      let good = true;\r\n      if(peerId < 0) {\r\n        good = appChatsManager.isInChat(-peerId);\r\n      }\r\n\r\n      if(good) {\r\n        const set = this.newUpdatesAfterReloadToHandle[peerId] ?? (this.newUpdatesAfterReloadToHandle[peerId] = new Set());\r\n        if(set.has(update)) {\r\n          this.log.error('here we go again', peerId);\r\n          return;\r\n        }\r\n\r\n        this.scheduleHandleNewDialogs(peerId);\r\n        set.add(update);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    /* if(update._ === 'updateNewChannelMessage') {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      if(chat.pFlags && (chat.pFlags.left || chat.pFlags.kicked)) {\r\n        return;\r\n      }\r\n    } */\r\n\r\n    this.saveMessages([message], {storage});\r\n    // this.log.warn(dT(), 'message unread', message.mid, message.pFlags.unread)\r\n\r\n    /* if((message as Message.message).grouped_id) {\r\n      this.log('updateNewMessage', message);\r\n    } */\r\n\r\n    const pendingMessage = this.checkPendingMessage(message);\r\n    const historyStorage = this.getHistoryStorage(peerId, isLocalThreadUpdate ? threadId : undefined);\r\n\r\n    if(!isLocalThreadUpdate) {\r\n      this.updateMessageRepliesIfNeeded(message);\r\n    }\r\n\r\n    if(historyStorage.history.findSlice(message.mid)) {\r\n      return false;\r\n    }\r\n\r\n    // * catch situation with disconnect. if message's id is lower than we already have (in bottom end slice), will sort it\r\n    const firstSlice = historyStorage.history.first;\r\n    if(firstSlice.isEnd(SliceEnd.Bottom)) {\r\n      let i = 0;\r\n      for(const length = firstSlice.length; i < length; ++i) {\r\n        if(message.mid > firstSlice[i]) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      firstSlice.splice(i, 0, message.mid);\r\n    } else {\r\n      historyStorage.history.unshift(message.mid);\r\n    }\r\n\r\n    if(historyStorage.count !== null) {\r\n      historyStorage.count++;\r\n    }\r\n\r\n    if(this.mergeReplyKeyboard(historyStorage, message)) {\r\n      rootScope.broadcast('history_reply_markup', {peerId});\r\n    }\r\n\r\n    if(message.fromId > 0 && !message.pFlags.out && message.from_id) {\r\n      appUsersManager.forceUserOnline(message.fromId, message.date);\r\n    }\r\n\r\n    if(!pendingMessage) {\r\n      this.handleNewMessage(peerId, message.mid);\r\n    }\r\n\r\n    if(isLocalThreadUpdate) {\r\n      return;\r\n    }\r\n    \r\n    const inboxUnread = !message.pFlags.out && message.pFlags.unread;\r\n    if(dialog) {\r\n      this.setDialogTopMessage(message, dialog);\r\n      if(inboxUnread) {\r\n        dialog.unread_count++;\r\n      }\r\n    }\r\n\r\n    if(inboxUnread/*  && ($rootScope.selectedPeerID != peerID || $rootScope.idle.isIDLE) */) {\r\n      const notifyPeer = message.peerId;\r\n      let notifyPeerToHandle = this.notificationsToHandle[notifyPeer];\r\n      if(notifyPeerToHandle === undefined) {\r\n        notifyPeerToHandle = this.notificationsToHandle[notifyPeer] = {\r\n          fwdCount: 0,\r\n          fromId: 0\r\n        };\r\n      }\r\n\r\n      if(notifyPeerToHandle.fromId !== message.fromId) {\r\n        notifyPeerToHandle.fromId = message.fromId;\r\n        notifyPeerToHandle.fwdCount = 0;\r\n      }\r\n\r\n      if((message as Message.message).fwd_from) {\r\n        notifyPeerToHandle.fwdCount++;\r\n      }\r\n\r\n      notifyPeerToHandle.topMessage = message;\r\n\r\n      if(!this.notificationsHandlePromise) {\r\n        this.notificationsHandlePromise = window.setTimeout(this.handleNotifications, 0);\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateDialogUnreadMark = (update: Update.updateDialogUnreadMark) => {\r\n    //this.log('updateDialogUnreadMark', update);\r\n    const peerId = appPeersManager.getPeerId((update.peer as DialogPeer.dialogPeer).peer);\r\n    const dialog = this.getDialogOnly(peerId);\r\n\r\n    if(!dialog) {\r\n      this.scheduleHandleNewDialogs(peerId);\r\n    } else {\r\n      if(!update.pFlags.unread) {\r\n        delete dialog.pFlags.unread_mark;\r\n      } else {\r\n        dialog.pFlags.unread_mark = true;\r\n      }\r\n\r\n      rootScope.broadcast('dialogs_multiupdate', {[peerId]: dialog});\r\n      this.dialogsStorage.setDialogToState(dialog);\r\n    }\r\n  };\r\n\r\n  private onUpdateEditMessage = (update: Update.updateEditMessage | Update.updateEditChannelMessage) => {\r\n    const message = update.message as MyMessage;\r\n    const peerId = this.getMessagePeer(message);\r\n    const mid = this.generateMessageId(message.id);\r\n    const storage = this.getMessagesStorage(peerId);\r\n    if(storage[mid] === undefined) {\r\n      return;\r\n    }\r\n\r\n    // console.trace(dT(), 'edit message', message)\r\n    \r\n    const oldMessage = this.getMessageFromStorage(storage, mid);\r\n    this.saveMessages([message], {storage});\r\n    const newMessage = this.getMessageFromStorage(storage, mid);\r\n\r\n    this.handleEditedMessage(oldMessage, newMessage);\r\n\r\n    const dialog = this.getDialogOnly(peerId);\r\n    const isTopMessage = dialog && dialog.top_message === mid;\r\n    // @ts-ignore\r\n    if(message.clear_history) { // that's will never happen\r\n      if(isTopMessage) {\r\n        rootScope.broadcast('dialog_flush', {peerId});\r\n      }\r\n    } else {\r\n      rootScope.broadcast('message_edit', {\r\n        storage,\r\n        peerId,\r\n        mid\r\n      });\r\n\r\n      if(isTopMessage || (message as Message.message).grouped_id) {\r\n        const updatedDialogs: {[peerId: number]: Dialog} = {};\r\n        updatedDialogs[peerId] = dialog;\r\n        rootScope.broadcast('dialogs_multiupdate', updatedDialogs);\r\n        this.dialogsStorage.setDialogToState(dialog);\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateReadHistory = (update: Update.updateReadChannelDiscussionInbox | Update.updateReadChannelDiscussionOutbox \r\n    | Update.updateReadHistoryInbox | Update.updateReadHistoryOutbox \r\n    | Update.updateReadChannelInbox | Update.updateReadChannelOutbox) => {\r\n    const channelId = (update as Update.updateReadChannelInbox).channel_id;\r\n    const maxId = this.generateMessageId((update as Update.updateReadChannelInbox).max_id || (update as Update.updateReadChannelDiscussionInbox).read_max_id);\r\n    const threadId = this.generateMessageId((update as Update.updateReadChannelDiscussionInbox).top_msg_id);\r\n    const peerId = channelId ? -channelId : appPeersManager.getPeerId((update as Update.updateReadHistoryInbox).peer);\r\n\r\n    const isOut = update._ === 'updateReadHistoryOutbox' || update._ === 'updateReadChannelOutbox' || update._ === 'updateReadChannelDiscussionOutbox' ? true : undefined;\r\n\r\n    const storage = this.getMessagesStorage(peerId);\r\n    const history = getObjectKeysAndSort(storage, 'desc');\r\n    const foundDialog = this.getDialogOnly(peerId);\r\n    const stillUnreadCount = (update as Update.updateReadChannelInbox).still_unread_count;\r\n    let newUnreadCount = 0;\r\n    let foundAffected = false;\r\n\r\n    //this.log.warn(dT(), 'read', peerId, isOut ? 'out' : 'in', maxId)\r\n\r\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n\r\n    if(peerId > 0 && isOut) {\r\n      appUsersManager.forceUserOnline(peerId);\r\n    }\r\n\r\n    if(threadId) {\r\n      const repliesKey = this.threadsToReplies[peerId + '_' + threadId];\r\n      if(repliesKey) {\r\n        const [peerId, mid] = repliesKey.split('_').map(n => +n);\r\n        this.updateMessage(peerId, mid, 'replies_updated');\r\n      }\r\n    }\r\n\r\n    for(let i = 0, length = history.length; i < length; i++) {\r\n      const messageId = history[i];\r\n      if(messageId > maxId) {\r\n        continue;\r\n      }\r\n      \r\n      const message = storage[messageId];\r\n\r\n      if(message.pFlags.out !== isOut) {\r\n        continue;\r\n      }\r\n\r\n      if(!message.pFlags.unread) {\r\n        break;\r\n      }\r\n\r\n      if(threadId) {\r\n        const replyTo = message.reply_to as MessageReplyHeader;\r\n        if(!replyTo || (replyTo.reply_to_top_id || replyTo.reply_to_msg_id) !== threadId) {\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      // this.log.warn('read', messageId, message.pFlags.unread, message)\r\n      if(message.pFlags.unread) {\r\n        delete message.pFlags.unread;\r\n        if(!foundAffected) {\r\n          foundAffected = true;\r\n        }\r\n\r\n        if(!message.pFlags.out && !threadId && foundDialog && stillUnreadCount === undefined) {\r\n          newUnreadCount = --foundDialog.unread_count;\r\n        }\r\n        \r\n        appNotificationsManager.cancel('msg' + messageId);\r\n      }\r\n    }\r\n\r\n    if(isOut) historyStorage.readOutboxMaxId = maxId;\r\n    else historyStorage.readMaxId = maxId;\r\n\r\n    if(!threadId && foundDialog) {\r\n      if(isOut) foundDialog.read_outbox_max_id = maxId;\r\n      else foundDialog.read_inbox_max_id = maxId;\r\n\r\n      if(!isOut) {\r\n        if(newUnreadCount < 0 || !this.getReadMaxIdIfUnread(peerId)) {\r\n          foundDialog.unread_count = 0;\r\n        } else if(newUnreadCount && foundDialog.top_message > maxId) {\r\n          foundDialog.unread_count = newUnreadCount;\r\n        }\r\n      }\r\n      \r\n      rootScope.broadcast('dialog_unread', {peerId});\r\n      this.dialogsStorage.setDialogToState(foundDialog);\r\n    }\r\n\r\n    if(foundAffected) {\r\n      rootScope.broadcast('messages_read');\r\n    }\r\n\r\n    if(!threadId && channelId) {\r\n      const threadKeyPart = peerId + '_';\r\n      for(const threadKey in this.threadsToReplies) {\r\n        if(threadKey.indexOf(threadKeyPart) === 0) {\r\n          const [peerId, mid] = this.threadsToReplies[threadKey].split('_').map(n => +n);\r\n          rootScope.broadcast('replies_updated', this.getMessageByPeer(peerId, mid));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateReadMessagesContents = (update: Update.updateChannelReadMessagesContents | Update.updateReadMessagesContents) => {\r\n    const channelId = (update as Update.updateChannelReadMessagesContents).channel_id;\r\n    const mids = (update as Update.updateReadMessagesContents).messages.map(id => this.generateMessageId(id));\r\n    const peerId = channelId ? -channelId : this.getMessageById(mids[0]).peerId;\r\n    for(const mid of mids) {\r\n      const message = this.getMessageByPeer(peerId, mid);\r\n      if(!message.deleted) {\r\n        delete message.pFlags.media_unread;\r\n        this.setDialogToStateIfMessageIsTop(message);\r\n      }\r\n    }\r\n\r\n    rootScope.broadcast('messages_media_read', {peerId, mids});\r\n  };\r\n\r\n  private onUpdateChannelAvailableMessages = (update: Update.updateChannelAvailableMessages) => {\r\n    const channelId: number = update.channel_id;\r\n    const messages: number[] = [];\r\n    const peerId: number = -channelId;\r\n    const history = this.getHistoryStorage(peerId).history.slice;\r\n    if(history.length) {\r\n      history.forEach((msgId: number) => {\r\n        if(!update.available_min_id || msgId <= update.available_min_id) {\r\n          messages.push(msgId);\r\n        }\r\n      });\r\n    }\r\n\r\n    (update as any as Update.updateDeleteChannelMessages).messages = messages;\r\n    this.onUpdateDeleteMessages(update as any as Update.updateDeleteChannelMessages);\r\n  };\r\n\r\n  private onUpdateDeleteMessages = (update: Update.updateDeleteMessages | Update.updateDeleteChannelMessages) => {\r\n    const channelId: number = (update as Update.updateDeleteChannelMessages).channel_id;\r\n    //const messages = (update as any as Update.updateDeleteChannelMessages).messages;\r\n    const messages = (update as any as Update.updateDeleteChannelMessages).messages.map(id => this.generateMessageId(id));\r\n    const peerId: number = channelId ? -channelId : this.getMessageById(messages[0]).peerId;\r\n    \r\n    if(!peerId) {\r\n      return;\r\n    }\r\n\r\n    apiManager.clearCache('messages.getSearchCounters', (params) => {\r\n      return appPeersManager.getPeerId(params.peer) === peerId;\r\n    });\r\n\r\n    const threadKeys: Set<string> = new Set();\r\n    for(const mid of messages) {\r\n      const message = this.getMessageByPeer(peerId, mid);\r\n      const threadKey = this.getThreadKey(message);\r\n      if(threadKey && this.threadsStorage[peerId] && this.threadsStorage[peerId][+threadKey.split('_')[1]]) {\r\n        threadKeys.add(threadKey);\r\n      }\r\n    }\r\n    \r\n    const historyUpdated = this.handleDeletedMessages(peerId, this.getMessagesStorage(peerId), messages);\r\n\r\n    const threadsStorages = Array.from(threadKeys).map(threadKey => {\r\n      const splitted = threadKey.split('_');\r\n      return this.getHistoryStorage(+splitted[0], +splitted[1]);\r\n    });\r\n\r\n    [this.getHistoryStorage(peerId)].concat(threadsStorages).forEach(historyStorage => {\r\n      for(const mid in historyUpdated.msgs) {\r\n        historyStorage.history.delete(+mid);\r\n      }\r\n      if(historyUpdated.count &&\r\n        historyStorage.count !== null &&\r\n        historyStorage.count > 0) {\r\n        historyStorage.count -= historyUpdated.count;\r\n        if(historyStorage.count < 0) {\r\n          historyStorage.count = 0;\r\n        }\r\n      }\r\n    });\r\n\r\n    rootScope.broadcast('history_delete', {peerId, msgs: historyUpdated.msgs});\r\n\r\n    const foundDialog = this.getDialogOnly(peerId);\r\n    if(foundDialog) {\r\n      if(historyUpdated.unread) {\r\n        foundDialog.unread_count -= historyUpdated.unread;\r\n\r\n        rootScope.broadcast('dialog_unread', {peerId});\r\n      }\r\n\r\n      if(historyUpdated.msgs[foundDialog.top_message]) {\r\n        this.reloadConversation(peerId);\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateChannel = (update: Update.updateChannel) => {\r\n    const channelId: number = update.channel_id;\r\n    const peerId = -channelId;\r\n    const channel: Chat.channel = appChatsManager.getChat(channelId);\r\n\r\n    const needDialog = appChatsManager.isInChat(channelId);\r\n    \r\n    const canViewHistory = !!channel.username || !channel.pFlags.left;\r\n    const hasHistory = this.historiesStorage[peerId] !== undefined;\r\n    \r\n    if(canViewHistory !== hasHistory) {\r\n      delete this.historiesStorage[peerId];\r\n      rootScope.broadcast('history_forbidden', peerId);\r\n    }\r\n    \r\n    const dialog = this.getDialogOnly(peerId);\r\n    if(!!dialog !== needDialog) {\r\n      if(needDialog) {\r\n        this.reloadConversation(-channelId);\r\n      } else {\r\n        if(dialog) {\r\n          this.dialogsStorage.dropDialog(peerId);\r\n          rootScope.broadcast('dialog_drop', {peerId, dialog});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateChannelReload = (update: any) => {\r\n    // @ts-ignore\r\n    const channelId: number = update.channel_id;\r\n    const peerId = -channelId;\r\n\r\n    this.dialogsStorage.dropDialog(peerId);\r\n\r\n    delete this.historiesStorage[peerId];\r\n    this.reloadConversation(-channelId).then(() => {\r\n      rootScope.broadcast('history_reload', peerId);\r\n    });\r\n  };\r\n  \r\n  private onUpdateChannelMessageViews = (update: Update.updateChannelMessageViews) => {\r\n    const views = update.views;\r\n    //const mid = update.id;\r\n    const mid = this.generateMessageId(update.id);\r\n    const message = this.getMessageByPeer(-update.channel_id, mid);\r\n    if(!message.deleted && message.views && message.views < views) {\r\n      message.views = views;\r\n      rootScope.broadcast('message_views', {mid, views});\r\n    }\r\n  };\r\n\r\n  private onUpdateServiceNotification = (update: Update.updateServiceNotification) => {\r\n    //this.log('updateServiceNotification', update);\r\n    const fromId = 777000;\r\n    const peerId = fromId;\r\n    const messageId = this.generateTempMessageId(peerId);\r\n    const message: any = {\r\n      _: 'message',\r\n      id: messageId,\r\n      from_id: appPeersManager.getOutputPeer(fromId),\r\n      peer_id: appPeersManager.getOutputPeer(peerId),\r\n      pFlags: {unread: true},\r\n      date: (update.inbox_date || tsNow(true)) + serverTimeManager.serverTimeOffset,\r\n      message: update.message,\r\n      media: update.media,\r\n      entities: update.entities\r\n    };\r\n    if(!appUsersManager.hasUser(fromId)) {\r\n      appUsersManager.saveApiUsers([{\r\n        _: 'user',\r\n        id: fromId,\r\n        pFlags: {verified: true},\r\n        access_hash: 0,\r\n        first_name: 'Telegram',\r\n        phone: '42777'\r\n      }]);\r\n    }\r\n    this.saveMessages([message], {isOutgoing: true});\r\n\r\n    if(update.inbox_date) {\r\n      this.pendingTopMsgs[peerId] = messageId;\r\n      this.onUpdateNewMessage({\r\n        _: 'updateNewMessage',\r\n        message\r\n      } as any);\r\n    }\r\n  };\r\n\r\n  private onUpdatePinnedMessages = (update: Update.updatePinnedMessages | Update.updatePinnedChannelMessages) => {\r\n    const channelId = update._ === 'updatePinnedChannelMessages' ? update.channel_id : undefined;\r\n    const peerId = channelId ? -channelId : appPeersManager.getPeerId((update as Update.updatePinnedMessages).peer);\r\n\r\n    /* const storage = this.getSearchStorage(peerId, 'inputMessagesFilterPinned');\r\n    if(storage.count !== storage.history.length) {\r\n      if(storage.count !== undefined) {\r\n        delete this.searchesStorage[peerId]['inputMessagesFilterPinned'];  \r\n      }\r\n\r\n      rootScope.broadcast('peer_pinned_messages', peerId);\r\n      break;\r\n    } */\r\n\r\n    const messages = update.messages.map(id => this.generateMessageId(id)); \r\n\r\n    const storage = this.getMessagesStorage(peerId);\r\n    const missingMessages = messages.filter(mid => !storage[mid]);\r\n    const getMissingPromise = missingMessages.length ? Promise.all(missingMessages.map(mid => this.wrapSingleMessage(peerId, mid))) : Promise.resolve();\r\n    getMissingPromise.finally(() => {\r\n      const werePinned = update.pFlags?.pinned;\r\n      if(werePinned) {\r\n        for(const mid of messages) {\r\n          //storage.history.push(mid);\r\n          const message = storage[mid];\r\n          message.pFlags.pinned = true;\r\n        }\r\n\r\n        /* if(this.pinnedMessages[peerId]?.maxId) {\r\n          const maxMid = Math.max(...messages);\r\n          this.pinnedMessages\r\n        } */\r\n\r\n        //storage.history.sort((a, b) => b - a);\r\n      } else {\r\n        for(const mid of messages) {\r\n          //storage.history.findAndSplice(_mid => _mid === mid);\r\n          const message = storage[mid];\r\n          delete message.pFlags.pinned;\r\n        }\r\n      }\r\n\r\n      /* const info = this.pinnedMessages[peerId];\r\n      if(info) {\r\n        info.count += messages.length * (werePinned ? 1 : -1);\r\n      } */\r\n  \r\n      delete this.pinnedMessages[peerId];\r\n      appStateManager.getState().then(state => {\r\n        delete state.hiddenPinnedMessages[peerId];\r\n        rootScope.broadcast('peer_pinned_messages', {peerId, mids: messages, pinned: werePinned});\r\n      });\r\n    });\r\n  };\r\n\r\n  private onUpdateNotifySettings = (update: Update.updateNotifySettings) => {\r\n    const {peer, notify_settings} = update;\r\n    if(peer._ === 'notifyPeer') {\r\n      const peerId = appPeersManager.getPeerId((peer as NotifyPeer.notifyPeer).peer);\r\n    \r\n      const dialog = this.getDialogOnly(peerId);\r\n      if(dialog) {\r\n        dialog.notify_settings = notify_settings;\r\n        rootScope.broadcast('dialog_notify_settings', dialog);\r\n        this.dialogsStorage.setDialogToState(dialog);\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateNewScheduledMessage = (update: Update.updateNewScheduledMessage) => {\r\n    const message = update.message as MyMessage;\r\n    const peerId = this.getMessagePeer(message);\r\n\r\n    const storage = this.scheduledMessagesStorage[peerId];\r\n    if(storage) {\r\n      const mid = this.generateMessageId(message.id);\r\n\r\n      const oldMessage = this.getMessageFromStorage(storage, mid);\r\n      this.saveMessages([message], {storage, isScheduled: true});\r\n      const newMessage = this.getMessageFromStorage(storage, mid);\r\n\r\n      if(!oldMessage.deleted) {\r\n        this.handleEditedMessage(oldMessage, newMessage);\r\n        rootScope.broadcast('message_edit', {storage, peerId, mid: message.mid});\r\n      } else {\r\n        const pendingMessage = this.checkPendingMessage(message);\r\n        if(!pendingMessage) {\r\n          rootScope.broadcast('scheduled_new', {peerId, mid: message.mid});\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private onUpdateDeleteScheduledMessages = (update: Update.updateDeleteScheduledMessages) => {\r\n    const peerId = appPeersManager.getPeerId(update.peer);\r\n\r\n    const storage = this.scheduledMessagesStorage[peerId];\r\n    if(storage) {\r\n      const mids = update.messages.map(id => this.generateMessageId(id));\r\n      this.handleDeletedMessages(peerId, storage, mids);\r\n\r\n      rootScope.broadcast('scheduled_delete', {peerId, mids});\r\n    }\r\n  };\r\n\r\n  public setDialogToStateIfMessageIsTop(message: any) {\r\n    const dialog = this.getDialogOnly(message.peerId);\r\n    if(dialog && dialog.top_message === message.mid) {\r\n      this.dialogsStorage.setDialogToState(dialog);\r\n    }\r\n  }\r\n\r\n  private updateMessageRepliesIfNeeded(threadMessage: MyMessage) {\r\n    try { // * на всякий случай, скорее всего это не понадобится\r\n      const threadKey = this.getThreadKey(threadMessage);\r\n      if(threadKey) {\r\n        const repliesKey = this.threadsToReplies[threadKey];\r\n        if(repliesKey) {\r\n          const [peerId, mid] = repliesKey.split('_').map(n => +n);\r\n\r\n          this.updateMessage(peerId, mid, 'replies_updated');\r\n        }\r\n      }\r\n    } catch(err) {\r\n      this.log.error('incrementMessageReplies err', err, threadMessage);\r\n    }\r\n  }\r\n\r\n  private getThreadKey(threadMessage: MyMessage) {\r\n    let threadKey = '';\r\n    if(threadMessage.peerId < 0 && threadMessage.reply_to) {\r\n      const threadId = threadMessage.reply_to.reply_to_top_id || threadMessage.reply_to.reply_to_msg_id;\r\n      threadKey = threadMessage.peerId + '_' + threadId;\r\n    }\r\n\r\n    return threadKey;\r\n  }\r\n\r\n  public updateMessage(peerId: number, mid: number, broadcastEventName?: 'replies_updated'): Promise<Message.message> {\r\n    const promise: Promise<Message.message> = this.wrapSingleMessage(peerId, mid, true).then(() => {\r\n      const message = this.getMessageByPeer(peerId, mid);\r\n\r\n      if(broadcastEventName) {\r\n        rootScope.broadcast(broadcastEventName, message);\r\n      }\r\n\r\n      return message;\r\n    });\r\n    \r\n    return promise;\r\n  }\r\n\r\n  private checkPendingMessage(message: any) {\r\n    const randomId = this.pendingByMessageId[message.mid];\r\n    let pendingMessage: any;\r\n    if(randomId) {\r\n      const pendingData = this.pendingByRandomId[randomId];\r\n      if(pendingMessage = this.finalizePendingMessage(randomId, message)) {\r\n        rootScope.broadcast('history_update', {storage: pendingData.storage, peerId: message.peerId, mid: message.mid});\r\n      }\r\n\r\n      delete this.pendingByMessageId[message.mid];\r\n    }\r\n\r\n    return pendingMessage;\r\n  }\r\n\r\n  public mutePeer(peerId: number, mute?: boolean) {\r\n    const settings: InputPeerNotifySettings = {\r\n      _: 'inputPeerNotifySettings'\r\n    };\r\n\r\n    if(mute === undefined) {\r\n      mute = !appNotificationsManager.isPeerLocalMuted(peerId, false);\r\n    }\r\n    \r\n    settings.mute_until = mute ? 0x7FFFFFFF : 0;\r\n\r\n    return appNotificationsManager.updateNotifySettings({\r\n      _: 'inputNotifyPeer',\r\n      peer: appPeersManager.getInputPeerById(peerId)\r\n    }, settings);\r\n  }\r\n\r\n  public canWriteToPeer(peerId: number, threadId?: number) {\r\n    if(peerId < 0) {\r\n      const isChannel = appPeersManager.isChannel(peerId);\r\n      const hasRights = isChannel && appChatsManager.hasRights(-peerId, 'send_messages', undefined, !!threadId); \r\n      return !isChannel || hasRights;\r\n    } else {\r\n      return appUsersManager.canSendToUser(peerId);\r\n    }\r\n  }\r\n\r\n  public finalizePendingMessage(randomId: string, finalMessage: any) {\r\n    const pendingData = this.pendingByRandomId[randomId];\r\n    // this.log('pdata', randomID, pendingData)\r\n\r\n    if(pendingData) {\r\n      const {peerId, tempId, threadId, storage} = pendingData;\r\n\r\n      [this.getHistoryStorage(peerId), threadId ? this.getHistoryStorage(peerId, threadId) : undefined]\r\n      .filter(Boolean)\r\n      .forEach(storage => {\r\n        storage.history.delete(tempId);\r\n      });\r\n\r\n      // this.log('pending', randomID, historyStorage.pending)\r\n\r\n      const message = this.getMessageFromStorage(storage, tempId);\r\n      if(!message.deleted) {\r\n        delete message.pFlags.is_outgoing;\r\n        delete message.pending;\r\n        delete message.error;\r\n        delete message.random_id;\r\n        delete message.send;\r\n\r\n        rootScope.broadcast('messages_pending');\r\n      }\r\n      \r\n      delete this.pendingByRandomId[randomId];\r\n\r\n      this.finalizePendingMessageCallbacks(storage, tempId, finalMessage.mid);\r\n\r\n      return message;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public finalizePendingMessageCallbacks(storage: MessagesStorage, tempId: number, mid: number) {\r\n    const message = this.getMessageFromStorage(storage, mid);\r\n    const callbacks = this.tempFinalizeCallbacks[tempId];\r\n    //this.log.warn(callbacks, tempId);\r\n    if(callbacks !== undefined) {\r\n      for(const name in callbacks) {\r\n        const {deferred, callback} = callbacks[name];\r\n        //this.log(`finalizePendingMessageCallbacks: will invoke ${name} callback`);\r\n        callback(message).then(deferred.resolve, deferred.reject);\r\n      }\r\n\r\n      delete this.tempFinalizeCallbacks[tempId];\r\n    }\r\n\r\n    // set cached url to media\r\n    if(message.media) {\r\n      if(message.media.photo) {\r\n        const photo = appPhotosManager.getPhoto('' + tempId);\r\n        if(/* photo._ !== 'photoEmpty' */photo) {\r\n          const newPhoto = message.media.photo as MyPhoto;\r\n          const cacheContext = appDownloadManager.getCacheContext(newPhoto);\r\n          const oldCacheContext = appDownloadManager.getCacheContext(photo, 'full');\r\n          Object.assign(cacheContext, oldCacheContext);\r\n\r\n          const photoSize = newPhoto.sizes[newPhoto.sizes.length - 1] as PhotoSize.photoSize;\r\n\r\n          const downloadOptions = appPhotosManager.getPhotoDownloadOptions(newPhoto, photoSize);\r\n          const fileName = getFileNameByLocation(downloadOptions.location);\r\n          appDownloadManager.fakeDownload(fileName, oldCacheContext.url);\r\n        }\r\n      } else if(message.media.document) {\r\n        const doc = appDocsManager.getDoc('' + tempId);\r\n        if(doc) {\r\n          if(/* doc._ !== 'documentEmpty' &&  */doc.type && doc.type !== 'sticker') {\r\n            const newDoc = message.media.document;\r\n            const cacheContext = appDownloadManager.getCacheContext(newDoc);\r\n            const oldCacheContext = appDownloadManager.getCacheContext(doc);\r\n            Object.assign(cacheContext, oldCacheContext);\r\n\r\n            const fileName = appDocsManager.getInputFileName(newDoc);\r\n            appDownloadManager.fakeDownload(fileName, oldCacheContext.url);\r\n          }\r\n        }\r\n      } else if(message.media.poll) {\r\n        delete appPollsManager.polls[tempId];\r\n        delete appPollsManager.results[tempId];\r\n      }\r\n    }\r\n\r\n    const tempMessage = this.getMessageFromStorage(storage, tempId);\r\n    delete storage[tempId];\r\n\r\n    rootScope.broadcast('message_sent', {storage, tempId, tempMessage, mid});\r\n  }\r\n\r\n  public incrementMaxSeenId(maxId: number) {\r\n    if(!maxId || !(!this.maxSeenId || maxId > this.maxSeenId)) {\r\n      return false;\r\n    }\r\n\r\n    this.maxSeenId = maxId;\r\n    appStateManager.pushToState('maxSeenMsgId', maxId);\r\n\r\n    apiManager.invokeApi('messages.receivedMessages', {\r\n      max_id: this.getServerMessageId(maxId)\r\n    });\r\n  }\r\n\r\n  private notifyAboutMessage(message: MyMessage, options: Partial<{\r\n    fwdCount: number,\r\n    peerTypeNotifySettings: PeerNotifySettings\r\n  }> = {}) {\r\n    const peerId = this.getMessagePeer(message);\r\n    const notification: NotifyOptions = {};\r\n    const peerString = appPeersManager.getPeerString(peerId);\r\n    let notificationMessage: string;\r\n\r\n    if(options.peerTypeNotifySettings.show_previews) {\r\n      if(message._ === 'message' && message.fwd_from && options.fwdCount) {\r\n        notificationMessage = I18n.format('Notifications.Forwarded', true, [options.fwdCount]);\r\n      } else {\r\n        notificationMessage = this.wrapMessageForReply(message, undefined, undefined, true);\r\n      }\r\n    } else {\r\n      notificationMessage = I18n.format('Notifications.New', true);\r\n    }\r\n\r\n    notification.title = appPeersManager.getPeerTitle(peerId, true);\r\n    if(peerId < 0 && message.fromId !== message.peerId) {\r\n      notification.title = appPeersManager.getPeerTitle(message.fromId, true) +\r\n        ' @ ' +\r\n        notification.title;\r\n    }\r\n\r\n    notification.title = RichTextProcessor.wrapPlainText(notification.title);\r\n\r\n    notification.onclick = () => {\r\n      rootScope.broadcast('history_focus', {peerId, mid: message.mid});\r\n    };\r\n\r\n    notification.message = notificationMessage;\r\n    notification.key = 'msg' + message.mid;\r\n    notification.tag = peerString;\r\n    notification.silent = true;//message.pFlags.silent || false;\r\n\r\n    const peerPhoto = appPeersManager.getPeerPhoto(peerId);\r\n    if(peerPhoto) {\r\n      appProfileManager.loadAvatar(peerId, peerPhoto, 'photo_small').loadPromise.then(url => {\r\n        if(message.pFlags.unread) {\r\n          notification.image = url;\r\n          appNotificationsManager.notify(notification);\r\n        }\r\n      });\r\n    } else {\r\n      appNotificationsManager.notify(notification);\r\n    }\r\n  }\r\n\r\n  public getScheduledMessagesStorage(peerId: number) {\r\n    return this.scheduledMessagesStorage[peerId] ?? (this.scheduledMessagesStorage[peerId] = this.createMessageStorage());\r\n  }\r\n\r\n  public getScheduledMessages(peerId: number): Promise<number[]> {\r\n    if(!this.canWriteToPeer(peerId)) return Promise.resolve([]);\r\n\r\n    const storage = this.getScheduledMessagesStorage(peerId);\r\n    if(Object.keys(storage).length) {\r\n      return Promise.resolve(Object.keys(storage).map(id => +id));\r\n    }\r\n\r\n    return apiManager.invokeApiSingle('messages.getScheduledHistory', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      hash: 0\r\n    }).then(historyResult => {\r\n      if(historyResult._ !== 'messages.messagesNotModified') {\r\n        appUsersManager.saveApiUsers(historyResult.users);\r\n        appChatsManager.saveApiChats(historyResult.chats);\r\n        \r\n        const storage = this.getScheduledMessagesStorage(peerId);\r\n        this.saveMessages(historyResult.messages, {storage, isScheduled: true});\r\n        return Object.keys(storage).map(id => +id);\r\n      }\r\n      \r\n      return [];\r\n    });\r\n  }\r\n\r\n  public sendScheduledMessages(peerId: number, mids: number[]) {\r\n    return apiManager.invokeApi('messages.sendScheduledMessages', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      id: mids.map(mid => this.getServerMessageId(mid))\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public deleteScheduledMessages(peerId: number, mids: number[]) {\r\n    return apiManager.invokeApi('messages.deleteScheduledMessages', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      id: mids.map(mid => this.getServerMessageId(mid))\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public getMessageWithReplies(message: Message.message) {\r\n    if(message.peerId !== REPLIES_PEER_ID) {\r\n      message = this.filterMessages(message, message => !!(message as Message.message).replies)[0] as any;\r\n      if(!(message && message.replies && message.replies.pFlags.comments && message.replies.channel_id !== 777)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  public isFetchIntervalNeeded(peerId: number) {\r\n    return peerId < 0 && !appChatsManager.isInChat(peerId);\r\n  }\r\n\r\n  public async getNewHistory(peerId: number, threadId?: number) {\r\n    if(!this.isFetchIntervalNeeded(peerId)) {\r\n      return;\r\n    }\r\n\r\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n    const slice = historyStorage.history.slice;\r\n    if(!slice.isEnd(SliceEnd.Bottom)) {\r\n      return;\r\n    }\r\n\r\n    delete historyStorage.maxId;\r\n    slice.unsetEnd(SliceEnd.Bottom);\r\n\r\n    let historyResult = this.getHistory(peerId, slice[0], 0, 50, threadId);\r\n    if(historyResult instanceof Promise) {\r\n      historyResult = await historyResult;\r\n    }\r\n\r\n    for(let i = 0, length = historyResult.history.length; i < length; ++i) {\r\n      this.handleNewMessage(peerId, historyResult.history[i]);\r\n    }\r\n\r\n    return historyStorage;\r\n  }\r\n\r\n  /**\r\n   * * https://core.telegram.org/api/offsets, offset_id is inclusive\r\n   */\r\n  public getHistory(peerId: number, maxId = 0, limit: number, backLimit?: number, threadId?: number): Promise<HistoryResult> | HistoryResult {\r\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n\r\n    let offset = 0;\r\n    /* \r\n    let offsetFound = true;\r\n\r\n    if(maxId) {\r\n      offsetFound = false;\r\n      for(; offset < historyStorage.history.length; offset++) {\r\n        if(maxId > historyStorage.history.slice[offset]) {\r\n          offsetFound = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(offsetFound && (\r\n      historyStorage.count !== null && historyStorage.history.length === historyStorage.count ||\r\n      historyStorage.history.length >= offset + limit\r\n      )) {\r\n      if(backLimit) {\r\n        backLimit = Math.min(offset, backLimit);\r\n        offset = Math.max(0, offset - backLimit);\r\n        limit += backLimit;\r\n      } else {\r\n        limit = limit;\r\n      }\r\n\r\n      const history = historyStorage.history.slice.slice(offset, offset + limit);\r\n      return {\r\n        count: historyStorage.count,\r\n        history: history,\r\n        offsetIdOffset: offset\r\n      };\r\n    }\r\n\r\n    if(offsetFound) {\r\n      offset = 0;\r\n    } */\r\n\r\n    if(backLimit) {\r\n      offset = -backLimit;\r\n      limit += backLimit;\r\n\r\n      /* return this.requestHistory(reqPeerId, maxId, limit, offset, undefined, threadId).then((historyResult) => {\r\n        historyStorage.count = (historyResult as MessagesMessages.messagesMessagesSlice).count || historyResult.messages.length;\r\n\r\n        const history = (historyResult.messages as MyMessage[]).map(message => message.mid);\r\n        return {\r\n          count: historyStorage.count,\r\n          history,\r\n          offsetIdOffset: (historyResult as MessagesMessages.messagesMessagesSlice).offset_id_offset || 0\r\n        };\r\n      }); */\r\n    }\r\n\r\n    const haveSlice = historyStorage.history.sliceMe(maxId, offset, limit);\r\n    if(haveSlice && (haveSlice.slice.length === limit || (haveSlice.fulfilled & SliceEnd.Both) === SliceEnd.Both)) {\r\n      return {\r\n        count: historyStorage.count,\r\n        history: haveSlice.slice,\r\n        offsetIdOffset: haveSlice.offsetIdOffset\r\n      }; \r\n    }\r\n\r\n    return this.fillHistoryStorage(peerId, maxId, limit, offset, historyStorage, threadId).then(() => {\r\n      const slice = historyStorage.history.sliceMe(maxId, offset, limit);\r\n      return {\r\n        count: historyStorage.count,\r\n        history: slice?.slice || historyStorage.history.constructSlice(),\r\n        offsetIdOffset: slice?.offsetIdOffset || historyStorage.count\r\n      };\r\n    });\r\n  }\r\n\r\n  public fillHistoryStorage(peerId: number, offset_id: number, limit: number, add_offset: number, historyStorage: HistoryStorage, threadId?: number): Promise<void> {\r\n    return this.requestHistory(peerId, offset_id, limit, add_offset, undefined, threadId).then((historyResult) => {\r\n      const {offset_id_offset, count, messages} = historyResult as MessagesMessages.messagesMessagesSlice;\r\n\r\n      historyStorage.count = count || messages.length;\r\n      const offsetIdOffset = offset_id_offset || 0;\r\n\r\n      const topWasMeantToLoad = add_offset < 0 ? limit + add_offset : limit;\r\n\r\n      const isTopEnd = offsetIdOffset >= (historyStorage.count - topWasMeantToLoad) || historyStorage.count < topWasMeantToLoad;\r\n      const isBottomEnd = !offsetIdOffset || (add_offset < 0 && (offsetIdOffset + add_offset) <= 0);\r\n\r\n      /* if(!maxId && historyResult.messages.length) {\r\n        maxId = this.incrementMessageId((historyResult.messages[0] as MyMessage).mid, 1);\r\n      }\r\n\r\n      const wasTotalCount = historyStorage.history.length; */\r\n\r\n      const mids = messages.map((message) => {\r\n        if(this.mergeReplyKeyboard(historyStorage, message)) {\r\n          rootScope.broadcast('history_reply_markup', {peerId});\r\n        }\r\n\r\n        return (message as MyMessage).mid;\r\n      });\r\n\r\n      // * add bound manually. \r\n      // * offset_id will be inclusive only if there is 'add_offset' <= -1 (-1 - will only include the 'offset_id')\r\n      if(offset_id && !mids.includes(offset_id) && offsetIdOffset < historyStorage.count) {\r\n        let i = 0;\r\n        for(const length = mids.length; i < length; ++i) {\r\n          if(offset_id > mids[i]) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        mids.splice(i, 0, offset_id);\r\n      }\r\n      \r\n      const slice = historyStorage.history.insertSlice(mids) || historyStorage.history.slice;\r\n      if(isTopEnd) {\r\n        slice.setEnd(SliceEnd.Top);\r\n      }\r\n  \r\n      if(isBottomEnd) {\r\n        slice.setEnd(SliceEnd.Bottom);\r\n        historyStorage.maxId = slice[0]; // ! WARNING\r\n      }\r\n      \r\n      /* const isBackLimit = offset < 0 && -offset !== fullLimit;\r\n      if(isBackLimit) {\r\n        return;\r\n      }\r\n\r\n      const totalCount = historyStorage.history.length;\r\n      fullLimit -= (totalCount - wasTotalCount);\r\n\r\n      const migratedNextPeer = this.migratedFromTo[peerId];\r\n      const migratedPrevPeer = this.migratedToFrom[peerId]\r\n      const isMigrated = migratedNextPeer !== undefined || migratedPrevPeer !== undefined;\r\n\r\n      if(isMigrated) {\r\n        historyStorage.count = Math.max(historyStorage.count, totalCount) + 1;\r\n      }\r\n\r\n      if(fullLimit > 0) {\r\n        maxId = historyStorage.history.slice[totalCount - 1];\r\n        if(isMigrated) {\r\n          if(!historyResult.messages.length) {\r\n            if(migratedPrevPeer) {\r\n              maxId = 0;\r\n              peerId = migratedPrevPeer;\r\n            } else {\r\n              historyStorage.count = totalCount;\r\n              return true;\r\n            }\r\n          }\r\n\r\n          return this.fillHistoryStorage(peerId, maxId, fullLimit, historyStorage, threadId);\r\n        } else if(totalCount < historyStorage.count) {\r\n          return this.fillHistoryStorage(peerId, maxId, fullLimit, offset, historyStorage, threadId);\r\n        }\r\n      } */\r\n    });\r\n  }\r\n\r\n  public requestHistory(peerId: number, maxId: number, limit = 0, offset = 0, offsetDate = 0, threadId = 0): Promise<Exclude<MessagesMessages, MessagesMessages.messagesMessagesNotModified>> {\r\n    //console.trace('requestHistory', peerId, maxId, limit, offset);\r\n\r\n    //rootScope.broadcast('history_request');\r\n\r\n    const options: any = {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      offset_id: this.getServerMessageId(maxId) || 0,\r\n      offset_date: offsetDate,\r\n      add_offset: offset,\r\n      limit,\r\n      max_id: 0,\r\n      min_id: 0,\r\n      hash: 0\r\n    };\r\n\r\n    if(threadId) {\r\n      options.msg_id = this.getServerMessageId(threadId) || 0;\r\n    }\r\n\r\n    const promise: ReturnType<AppMessagesManager['requestHistory']> = apiManager.invokeApiSingle(threadId ? 'messages.getReplies' : 'messages.getHistory', options, {\r\n      //timeout: APITIMEOUT,\r\n      noErrorBox: true\r\n    }) as any;\r\n\r\n    return promise.then((historyResult) => {\r\n      if(DEBUG) {\r\n        this.log('requestHistory result:', peerId, historyResult, maxId, limit, offset);\r\n      }\r\n\r\n      appUsersManager.saveApiUsers(historyResult.users);\r\n      appChatsManager.saveApiChats(historyResult.chats);\r\n      this.saveMessages(historyResult.messages);\r\n\r\n      if(appPeersManager.isChannel(peerId)) {\r\n        apiUpdatesManager.addChannelState(-peerId, (historyResult as MessagesMessages.messagesChannelMessages).pts);\r\n      }\r\n\r\n      let length = historyResult.messages.length, count = (historyResult as MessagesMessages.messagesMessagesSlice).count;\r\n      if(length && historyResult.messages[length - 1].deleted) {\r\n        historyResult.messages.splice(length - 1, 1);\r\n        length--;\r\n        count--;\r\n      }\r\n\r\n      // will load more history if last message is album grouped (because it can be not last item)\r\n      // historyResult.messages: desc sorted\r\n      const historyStorage = this.getHistoryStorage(peerId, threadId);\r\n      const oldestMessage: Message.message = historyResult.messages[length - 1] as any;\r\n      if(length && oldestMessage.grouped_id) {\r\n        const foundSlice = historyStorage.history.findSlice(oldestMessage.mid);\r\n        if(foundSlice && (foundSlice.slice.length + historyResult.messages.length) < count) {\r\n          return this.requestHistory(peerId, oldestMessage.mid, 10, 0, offsetDate, threadId).then((_historyResult) => {\r\n            return historyResult;\r\n          });\r\n        }\r\n      }\r\n\r\n      return historyResult;\r\n    }, (error) => {\r\n      switch (error.type) {\r\n        case 'CHANNEL_PRIVATE':\r\n          let channel = appChatsManager.getChat(-peerId);\r\n          channel = {_: 'channelForbidden', access_hash: channel.access_hash, title: channel.title};\r\n          apiUpdatesManager.processUpdateMessage({\r\n            _: 'updates',\r\n            updates: [{\r\n              _: 'updateChannel',\r\n              channel_id: -peerId\r\n            }],\r\n            chats: [channel],\r\n            users: []\r\n          });\r\n          break;\r\n      }\r\n\r\n      throw error;\r\n    });\r\n  }\r\n\r\n  public fetchSingleMessages() {\r\n    if(this.fetchSingleMessagesPromise) {\r\n      return this.fetchSingleMessagesPromise;\r\n    }\r\n\r\n    return this.fetchSingleMessagesPromise = new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let promises: Promise<void>[] = [];\r\n        \r\n        for(const peerId in this.needSingleMessages) {\r\n          const mids = this.needSingleMessages[peerId];\r\n          delete this.needSingleMessages[peerId];\r\n    \r\n          const msgIds: InputMessage[] = mids.map((msgId: number) => {\r\n            return {\r\n              _: 'inputMessageID',\r\n              id: this.getServerMessageId(msgId)\r\n            };\r\n          });\r\n    \r\n          let promise: Promise<MethodDeclMap['channels.getMessages']['res'] | MethodDeclMap['messages.getMessages']['res']>;\r\n          if(+peerId < 0 && appPeersManager.isChannel(+peerId)) {\r\n            promise = apiManager.invokeApiSingle('channels.getMessages', {\r\n              channel: appChatsManager.getChannelInput(-+peerId),\r\n              id: msgIds\r\n            });\r\n          } else {\r\n            promise = apiManager.invokeApiSingle('messages.getMessages', {\r\n              id: msgIds\r\n            });\r\n          }\r\n    \r\n          promises.push(promise.then(getMessagesResult => {\r\n            if(getMessagesResult._ !== 'messages.messagesNotModified') {\r\n              appUsersManager.saveApiUsers(getMessagesResult.users);\r\n              appChatsManager.saveApiChats(getMessagesResult.chats);\r\n              this.saveMessages(getMessagesResult.messages);\r\n            }\r\n    \r\n            rootScope.broadcast('messages_downloaded', {peerId: +peerId, mids});\r\n          }));\r\n        }\r\n\r\n        Promise.all(promises).finally(() => {\r\n          this.fetchSingleMessagesPromise = null;\r\n          if(Object.keys(this.needSingleMessages).length) this.fetchSingleMessages();\r\n          resolve();\r\n        });\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  public wrapSingleMessage(peerId: number, msgId: number, overwrite = false): Promise<void> {\r\n    if(!this.getMessageByPeer(peerId, msgId).deleted && !overwrite) {\r\n      rootScope.broadcast('messages_downloaded', {peerId, mids: [msgId]});\r\n      return Promise.resolve();\r\n    } else if(!this.needSingleMessages[peerId] || this.needSingleMessages[peerId].indexOf(msgId) === -1) {\r\n      (this.needSingleMessages[peerId] ?? (this.needSingleMessages[peerId] = [])).push(msgId);\r\n      return this.fetchSingleMessages();\r\n    } else if(this.fetchSingleMessagesPromise) {\r\n      return this.fetchSingleMessagesPromise;\r\n    }\r\n  }\r\n\r\n  public setTyping(peerId: number, action: SendMessageAction): Promise<boolean> {\r\n    let typing = this.typings[peerId];\r\n    if(!rootScope.myId || \r\n      !peerId || \r\n      !this.canWriteToPeer(peerId) || \r\n      peerId === rootScope.myId ||\r\n      typing?.type === action._\r\n    ) {\r\n      return Promise.resolve(false);\r\n    }\r\n\r\n    if(typing?.timeout) {\r\n      clearTimeout(typing.timeout);\r\n    }\r\n\r\n    typing = this.typings[peerId] = {\r\n      type: action._\r\n    };\r\n\r\n    return apiManager.invokeApi('messages.setTyping', {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      action\r\n    }).finally(() => {\r\n      if(typing === this.typings[peerId]) {\r\n        typing.timeout = window.setTimeout(() => {\r\n          delete this.typings[peerId];\r\n        }, 6000);\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleDeletedMessages(peerId: number, storage: MessagesStorage, messages: number[]) {\r\n    const history: {\r\n      count: number, \r\n      unread: number, \r\n      msgs: {[mid: number]: true},\r\n      albums?: {[groupId: string]: Set<number>},\r\n    } = {count: 0, unread: 0, msgs: {}} as any;\r\n\r\n    for(const mid of messages) {\r\n      const message: MyMessage = this.getMessageFromStorage(storage, mid);\r\n      if(message.deleted) continue;\r\n\r\n      if((message as Message.message).media) {\r\n        // @ts-ignore\r\n        const c = message.media.webpage || message.media;\r\n        const smth = c.photo || c.document;\r\n\r\n        if(smth?.file_reference) {\r\n          referenceDatabase.deleteContext(smth.file_reference, {type: 'message', peerId, messageId: mid});\r\n        }\r\n\r\n        // @ts-ignore\r\n        if(message.media.webpage) {\r\n          // @ts-ignore\r\n          appWebPagesManager.deleteWebPageFromPending(message.media.webpage, mid);\r\n        }\r\n      }\r\n\r\n      this.updateMessageRepliesIfNeeded(message);\r\n\r\n      if(!message.pFlags.out && !message.pFlags.is_outgoing && message.pFlags.unread) {\r\n        history.unread++;\r\n        appNotificationsManager.cancel('msg' + mid);\r\n      }\r\n      history.count++;\r\n      history.msgs[mid] = true;\r\n\r\n      message.deleted = true;\r\n\r\n      if(message._ !== 'messageService' && message.grouped_id) {\r\n        const groupedStorage = this.groupedMessagesStorage[message.grouped_id];\r\n        if(groupedStorage) {\r\n          delete groupedStorage[mid];\r\n\r\n          if(!history.albums) history.albums = {};\r\n          (history.albums[message.grouped_id] || (history.albums[message.grouped_id] = new Set())).add(mid);\r\n\r\n          if(!Object.keys(groupedStorage).length) {\r\n            delete history.albums;\r\n            delete this.groupedMessagesStorage[message.grouped_id];\r\n          }\r\n        }\r\n      }\r\n\r\n      delete storage[mid];\r\n\r\n      const peerMessagesToHandle = this.newMessagesToHandle[peerId];\r\n      if(peerMessagesToHandle && peerMessagesToHandle.has(mid)) {\r\n        peerMessagesToHandle.delete(mid);\r\n      }\r\n    }\r\n\r\n    if(history.albums) {\r\n      for(const groupId in history.albums) {\r\n        rootScope.broadcast('album_edit', {peerId, groupId, deletedMids: [...history.albums[groupId]]});\r\n        /* const mids = this.getMidsByAlbum(groupId);\r\n        if(mids.length) {\r\n          const mid = Math.max(...mids);\r\n          rootScope.$broadcast('message_edit', {peerId, mid, justMedia: false});\r\n        } */\r\n      }\r\n    }\r\n\r\n    return history;\r\n  }\r\n  \r\n  private handleEditedMessage(oldMessage: any, newMessage: any) {\r\n    if(oldMessage.media?.webpage) {\r\n      appWebPagesManager.deleteWebPageFromPending(oldMessage.media.webpage, oldMessage.mid);\r\n    }\r\n  }\r\n}\r\n\r\nconst appMessagesManager = new AppMessagesManager();\r\nMOUNT_CLASS_TO.appMessagesManager = appMessagesManager;\r\nexport default appMessagesManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatPhoto, DialogPeer, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updatePeerBlocked: (update) => {\r\n        rootScope.broadcast('peer_block', {peerId: this.getPeerId(update.peer_id), blocked: update.blocked});\r\n      }\r\n    });\r\n  }\r\n  /* public savePeerInstance(peerId: number, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: number) {\r\n    return peerId > 0 || appChatsManager.hasRights(-peerId, 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: number): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    const photo = peerId > 0\r\n      ? appUsersManager.getUserPhoto(peerId)\r\n      : appChatsManager.getChatPhoto(-peerId);\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : null;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: number) {\r\n    if(peerId >= 0) {\r\n      return false;\r\n    }\r\n\r\n    let chat = appChatsManager.getChat(-peerId);\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: number | any, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let peer: any = {}; \r\n    if(!isObject(peerId)) {\r\n      peer = this.getPeer(peerId);\r\n    } else peer = peerId;\r\n\r\n    let title = '';\r\n    if(peerId > 0) {\r\n      if(peer.first_name) title += peer.first_name;\r\n      if(peer.last_name) title += ' ' + peer.last_name;\r\n  \r\n      if(!title) title = peer.pFlags.deleted ? 'Deleted Account' : peer.username;\r\n      else title = title.trim();\r\n    } else {\r\n      title = peer.title;\r\n    }\r\n\r\n    if(onlyFirstName) {\r\n      title = title.split(' ')[0];\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n  \r\n  public getOutputPeer(peerId: number): Peer {\r\n    if(peerId > 0) {\r\n      return {_: 'peerUser', user_id: peerId};\r\n    }\r\n\r\n    let chatId = -peerId;\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: number) {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUserString(peerId);\r\n    }\r\n    return appChatsManager.getChatString(-peerId);\r\n  }\r\n\r\n  public getPeerUsername(peerId: number): string {\r\n    if(peerId > 0) {\r\n      return appUsersManager.getUser(peerId).username || '';\r\n    }\r\n    return appChatsManager.getChat(-peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: number) {\r\n    return peerId > 0\r\n      ? appUsersManager.getUser(peerId)\r\n      : appChatsManager.getChat(-peerId)\r\n  }\r\n\r\n  public getPeerId(peerId: Peer | InputPeer | number | string): number {\r\n    if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) return (peerId as Peer.peerUser).user_id || -((peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id);\r\n    else if(!peerId) return 0;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? +peerParams[0] : -peerParams[0] || 0;\r\n  }\r\n\r\n  public getDialogPeer(peerId: number): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: number): boolean {\r\n    return (peerId < 0) && appChatsManager.isChannel(-peerId);\r\n  }\r\n\r\n  public isMegagroup(peerId: number) {\r\n    return (peerId < 0) && appChatsManager.isMegagroup(-peerId);\r\n  }\r\n\r\n  public isAnyGroup(peerId: number): boolean {\r\n    return (peerId < 0) && !appChatsManager.isBroadcast(-peerId);\r\n  }\r\n\r\n  public isBroadcast(peerId: number): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: number): boolean {\r\n    return (peerId > 0) && appUsersManager.isBot(peerId);\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: number, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId > 0) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(appPeersManager.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: number): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(peerId < 0) {\r\n      const chatId = -peerId;\r\n      if(!appChatsManager.isChannel(chatId)) {\r\n        return appChatsManager.getChatInputPeer(chatId);\r\n      } else {\r\n        return appChatsManager.getChannelInputPeer(chatId);\r\n      }\r\n    }\r\n\r\n    return {\r\n      _: 'inputPeerUser',\r\n      user_id: peerId,\r\n      access_hash: appUsersManager.getUser(peerId).access_hash\r\n    };\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: number): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: this.getInputPeerById(peerId)\r\n    }\r\n  }\r\n\r\n  public getPeerColorById(peerId: number, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[(peerId < 0 ? -peerId : peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: number) {\r\n    let text;\r\n    if(peerId > 0) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId);\r\n    } else if(peerId < 0) {\r\n      const chat = appChatsManager.getChat(-peerId);\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: number): PeerType {\r\n    if(appPeersManager.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(appPeersManager.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(peerId < 0) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: number): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n        return 'ChatList.Context.LeaveGroup';\r\n\r\n      case 'group':\r\n        return 'ChatList.Context.DeleteAndExit';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { numberThousandSplitter } from \"../../helpers/number\";\r\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\r\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatFull, ChatParticipant, ChatParticipants, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, SendMessageAction, Update, Updates } from \"../../layer\";\r\nimport { i18n, LangPackKey } from \"../langPack\";\r\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appProfileManager from \"./appProfileManager\";\r\nimport appStateManager from \"./appStateManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\nexport type Channel = Chat.channel;\r\n\r\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\r\n\r\nexport type UserTyping = Partial<{userId: number, action: SendMessageAction, timeout: number}>;\r\n\r\nexport class AppChatsManager {\r\n  private storage = appStateManager.storages.chats;\r\n  \r\n  private chats: {[id: number]: Chat.channel | Chat.chat | any} = {};\r\n  //private usernames: any = {};\r\n  //private channelAccess: any = {};\r\n  //private megagroups: {[id: number]: true} = {};\r\n\r\n  private megagroupOnlines: {[id: number]: {timestamp: number, onlines: number}} = {};\r\n\r\n  private typingsInPeer: {[peerId: number]: UserTyping[]} = {};\r\n\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      /* updateChannel: (update) => {\r\n        const channelId = update.channel_id;\r\n        //console.log('updateChannel:', update);\r\n        rootScope.broadcast('channel_settings', {channelId});\r\n      }, */\r\n\r\n      updateChannelParticipant: (update) => {\r\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\r\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\r\n        });\r\n      },\r\n\r\n      updateChatDefaultBannedRights: (update) => {\r\n        const chatId = -appPeersManager.getPeerId(update.peer);\r\n        const chat: Chat.chat = this.chats[chatId];\r\n        if(chat) {\r\n          chat.default_banned_rights = update.default_banned_rights;\r\n          rootScope.broadcast('chat_update', chatId);\r\n        }\r\n      },\r\n\r\n      updateUserTyping: this.onUpdateUserTyping,\r\n      updateChatUserTyping: this.onUpdateUserTyping,\r\n      updateChannelUserTyping: this.onUpdateUserTyping\r\n    });\r\n\r\n    appStateManager.getState().then((state) => {\r\n      const chats = appStateManager.storagesResults.chats;\r\n      if(chats.length) {\r\n        this.chats = {};\r\n        for(let i = 0, length = chats.length; i < length; ++i) {\r\n          const chat = chats[i];\r\n          if(chat) {\r\n            this.chats[chat.id] = chat;\r\n          }\r\n        }\r\n      }\r\n\r\n      appStateManager.addEventListener('peerNeeded', (peerId: number) => {\r\n        if(peerId > 0 || this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.set({\r\n          [-peerId]: this.getChat(-peerId)\r\n        });\r\n      });\r\n\r\n      appStateManager.addEventListener('peerUnneeded', (peerId: number) => {\r\n        if(peerId > 0 || !this.storage.getFromCache(-peerId)) {\r\n          return;\r\n        }\r\n\r\n        this.storage.delete(-peerId);\r\n      });\r\n    });\r\n  }\r\n\r\n  private onUpdateUserTyping = (update: Update.updateUserTyping | Update.updateChatUserTyping | Update.updateChannelUserTyping) => {\r\n    const fromId = (update as Update.updateUserTyping).user_id || appPeersManager.getPeerId((update as Update.updateChatUserTyping).from_id);\r\n    if(rootScope.myId === fromId || update.action._ === 'speakingInGroupCallAction') {\r\n      return;\r\n    }\r\n    \r\n    const peerId = update._ === 'updateUserTyping' ? \r\n      fromId : \r\n      -((update as Update.updateChatUserTyping).chat_id || (update as Update.updateChannelUserTyping).channel_id);\r\n    const typings = this.typingsInPeer[peerId] ?? (this.typingsInPeer[peerId] = []);\r\n    let typing = typings.find(t => t.userId === fromId);\r\n\r\n    const cancelAction = () => {\r\n      delete typing.timeout;\r\n      //typings.findAndSplice(t => t === typing);\r\n      const idx = typings.indexOf(typing);\r\n      if(idx !== -1) {\r\n        typings.splice(idx, 1);\r\n      }\r\n\r\n      rootScope.broadcast('peer_typings', {peerId, typings});\r\n\r\n      if(!typings.length) {\r\n        delete this.typingsInPeer[peerId];\r\n      }\r\n    };\r\n\r\n    if(typing && typing.timeout !== undefined) {\r\n      clearTimeout(typing.timeout);\r\n    }\r\n\r\n    if(update.action._ === 'sendMessageCancelAction') {\r\n      if(!typing) {\r\n        return;\r\n      }\r\n\r\n      cancelAction();\r\n      return;\r\n    } else {\r\n      if(!typing) {\r\n        typing = {\r\n          userId: fromId\r\n        };\r\n\r\n        typings.push(typing);\r\n      }\r\n\r\n      //console.log('updateChatUserTyping', update, typings);\r\n      \r\n      typing.action = update.action;\r\n      \r\n      if(!appUsersManager.hasUser(fromId)) {\r\n        if(update._ === 'updateChatUserTyping') {\r\n          if(update.chat_id && appChatsManager.hasChat(update.chat_id) && !appChatsManager.isChannel(update.chat_id)) {\r\n            appProfileManager.getChatFull(update.chat_id);\r\n          }\r\n        }\r\n        \r\n        //return;\r\n      }\r\n      \r\n      appUsersManager.forceUserOnline(fromId);\r\n\r\n      typing.timeout = window.setTimeout(cancelAction, 6000);\r\n      rootScope.broadcast('peer_typings', {peerId, typings});\r\n    }\r\n  };\r\n\r\n  public getPeerTypings(peerId: number) {\r\n    return this.typingsInPeer[peerId];\r\n  }\r\n\r\n  public saveApiChats(apiChats: any[], override?: boolean) {\r\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\r\n  }\r\n\r\n  public saveApiChat(chat: Chat, override?: boolean) {\r\n    if(chat._ === 'chatEmpty') return;\r\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\r\n      return;\r\n    } */\r\n    \r\n    // * exclude from state\r\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\r\n\r\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\r\n\r\n    /* if(oldChat && !override) {\r\n      return;\r\n    } */\r\n\r\n    if((chat as Chat.chat).pFlags === undefined) {\r\n      (chat as Chat.chat).pFlags = {};\r\n    }\r\n\r\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\r\n      return;\r\n    }\r\n\r\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\r\n\r\n    if(chat._ === 'channel' &&\r\n        chat.participants_count === undefined &&\r\n        oldChat !== undefined &&\r\n        (oldChat as Chat.channel).participants_count) {\r\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\r\n    }\r\n\r\n    /* if(chat.username) {\r\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\r\n      this.usernames[searchUsername] = chat.id;\r\n    } */\r\n\r\n    let changedPhoto = false, changedTitle = false;\r\n    if(oldChat === undefined) {\r\n      this.chats[chat.id] = chat;\r\n    } else {\r\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\r\n      if(oldPhotoId !== newPhotoId) {\r\n        changedPhoto = true;\r\n      }\r\n\r\n      if(oldChat.title !== chat.title) {\r\n        changedTitle = true;\r\n      }\r\n\r\n      safeReplaceObject(oldChat, chat);\r\n      rootScope.broadcast('chat_update', chat.id);\r\n    }\r\n\r\n    if(changedPhoto) {\r\n      rootScope.broadcast('avatar_update', -chat.id);\r\n    }\r\n\r\n    if(changedTitle) {\r\n      rootScope.broadcast('peer_title_edit', -chat.id);\r\n    }\r\n\r\n    if(appStateManager.isPeerNeeded(-chat.id)) {\r\n      this.storage.set({\r\n        [chat.id]: chat\r\n      });\r\n    }\r\n  }\r\n\r\n  public getChat(id: number) {\r\n    if(id < 0) id = -id;\r\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\r\n  }\r\n\r\n  public combineParticipantBannedRights(id: number, rights: ChatBannedRights) {\r\n    const chat: Chat.channel = this.getChat(id);\r\n\r\n    if(chat.default_banned_rights) {\r\n      rights = copy(rights);\r\n      const defaultRights = chat.default_banned_rights.pFlags;\r\n      for(let i in defaultRights) {\r\n        // @ts-ignore\r\n        rights.pFlags[i] = defaultRights[i];\r\n      }\r\n    }\r\n\r\n    return rights;\r\n  }\r\n\r\n  public hasRights(id: number, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty') return false;\r\n\r\n    if(chat._ === 'chatForbidden' ||\r\n        chat._ === 'channelForbidden' ||\r\n        (chat as Chat.chat).pFlags.kicked ||\r\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\r\n      return false;\r\n    }\r\n\r\n    if(chat.pFlags.creator && rights === undefined) {\r\n      return true;\r\n    }\r\n\r\n    if(!rights) {\r\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\r\n\r\n      if(!rights) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\r\n    if(rights) {\r\n      myFlags = rights.pFlags as any;\r\n    }\r\n\r\n    switch(action) {\r\n      case 'embed_links':\r\n      case 'send_games':\r\n      case 'send_gifs':\r\n      case 'send_inline':\r\n      case 'send_media':\r\n      case 'send_messages':\r\n      case 'send_polls':\r\n      case 'send_stickers': {\r\n        if(!isThread && chat.pFlags.left) {\r\n          return false;\r\n        }\r\n\r\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\r\n          return false;\r\n        }\r\n\r\n        if(chat._ === 'channel') {\r\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      // * revoke foreign messages\r\n      case 'delete_messages': {\r\n        return !!myFlags.delete_messages;\r\n      }\r\n\r\n      case 'pin_messages': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\r\n      }\r\n\r\n      case 'invite_users':\r\n      case 'change_info': {\r\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\r\n      }\r\n\r\n      // * only creator can do that\r\n      case 'change_type':\r\n      case 'delete_chat': {\r\n        return false;\r\n      }\r\n\r\n      case 'change_permissions': {\r\n        return rights._ === 'chatAdminRights' && myFlags['ban_users'];\r\n      }\r\n\r\n      case 'view_participants': {\r\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public editChatDefaultBannedRights(id: number, banned_rights: ChatBannedRights) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n    if(chat.default_banned_rights) {\r\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n    \r\n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      banned_rights\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  /* public resolveUsername(username: string) {\r\n    return this.usernames[username] || 0;\r\n  } */\r\n\r\n  /* public saveChannelAccess(id: number, accessHash: string) {\r\n    this.channelAccess[id] = accessHash;\r\n  } */\r\n\r\n  /* public saveIsMegagroup(id: number) {\r\n    this.megagroups[id] = true;\r\n  } */\r\n\r\n  public isChannel(id: number) {\r\n    const chat = this.chats[id];\r\n    return chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */;\r\n  }\r\n\r\n  public isMegagroup(id: number) {\r\n    /* if(this.megagroups[id]) {\r\n      return true;\r\n    } */\r\n\r\n    const chat = this.chats[id];\r\n    return chat && chat._ === 'channel' && chat.pFlags.megagroup;\r\n  }\r\n\r\n  public isBroadcast(id: number) {\r\n    return this.isChannel(id) && !this.isMegagroup(id);\r\n  }\r\n\r\n  public isInChat(id: number) {\r\n    let good = true;\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channelForbidden' \r\n      || chat._ === 'chatForbidden' \r\n      || chat._ === 'chatEmpty' \r\n      || (chat as Chat.chat).pFlags.left \r\n      || (chat as Chat.chat).pFlags.kicked \r\n      || (chat as Chat.chat).pFlags.deactivated) {\r\n      good = false;\r\n    }\r\n\r\n    return good;\r\n  }\r\n\r\n  public getChannelInput(id: number): InputChannel {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\r\n      return {\r\n        _: 'inputChannelEmpty'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputChannel',\r\n        channel_id: id,\r\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\r\n      };\r\n    }\r\n  }\r\n\r\n  public getChatInputPeer(id: number): InputPeer.inputPeerChat {\r\n    return {\r\n      _: 'inputPeerChat',\r\n      chat_id: id\r\n    };\r\n  }\r\n\r\n  public getChannelInputPeer(id: number): InputPeer.inputPeerChannel {\r\n    return {\r\n      _: 'inputPeerChannel',\r\n      channel_id: id,\r\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\r\n    };\r\n  }\r\n\r\n  public hasChat(id: number, allowMin?: true) {\r\n    const chat = this.chats[id]\r\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\r\n  }\r\n\r\n  public getChatPhoto(id: number) {\r\n    const chat: Chat.chat = this.getChat(id);\r\n\r\n    return chat && chat.photo || {\r\n      _: 'chatPhotoEmpty'\r\n    };\r\n  }\r\n\r\n  public getChatString(id: number) {\r\n    const chat = this.getChat(id);\r\n    if(this.isChannel(id)) {\r\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\r\n    }\r\n    return 'g' + id;\r\n  }\r\n\r\n  public getChatMembersString(id: number) {\r\n    const chat = this.getChat(id);\r\n    const chatFull = appProfileManager.chatsFull[id];\r\n    let count: number;\r\n    if(chatFull) {\r\n      if(chatFull._ === 'channelFull') {\r\n        count = chatFull.participants_count;\r\n      } else {\r\n        count = (chatFull.participants as ChatParticipants.chatParticipants).participants?.length;\r\n      }\r\n    } else {\r\n      count = chat.participants_count || chat.participants?.participants.length;\r\n    }\r\n\r\n    const isChannel = this.isBroadcast(id);\r\n    count = count || 1;\r\n\r\n    let key: LangPackKey = isChannel ? 'Peer.Status.Subscribers' : 'Peer.Status.Member';\r\n    return i18n(key, [numberThousandSplitter(count)]);\r\n  }\r\n\r\n  /* public wrapForFull(id: number, fullChat: any) {\r\n    const chatFull = copy(fullChat);\r\n    const chat = this.getChat(id);\r\n\r\n    if(!chatFull.participants_count) {\r\n      chatFull.participants_count = chat.participants_count;\r\n    }\r\n\r\n    if(chatFull.participants &&\r\n        chatFull.participants._ === 'chatParticipants') {\r\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\r\n    }\r\n\r\n    if(chatFull.about) {\r\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\r\n    }\r\n\r\n    //chatFull.peerString = this.getChatString(id);\r\n    chatFull.chat = chat;\r\n\r\n    return chatFull;\r\n  }\r\n\r\n  public wrapParticipants(id: number, participants: any[]) {\r\n    const chat = this.getChat(id);\r\n    const myId = appUsersManager.getSelf().id;\r\n    if(this.isChannel(id)) {\r\n      const isAdmin = chat.pFlags.creator;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    } else {\r\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\r\n      participants.forEach((participant) => {\r\n        participant.canLeave = myId === participant.user_id;\r\n        participant.canKick = !participant.canLeave && (\r\n          chat.pFlags.creator ||\r\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\r\n        );\r\n\r\n        // just for order by last seen\r\n        participant.user = appUsersManager.getUser(participant.user_id);\r\n      });\r\n    }\r\n\r\n    return participants;\r\n  } */\r\n\r\n  public createChannel(title: string, about: string): Promise<number> {\r\n    return apiManager.invokeApi('channels.createChannel', {\r\n      broadcast: true,\r\n      title,\r\n      about\r\n    }).then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const channelId = updates.chats[0].id;\r\n      rootScope.broadcast('history_focus', {peerId: -channelId});\r\n\r\n      return channelId;\r\n    });\r\n  }\r\n\r\n  public inviteToChannel(id: number, userIds: number[]) {\r\n    const input = this.getChannelInput(id);\r\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\r\n\r\n    return apiManager.invokeApi('channels.inviteToChannel', {\r\n      channel: input,\r\n      users: usersInputs\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public createChat(title: string, userIds: number[]): Promise<number> {\r\n    return apiManager.invokeApi('messages.createChat', {\r\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\r\n      title\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n\r\n      const chatId = (updates as any as Updates.updates).chats[0].id;\r\n      rootScope.broadcast('history_focus', {peerId: -chatId});\r\n\r\n      return chatId;\r\n    });\r\n  }\r\n\r\n  public async getOnlines(id: number): Promise<number> {\r\n    if(this.isMegagroup(id)) {\r\n      const timestamp = Date.now() / 1000 | 0;\r\n      const cached = this.megagroupOnlines[id] ?? (this.megagroupOnlines[id] = {timestamp: 0, onlines: 1});\r\n      if((timestamp - cached.timestamp) < 60) {\r\n        return cached.onlines;\r\n      }\r\n\r\n      const res = await apiManager.invokeApi('messages.getOnlines', {\r\n        peer: this.getChannelInputPeer(id)\r\n      });\r\n\r\n      const onlines = res.onlines ?? 1;\r\n      cached.timestamp = timestamp;\r\n      cached.onlines = onlines;\r\n\r\n      return onlines;\r\n    } else if(this.isBroadcast(id)) {\r\n      return 1;\r\n    }\r\n\r\n    const chatInfo = await appProfileManager.getChatFull(id);\r\n    const _participants = (chatInfo as ChatFull.chatFull).participants as ChatParticipants.chatParticipants;\r\n    if(_participants && _participants.participants) {\r\n      const participants = _participants.participants;\r\n\r\n      return participants.reduce((acc: number, participant) => {\r\n        const user = appUsersManager.getUser(participant.user_id);\r\n        if(user && user.status && user.status._ === 'userStatusOnline') {\r\n          return acc + 1;\r\n        }\r\n\r\n        return acc;\r\n      }, 0);\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  private onChatUpdated = (chatId: number, updates: any) => {\r\n    //console.log('onChatUpdated', chatId, updates);\r\n\r\n    apiUpdatesManager.processUpdateMessage(updates);\r\n    if(updates &&\r\n        /* updates.updates &&\r\n        updates.updates.length && */\r\n        this.isChannel(chatId)) {\r\n      appProfileManager.invalidateChannelParticipants(chatId);\r\n    }\r\n  };\r\n\r\n  public leaveChannel(id: number) {\r\n    return apiManager.invokeApi('channels.leaveChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public joinChannel(id: number) {\r\n    return apiManager.invokeApi('channels.joinChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public addChatUser(id: number, userId: number, fwdLimit = 100) {\r\n    return apiManager.invokeApi('messages.addChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId),\r\n      fwd_limit: fwdLimit\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChatUser(id: number, userId: number) {\r\n    return apiManager.invokeApi('messages.deleteChatUser', {\r\n      chat_id: id,\r\n      user_id: appUsersManager.getUserInput(userId)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public leaveChat(id: number) {\r\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\r\n  }\r\n\r\n  public leave(id: number) {\r\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\r\n  }\r\n\r\n  public delete(id: number) {\r\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\r\n  }\r\n\r\n  public deleteChannel(id: number) {\r\n    return apiManager.invokeApi('channels.deleteChannel', {\r\n      channel: this.getChannelInput(id)\r\n    }).then(this.onChatUpdated.bind(this, id));\r\n  }\r\n\r\n  public deleteChat(id: number) {\r\n    //return this.leaveChat(id).then(() => {\r\n      return apiManager.invokeApi('messages.deleteChat', {\r\n        chat_id: id\r\n      });\r\n    //});\r\n  }\r\n\r\n  public migrateChat(id: number): Promise<number> {\r\n    const chat: Chat = this.getChat(id);\r\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\r\n    return apiManager.invokeApi('messages.migrateChat', {\r\n      chat_id: id\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\r\n      return update.channel_id;\r\n    });\r\n  }\r\n\r\n  public updateUsername(id: number, username: string) {\r\n    return apiManager.invokeApi('channels.updateUsername', {\r\n      channel: this.getChannelInput(id),\r\n      username\r\n    }).then((bool) => {\r\n      if(bool) {\r\n        const chat: Chat.channel = this.getChat(id);\r\n        chat.username = username;\r\n      }\r\n\r\n      return bool;\r\n    });\r\n  }\r\n\r\n  public editPhoto(id: number, inputFile: InputFile) {\r\n    const inputChatPhoto: InputChatPhoto = {\r\n      _: 'inputChatUploadedPhoto',\r\n      file: inputFile\r\n    };\r\n\r\n    let promise: any;\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editPhoto', {\r\n        channel: this.getChannelInput(id),\r\n        photo: inputChatPhoto\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\r\n        chat_id: id,\r\n        photo: inputChatPhoto\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editTitle(id: number, title: string) {\r\n    let promise: any;\r\n\r\n    if(this.isChannel(id)) {\r\n      promise = apiManager.invokeApi('channels.editTitle', {\r\n        channel: this.getChannelInput(id),\r\n        title\r\n      });\r\n    } else {\r\n      promise = apiManager.invokeApi('messages.editChatTitle', {\r\n        chat_id: id,\r\n        title\r\n      });\r\n    }\r\n\r\n    return promise.then((updates: any) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public editAbout(id: number, about: string) {\r\n    return apiManager.invokeApi('messages.editChatAbout', {\r\n      peer: appPeersManager.getInputPeerById(-id),\r\n      about\r\n    }).then(bool => {\r\n      //apiUpdatesManager.processUpdateMessage(updates);\r\n      rootScope.broadcast('peer_bio_edit', -id);\r\n    });\r\n  }\r\n\r\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant) {\r\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \r\n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \r\n      (participant as ChatParticipant.chatParticipant).user_id;\r\n    return peerId;\r\n  }\r\n\r\n  public editBanned(id: number, participant: number | ChannelParticipant, banned_rights: ChatBannedRights) {\r\n    const peerId = typeof(participant) === 'number' ? participant : this.getParticipantPeerId(participant);\r\n    return apiManager.invokeApi('channels.editBanned', {\r\n      channel: this.getChannelInput(id),\r\n      participant: appPeersManager.getInputPeerById(peerId),\r\n      banned_rights\r\n    }).then((updates) => {\r\n      this.onChatUpdated(id, updates);\r\n\r\n      if(typeof(participant) !== 'number') {\r\n        const timestamp = Date.now() / 1000 | 0;\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateChannelParticipant',\r\n            channel_id: id,\r\n            date: timestamp,\r\n            actor_id: undefined,\r\n            qts: undefined,\r\n            user_id: peerId,\r\n            prev_participant: participant,\r\n            new_participant: Object.keys(banned_rights.pFlags).length ? {\r\n              _: 'channelParticipantBanned',\r\n              date: timestamp,\r\n              banned_rights,\r\n              kicked_by: appUsersManager.getSelf().id,\r\n              peer: appPeersManager.getOutputPeer(peerId),\r\n              pFlags: {}\r\n            } : undefined\r\n          } as Update.updateChannelParticipant\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public clearChannelParticipantBannedRights(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {}\r\n    });\r\n  }\r\n  \r\n  public kickFromChannel(id: number, participant: number | ChannelParticipant) {\r\n    return this.editBanned(id, participant, {\r\n      _: 'chatBannedRights',\r\n      until_date: 0,\r\n      pFlags: {\r\n        view_messages: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst appChatsManager = new AppChatsManager();\r\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\r\nexport default appChatsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { DownloadOptions } from \"../mtproto/apiFileManager\";\r\nimport type { ApiError } from \"../mtproto/apiManager\";\r\nimport type { MyDocument } from \"./appDocsManager\";\r\nimport type { MyPhoto } from \"./appPhotosManager\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport { deferredPromise, CancellablePromise } from \"../../helpers/cancellablePromise\";\r\nimport { InputFile } from \"../../layer\";\r\nimport referenceDatabase, {ReferenceBytes} from \"../mtproto/referenceDatabase\";\r\nimport { getFileNameByLocation } from \"../../helpers/fileName\";\r\nimport CacheStorageController from \"../cacheStorage\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\n\r\nexport type ResponseMethodBlob = 'blob';\r\nexport type ResponseMethodJson = 'json';\r\nexport type ResponseMethod = ResponseMethodBlob | ResponseMethodJson;\r\n\r\n/* export type DownloadBlob = {promise: Promise<Blob>, controller: AbortController};\r\nexport type DownloadJson = {promise: Promise<any>, controller: AbortController}; */\r\nexport type DownloadBlob = CancellablePromise<Blob>;\r\nexport type DownloadJson = CancellablePromise<any>;\r\n//export type Download = DownloadBlob/*  | DownloadJson */;\r\nexport type Download = DownloadBlob/*  | DownloadJson */;\r\n\r\nexport type Progress = {done: number, fileName: string, total: number, offset: number};\r\nexport type ProgressCallback = (details: Progress) => void;\r\n\r\nexport type ThumbCache = {\r\n  downloaded: number, \r\n  url: string\r\n};\r\n\r\nexport type ThumbsCache = {\r\n  [id: string]: {\r\n    [size: string]: ThumbCache\r\n  }\r\n};\r\n\r\nexport class AppDownloadManager {\r\n  public cacheStorage = new CacheStorageController('cachedFiles');\r\n  private downloads: {[fileName: string]: Download} = {};\r\n  private progress: {[fileName: string]: Progress} = {};\r\n  private progressCallbacks: {[fileName: string]: Array<ProgressCallback>} = {};\r\n\r\n  private uploadId = 0;\r\n\r\n  private thumbsCache: {\r\n    photo: ThumbsCache,\r\n    document: ThumbsCache\r\n  } = {\r\n    photo: {},\r\n    document: {}\r\n  };\r\n\r\n  constructor() {\r\n    rootScope.on('download_progress', (e) => {\r\n      const details = e as {done: number, fileName: string, total: number, offset: number};\r\n      this.progress[details.fileName] = details;\r\n\r\n      const callbacks = this.progressCallbacks[details.fileName];\r\n      if(callbacks) {\r\n        callbacks.forEach(callback => callback(details));\r\n      }\r\n\r\n      const download = this.downloads[details.fileName];\r\n      if(download) {\r\n        download.notifyAll(details);\r\n      }\r\n    });\r\n  }\r\n\r\n  private getNewDeferred(fileName: string) {\r\n    const deferred = deferredPromise<Blob>();\r\n\r\n    deferred.cancel = () => {\r\n      //try {\r\n        const error = new Error('Download canceled');\r\n        error.name = 'AbortError';\r\n        \r\n        apiManager.cancelDownload(fileName);\r\n        \r\n        deferred.reject(error);\r\n        deferred.cancel = () => {};\r\n      /* } catch(err) {\r\n\r\n      } */\r\n    };\r\n\r\n    deferred.finally(() => {\r\n      delete this.progress[fileName];\r\n      delete this.progressCallbacks[fileName];\r\n    });\r\n\r\n    deferred.catch(() => {\r\n      this.clearDownload(fileName);\r\n    });\r\n\r\n    return this.downloads[fileName] = deferred;\r\n  }\r\n\r\n  private clearDownload(fileName: string) {\r\n    delete this.downloads[fileName];\r\n  }\r\n\r\n  public fakeDownload(fileName: string, value: Blob | string) {\r\n    const deferred = this.getNewDeferred(fileName);\r\n    if(typeof(value) === 'string') {\r\n      fetch(value)\r\n      .then(response => response.blob())\r\n      .then(blob => deferred.resolve(blob));\r\n    } else {\r\n      deferred.resolve(value);\r\n    }\r\n\r\n    return deferred;\r\n  }\r\n\r\n  public download(options: DownloadOptions): DownloadBlob {\r\n    const fileName = getFileNameByLocation(options.location, {fileName: options.fileName});\r\n    if(this.downloads.hasOwnProperty(fileName)) return this.downloads[fileName];\r\n\r\n    const deferred = this.getNewDeferred(fileName);\r\n\r\n    const onError = (err: ApiError) => {\r\n      switch(err.type) {\r\n        case 'FILE_REFERENCE_EXPIRED': {\r\n          // @ts-ignore\r\n          const bytes: ReferenceBytes = options?.location?.file_reference;\r\n          if(bytes) {\r\n            referenceDatabase.refreshReference(bytes).then(tryDownload);\r\n            /* referenceDatabase.refreshReference(bytes).then(() => {\r\n              console.log('FILE_REFERENCE_EXPIRED: refreshed reference', bytes);\r\n            }); */\r\n            break;\r\n          } else {\r\n            console.warn('FILE_REFERENCE_EXPIRED: no context for bytes:', bytes);\r\n          }\r\n        }\r\n\r\n        default:\r\n          deferred.reject(err);\r\n          break;\r\n      }\r\n    };\r\n\r\n    const tryDownload = (): Promise<unknown> => {\r\n      //return Promise.resolve();\r\n\r\n      if(!apiManager.worker || options.onlyCache) {\r\n        const promise = this.cacheStorage.getFile(fileName).then((blob) => {\r\n          if(blob.size < options.size) throw 'wrong size';\r\n          else deferred.resolve(blob);\r\n        });\r\n        \r\n        if(options.onlyCache) return promise.catch(onError);\r\n        return promise.catch(() => {\r\n          return apiManager.downloadFile(options).then(deferred.resolve, onError);\r\n        });\r\n      } else {\r\n        /* return apiManager.downloadFile(options).then(res => {\r\n          setTimeout(() => deferred.resolve(res), 5e3);\r\n        }, onError); */\r\n\r\n        return apiManager.downloadFile(options).then(deferred.resolve, onError);\r\n      }\r\n    };\r\n\r\n    tryDownload();\r\n\r\n    //console.log('Will download file:', fileName, url);\r\n    return deferred;\r\n  }\r\n\r\n  public upload(file: File | Blob, fileName?: string) {\r\n    if(!fileName) {\r\n      const mimeType = file?.type;\r\n      if(mimeType) { // the same like apiFileName in appMessagesManager for upload!\r\n        const ext = this.uploadId++ + '.' + mimeType.split('/')[1];\r\n  \r\n        if(['image/jpeg', 'image/png', 'image/bmp'].indexOf(mimeType) >= 0) {\r\n          fileName = 'photo' + ext;\r\n        } else if(mimeType.indexOf('audio/') === 0 || ['video/ogg'].indexOf(mimeType) >= 0) {\r\n          fileName = 'audio' + ext;\r\n        } else if(mimeType.indexOf('video/') === 0) {\r\n          fileName = 'video' + ext;\r\n        } else {\r\n          fileName = 'document' + ext;\r\n        }\r\n        \r\n      } else {\r\n        fileName = 'upload-' + this.uploadId++;\r\n      }\r\n    }\r\n\r\n    const deferred = this.getNewDeferred(fileName);\r\n    apiManager.uploadFile({file, fileName}).then(deferred.resolve, deferred.reject);\r\n\r\n    deferred.finally(() => {\r\n      this.clearDownload(fileName);\r\n    });\r\n\r\n    return deferred as any as CancellablePromise<InputFile>;\r\n  }\r\n\r\n  public getDownload(fileName: string) {\r\n    return this.downloads[fileName];\r\n  }\r\n\r\n  public addProgressCallback(fileName: string, callback: ProgressCallback) {\r\n    const progress = this.progress[fileName];\r\n    (this.progressCallbacks[fileName] ?? (this.progressCallbacks[fileName] = [])).push(callback);\r\n\r\n    if(progress) {\r\n      callback(progress);\r\n    }\r\n  }\r\n\r\n  public createDownloadAnchor(url: string, fileName: string, onRemove?: () => void) {\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = fileName;\r\n    a.target = '_blank';\r\n    \r\n    a.style.position = 'absolute';\r\n    a.style.top = '1px';\r\n    a.style.left = '1px';\r\n    \r\n    document.body.append(a);\r\n  \r\n    try {\r\n      var clickEvent = document.createEvent('MouseEvents');\r\n      clickEvent.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n      a.dispatchEvent(clickEvent);\r\n    } catch (e) {\r\n      console.error('Download click error', e);\r\n      try {\r\n        a.click();\r\n      } catch (e) {\r\n        window.open(url as string, '_blank');\r\n      }\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      a.remove();\r\n      onRemove && onRemove();\r\n    }, 100);\r\n  }\r\n\r\n  /* public downloadToDisc(fileName: string, url: string) {\r\n    this.createDownloadAnchor(url);\r\n  \r\n    return this.download(fileName, url);\r\n  } */\r\n\r\n  public downloadToDisc(options: DownloadOptions, discFileName: string) {\r\n    const download = this.download(options);\r\n    download/* .promise */.then(blob => {\r\n      const objectURL = URL.createObjectURL(blob);\r\n      this.createDownloadAnchor(objectURL, discFileName, () => {\r\n        URL.revokeObjectURL(objectURL);\r\n      });\r\n    });\r\n  \r\n    return download;\r\n  }\r\n\r\n  public getCacheContext(media: MyPhoto | MyDocument, thumbSize: string = 'full'): ThumbCache {\r\n    /* if(media._ === 'photo' && thumbSize !== 'i') {\r\n      thumbSize = 'full';\r\n    } */\r\n\r\n    const cache = this.thumbsCache[media._][media.id] ?? (this.thumbsCache[media._][media.id] = {});\r\n    return cache[thumbSize] ?? (cache[thumbSize] = {downloaded: 0, url: ''});\r\n  }\r\n}\r\n\r\nconst appDownloadManager = new AppDownloadManager();\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.appDownloadManager = appDownloadManager);\r\nexport default appDownloadManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { DownloadOptions } from \"../mtproto/apiFileManager\";\r\nimport { bytesFromHex } from \"../../helpers/bytes\";\r\nimport { CancellablePromise } from \"../../helpers/cancellablePromise\";\r\nimport { getFileNameByLocation } from \"../../helpers/fileName\";\r\nimport { safeReplaceArrayInObject, isObject } from \"../../helpers/object\";\r\nimport { isSafari } from \"../../helpers/userAgent\";\r\nimport { InputFileLocation, InputMedia, Photo, PhotoSize, PhotosPhotos } from \"../../layer\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport referenceDatabase, { ReferenceContext } from \"../mtproto/referenceDatabase\";\r\nimport { MyDocument } from \"./appDocsManager\";\r\nimport appDownloadManager, { ThumbCache } from \"./appDownloadManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport blur from \"../../helpers/blur\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport renderImageFromUrl from \"../../helpers/dom/renderImageFromUrl\";\r\nimport calcImageInBox from \"../../helpers/calcImageInBox\";\r\nimport { makeMediaSize, MediaSize } from \"../../helpers/mediaSizes\";\r\n\r\nexport type MyPhoto = Photo.photo;\r\n\r\n// TIMES = 2 DUE TO SIDEBAR AND CHAT\r\n//let TEST_FILE_REFERENCE = \"5440692274120994569\", TEST_FILE_REFERENCE_TIMES = 2;\r\n\r\nexport class AppPhotosManager {\r\n  private photos: {\r\n    [id: string]: MyPhoto\r\n  } = {};\r\n\r\n  public windowW = 0;\r\n  public windowH = 0;\r\n  \r\n  private static jpegHeader = bytesFromHex('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00');\r\n  private static jpegTail = bytesFromHex('ffd9');\r\n  \r\n  constructor() {\r\n    // @ts-ignore\r\n    const w: any = 'visualViewport' in window ? window.visualViewport : window;\r\n    const set = () => {\r\n      this.windowW = w.width || w.innerWidth;\r\n      this.windowH = w.height || w.innerHeight;\r\n    };\r\n    w.addEventListener('resize', set);\r\n    set();\r\n  }\r\n  \r\n  public savePhoto(photo: Photo, context?: ReferenceContext) {\r\n    if(photo._ === 'photoEmpty') return undefined;\r\n\r\n    /* if(photo.id === TEST_FILE_REFERENCE) {\r\n      console.warn('Testing FILE_REFERENCE_EXPIRED');\r\n      const bytes = [2, 67, 175, 43, 190, 0, 0, 20, 62, 95, 111, 33, 45, 99, 220, 116, 218, 11, 167, 127, 213, 18, 127, 32, 243, 202, 117, 80, 30];\r\n      //photo.file_reference = new Uint8Array(bytes);\r\n      photo.file_reference = bytes;\r\n      if(!--TEST_FILE_REFERENCE_TIMES) {\r\n        TEST_FILE_REFERENCE = '';\r\n      }\r\n    } */\r\n\r\n    const oldPhoto = this.photos[photo.id];\r\n    if(photo.file_reference) { // * because we can have a new object w/o the file_reference while sending\r\n      safeReplaceArrayInObject('file_reference', oldPhoto, photo);\r\n      referenceDatabase.saveContext(photo.file_reference, context);\r\n    }\r\n\r\n    if(photo.sizes?.length) {\r\n      const size = photo.sizes[photo.sizes.length - 1];\r\n      if(size._ === 'photoSizeProgressive') {\r\n        size.size = size.sizes[size.sizes.length - 1];\r\n      }\r\n    }\r\n\r\n    if(oldPhoto) {\r\n      return Object.assign(oldPhoto, photo);\r\n    }\r\n\r\n    return this.photos[photo.id] = photo;\r\n  }\r\n  \r\n  public choosePhotoSize(photo: MyPhoto | MyDocument, boxWidth = 0, boxHeight = 0, useBytes = false) {\r\n    if(window.devicePixelRatio > 1) {\r\n      boxWidth *= 2;\r\n      boxHeight *= 2;\r\n    }\r\n    \r\n    /*\r\n    s\tbox\t100x100\r\n    m\tbox\t320x320\r\n    x\tbox\t800x800\r\n    y\tbox\t1280x1280\r\n    w\tbox\t2560x2560\r\n    a\tcrop\t160x160\r\n    b\tcrop\t320x320\r\n    c\tcrop\t640x640\r\n    d\tcrop\t1280x1280 */\r\n\r\n    let bestPhotoSize: PhotoSize = {_: 'photoSizeEmpty', type: ''};\r\n    const sizes = ((photo as MyPhoto).sizes || (photo as MyDocument).thumbs) as PhotoSize[];\r\n    if(sizes?.length) {\r\n      for(let i = 0, length = sizes.length; i < length; ++i) {\r\n        const photoSize = sizes[i];\r\n        if(!('w' in photoSize) && !('h' in photoSize)) continue;\r\n  \r\n        bestPhotoSize = photoSize;\r\n  \r\n        const size = calcImageInBox(photoSize.w, photoSize.h, boxWidth, boxHeight);\r\n        if(size.width >= boxWidth || size.height >= boxHeight) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(useBytes && bestPhotoSize._ === 'photoSizeEmpty' && sizes[0]._ === 'photoStrippedSize') {\r\n        bestPhotoSize = sizes[0];\r\n      }\r\n    }\r\n    \r\n    return bestPhotoSize;\r\n  }\r\n  \r\n  public getUserPhotos(userId: number, maxId: string = '0', limit: number = 20) {\r\n    const inputUser = appUsersManager.getUserInput(userId);\r\n    return apiManager.invokeApiCacheable('photos.getUserPhotos', {\r\n      user_id: inputUser,\r\n      offset: 0,\r\n      limit,\r\n      max_id: maxId\r\n    }, {cacheSeconds: 60}).then((photosResult) => {\r\n      appUsersManager.saveApiUsers(photosResult.users);\r\n      const photoIds: string[] = photosResult.photos.map((photo, idx) => {\r\n        photosResult.photos[idx] = this.savePhoto(photo, {type: 'profilePhoto', peerId: userId});\r\n        return photo.id;\r\n      });\r\n      \r\n      return {\r\n        count: (photosResult as PhotosPhotos.photosPhotosSlice).count || photosResult.photos.length,\r\n        photos: photoIds\r\n      };\r\n    });\r\n  }\r\n\r\n  public getPreviewURLFromBytes(bytes: Uint8Array | number[], isSticker = false) {\r\n    let arr: Uint8Array;\r\n    if(!isSticker) {\r\n      arr = new Uint8Array(AppPhotosManager.jpegHeader.concat(Array.from(bytes.slice(3)), AppPhotosManager.jpegTail));\r\n      arr[164] = bytes[1];\r\n      arr[166] = bytes[2];\r\n    } else {\r\n      arr = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\r\n    }\r\n\r\n    let mimeType: string;\r\n    if(isSticker) {\r\n      mimeType = isSafari ? 'image/png' : 'image/webp';\r\n    } else {\r\n      mimeType = 'image/jpeg';\r\n    }\r\n\r\n    const blob = new Blob([arr], {type: mimeType});\r\n    return URL.createObjectURL(blob);\r\n  }\r\n\r\n  /**\r\n   * https://core.telegram.org/api/files#vector-thumbnails\r\n   */\r\n  public getPathFromPhotoPathSize(size: PhotoSize.photoPathSize) {\r\n    const bytes = size.bytes;\r\n    const lookup = \"AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,\";\r\n\r\n    let path = 'M';\r\n    for(let i = 0, length = bytes.length; i < length; ++i) {\r\n      const num = bytes[i];\r\n\r\n      if(num >= (128 + 64)) {\r\n        path += lookup[num - 128 - 64];\r\n      } else {\r\n        if(num >= 128) {\r\n          path += ',';\r\n        } else if(num >= 64) {\r\n          path += '-'; \r\n        }\r\n        path += '' + (num & 63);\r\n      }\r\n    }\r\n    path += 'z';\r\n\r\n    return path;\r\n  }\r\n\r\n  public getPreviewURLFromThumb(photo: MyPhoto | MyDocument, thumb: PhotoSize.photoCachedSize | PhotoSize.photoStrippedSize, isSticker = false) {\r\n    const cacheContext = appDownloadManager.getCacheContext(photo, thumb.type);\r\n    return cacheContext.url || (cacheContext.url = this.getPreviewURLFromBytes(thumb.bytes, isSticker));\r\n  }\r\n  \r\n  public getImageFromStrippedThumb(photo: MyPhoto | MyDocument, thumb: PhotoSize.photoCachedSize | PhotoSize.photoStrippedSize, useBlur: boolean) {\r\n    const url = this.getPreviewURLFromThumb(photo, thumb, false);\r\n\r\n    const image = new Image();\r\n    image.classList.add('thumbnail');\r\n\r\n    const loadPromise = (useBlur ? blur(url) : Promise.resolve(url)).then(url => {\r\n      return new Promise<any>((resolve) => {\r\n        renderImageFromUrl(image, url, resolve);\r\n      });\r\n    });\r\n    \r\n    return {image, loadPromise};\r\n  }\r\n  \r\n  public setAttachmentSize(photo: MyPhoto | MyDocument, element: HTMLElement | SVGForeignObjectElement, boxWidth: number, boxHeight: number, noZoom = true, message?: any) {\r\n    const photoSize = this.choosePhotoSize(photo, boxWidth, boxHeight);\r\n    //console.log('setAttachmentSize', photo, photo.sizes[0].bytes, div);\r\n    \r\n    let size: MediaSize;\r\n    if(photo._ === 'document') {\r\n      size = makeMediaSize(photo.w || 512, photo.h || 512);\r\n    } else {\r\n      size = makeMediaSize('w' in photoSize ? photoSize.w : 100, 'h' in photoSize ? photoSize.h : 100);\r\n    }\r\n\r\n    let boxSize = makeMediaSize(boxWidth, boxHeight);\r\n\r\n    boxSize = size = size.aspect(boxSize, noZoom);\r\n\r\n    let isFit = true;\r\n\r\n    if(photo._ === 'photo' || ['video', 'gif'].includes(photo.type)) {\r\n      if(boxSize.width < 200 && boxSize.height < 200) { // make at least one side this big\r\n        boxSize = size = size.aspectCovered(makeMediaSize(200, 200));\r\n      }\r\n  \r\n      if(message && \r\n        (message.message || \r\n          message.media.webpage || \r\n          (message.replies && message.replies.pFlags.comments && message.replies.channel_id !== 777)\r\n        )\r\n      ) { // make sure that bubble block is human-readable\r\n        if(boxSize.width < 320) {\r\n          boxSize = makeMediaSize(320, boxSize.height);\r\n          isFit = false;\r\n        }\r\n      }\r\n  \r\n      if(isFit && boxSize.width < 120) { // if image is too narrow\r\n        boxSize = makeMediaSize(120, boxSize.height);\r\n        isFit = false;\r\n      }\r\n    }\r\n\r\n    // if(element instanceof SVGForeignObjectElement) {\r\n    //   element.setAttributeNS(null, 'width', '' + w);\r\n    //   element.setAttributeNS(null, 'height', '' + h);\r\n\r\n    //   //console.log('set dimensions to svg element:', element, w, h);\r\n    // } else {\r\n      element.style.width = boxSize.width + 'px';\r\n      element.style.height = boxSize.height + 'px';\r\n    // }\r\n    \r\n    return {photoSize, size, isFit};\r\n  }\r\n\r\n  public getStrippedThumbIfNeeded(photo: MyPhoto | MyDocument, cacheContext: ThumbCache, useBlur: boolean, ignoreCache = false): ReturnType<AppPhotosManager['getImageFromStrippedThumb']> {\r\n    if(!cacheContext.downloaded || (['video', 'gif'] as MyDocument['type'][]).includes((photo as MyDocument).type) || ignoreCache) {\r\n      if(photo._ === 'document' && cacheContext.downloaded && !ignoreCache) {\r\n        return null;\r\n      }\r\n\r\n      const sizes = (photo as MyPhoto).sizes || (photo as MyDocument).thumbs;\r\n      const thumb = sizes?.length ? sizes.find(size => size._ === 'photoStrippedSize') : null;\r\n      if(thumb && ('bytes' in thumb)) {\r\n        return appPhotosManager.getImageFromStrippedThumb(photo, thumb as any, useBlur);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  \r\n  public getPhotoDownloadOptions(photo: MyPhoto | MyDocument, photoSize: PhotoSize, queueId?: number, onlyCache?: boolean): DownloadOptions {\r\n    const isDocument = photo._ === 'document';\r\n\r\n    if(!photoSize || photoSize._ === 'photoSizeEmpty') {\r\n      //console.error('no photoSize by photo:', photo);\r\n      throw new Error('photoSizeEmpty!');\r\n    }\r\n    \r\n    // maybe it's a thumb\r\n    const isPhoto = (photoSize._ === 'photoSize' || photoSize._ === 'photoSizeProgressive') && photo.access_hash && photo.file_reference;\r\n    const location: InputFileLocation.inputPhotoFileLocation | InputFileLocation.inputDocumentFileLocation = {\r\n      _: isDocument ? 'inputDocumentFileLocation' : 'inputPhotoFileLocation',\r\n      id: photo.id,\r\n      access_hash: photo.access_hash,\r\n      file_reference: photo.file_reference,\r\n      thumb_size: photoSize.type\r\n    };\r\n\r\n    return {\r\n      dcId: photo.dc_id, \r\n      location, \r\n      size: isPhoto ? (photoSize as PhotoSize.photoSize).size : undefined, \r\n      queueId, \r\n      onlyCache\r\n    };\r\n  }\r\n\r\n  /* public getPhotoURL(photo: MTPhoto | MTMyDocument, photoSize: MTPhotoSize) {\r\n    const downloadOptions = this.getPhotoDownloadOptions(photo, photoSize);\r\n\r\n    return {url: getFileURL('photo', downloadOptions), location: downloadOptions.location};\r\n  } */\r\n\r\n  /* public isDownloaded(media: any) {\r\n    const isPhoto = media._ === 'photo';\r\n    const photo = isPhoto ? this.getPhoto(media.id) : null;\r\n    let isDownloaded: boolean;\r\n    if(photo) {\r\n      isDownloaded = photo.downloaded > 0;\r\n    } else {\r\n      const cachedThumb = this.getDocumentCachedThumb(media.id);\r\n      isDownloaded = cachedThumb?.downloaded > 0;\r\n    }\r\n\r\n    return isDownloaded;\r\n  } */\r\n  \r\n  public preloadPhoto(photoId: MyPhoto | MyDocument | string, photoSize?: PhotoSize, queueId?: number, onlyCache?: boolean): CancellablePromise<Blob> {\r\n    const photo = this.getPhoto(photoId);\r\n\r\n    // @ts-ignore\r\n    if(!photo || photo._ === 'photoEmpty') {\r\n      throw new Error('preloadPhoto photoEmpty!');\r\n    }\r\n\r\n    if(!photoSize) {\r\n      const fullWidth = this.windowW;\r\n      const fullHeight = this.windowH;\r\n      \r\n      photoSize = this.choosePhotoSize(photo, fullWidth, fullHeight);\r\n    }\r\n\r\n    const cacheContext = appDownloadManager.getCacheContext(photo, photoSize.type);\r\n    if(cacheContext.downloaded >= ('size' in photoSize ? photoSize.size : 0) && cacheContext.url) {\r\n      return Promise.resolve() as any;\r\n    }\r\n    \r\n    const downloadOptions = this.getPhotoDownloadOptions(photo, photoSize, queueId, onlyCache);\r\n    const fileName = getFileNameByLocation(downloadOptions.location);\r\n\r\n    let download = appDownloadManager.getDownload(fileName);\r\n    if(download) {\r\n      return download;\r\n    }\r\n\r\n    download = appDownloadManager.download(downloadOptions);\r\n    download.then(blob => {\r\n      if(!cacheContext.downloaded || cacheContext.downloaded < blob.size) {\r\n        const url = URL.createObjectURL(blob);\r\n        cacheContext.downloaded = blob.size;\r\n        cacheContext.url = url;\r\n\r\n        //console.log('wrote photo:', photo, photoSize, cacheContext, blob);\r\n      }\r\n\r\n      return blob;\r\n    }).catch(() => {});\r\n\r\n    return download;\r\n  }\r\n  \r\n  public getPhoto(photoId: any/* MyPhoto | string */): MyPhoto {\r\n    return isObject(photoId) ? photoId as MyPhoto : this.photos[photoId as any as string];\r\n  }\r\n\r\n  public getInput(photo: MyPhoto): InputMedia.inputMediaPhoto {\r\n    return {\r\n      _: 'inputMediaPhoto',\r\n      id: {\r\n        _: 'inputPhoto',\r\n        id: photo.id,\r\n        access_hash: photo.access_hash,\r\n        file_reference: photo.file_reference\r\n      },\r\n      ttl_seconds: 0\r\n    };\r\n  }\r\n\r\n  public savePhotoFile(photo: MyPhoto | MyDocument, queueId?: number) {\r\n    const fullPhotoSize = this.choosePhotoSize(photo, 0xFFFF, 0xFFFF);\r\n    if(!(fullPhotoSize._ === 'photoSize' || fullPhotoSize._ === 'photoSizeProgressive')) {\r\n      return;\r\n    }\r\n\r\n    const downloadOptions = this.getPhotoDownloadOptions(photo, fullPhotoSize, queueId);\r\n    downloadOptions.fileName = 'photo' + photo.id + '.jpg';\r\n    appDownloadManager.downloadToDisc(downloadOptions, downloadOptions.fileName);\r\n  }\r\n}\r\n\r\nconst appPhotosManager = new AppPhotosManager();\r\nMOUNT_CLASS_TO.appPhotosManager = appPhotosManager;\r\nexport default appPhotosManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport renderImageFromUrl from \"../../helpers/dom/renderImageFromUrl\";\r\nimport replaceContent from \"../../helpers/dom/replaceContent\";\r\nimport sequentialDom from \"../../helpers/sequentialDom\";\r\nimport { ChannelParticipantsFilter, ChannelsChannelParticipants, Chat, ChatFull, ChatParticipants, ChatPhoto, ExportedChatInvite, InputChannel, InputFile, InputFileLocation, PhotoSize, Update, UserFull, UserProfilePhoto } from \"../../layer\";\r\n//import apiManager from '../mtproto/apiManager';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appDownloadManager from \"./appDownloadManager\";\r\nimport appNotificationsManager from \"./appNotificationsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appPhotosManager, { MyPhoto } from \"./appPhotosManager\";\r\nimport appUsersManager, { User } from \"./appUsersManager\";\r\n\r\ntype PeerPhotoSize = 'photo_small' | 'photo_big';\r\n\r\nexport class AppProfileManager {\r\n  private botInfos: any = {};\r\n  private usersFull: {[id: string]: UserFull.userFull} = {};\r\n  public chatsFull: {[id: string]: ChatFull} = {};\r\n  private fullPromises: {[peerId: string]: Promise<ChatFull.chatFull | ChatFull.channelFull | UserFull>} = {};\r\n\r\n  private savedAvatarURLs: {\r\n    [peerId: number]: {\r\n      [size in PeerPhotoSize]?: string | Promise<string>\r\n    }\r\n  } = {};\r\n\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updateChatParticipants: (update) => {\r\n        const participants = update.participants;\r\n        if(participants._ === 'chatParticipants') {\r\n          const chatId = participants.chat_id;\r\n          const chatFull = this.chatsFull[chatId] as ChatFull.chatFull;\r\n          if(chatFull !== undefined) {\r\n            chatFull.participants = participants;\r\n            rootScope.broadcast('chat_full_update', chatId);\r\n          }\r\n        }\r\n      },\r\n\r\n      updateChatParticipantAdd: (update) => {\r\n        const chatFull = this.chatsFull[update.chat_id] as ChatFull.chatFull;\r\n        if(chatFull !== undefined) {\r\n          const _participants = chatFull.participants as ChatParticipants.chatParticipants;\r\n          const participants = _participants.participants || [];\r\n          for(let i = 0, length = participants.length; i < length; i++) {\r\n            if(participants[i].user_id === update.user_id) {\r\n              return;\r\n            }\r\n          }\r\n\r\n          participants.push({\r\n            _: 'chatParticipant',\r\n            user_id: update.user_id,\r\n            inviter_id: update.inviter_id,\r\n            date: tsNow(true)\r\n          });\r\n\r\n          _participants.version = update.version;\r\n          rootScope.broadcast('chat_full_update', update.chat_id);\r\n        }\r\n      },\r\n\r\n      updateChatParticipantDelete: (update) => {\r\n        const chatFull = this.chatsFull[update.chat_id] as ChatFull.chatFull;\r\n        if(chatFull !== undefined) {\r\n          const _participants = chatFull.participants as ChatParticipants.chatParticipants;\r\n          const participants = _participants.participants || [];\r\n          for(let i = 0, length = participants.length; i < length; i++) {\r\n            if(participants[i].user_id === update.user_id) {\r\n              participants.splice(i, 1);\r\n              _participants.version = update.version;\r\n              rootScope.broadcast('chat_full_update', update.chat_id);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    rootScope.on('chat_update', (chatId) => {\r\n      const fullChat = this.chatsFull[chatId];\r\n      const chat: Chat.chat = appChatsManager.getChat(chatId);\r\n      if(!chat.photo || !fullChat) {\r\n        return;\r\n      }\r\n\r\n      const emptyPhoto = chat.photo._ === 'chatPhotoEmpty';\r\n      //////console.log('chat_update:', fullChat);\r\n      if(fullChat.chat_photo && emptyPhoto !== (fullChat.chat_photo._ === 'photoEmpty')) {\r\n        delete this.chatsFull[chatId];\r\n        rootScope.broadcast('chat_full_update', chatId);\r\n        return;\r\n      }\r\n      if(emptyPhoto) {\r\n        return;\r\n      }\r\n\r\n      const photoId = (chat.photo as ChatPhoto.chatPhoto).photo_id;\r\n      const chatFullPhotoId = fullChat.chat_photo?.id;\r\n      if(chatFullPhotoId !== photoId) {\r\n        delete this.chatsFull[chatId];\r\n        rootScope.broadcast('chat_full_update', chatId);\r\n      }\r\n    });\r\n  }\r\n\r\n  public saveBotInfo(botInfo: any) {\r\n    const botId = botInfo && botInfo.user_id;\r\n    if(!botId) {\r\n      return null;\r\n    }\r\n\r\n    const commands: any = {};\r\n    botInfo.commands.forEach((botCommand: any) => {\r\n      commands[botCommand.command] = botCommand.description;\r\n    });\r\n\r\n    return this.botInfos[botId] = {\r\n      id: botId,\r\n      version: botInfo.version,\r\n      shareText: botInfo.share_text,\r\n      description: botInfo.description,\r\n      commands: commands\r\n    };\r\n  }\r\n\r\n  public getProfile(id: number, override?: true): Promise<UserFull> {\r\n    if(this.usersFull[id] && !override) {\r\n      return Promise.resolve(this.usersFull[id]);\r\n    }\r\n\r\n    if(this.fullPromises[id]) {\r\n      return this.fullPromises[id] as any;\r\n    }\r\n\r\n    return this.fullPromises[id] = apiManager.invokeApi('users.getFullUser', {\r\n      id: appUsersManager.getUserInput(id)\r\n    }).then((userFull) => {\r\n      const user = userFull.user as User;\r\n      appUsersManager.saveApiUser(user, true);\r\n\r\n      if(userFull.profile_photo) {\r\n        userFull.profile_photo = appPhotosManager.savePhoto(userFull.profile_photo, {type: 'profilePhoto', peerId: id});\r\n      }\r\n\r\n      if(userFull.about !== undefined) {\r\n        userFull.rAbout = RichTextProcessor.wrapRichText(userFull.about, {noLinebreaks: true});\r\n      }\r\n\r\n      appNotificationsManager.savePeerSettings(id, userFull.notify_settings);\r\n\r\n      if(userFull.bot_info) {\r\n        userFull.bot_info = this.saveBotInfo(userFull.bot_info) as any;\r\n      }\r\n\r\n      //appMessagesManager.savePinnedMessage(id, userFull.pinned_msg_id);\r\n\r\n      delete this.fullPromises[id];\r\n\r\n      return this.usersFull[id] = userFull;\r\n    }) as any;\r\n  }\r\n\r\n  public getProfileByPeerId(peerId: number, override?: true): Promise<ChatFull.chatFull | ChatFull.channelFull | UserFull.userFull> {\r\n    if(peerId < 0) return this.getChatFull(-peerId, override);\r\n    else return this.getProfile(peerId, override);\r\n  }\r\n\r\n  public getFullPhoto(peerId: number) {\r\n    return this.getProfileByPeerId(peerId).then(profile => {\r\n      switch(profile._) {\r\n        case 'userFull':\r\n          return profile.profile_photo;\r\n        case 'channelFull':\r\n        case 'chatFull':\r\n          return profile.chat_photo;\r\n      }\r\n    });\r\n  }\r\n\r\n  /* public getPeerBots(peerId: number) {\r\n    var peerBots: any[] = [];\r\n    if(peerId >= 0 && !appUsersManager.isBot(peerId) ||\r\n      (appPeersManager.isChannel(peerId) && !appPeersManager.isMegagroup(peerId))) {\r\n      return Promise.resolve(peerBots);\r\n    }\r\n    if(peerId >= 0) {\r\n      return this.getProfile(peerId).then((userFull: any) => {\r\n        var botInfo = userFull.bot_info;\r\n        if(botInfo && botInfo._ !== 'botInfoEmpty') {\r\n          peerBots.push(botInfo);\r\n        }\r\n        return peerBots;\r\n      });\r\n    }\r\n\r\n    return this.getChatFull(-peerId).then((chatFull: any) => {\r\n      chatFull.bot_info.forEach((botInfo: any) => {\r\n        peerBots.push(this.saveBotInfo(botInfo))\r\n      });\r\n      return peerBots;\r\n    });\r\n  } */\r\n\r\n  public getChatFull(id: number, override?: true): Promise<ChatFull.chatFull | ChatFull.channelFull> {\r\n    if(appChatsManager.isChannel(id)) {\r\n      return this.getChannelFull(id, override);\r\n    }\r\n\r\n    const fullChat = this.chatsFull[id] as ChatFull.chatFull;\r\n    if(fullChat && !override) {\r\n      const chat = appChatsManager.getChat(id);\r\n      if(chat.version === (fullChat.participants as ChatParticipants.chatParticipants).version ||\r\n        chat.pFlags.left) {\r\n        return Promise.resolve(fullChat);\r\n      }\r\n    }\r\n\r\n    const peerId = -id;\r\n    if(this.fullPromises[peerId] !== undefined) {\r\n      return this.fullPromises[peerId] as any;\r\n    }\r\n\r\n    // console.trace(dT(), 'Get chat full', id, appChatsManager.getChat(id))\r\n    return this.fullPromises[peerId] = apiManager.invokeApi('messages.getFullChat', {\r\n      chat_id: id\r\n    }).then((result) => {\r\n      appChatsManager.saveApiChats(result.chats, true);\r\n      appUsersManager.saveApiUsers(result.users);\r\n      const fullChat = result.full_chat as ChatFull.chatFull;\r\n      if(fullChat && fullChat.chat_photo && fullChat.chat_photo.id) {\r\n        fullChat.chat_photo = appPhotosManager.savePhoto(fullChat.chat_photo, {type: 'profilePhoto', peerId: peerId});\r\n      }\r\n\r\n      //appMessagesManager.savePinnedMessage(peerId, fullChat.pinned_msg_id);\r\n      appNotificationsManager.savePeerSettings(peerId, fullChat.notify_settings);\r\n      delete this.fullPromises[peerId];\r\n      this.chatsFull[id] = fullChat;\r\n      rootScope.broadcast('chat_full_update', id);\r\n\r\n      return fullChat;\r\n    }) as any;\r\n  }\r\n\r\n  public getChatInviteLink(id: number, force?: boolean) {\r\n    return this.getChatFull(id).then((chatFull) => {\r\n      if(!force &&\r\n        chatFull.exported_invite &&\r\n        chatFull.exported_invite._ == 'chatInviteExported') {\r\n        return chatFull.exported_invite.link;\r\n      }\r\n      \r\n      return apiManager.invokeApi('messages.exportChatInvite', {\r\n        peer: appPeersManager.getInputPeerById(-id)\r\n      }).then((exportedInvite) => {\r\n        if(this.chatsFull[id] !== undefined) {\r\n          this.chatsFull[id].exported_invite = exportedInvite;\r\n        }\r\n\r\n        return (exportedInvite as ExportedChatInvite.chatInviteExported).link;\r\n      });\r\n    });\r\n  }\r\n\r\n  public getChannelParticipants(id: number, filter: ChannelParticipantsFilter = {_: 'channelParticipantsRecent'}, limit = 200, offset = 0) {\r\n    if(filter._ === 'channelParticipantsRecent') {\r\n      const chat = appChatsManager.getChat(id);\r\n      if(chat &&\r\n          chat.pFlags && (\r\n            chat.pFlags.kicked ||\r\n            chat.pFlags.broadcast && !chat.pFlags.creator && !chat.admin_rights\r\n          )) {\r\n        return Promise.reject();\r\n      }\r\n    }\r\n\r\n    return apiManager.invokeApiCacheable('channels.getParticipants', {\r\n      channel: appChatsManager.getChannelInput(id),\r\n      filter,\r\n      offset,\r\n      limit,\r\n      hash: 0\r\n    }, {cacheSeconds: 60}).then(result => {\r\n      appUsersManager.saveApiUsers((result as ChannelsChannelParticipants.channelsChannelParticipants).users);\r\n      return result as ChannelsChannelParticipants.channelsChannelParticipants;\r\n    });\r\n    /* let maybeAddSelf = (participants: any[]) => {\r\n      let chat = appChatsManager.getChat(id);\r\n      let selfMustBeFirst = filter._ === 'channelParticipantsRecent' &&\r\n                            !offset &&\r\n                            !chat.pFlags.kicked &&\r\n                            !chat.pFlags.left;\r\n\r\n      if(selfMustBeFirst) {\r\n        participants = copy(participants);\r\n        let myID = appUsersManager.getSelf().id;\r\n        let myIndex = participants.findIndex(p => p.user_id === myID);\r\n        let myParticipant;\r\n\r\n        if(myIndex !== -1) {\r\n          myParticipant = participants[myIndex];\r\n          participants.splice(myIndex, 1);\r\n        } else {\r\n          myParticipant = {_: 'channelParticipantSelf', user_id: myID};\r\n        }\r\n\r\n        participants.unshift(myParticipant);\r\n      }\r\n\r\n      return participants;\r\n    } */\r\n  }\r\n\r\n  public getChannelParticipant(id: number, peerId: number) {\r\n    return apiManager.invokeApiSingle('channels.getParticipant', {\r\n      channel: appChatsManager.getChannelInput(id),\r\n      participant: appPeersManager.getInputPeerById(peerId),\r\n    }).then(channelParticipant => {\r\n      appUsersManager.saveApiUsers(channelParticipant.users);\r\n      return channelParticipant.participant;\r\n    });\r\n  }\r\n\r\n  public getChannelFull(id: number, override?: true): Promise<ChatFull.channelFull> {\r\n    if(this.chatsFull[id] !== undefined && !override) {\r\n      return Promise.resolve(this.chatsFull[id] as ChatFull.channelFull);\r\n    }\r\n\r\n    const peerId = -id;\r\n    if(this.fullPromises[peerId] !== undefined) {\r\n      return this.fullPromises[peerId] as any;\r\n    }\r\n\r\n    return this.fullPromises[peerId] = apiManager.invokeApi('channels.getFullChannel', {\r\n      channel: appChatsManager.getChannelInput(id)\r\n    }).then((result) => {\r\n      appChatsManager.saveApiChats(result.chats, true);\r\n      appUsersManager.saveApiUsers(result.users);\r\n      const fullChannel = result.full_chat as ChatFull.channelFull;\r\n      if(fullChannel && fullChannel.chat_photo.id) {\r\n        fullChannel.chat_photo = appPhotosManager.savePhoto(fullChannel.chat_photo, {type: 'profilePhoto', peerId});\r\n        //appPhotosManager.savePhoto(fullChannel.chat_photo);\r\n      }\r\n      appNotificationsManager.savePeerSettings(peerId, fullChannel.notify_settings);\r\n\r\n      delete this.fullPromises[peerId];\r\n      this.chatsFull[id] = fullChannel;\r\n      rootScope.broadcast('chat_full_update', id);\r\n\r\n      return fullChannel;\r\n    }, (error) => {\r\n      switch (error.type) {\r\n        case 'CHANNEL_PRIVATE':\r\n          let channel = appChatsManager.getChat(id);\r\n          channel = {_: 'channelForbidden', access_hash: channel.access_hash, title: channel.title};\r\n          apiUpdatesManager.processUpdateMessage({\r\n            _: 'updates',\r\n            updates: [{\r\n              _: 'updateChannel',\r\n              channel_id: id\r\n            } as Update.updateChannel],\r\n            chats: [channel],\r\n            users: []\r\n          });\r\n          break;\r\n      }\r\n\r\n      return Promise.reject(error);\r\n    }) as any;\r\n  }\r\n\r\n  public invalidateChannelParticipants(id: number) {\r\n    delete this.chatsFull[id];\r\n    delete this.fullPromises[-id];\r\n    apiManager.clearCache('channels.getParticipants', (params) => (params.channel as InputChannel.inputChannel).channel_id === id);\r\n    rootScope.broadcast('chat_full_update', id);\r\n  }\r\n\r\n  public updateProfile(first_name: string, last_name: string, about: string) {\r\n    return apiManager.invokeApi('account.updateProfile', {\r\n      first_name,\r\n      last_name,\r\n      about\r\n    }).then(user => {\r\n      appUsersManager.saveApiUser(user);\r\n      \r\n      return this.getProfile(rootScope.myId, true);\r\n    });\r\n  }\r\n\r\n  public uploadProfilePhoto(inputFile: InputFile) {\r\n    return apiManager.invokeApi('photos.uploadProfilePhoto', {\r\n      file: inputFile\r\n    }).then((updateResult) => {\r\n      appUsersManager.saveApiUsers(updateResult.users);\r\n\r\n      const myId = rootScope.myId;\r\n      appPhotosManager.savePhoto(updateResult.photo, {\r\n        type: 'profilePhoto',\r\n        peerId: myId\r\n      });\r\n\r\n      apiUpdatesManager.processUpdateMessage({\r\n        _: 'updateShort',\r\n        update: {\r\n          _: 'updateUserPhoto',\r\n          user_id: myId,\r\n          date: tsNow(true),\r\n          photo: appUsersManager.getUser(myId).photo,\r\n          previous: true\r\n        } as Update.updateUserPhoto\r\n      });\r\n    });\r\n  }\r\n\r\n  public removeFromAvatarsCache(peerId: number) {\r\n    if(this.savedAvatarURLs[peerId]) {\r\n      delete this.savedAvatarURLs[peerId];\r\n    }\r\n  }\r\n\r\n  public loadAvatar(peerId: number, photo: UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto, size: PeerPhotoSize) {\r\n    const inputPeer = appPeersManager.getInputPeerById(peerId);\r\n\r\n    let cached = false;\r\n    let getAvatarPromise: Promise<string>;\r\n    let saved = this.savedAvatarURLs[peerId];\r\n    if(!saved || !saved[size]) {\r\n      if(!saved) {\r\n        saved = this.savedAvatarURLs[peerId] = {};\r\n      }\r\n\r\n      //console.warn('will invoke downloadSmallFile:', peerId);\r\n      const peerPhotoFileLocation: InputFileLocation.inputPeerPhotoFileLocation = {\r\n        _: 'inputPeerPhotoFileLocation', \r\n        pFlags: {},\r\n        peer: inputPeer, \r\n        photo_id: photo.photo_id\r\n      };\r\n\r\n      if(size === 'photo_big') {\r\n        peerPhotoFileLocation.pFlags.big = true;\r\n      }\r\n\r\n      const downloadOptions = {dcId: photo.dc_id, location: peerPhotoFileLocation};\r\n\r\n      /* let str: string;\r\n      const time = Date.now();\r\n      if(peerId === 0) {\r\n        str = `download avatar ${peerId}`;\r\n      } */\r\n\r\n      const promise = appDownloadManager.download(downloadOptions);\r\n      getAvatarPromise = saved[size] = promise.then(blob => {\r\n        return saved[size] = URL.createObjectURL(blob);\r\n\r\n        /* if(str) {\r\n          console.log(str, Date.now() / 1000, Date.now() - time);\r\n        } */\r\n      });\r\n    } else if(typeof(saved[size]) !== 'string') {\r\n      getAvatarPromise = saved[size] as Promise<any>;\r\n    } else {\r\n      getAvatarPromise = Promise.resolve(saved[size]);\r\n      cached = true;\r\n    }\r\n\r\n    return {cached, loadPromise: getAvatarPromise};\r\n  }\r\n\r\n  public putAvatar(div: HTMLElement, peerId: number, photo: UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto, size: PeerPhotoSize, img = new Image()) {\r\n    const {cached, loadPromise} = this.loadAvatar(peerId, photo, size);\r\n\r\n    let callback: () => void;\r\n    if(cached) {\r\n      // смотри в misc.ts: renderImageFromUrl\r\n      callback = () => {\r\n        replaceContent(div, img);\r\n        div.dataset.color = '';\r\n      };\r\n    } else {\r\n      const animate = rootScope.settings.animationsEnabled;\r\n      if(animate) {\r\n        img.classList.add('fade-in');\r\n      }\r\n\r\n      callback = () => {\r\n        replaceContent(div, img);\r\n\r\n        setTimeout(() => {\r\n          if(div.childElementCount) {\r\n            div.dataset.color = '';\r\n\r\n            if(animate) {\r\n              sequentialDom.mutateElement(img, () => {\r\n                img.classList.remove('fade-in');\r\n              });\r\n            }\r\n          }\r\n        }, animate ? 200 : 0);\r\n      };\r\n    }\r\n\r\n    const renderPromise = loadPromise.then((url) => {\r\n      /* if(photo.stripped_thumb) {\r\n        url = appPhotosManager.getPreviewURLFromBytes(photo.stripped_thumb);\r\n      } */\r\n\r\n      return new Promise<void>((resolve) => {\r\n        renderImageFromUrl(img, url, () => {\r\n          callback();\r\n          resolve();\r\n        }/* , false */);\r\n      });\r\n    });\r\n\r\n    return {cached, loadPromise: renderPromise};\r\n  }\r\n\r\n  // peerId === peerId || title\r\n  public putPhoto(div: HTMLElement, peerId: number, isDialog = false, title = '') {\r\n    const photo = appPeersManager.getPeerPhoto(peerId);\r\n\r\n    const size: PeerPhotoSize = 'photo_small';\r\n    const avatarAvailable = !!photo;\r\n    const avatarRendered = div.firstElementChild && !(div.firstElementChild as HTMLElement).classList.contains('emoji');\r\n    \r\n    const myId = rootScope.myId;\r\n\r\n    //console.log('loadDialogPhoto location:', location, inputPeer);\r\n    if(peerId === myId && isDialog) {\r\n      div.innerText = '';\r\n      div.dataset.color = '';\r\n      div.classList.add('tgico-saved');\r\n      div.classList.remove('tgico-deletedaccount');\r\n      return;\r\n    }\r\n\r\n    if(peerId > 0) {\r\n      const user = appUsersManager.getUser(peerId);\r\n      if(user && user.pFlags && user.pFlags.deleted) {\r\n        div.innerText = '';\r\n        div.dataset.color = appPeersManager.getPeerColorById(peerId);\r\n        div.classList.add('tgico-deletedaccount');\r\n        div.classList.remove('tgico-saved');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(!avatarAvailable || !avatarRendered || !this.savedAvatarURLs[peerId]) {\r\n      let color = '';\r\n      if(peerId && (peerId !== myId || !isDialog)) {\r\n        color = appPeersManager.getPeerColorById(peerId);\r\n      }\r\n      \r\n      div.innerText = '';\r\n      div.classList.remove('tgico-saved', 'tgico-deletedaccount');\r\n      div.dataset.color = color;\r\n\r\n      let abbr: string;\r\n      if(!title) {\r\n        const peer = appPeersManager.getPeer(peerId);\r\n        abbr = peer.initials ?? '';\r\n      } else {\r\n        abbr = RichTextProcessor.getAbbreviation(title);\r\n      }\r\n\r\n      div.innerHTML = abbr;\r\n      //return Promise.resolve(true);\r\n    }\r\n\r\n    if(avatarAvailable/*  && false */) {\r\n      return this.putAvatar(div, peerId, photo, size);\r\n    }\r\n  }\r\n}\r\n\r\nconst appProfileManager = new AppProfileManager();\r\nMOUNT_CLASS_TO.appProfileManager = appProfileManager;\r\nexport default appProfileManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { FileURLType, getFileNameByLocation, getFileURL } from '../../helpers/fileName';\r\nimport { safeReplaceArrayInObject, defineNotNumerableProperties, isObject } from '../../helpers/object';\r\nimport { Document, InputFileLocation, PhotoSize } from '../../layer';\r\nimport referenceDatabase, { ReferenceContext } from '../mtproto/referenceDatabase';\r\nimport opusDecodeController from '../opusDecodeController';\r\nimport { RichTextProcessor } from '../richtextprocessor';\r\nimport webpWorkerController from '../webp/webpWorkerController';\r\nimport appDownloadManager, { DownloadBlob } from './appDownloadManager';\r\nimport appPhotosManager from './appPhotosManager';\r\nimport blur from '../../helpers/blur';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport { getFullDate } from '../../helpers/date';\r\n\r\nexport type MyDocument = Document.document;\r\n\r\n// TODO: если залить картинку файлом, а потом перезайти в диалог - превьюшка заново скачается\r\n\r\nexport class AppDocsManager {\r\n  private docs: {[docId: string]: MyDocument} = {};\r\n  private savingLottiePreview: {[docId: string]: true} = {};\r\n\r\n  constructor() {\r\n    apiManager.onServiceWorkerFail = this.onServiceWorkerFail;\r\n  }\r\n\r\n  public onServiceWorkerFail = () => {\r\n    for(const id in this.docs) {\r\n      const doc = this.docs[id];\r\n\r\n      if(doc.supportsStreaming) {\r\n        delete doc.supportsStreaming;\r\n        const cacheContext = appDownloadManager.getCacheContext(doc);\r\n        delete cacheContext.url;\r\n      }\r\n    }\r\n  };\r\n\r\n  public saveDoc(doc: Document, context?: ReferenceContext): MyDocument {\r\n    if(doc._ === 'documentEmpty') {\r\n      return undefined;\r\n    }\r\n\r\n    const oldDoc = this.docs[doc.id];\r\n\r\n    if(doc.file_reference) { // * because we can have a new object w/o the file_reference while sending\r\n      safeReplaceArrayInObject('file_reference', oldDoc, doc);\r\n      referenceDatabase.saveContext(doc.file_reference, context);\r\n    }\r\n    \r\n    //console.log('saveDoc', apiDoc, this.docs[apiDoc.id]);\r\n    if(oldDoc) {\r\n      //if(doc._ !== 'documentEmpty' && doc._ === d._) {\r\n        if(doc.thumbs) {\r\n          if(!oldDoc.thumbs) oldDoc.thumbs = doc.thumbs;\r\n          /* else if(apiDoc.thumbs[0].bytes && !d.thumbs[0].bytes) {\r\n            d.thumbs.unshift(apiDoc.thumbs[0]);\r\n          } else if(d.thumbs[0].url) { // fix for converted thumb in safari\r\n            apiDoc.thumbs[0] = d.thumbs[0];\r\n          } */\r\n        }\r\n\r\n      //}\r\n\r\n      return oldDoc;\r\n\r\n      //return Object.assign(d, apiDoc, context);\r\n      //return context ? Object.assign(d, context) : d;\r\n    }\r\n\r\n    this.docs[doc.id] = doc;\r\n\r\n    // * exclude from state\r\n    // defineNotNumerableProperties(doc, [/* 'thumbs',  */'type', 'h', 'w', 'file_name', \r\n    // 'file', 'duration', 'downloaded', 'url', 'audioTitle', \r\n    // 'audioPerformer', 'sticker', 'stickerEmoji', 'stickerEmojiRaw', \r\n    // 'stickerSetInput', 'stickerThumbConverted', 'animated', 'supportsStreaming']);\r\n\r\n    doc.attributes.forEach(attribute => {\r\n      switch(attribute._) {\r\n        case 'documentAttributeFilename':\r\n          doc.file_name = RichTextProcessor.wrapPlainText(attribute.file_name);\r\n          break;\r\n\r\n        case 'documentAttributeAudio':\r\n          doc.duration = attribute.duration;\r\n          doc.audioTitle = attribute.title;\r\n          doc.audioPerformer = attribute.performer;\r\n          doc.type = attribute.pFlags.voice && doc.mime_type === 'audio/ogg' ? 'voice' : 'audio';\r\n          /* if(apiDoc.type === 'audio') {\r\n            apiDoc.supportsStreaming = true;\r\n          } */\r\n          break;\r\n\r\n        case 'documentAttributeVideo':\r\n          doc.duration = attribute.duration;\r\n          doc.w = attribute.w;\r\n          doc.h = attribute.h;\r\n          //apiDoc.supportsStreaming = attribute.pFlags?.supports_streaming/*  && apiDoc.size > 524288 */;\r\n          if(/* apiDoc.thumbs &&  */attribute.pFlags.round_message) {\r\n            doc.type = 'round';\r\n          } else /* if(apiDoc.thumbs) */ {\r\n            doc.type = 'video';\r\n          }\r\n          break;\r\n\r\n        case 'documentAttributeSticker':\r\n          if(attribute.alt !== undefined) {\r\n            doc.stickerEmojiRaw = attribute.alt;\r\n            doc.stickerEmoji = RichTextProcessor.wrapRichText(doc.stickerEmojiRaw, {noLinks: true, noLinebreaks: true});\r\n          }\r\n\r\n          if(attribute.stickerset) {\r\n            if(attribute.stickerset._ === 'inputStickerSetEmpty') {\r\n              delete attribute.stickerset;\r\n            } else if(attribute.stickerset._ === 'inputStickerSetID') {\r\n              doc.stickerSetInput = attribute.stickerset;\r\n            }\r\n          }\r\n\r\n          // * there can be no thumbs, then it is a document\r\n          if(/* apiDoc.thumbs &&  */doc.mime_type === 'image/webp' && (doc.thumbs || webpWorkerController.isWebpSupported())) {\r\n            doc.type = 'sticker';\r\n            doc.sticker = 1;\r\n          }\r\n          break;\r\n\r\n        case 'documentAttributeImageSize':\r\n          doc.type = 'photo';\r\n          doc.w = attribute.w;\r\n          doc.h = attribute.h;\r\n          break;\r\n\r\n        case 'documentAttributeAnimated':\r\n          if((doc.mime_type === 'image/gif' || doc.mime_type === 'video/mp4')/*  && apiDoc.thumbs */) {\r\n            doc.type = 'gif';\r\n          }\r\n\r\n          doc.animated = true;\r\n          break;\r\n      }\r\n    });\r\n    \r\n    if(!doc.mime_type) {\r\n      switch(doc.type) {\r\n        case 'gif':\r\n        case 'video':\r\n        case 'round':\r\n          doc.mime_type = 'video/mp4';\r\n          break;\r\n        case 'sticker':\r\n          doc.mime_type = 'image/webp';\r\n          break;\r\n        case 'audio':\r\n          doc.mime_type = 'audio/mpeg';\r\n          break;\r\n        case 'voice':\r\n          doc.mime_type = 'audio/ogg';\r\n          break;\r\n        default:\r\n          doc.mime_type = 'application/octet-stream';\r\n          break;\r\n      }\r\n    }\r\n\r\n    if(doc.mime_type === 'application/pdf') {\r\n      doc.type = 'pdf';\r\n    }\r\n\r\n    if(doc.type === 'voice' || doc.type === 'round') {\r\n      // browser will identify extension\r\n      doc.file_name = doc.type + '_' + getFullDate(new Date(doc.date * 1000), {monthAsNumber: true, leadingZero: true}).replace(/[:\\.]/g, '-').replace(', ', '_');\r\n    }\r\n\r\n    if(apiManager.isServiceWorkerOnline()) {\r\n      if((doc.type === 'gif' && doc.size > 8e6) || doc.type === 'audio' || doc.type === 'video') {\r\n        doc.supportsStreaming = true;\r\n        \r\n        const cacheContext = appDownloadManager.getCacheContext(doc);\r\n        if(!cacheContext.url) {\r\n          cacheContext.url = this.getFileURL(doc);\r\n        }\r\n      }\r\n    }\r\n\r\n    // for testing purposes\r\n    // doc.supportsStreaming = false;\r\n    // doc.url = ''; // * this will break upload urls\r\n    \r\n    if(!doc.file_name) {\r\n      doc.file_name = '';\r\n    }\r\n\r\n    if(doc.mime_type === 'application/x-tgsticker' && doc.file_name === 'AnimatedSticker.tgs') {\r\n      doc.type = 'sticker';\r\n      doc.animated = true;\r\n      doc.sticker = 2;\r\n    }\r\n\r\n    /* if(!doc.url) {\r\n      doc.url = this.getFileURL(doc);\r\n    } */\r\n\r\n    return doc;\r\n  }\r\n  \r\n  public getDoc(docId: string | MyDocument): MyDocument {\r\n    return isObject(docId) && typeof(docId) !== 'string' ? docId as any : this.docs[docId as string] as any;\r\n  }\r\n\r\n  public getMediaInput(doc: MyDocument) {\r\n    return {\r\n      _: 'inputMediaDocument',\r\n      id: {\r\n        _: 'inputDocument',\r\n        id: doc.id,\r\n        access_hash: doc.access_hash,\r\n        file_reference: doc.file_reference\r\n      },\r\n      ttl_seconds: 0\r\n    };\r\n  }\r\n\r\n  public getInput(doc: MyDocument, thumbSize?: string): InputFileLocation.inputDocumentFileLocation {\r\n    return {\r\n      _: 'inputDocumentFileLocation',\r\n      id: doc.id,\r\n      access_hash: doc.access_hash,\r\n      file_reference: doc.file_reference,\r\n      thumb_size: thumbSize\r\n    };\r\n  }\r\n\r\n  public getFileDownloadOptions(doc: MyDocument, thumb?: PhotoSize.photoSize, queueId?: number, onlyCache?: boolean) {\r\n    const inputFileLocation = this.getInput(doc, thumb?.type);\r\n\r\n    let mimeType: string;\r\n    if(thumb) {\r\n      mimeType = doc.sticker ? 'image/webp' : 'image/jpeg'/* doc.mime_type */;\r\n    } else {\r\n      mimeType = doc.mime_type || 'application/octet-stream';\r\n    }\r\n\r\n    return {\r\n      dcId: doc.dc_id, \r\n      location: inputFileLocation, \r\n      size: thumb ? thumb.size : doc.size, \r\n      mimeType,\r\n      fileName: doc.file_name,\r\n      queueId,\r\n      onlyCache\r\n    };\r\n  }\r\n\r\n  public getFileURL(doc: MyDocument, download = false, thumb?: PhotoSize.photoSize) {\r\n    let type: FileURLType;\r\n    if(download) {\r\n      type = 'download';\r\n    } else if(thumb) {\r\n      type = 'thumb';\r\n    } else if(doc.supportsStreaming) {\r\n      type = 'stream';\r\n    } else {\r\n      type = 'document';\r\n    }\r\n\r\n    return getFileURL(type, this.getFileDownloadOptions(doc, thumb));\r\n  }\r\n\r\n  public getThumbURL(doc: MyDocument, thumb: PhotoSize.photoSize | PhotoSize.photoCachedSize | PhotoSize.photoStrippedSize) {\r\n    let promise: Promise<any> = Promise.resolve();\r\n\r\n    const cacheContext = appDownloadManager.getCacheContext(doc, thumb.type);\r\n    if(!cacheContext.url) {\r\n      if('bytes' in thumb) {\r\n        promise = blur(appPhotosManager.getPreviewURLFromBytes(thumb.bytes, !!doc.sticker)).then(url => {\r\n          cacheContext.url = url;\r\n        }) as any;\r\n      } else {\r\n        //return this.getFileURL(doc, false, thumb);\r\n        promise = appPhotosManager.preloadPhoto(doc, thumb) as any;\r\n      }\r\n    }\r\n\r\n    return {thumb, cacheContext, promise};\r\n  }\r\n\r\n  public getThumb(doc: MyDocument, tryNotToUseBytes = true) {\r\n    const thumb = appPhotosManager.choosePhotoSize(doc, 0, 0, !tryNotToUseBytes);\r\n    if(thumb._ === 'photoSizeEmpty') return null;\r\n    return this.getThumbURL(doc, thumb as any);\r\n  }\r\n\r\n  public getInputFileName(doc: MyDocument, thumbSize?: string) {\r\n    return getFileNameByLocation(this.getInput(doc, thumbSize), {fileName: doc.file_name});\r\n  }\r\n\r\n  public downloadDoc(doc: MyDocument, queueId?: number, onlyCache?: boolean): DownloadBlob {\r\n    const fileName = this.getInputFileName(doc);\r\n\r\n    let download: DownloadBlob = appDownloadManager.getDownload(fileName);\r\n    if(download) {\r\n      return download;\r\n    }\r\n\r\n    const downloadOptions = this.getFileDownloadOptions(doc, undefined, queueId, onlyCache);\r\n    download = appDownloadManager.download(downloadOptions);\r\n\r\n    const cacheContext = appDownloadManager.getCacheContext(doc);\r\n    const originalPromise = download;\r\n    originalPromise.then((blob) => {\r\n      cacheContext.url = URL.createObjectURL(blob);\r\n      cacheContext.downloaded = blob.size;\r\n    }, () => {});\r\n    \r\n    if(doc.type === 'voice' && !opusDecodeController.isPlaySupported()) {\r\n      download = originalPromise.then(async(blob) => {\r\n        const reader = new FileReader();\r\n  \r\n        await new Promise<void>((resolve, reject) => {\r\n          reader.onloadend = (e) => {\r\n            const uint8 = new Uint8Array(e.target.result as ArrayBuffer);\r\n            //console.log('sending uint8 to decoder:', uint8);\r\n            opusDecodeController.decode(uint8).then(result => {\r\n              cacheContext.url = result.url;\r\n              resolve();\r\n            }, (err) => {\r\n              delete cacheContext.downloaded;\r\n              reject(err);\r\n            });\r\n          };\r\n    \r\n          reader.readAsArrayBuffer(blob);\r\n        });\r\n  \r\n        return blob;\r\n      });\r\n    }\r\n\r\n    return download;\r\n  }\r\n\r\n  public saveLottiePreview(doc: MyDocument, canvas: HTMLCanvasElement, toneIndex: number) {\r\n    const key = doc.id + '-' + toneIndex;\r\n    if(this.savingLottiePreview[key]/*  || true */) return;\r\n\r\n    if(!doc.stickerCachedThumbs) {\r\n      defineNotNumerableProperties(doc, ['stickerCachedThumbs']);\r\n      doc.stickerCachedThumbs = {};\r\n    }\r\n\r\n    const thumb = doc.stickerCachedThumbs[toneIndex];\r\n    if(thumb && thumb.w >= canvas.width && thumb.h >= canvas.height) {\r\n      return;\r\n    }\r\n\r\n    /* if(doc.thumbs.find(t => t._ === 'photoStrippedSize') \r\n      || (doc.stickerCachedThumb || (doc.stickerSavedThumbWidth >= canvas.width && doc.stickerSavedThumbHeight >= canvas.height))) {\r\n      return;\r\n    } */\r\n\r\n    this.savingLottiePreview[key] = true;\r\n    canvas.toBlob((blob) => {\r\n      //console.log('got lottie preview', doc, blob, URL.createObjectURL(blob));\r\n\r\n      const thumb = {\r\n        url: URL.createObjectURL(blob),\r\n        w: canvas.width,\r\n        h: canvas.height\r\n      };\r\n\r\n      doc.stickerCachedThumbs[toneIndex] = thumb;\r\n\r\n      delete this.savingLottiePreview[key];\r\n      \r\n      /* const reader = new FileReader();\r\n      reader.onloadend = (e) => {\r\n        const uint8 = new Uint8Array(e.target.result as ArrayBuffer);\r\n        const thumb: PhotoSize.photoStrippedSize = {\r\n          _: 'photoStrippedSize',\r\n          bytes: uint8,\r\n          type: 'i'\r\n        };\r\n\r\n        doc.stickerSavedThumbWidth = canvas.width;\r\n        doc.stickerSavedThumbHeight = canvas.width;\r\n\r\n        defineNotNumerableProperties(thumb, ['url']);\r\n        thumb.url = URL.createObjectURL(blob);\r\n        doc.thumbs.findAndSplice(t => t._ === thumb._);\r\n        doc.thumbs.unshift(thumb);\r\n\r\n        if(!webpWorkerController.isWebpSupported()) {\r\n          doc.pFlags.stickerThumbConverted = true;\r\n        }\r\n\r\n        delete this.savingLottiePreview[doc.id];\r\n      };\r\n      reader.readAsArrayBuffer(blob); */\r\n    });\r\n  }\r\n\r\n  public saveDocFile(doc: MyDocument, queueId?: number) {\r\n    /* const options = this.getFileDownloadOptions(doc, undefined, queueId);\r\n    return appDownloadManager.downloadToDisc(options, doc.file_name); */\r\n    const promise = this.downloadDoc(doc, queueId);\r\n    promise.then(() => {\r\n      const cacheContext = appDownloadManager.getCacheContext(doc);\r\n      appDownloadManager.createDownloadAnchor(cacheContext.url, doc.file_name);\r\n    });\r\n    return promise;\r\n  }\r\n}\r\n\r\nconst appDocsManager = new AppDocsManager();\r\nMOUNT_CLASS_TO.appDocsManager = appDocsManager;\r\nexport default appDocsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport appPeersManager from \"../lib/appManagers/appPeersManager\";\r\nimport rootScope from \"../lib/rootScope\";\r\nimport { i18n } from \"../lib/langPack\";\r\nimport replaceContent from \"../helpers/dom/replaceContent\";\r\n\r\nexport type PeerTitleOptions = {\r\n  peerId: number,\r\n  plainText?: boolean,\r\n  onlyFirstName?: boolean,\r\n  dialog?: boolean\r\n};\r\n\r\nconst weakMap: WeakMap<HTMLElement, PeerTitle> = new WeakMap();\r\n\r\nMOUNT_CLASS_TO.peerTitleWeakMap = weakMap;\r\n\r\nrootScope.on('peer_title_edit', (peerId) => {\r\n  const elements = Array.from(document.querySelectorAll(`.peer-title[data-peer-id=\"${peerId}\"]`)) as HTMLElement[];\r\n  elements.forEach(element => {\r\n    const peerTitle = weakMap.get(element);\r\n    //console.log('in the summer silence i was doing nothing', peerTitle, peerId);\r\n\r\n    if(peerTitle) {\r\n      peerTitle.update();\r\n    }\r\n  });\r\n});\r\n\r\nexport default class PeerTitle {\r\n  public element: HTMLElement;\r\n  public peerId: number;\r\n  public plainText = false;\r\n  public onlyFirstName = false;\r\n  public dialog = false;\r\n\r\n  constructor(options: PeerTitleOptions) {\r\n    this.element = document.createElement('span');\r\n    this.element.classList.add('peer-title');\r\n    this.element.setAttribute('dir', 'auto');\r\n    \r\n    this.update(options);\r\n    weakMap.set(this.element, this);\r\n  }\r\n\r\n  public update(options?: PeerTitleOptions) {\r\n    if(options) {\r\n      for(let i in options) {\r\n        // @ts-ignore\r\n        this.element.dataset[i] = options[i] ? '' + (typeof(options[i]) === 'boolean' ? +options[i] : options[i]) : '0';\r\n        // @ts-ignore\r\n        this[i] = options[i];\r\n      }\r\n    }\r\n\r\n    if(this.peerId !== rootScope.myId || !this.dialog) {\r\n      this.element.innerHTML = appPeersManager.getPeerTitle(this.peerId, this.plainText, this.onlyFirstName);\r\n    } else {\r\n      replaceContent(this.element, i18n(this.onlyFirstName ? 'Saved' : 'SavedMessages'));\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n/* import { copy } from \"./object\";\r\n\r\nexport function listMergeSorted(list1: any[] = [], list2: any[] = []) {\r\n  const result = copy(list1);\r\n\r\n  const minId = list1.length ? list1[list1.length - 1] : 0xFFFFFFFF;\r\n  for(let i = 0; i < list2.length; i++) {\r\n    if(list2[i] < minId) {\r\n      result.push(list2[i]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n} */\r\n\r\nexport const accumulate = (arr: number[], initialValue: number) => arr.reduce((acc, value) => acc + value, initialValue);\r\n\r\nexport function findAndSpliceAll<T>(array: Array<T>, verify: (value: T, index: number, arr: typeof array) => boolean) {\r\n  const out: typeof array = [];\r\n  let idx = -1;\r\n  while((idx = array.findIndex(verify)) !== -1) {\r\n    out.push(array.splice(idx, 1)[0]);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function forEachReverse<T>(array: Array<T>, callback: (value: T, index?: number, array?: Array<T>) => void) {\r\n  for(let length = array.length, i = length - 1; i >= 0; --i) {\r\n    callback(array[i], i, array);\r\n  }\r\n};\r\n\r\nexport function insertInDescendSortedArray<T extends {[smth in K]?: number}, K extends keyof T>(array: Array<T>, element: T, property: K, pos?: number) {\r\n  if(pos === undefined) {\r\n    pos = array.indexOf(element);\r\n    if(pos !== -1) {\r\n      array.splice(pos, 1);\r\n    }\r\n  }\r\n\r\n  const sortProperty: number = element[property];\r\n  const len = array.length;\r\n  if(!len || sortProperty <= array[len - 1][property]) {\r\n    return array.push(element) - 1;\r\n  } else if(sortProperty >= array[0][property]) {\r\n    array.unshift(element);\r\n    return 0;\r\n  } else {\r\n    for(let i = 0; i < len; i++) {\r\n      if(sortProperty > array[i][property]) {\r\n        array.splice(i, 0, element);\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.error('wtf', array, element);\r\n  return array.indexOf(element);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\n//import apiManager from '../mtproto/apiManager';\r\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport { Update } from '../../layer';\r\nimport { logger, LogTypes } from '../logger';\r\nimport apiManager from '../mtproto/mtprotoworker';\r\nimport rootScope from '../rootScope';\r\n//import networkerFactory from '../mtproto/networkerFactory';\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from './appStateManager';\r\n\r\ntype UpdatesState = {\r\n  pendingPtsUpdates: {pts: number, pts_count: number}[],\r\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\r\n  syncPending: {\r\n    seqAwaiting?: number,\r\n    ptsAwaiting?: true,\r\n    timeout: number\r\n  },\r\n  syncLoading: Promise<void>,\r\n\r\n  seq?: number,\r\n  pts?: number,\r\n  date?: number,\r\n  lastPtsUpdateTime?: number\r\n};\r\n\r\nconst SYNC_DELAY = 6;\r\n\r\nexport class ApiUpdatesManager {\r\n  public updatesState: UpdatesState = {\r\n    pendingPtsUpdates: [],\r\n    pendingSeqUpdates: {},\r\n    syncPending: null,\r\n    syncLoading: null\r\n  };\r\n\r\n  public channelStates: {[channelId: number]: UpdatesState} = {};\r\n  private attached = false;\r\n\r\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\r\n  private debug = DEBUG;\r\n\r\n  private setProxy() {\r\n    const self = this;\r\n    this.updatesState = new Proxy(this.updatesState, {\r\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\r\n        // @ts-ignore\r\n        target[key] = value;\r\n        self.saveUpdatesState();\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  public saveUpdatesState() {\r\n    const us = this.updatesState;\r\n    appStateManager.pushToState('updates', {\r\n      seq: us.seq,\r\n      pts: us.pts,\r\n      date: us.date\r\n    });\r\n  }\r\n\r\n  private popPendingSeqUpdate() {\r\n    const state = this.updatesState;\r\n    const nextSeq = state.seq + 1;\r\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\r\n    if(!pendingUpdatesData) {\r\n      return false;\r\n    }\r\n\r\n    const updates = pendingUpdatesData.updates;\r\n    for(let i = 0, length = updates.length; i < length; ++i) {\r\n      this.saveUpdate(updates[i]);\r\n    }\r\n\r\n    state.seq = pendingUpdatesData.seq;\r\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\r\n      state.date = pendingUpdatesData.date;\r\n    }\r\n    delete state.pendingSeqUpdates[nextSeq];\r\n  \r\n    if(!this.popPendingSeqUpdate() &&\r\n      state.syncPending &&\r\n      state.syncPending.seqAwaiting &&\r\n      state.seq >= state.syncPending.seqAwaiting) {\r\n      if(!state.syncPending.ptsAwaiting) {\r\n        clearTimeout(state.syncPending.timeout);\r\n        state.syncPending = null;\r\n      } else {\r\n        delete state.syncPending.seqAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  private popPendingPtsUpdate(channelId: number) {\r\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\r\n    if(!curState.pendingPtsUpdates.length) {\r\n      return false;\r\n    }\r\n\r\n    curState.pendingPtsUpdates.sort((a, b) => {\r\n      return a.pts - b.pts;\r\n    });\r\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\r\n  \r\n    let curPts = curState.pts;\r\n    let goodPts = 0;\r\n    let goodIndex = 0;\r\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n      curPts += update.pts_count;\r\n      if(curPts >= update.pts) {\r\n        goodPts = update.pts;\r\n        goodIndex = i;\r\n      }\r\n    }\r\n  \r\n    if(!goodPts) {\r\n      return false;\r\n    }\r\n  \r\n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\r\n  \r\n    curState.pts = goodPts;\r\n    for(let i = 0; i <= goodIndex; ++i) {\r\n      const update = curState.pendingPtsUpdates[i];\r\n\r\n      // @ts-ignore\r\n      this.saveUpdate(update);\r\n    }\r\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\r\n  \r\n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\r\n      if(!curState.syncPending.seqAwaiting) {\r\n        clearTimeout(curState.syncPending.timeout);\r\n        curState.syncPending = null;\r\n      } else {\r\n        delete curState.syncPending.ptsAwaiting;\r\n      }\r\n    }\r\n  \r\n    return true;\r\n  }\r\n\r\n  public forceGetDifference() {\r\n    if(!this.updatesState.syncLoading) {\r\n      this.getDifference();\r\n    }\r\n  }\r\n\r\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\r\n    override: boolean\r\n  }> = {}) => {\r\n    // return forceGetDifference()\r\n    const processOpts = {\r\n      date: updateMessage.date,\r\n      seq: updateMessage.seq,\r\n      seqStart: updateMessage.seq_start,\r\n      //ignoreSyncLoading: options.ignoreSyncLoading\r\n    };\r\n\r\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\r\n  \r\n    switch(updateMessage._) {\r\n      case 'updatesTooLong':\r\n      case 'new_session_created':\r\n        this.forceGetDifference();\r\n        break;\r\n  \r\n      case 'updateShort':\r\n        this.processUpdate(updateMessage.update, processOpts);\r\n        break;\r\n  \r\n      case 'updateShortMessage':\r\n      case 'updateShortChatMessage': {\r\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\r\n        const isOut = updateMessage.pFlags.out;\r\n        const fromId = updateMessage.from_id || (isOut ? rootScope.myId : updateMessage.user_id);\r\n        const toId = updateMessage.chat_id\r\n          ? -updateMessage.chat_id\r\n          : (updateMessage.user_id || rootScope.myId);\r\n  \r\n        this.processUpdate({\r\n          _: 'updateNewMessage',\r\n          message: {\r\n            _: 'message',\r\n            pFlags: updateMessage.pFlags,\r\n            id: updateMessage.id,\r\n            from_id: appPeersManager.getOutputPeer(fromId),\r\n            peer_id: appPeersManager.getOutputPeer(toId),\r\n            date: updateMessage.date,\r\n            message: updateMessage.message,\r\n            fwd_from: updateMessage.fwd_from,\r\n            reply_to: updateMessage.reply_to,\r\n            entities: updateMessage.entities\r\n          },\r\n          pts: updateMessage.pts,\r\n          pts_count: updateMessage.pts_count\r\n        }, processOpts);\r\n        break;\r\n      }\r\n  \r\n      case 'updatesCombined':\r\n      case 'updates':\r\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\r\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\r\n  \r\n        updateMessage.updates.forEach((update: any) => {\r\n          this.processUpdate(update, processOpts);\r\n        });\r\n        break;\r\n  \r\n      default:\r\n        this.log.warn('Unknown update message', updateMessage);\r\n    }\r\n  };\r\n  \r\n  private getDifference(first = false): Promise<void> {\r\n    // this.trace('Get full diff')\r\n    const updatesState = this.updatesState;\r\n    let wasSyncing = updatesState.syncLoading;\r\n    if(!wasSyncing) {\r\n      updatesState.pendingSeqUpdates = {};\r\n      updatesState.pendingPtsUpdates = [];\r\n    }\r\n  \r\n    if(updatesState.syncPending) {\r\n      clearTimeout(updatesState.syncPending.timeout);\r\n      updatesState.syncPending = null;\r\n    }\r\n\r\n    const promise = apiManager.invokeApi('updates.getDifference', {\r\n      pts: updatesState.pts, \r\n      date: updatesState.date, \r\n      qts: -1\r\n    }, {\r\n      timeout: 0x7fffffff\r\n    }).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get diff result', differenceResult);\r\n\r\n      if(differenceResult._ === 'updates.differenceEmpty') {\r\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\r\n        updatesState.date = differenceResult.date;\r\n        updatesState.seq = differenceResult.seq;\r\n        return;\r\n      }\r\n\r\n      // ! SORRY I'M SORRY I'M SORRY\r\n      if(first) {\r\n        rootScope.broadcast('state_synchronizing');\r\n      }\r\n\r\n      if(differenceResult._ !== 'updates.differenceTooLong') {\r\n        appUsersManager.saveApiUsers(differenceResult.users);\r\n        appChatsManager.saveApiChats(differenceResult.chats);\r\n\r\n        // Should be first because of updateMessageID\r\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\r\n    \r\n        differenceResult.other_updates.forEach((update) => {\r\n          switch(update._) {\r\n            case 'updateChannelTooLong':\r\n            case 'updateNewChannelMessage':\r\n            case 'updateEditChannelMessage':\r\n              this.processUpdate(update);\r\n              return;\r\n          }\r\n          \r\n          this.saveUpdate(update);\r\n        });\r\n\r\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\r\n        differenceResult.new_messages.forEach((apiMessage) => {\r\n          this.saveUpdate({\r\n            _: 'updateNewMessage',\r\n            message: apiMessage,\r\n            pts: updatesState.pts,\r\n            pts_count: 0\r\n          });\r\n        });\r\n\r\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\r\n        updatesState.seq = nextState.seq;\r\n        updatesState.pts = nextState.pts;\r\n        updatesState.date = nextState.date;\r\n      } else {\r\n        updatesState.pts = differenceResult.pts;\r\n        delete updatesState.seq;\r\n        delete updatesState.date;\r\n      }\r\n  \r\n      // this.log('apply diff', updatesState.seq, updatesState.pts)\r\n  \r\n      if(differenceResult._ === 'updates.differenceSlice') {\r\n        return this.getDifference();\r\n      } else {\r\n        this.debug && this.log.debug('finished get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(updatesState, promise);\r\n    }\r\n  \r\n    return promise;\r\n  }\r\n\r\n  private getChannelDifference(channelId: number): Promise<void> {\r\n    const channelState = this.getChannelState(channelId);\r\n    const wasSyncing = channelState.syncLoading;\r\n    if(!wasSyncing) {\r\n      channelState.pendingPtsUpdates = [];\r\n    }\r\n\r\n    if(channelState.syncPending) {\r\n      clearTimeout(channelState.syncPending.timeout);\r\n      channelState.syncPending = null;\r\n    }\r\n\r\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\r\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\r\n      channel: appChatsManager.getChannelInput(channelId),\r\n      filter: {_: 'channelMessagesFilterEmpty'},\r\n      pts: channelState.pts,\r\n      limit: 30\r\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\r\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\r\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\r\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\r\n        return;\r\n      }\r\n  \r\n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\r\n        this.debug && this.log.debug('channel diff too long', differenceResult);\r\n        delete this.channelStates[channelId];\r\n\r\n        // @ts-ignore\r\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\r\n        return;\r\n      }\r\n  \r\n      appUsersManager.saveApiUsers(differenceResult.users);\r\n      appChatsManager.saveApiChats(differenceResult.chats);\r\n  \r\n      // Should be first because of updateMessageID\r\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\r\n      differenceResult.other_updates.forEach((update) => {\r\n        this.saveUpdate(update);\r\n      });\r\n  \r\n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\r\n      differenceResult.new_messages.forEach((apiMessage) => {\r\n        this.saveUpdate({\r\n          _: 'updateNewChannelMessage',\r\n          message: apiMessage,\r\n          pts: channelState.pts,\r\n          pts_count: 0\r\n        });\r\n      });\r\n  \r\n      this.debug && this.log.debug('apply channel diff', channelState.pts);\r\n  \r\n      if(differenceResult._ === 'updates.channelDifference' &&\r\n        !differenceResult.pFlags['final']) {\r\n        return this.getChannelDifference(channelId);\r\n      } else {\r\n        this.debug && this.log.debug('finished channel get diff');\r\n      }\r\n    });\r\n\r\n    if(!wasSyncing) {\r\n      this.justAName(channelState, promise, channelId);\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: number) {\r\n    state.syncLoading = promise;\r\n    rootScope.broadcast('state_synchronizing', channelId);\r\n\r\n    promise.then(() => {\r\n      state.syncLoading = null;\r\n      rootScope.broadcast('state_synchronized', channelId);\r\n    }, () => {\r\n      state.syncLoading = null;\r\n    });\r\n  }\r\n  \r\n  public addChannelState(channelId: number, pts: number) {\r\n    if(!pts) {\r\n      throw new Error('Add channel state without pts ' + channelId);\r\n    }\r\n\r\n    if(!(channelId in this.channelStates)) {\r\n      this.channelStates[channelId] = {\r\n        pts,\r\n        pendingPtsUpdates: [],\r\n        syncPending: null,\r\n        syncLoading: null\r\n      };\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  \r\n  private getChannelState(channelId: number, pts?: number) {\r\n    if(this.channelStates[channelId] === undefined) {\r\n      this.addChannelState(channelId, pts);\r\n    }\r\n\r\n    return this.channelStates[channelId];\r\n  }\r\n\r\n  private processUpdate(update: any, options: Partial<{\r\n    date: number,\r\n    seq: number,\r\n    seqStart: number/* ,\r\n    ignoreSyncLoading: boolean */\r\n  }> = {}) {\r\n    let channelId = 0;\r\n    switch(update._) {\r\n      case 'updateNewChannelMessage':\r\n      case 'updateEditChannelMessage':\r\n        channelId = -appPeersManager.getPeerId(update.message.peer_id);\r\n        break;\r\n      case 'updateDeleteChannelMessages':\r\n        channelId = update.channel_id;\r\n        break;\r\n      case 'updateChannelTooLong':\r\n        channelId = update.channel_id;\r\n        if(!(channelId in this.channelStates)) {\r\n          return false;\r\n        }\r\n        break;\r\n    }\r\n  \r\n    const curState = channelId ? this.getChannelState(channelId, update.pts) : this.updatesState;\r\n  \r\n    // this.log.log('process', channelId, curState.pts, update)\r\n  \r\n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateChannelTooLong') {\r\n      if(!curState.lastPtsUpdateTime ||\r\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\r\n        // this.log.trace('channel too long, get diff', channelId, update)\r\n        this.getChannelDifference(channelId);\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    if(update._ === 'updateNewMessage' ||\r\n        update._ === 'updateEditMessage' ||\r\n        update._ === 'updateNewChannelMessage' ||\r\n        update._ === 'updateEditChannelMessage') {\r\n      const message = update.message;\r\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\r\n      const fwdHeader = message.fwd_from || {};\r\n      let reason: any = false;\r\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\r\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!fwdHeader.channel_id) && (reason = 'fwdAuthor') ||\r\n          fwdHeader.channel_id && !appChatsManager.hasChat(fwdHeader.channel_id, true) && (reason = 'fwdChannel') ||\r\n          toPeerId > 0 && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\r\n          toPeerId < 0 && !appChatsManager.hasChat(-toPeerId) && (reason = 'toPeer Chat')) {\r\n        this.log.warn('Not enough data for message update', toPeerId, reason, message)\r\n        if(channelId && appChatsManager.hasChat(channelId)) {\r\n          this.getChannelDifference(channelId);\r\n        } else {\r\n          this.forceGetDifference();\r\n        }\r\n        return false;\r\n      }\r\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\r\n      // this.log.log('skip update, missing channel', channelId, update)\r\n      return false;\r\n    }\r\n  \r\n    let popPts: boolean;\r\n    let popSeq: boolean;\r\n  \r\n    if(update.pts) {\r\n      const newPts = curState.pts + (update.pts_count || 0);\r\n      if(newPts < update.pts) {\r\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\r\n        curState.pendingPtsUpdates.push(update);\r\n        if(!curState.syncPending && !curState.syncLoading) {\r\n          curState.syncPending = {\r\n            timeout: window.setTimeout(() => {\r\n              curState.syncPending = null;\r\n\r\n              if(curState.syncLoading) {\r\n                return;\r\n              }\r\n\r\n              if(channelId) {\r\n                this.getChannelDifference(channelId);\r\n              } else {\r\n                this.getDifference();\r\n              }\r\n            }, SYNC_DELAY)\r\n          };\r\n        }\r\n\r\n        curState.syncPending.ptsAwaiting = true;\r\n        return false;\r\n      }\r\n\r\n      if(update.pts > curState.pts) {\r\n        curState.pts = update.pts;\r\n        popPts = true;\r\n  \r\n        curState.lastPtsUpdateTime = Date.now();\r\n      } else if(update.pts_count) {\r\n        // this.log.warn('Duplicate update', update)\r\n        return false;\r\n      }\r\n\r\n      if(channelId && options.date && this.updatesState.date < options.date) {\r\n        this.updatesState.date = options.date;\r\n      }\r\n    } else if(!channelId && options.seq > 0) {\r\n      const seq = options.seq;\r\n      const seqStart = options.seqStart || seq;\r\n  \r\n      if(seqStart !== curState.seq + 1) {\r\n        if(seqStart > curState.seq) {\r\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\r\n  \r\n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\r\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\r\n          }\r\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\r\n  \r\n          if(!curState.syncPending) {\r\n            curState.syncPending = {\r\n              timeout: window.setTimeout(() => {\r\n                curState.syncPending = null;\r\n\r\n                if(curState.syncLoading) {\r\n                  return;\r\n                }\r\n\r\n                this.getDifference();\r\n              }, SYNC_DELAY)\r\n            };\r\n          }\r\n\r\n          if(!curState.syncPending.seqAwaiting ||\r\n            curState.syncPending.seqAwaiting < seqStart) {\r\n            curState.syncPending.seqAwaiting = seqStart;\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n  \r\n      if(curState.seq !== seq) {\r\n        curState.seq = seq;\r\n        if(options.date && curState.date < options.date) {\r\n          curState.date = options.date;\r\n        }\r\n\r\n        popSeq = true;\r\n      }\r\n    }\r\n  \r\n    this.saveUpdate(update);\r\n  \r\n    if(popPts) {\r\n      this.popPendingPtsUpdate(channelId);\r\n    } else if(popSeq) {\r\n      this.popPendingSeqUpdate();\r\n    }\r\n  }\r\n\r\n  public saveUpdate(update: Update) {\r\n    //this.debug && this.log('saveUpdate', update);\r\n    rootScope.dispatchEvent(update._, update as any);\r\n  }\r\n  \r\n  public attach() {\r\n    if(this.attached) return;\r\n\r\n    //return;\r\n\r\n    this.log('attach');\r\n    \r\n    this.attached = true;\r\n\r\n    appStateManager.getState().then(_state => {\r\n      const state = _state.updates;\r\n\r\n      //rootScope.broadcast('state_synchronizing');\r\n      if(!state || !state.pts || !state.date || !state.seq) {\r\n        this.log('will get new state');\r\n\r\n        this.updatesState.syncLoading = new Promise((resolve) => {\r\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\r\n            this.updatesState.seq = stateResult.seq;\r\n            this.updatesState.pts = stateResult.pts;\r\n            this.updatesState.date = stateResult.date;\r\n            this.saveUpdatesState();\r\n            //setTimeout(() => {\r\n              this.updatesState.syncLoading = null;\r\n              resolve();\r\n              //rootScope.broadcast('state_synchronized');\r\n            //}, 1000);\r\n        \r\n          // ! for testing\r\n          // updatesState.seq = 1\r\n          // updatesState.pts = stateResult.pts - 5000\r\n          // updatesState.date = 1\r\n          // getDifference()\r\n          });\r\n        });\r\n      } else {\r\n        // ! for testing\r\n        /* state.seq = 1;\r\n        state.pts = state.pts - 15;\r\n        state.date = 1; */\r\n\r\n        Object.assign(this.updatesState, state);\r\n        \r\n        this.log('will get difference', Object.assign({}, state));\r\n        \r\n        this.getDifference(true)/* .finally(() => {\r\n          if(this.updatesState.syncLoading) {\r\n            rootScope.broadcast('state_synchronizing');\r\n          }\r\n        }) */;\r\n      }\r\n\r\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\r\n\r\n      this.updatesState.syncLoading.then(() => {\r\n        this.setProxy();\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst apiUpdatesManager = new ApiUpdatesManager();\r\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\r\nexport default apiUpdatesManager\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport const loadedURLs: {[url: string]: boolean} = {};\r\nconst set = (elem: HTMLElement | HTMLImageElement | SVGImageElement | HTMLVideoElement, url: string) => {\r\n  if(elem instanceof HTMLImageElement || elem instanceof HTMLVideoElement) elem.src = url;\r\n  else if(elem instanceof SVGImageElement) elem.setAttributeNS(null, 'href', url);\r\n  else elem.style.backgroundImage = 'url(' + url + ')';\r\n};\r\n\r\n// проблема функции в том, что она не подходит для ссылок, пригодна только для blob'ов, потому что обычным ссылкам нужен 'load' каждый раз.\r\nexport default function renderImageFromUrl(elem: HTMLElement | HTMLImageElement | SVGImageElement | HTMLVideoElement, url: string, callback?: (err?: Event) => void, useCache = true): boolean {\r\n  if(!url) {\r\n    console.error('renderImageFromUrl: no url?', elem, url);\r\n    //callback && callback();\r\n    return false;\r\n  }\r\n\r\n  if(((loadedURLs[url]/*  && false */) && useCache) || elem instanceof HTMLVideoElement) {\r\n    if(elem) {\r\n      set(elem, url);\r\n    }\r\n    \r\n    callback && callback();\r\n    return true;\r\n  } else {\r\n    const isImage = elem instanceof HTMLImageElement;\r\n    const loader = isImage ? elem as HTMLImageElement : new Image();\r\n    //const loader = new Image();\r\n    loader.src = url;\r\n    //let perf = performance.now();\r\n    loader.addEventListener('load', () => {\r\n      if(!isImage && elem) {\r\n        set(elem, url);\r\n      }\r\n\r\n      loadedURLs[url] = true;\r\n      //console.log('onload:', url, performance.now() - perf);\r\n      if(callback) {\r\n        // TODO: переделать прогрузки аватаров до начала анимации, иначе с этим ожиданием они неприятно появляются\r\n        /* getHeavyAnimationPromise().then(() => {\r\n          callback();\r\n        }); */\r\n        callback();\r\n      }\r\n\r\n      //callback && callback();\r\n    });\r\n\r\n    if(callback) {\r\n      loader.addEventListener('error', callback);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\ntype TargetType = HTMLElement;\r\nexport type OnVisibilityChange = (target: TargetType, visible: boolean) => void;\r\n\r\nexport default class VisibilityIntersector {\r\n  private observer: IntersectionObserver;\r\n  private items: Map<TargetType, boolean> = new Map();\r\n  private locked = false;\r\n\r\n  constructor(onVisibilityChange: OnVisibilityChange) {\r\n    this.observer = new IntersectionObserver((entries) => {\r\n      if(this.locked) {\r\n        return;\r\n      }\r\n\r\n      const changed: {target: TargetType, visible: boolean}[] = [];\r\n\r\n      entries.forEach(entry => {\r\n        const target = entry.target as TargetType;\r\n\r\n        if(this.items.get(target) === entry.isIntersecting) {\r\n          return;\r\n        } else {\r\n          this.items.set(target, entry.isIntersecting);\r\n        }\r\n\r\n        /* if(entry.isIntersecting) {\r\n          console.log('ooo', entry);\r\n        } */\r\n\r\n        /* if(this.locked) {\r\n          return;\r\n        } */\r\n\r\n        changed[entry.isIntersecting ? 'unshift' : 'push']({target, visible: entry.isIntersecting});\r\n\r\n        //onVisibilityChange(target, entry.isIntersecting);\r\n      });\r\n\r\n      changed.forEach(smth => {\r\n        onVisibilityChange(smth.target, smth.visible);\r\n      });\r\n    });\r\n  }\r\n\r\n  public getVisible() {\r\n    const items: TargetType[] = [];\r\n    this.items.forEach((value, key) => {\r\n      if(value) {\r\n        items.push(key);\r\n      }\r\n    });\r\n\r\n    return items;\r\n  }\r\n\r\n  public clearVisible() {\r\n    const visible = this.getVisible();\r\n    for(const target of visible) {\r\n      this.items.set(target, false);\r\n    }\r\n  }\r\n\r\n  public isVisible(target: TargetType) {\r\n    return this.items.get(target);\r\n  }\r\n\r\n  public disconnect() {\r\n    this.observer.disconnect();\r\n    this.items.clear();\r\n  }\r\n\r\n  public refresh() {\r\n    this.observer.disconnect();\r\n\r\n    //window.requestAnimationFrame(() => {\r\n      const targets = [...this.items.keys()];\r\n      for(const target of targets) {\r\n        //this.items.set(target, false);\r\n        this.observer.observe(target);\r\n      }\r\n    //});\r\n  }\r\n\r\n  public refreshVisible() {\r\n    const visible = this.getVisible();\r\n    for(const target of visible) {\r\n      this.observer.unobserve(target);\r\n    }\r\n\r\n    for(const target of visible) {\r\n      this.observer.observe(target);\r\n    }\r\n  }\r\n\r\n  public observe(target: TargetType) {\r\n    this.items.set(target, false);\r\n    this.observer.observe(target);\r\n  }\r\n\r\n  public unobserve(target: TargetType) {\r\n    this.observer.unobserve(target);\r\n    this.items.delete(target);\r\n  }\r\n\r\n  public unlock() {\r\n    this.locked = false;\r\n  }\r\n\r\n  public unlockAndRefresh() {\r\n    this.unlock();\r\n    this.refresh();\r\n  }\r\n\r\n  public lock() {\r\n    this.locked = true;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { throttle } from \"../helpers/schedulers\";\r\nimport { logger, LogTypes } from \"../lib/logger\";\r\nimport VisibilityIntersector, { OnVisibilityChange } from \"./visibilityIntersector\";\r\nimport { findAndSpliceAll } from \"../helpers/array\";\r\n\r\ntype LazyLoadElementBase = {\r\n  load: () => Promise<any>\r\n};\r\n\r\ntype LazyLoadElement = Omit<LazyLoadElementBase, 'load'> & {\r\n  load: (target?: HTMLElement) => Promise<any>,\r\n  div: HTMLElement\r\n  wasSeen?: boolean,\r\n};\r\n\r\nconst PARALLEL_LIMIT = 8;\r\n\r\nexport class LazyLoadQueueBase {\r\n  public queueId = 0;\r\n  protected queue: Array<LazyLoadElementBase> = [];\r\n  protected inProcess: Set<LazyLoadElementBase> = new Set();\r\n\r\n  protected lockPromise: Promise<void> = null;\r\n  protected unlockResolve: () => void = null;\r\n\r\n  protected log = logger('LL', LogTypes.Error);\r\n  protected processQueue: () => void;\r\n\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT) {\r\n    this.processQueue = throttle(() => this._processQueue(), 20, false);\r\n  }\r\n\r\n  public clear() {\r\n    this.inProcess.clear(); // ацтеки забьются, будет плохо\r\n\r\n    this.queue.length = 0;\r\n    // unreachable code\r\n    /* for(let item of this.inProcess) { \r\n      this.lazyLoadMedia.push(item);\r\n    } */\r\n  }\r\n\r\n  public lock() {\r\n    if(this.lockPromise) return;\r\n\r\n    //const perf = performance.now();\r\n    this.lockPromise = new Promise((resolve, reject) => {\r\n      this.unlockResolve = resolve;\r\n    });\r\n\r\n    /* if(DEBUG) {\r\n      this.lockPromise.then(() => {\r\n        this.log('was locked for:', performance.now() - perf);\r\n      });\r\n    } */\r\n  }\r\n\r\n  public unlock() {\r\n    if(!this.unlockResolve) return;\r\n\r\n    this.unlockResolve();\r\n    this.unlockResolve = this.lockPromise = null;\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  protected async processItem(item: LazyLoadElementBase) {\r\n    if(this.lockPromise) {\r\n      return;\r\n    }\r\n\r\n    this.inProcess.add(item);\r\n\r\n    /* if(DEBUG) {\r\n      this.log('will load media', this.lockPromise, item);\r\n    } */\r\n\r\n    try {\r\n      //await new Promise((resolve) => setTimeout(resolve, 2e3));\r\n      //await new Promise((resolve, reject) => window.requestAnimationFrame(() => window.requestAnimationFrame(resolve)));\r\n      //await item.load(item.div);\r\n      await this.loadItem(item);\r\n    } catch(err) {\r\n      if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(err)) {\r\n        this.log.error('loadMediaQueue error:', err/* , item */);\r\n      }\r\n    }\r\n\r\n    this.inProcess.delete(item);\r\n\r\n    /* if(DEBUG) {\r\n      this.log('loaded media', item);\r\n    } */\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  protected loadItem(item: LazyLoadElementBase) {\r\n    return item.load();\r\n  }\r\n\r\n  protected getItem() {\r\n    return this.queue.shift();\r\n  }\r\n\r\n  protected addElement(method: 'push' | 'unshift', el: LazyLoadElementBase) {\r\n    this.queue[method](el);\r\n    this.processQueue();\r\n  }\r\n\r\n  protected _processQueue(item?: LazyLoadElementBase) {\r\n    if(!this.queue.length || this.lockPromise || (this.parallelLimit > 0 && this.inProcess.size >= this.parallelLimit)) return;\r\n\r\n    //console.log('_processQueue start');\r\n    let added = 0;\r\n    do {\r\n      if(item) {\r\n        this.queue.findAndSplice(i => i === item);\r\n      } else {\r\n        item = this.getItem();\r\n      }\r\n  \r\n      if(item) {\r\n        this.processItem(item);\r\n      } else {\r\n        break;\r\n      }\r\n\r\n      item = null;\r\n      ++added;\r\n    } while(this.inProcess.size < this.parallelLimit && this.queue.length);\r\n    //console.log('_processQueue end, added', added, this.queue.length);\r\n  }\r\n\r\n  public push(el: LazyLoadElementBase) {\r\n    this.addElement('push', el);\r\n  }\r\n\r\n  public unshift(el: LazyLoadElementBase) {\r\n    this.addElement('unshift', el);\r\n  }\r\n}\r\n\r\nexport class LazyLoadQueueIntersector extends LazyLoadQueueBase {\r\n  protected queue: Array<LazyLoadElement> = [];\r\n  protected inProcess: Set<LazyLoadElement> = new Set();\r\n\r\n  public intersector: VisibilityIntersector;\r\n  protected intersectorTimeout: number;\r\n\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT) {\r\n    super(parallelLimit);\r\n  }\r\n\r\n  public lock() {\r\n    super.lock();\r\n    this.intersector.lock();\r\n  }\r\n\r\n  public unlock() {\r\n    super.unlock();\r\n    this.intersector.unlock();\r\n  }\r\n\r\n  public unlockAndRefresh() {\r\n    super.unlock();\r\n    this.intersector.unlockAndRefresh();\r\n  }\r\n\r\n  public clear() {\r\n    super.clear();\r\n    this.intersector.disconnect();\r\n  }\r\n\r\n  public refresh() {\r\n    this.intersector.refresh();\r\n  }\r\n\r\n  protected loadItem(item: LazyLoadElement) {\r\n    return item.load(item.div);\r\n  }\r\n\r\n  protected addElement(method: 'push' | 'unshift', el: LazyLoadElement) {\r\n    const item = this.queue.find(i => i.div === el.div && i.load === el.load);\r\n    if(item) {\r\n      return false;\r\n    } else {\r\n      for(const item of this.inProcess) {\r\n        if(item.div === el.div && item.load === el.load) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.queue[method](el);\r\n    return true;\r\n  }\r\n\r\n  protected setProcessQueueTimeout() {\r\n    if(!this.intersectorTimeout) {\r\n      this.intersectorTimeout = window.setTimeout(() => {\r\n        this.intersectorTimeout = 0;\r\n        this.processQueue();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  public push(el: LazyLoadElement) {\r\n    super.push(el);\r\n  }\r\n\r\n  public unshift(el: LazyLoadElement) {\r\n    super.unshift(el);\r\n  }\r\n\r\n  public unobserve(el: HTMLElement) {\r\n    findAndSpliceAll(this.queue, (i) => i.div === el);\r\n\r\n    this.intersector.unobserve(el);\r\n  }\r\n}\r\n\r\nexport default class LazyLoadQueue extends LazyLoadQueueIntersector {\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT) {\r\n    super(parallelLimit);\r\n\r\n    this.intersector = new VisibilityIntersector(this.onVisibilityChange);\r\n  }\r\n\r\n  private onVisibilityChange = (target: HTMLElement, visible: boolean) => {\r\n    if(visible) {\r\n      /* if(DEBUG) {\r\n        this.log('isIntersecting', target);\r\n      } */\r\n\r\n      // need for set element first if scrolled\r\n      findAndSpliceAll(this.queue, (i) => i.div === target).forEach(item => {\r\n        item.wasSeen = true;\r\n        this.queue.unshift(item);\r\n        //this.processQueue(item);\r\n      });\r\n\r\n      this.setProcessQueueTimeout();\r\n    }\r\n  };\r\n\r\n  protected getItem() {\r\n    return this.queue.findAndSplice(item => item.wasSeen);\r\n  }\r\n\r\n  public async processItem(item: LazyLoadElement) {\r\n    await super.processItem(item);\r\n    this.intersector.unobserve(item.div);\r\n  }\r\n\r\n  protected addElement(method: 'push' | 'unshift', el: LazyLoadElement) {\r\n    const inserted = super.addElement(method, el);\r\n\r\n    if(!inserted) return false;\r\n\r\n    this.intersector.observe(el.div);\r\n    /* if(el.wasSeen) {\r\n      this.processQueue(el);\r\n    } else  */if(!el.hasOwnProperty('wasSeen')) {\r\n      el.wasSeen = false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\nexport class LazyLoadQueueRepeat extends LazyLoadQueueIntersector {\r\n  private _queue: Map<HTMLElement, LazyLoadElement> = new Map();\r\n\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT, protected onVisibilityChange?: OnVisibilityChange) {\r\n    super(parallelLimit);\r\n\r\n    this.intersector = new VisibilityIntersector((target, visible) => {\r\n      const spliced = findAndSpliceAll(this.queue, (i) => i.div === target);\r\n      if(visible) {\r\n        const items = spliced.length ? spliced : [this._queue.get(target)];\r\n        items.forEach(item => {\r\n          this.queue.unshift(item || this._queue.get(target));\r\n        });\r\n      }\r\n  \r\n      this.onVisibilityChange && this.onVisibilityChange(target, visible);\r\n      this.setProcessQueueTimeout();\r\n    });\r\n  }\r\n\r\n  public clear() {\r\n    super.clear();\r\n    this._queue.clear();\r\n  }\r\n\r\n  /* public async processItem(item: LazyLoadElement) {\r\n    //await super.processItem(item);\r\n    await LazyLoadQueueBase.prototype.processItem.call(this, item);\r\n\r\n    if(this.lazyLoadMedia.length) {\r\n      this.processQueue();\r\n    }\r\n  } */\r\n\r\n  public observe(el: LazyLoadElement) {\r\n    this._queue.set(el.div, el);\r\n    this.intersector.observe(el.div);\r\n  }\r\n}\r\n\r\nexport class LazyLoadQueueRepeat2 extends LazyLoadQueueIntersector {\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT, protected onVisibilityChange?: OnVisibilityChange) {\r\n    super(parallelLimit);\r\n\r\n    this.intersector = new VisibilityIntersector((target, visible) => {\r\n      const spliced = findAndSpliceAll(this.queue, (i) => i.div === target);\r\n      if(visible && spliced.length) {\r\n        spliced.forEach(item => {\r\n          this.queue.unshift(item);\r\n        });\r\n      }\r\n  \r\n      this.onVisibilityChange && this.onVisibilityChange(target, visible);\r\n      this.setProcessQueueTimeout();\r\n    });\r\n  }\r\n\r\n  public observe(el: HTMLElement) {\r\n    this.intersector.observe(el);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { fontFamily } from \"../../components/middleEllipsis\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { deepEqual } from \"../../helpers/object\";\r\nimport { convertInputKeyToKey } from \"../../helpers/string\";\r\nimport { isMobile } from \"../../helpers/userAgent\";\r\nimport { InputNotifyPeer, InputPeerNotifySettings, NotifyPeer, PeerNotifySettings, Update } from \"../../layer\";\r\nimport I18n from \"../langPack\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport rootScope from \"../rootScope\";\r\nimport sessionStorage from \"../sessionStorage\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appStateManager from \"./appStateManager\";\r\n\r\ntype MyNotification = Notification & {\r\n  hidden?: boolean,\r\n  show?: () => void,\r\n};\r\n\r\nexport type NotifyOptions = Partial<{\r\n  tag: string;\r\n  image: string;\r\n  key: string;\r\n  title: string;\r\n  message: string;\r\n  silent: boolean;\r\n  onclick: () => void;\r\n}>;\r\n\r\ntype ImSadAboutIt = Promise<PeerNotifySettings> | PeerNotifySettings;\r\nexport class AppNotificationsManager {\r\n  private notificationsUiSupport: boolean;\r\n  private notificationsShown: {[key: string]: MyNotification} = {};\r\n  private notificationIndex = 0;\r\n  private notificationsCount = 0;\r\n  private soundsPlayed: {[tag: string]: number} = {};\r\n  private vibrateSupport = !!navigator.vibrate;\r\n  private nextSoundAt: number;\r\n  private prevSoundVolume: number;\r\n  private peerSettings = {\r\n    notifyPeer: {} as {[peerId: number]: ImSadAboutIt},\r\n    notifyUsers: null as ImSadAboutIt,\r\n    notifyChats: null as ImSadAboutIt,\r\n    notifyBroadcasts: null as ImSadAboutIt\r\n  };\r\n  //private exceptions: {[peerId: string]: PeerNotifySettings} = {};\r\n  private notifyContactsSignUp: Promise<boolean>;\r\n  private faviconEl: HTMLLinkElement = document.head.querySelector('link[rel=\"icon\"]');\r\n\r\n  private titleBackup = document.title;\r\n  private titleChanged = false;\r\n  private titleInterval: number;\r\n  private prevFavicon: string;\r\n  private stopped = false;\r\n\r\n  private settings: Partial<{\r\n    nodesktop: boolean,\r\n    volume: number,\r\n    novibrate: boolean,\r\n    nopreview: boolean,\r\n    nopush: boolean,\r\n    nosound: boolean,\r\n  }> = {};\r\n\r\n  private registeredDevice: any;\r\n  private pushInited = false;\r\n\r\n  private topMessagesDeferred: CancellablePromise<void>;\r\n\r\n  private notifySoundEl: HTMLElement;\r\n\r\n  private getNotifyPeerTypePromise: Promise<any>;\r\n\r\n  constructor() {\r\n    // @ts-ignore\r\n    navigator.vibrate = navigator.vibrate || navigator.mozVibrate || navigator.webkitVibrate;\r\n\r\n    this.notificationsUiSupport = ('Notification' in window) || ('mozNotification' in navigator);\r\n\r\n    this.topMessagesDeferred = deferredPromise<void>();\r\n\r\n    this.notifySoundEl = document.createElement('div');\r\n    this.notifySoundEl.id = 'notify-sound';\r\n    document.body.append(this.notifySoundEl);\r\n\r\n    /* rootScope.on('idle.deactivated', (newVal) => {\r\n      if(newVal) {\r\n        stop();\r\n      }\r\n    });*/\r\n\r\n    rootScope.on('idle', (newVal) => {\r\n      if(this.stopped) {\r\n        return;\r\n      }\r\n\r\n      if(!newVal) {\r\n        this.clear();\r\n      }\r\n\r\n      this.toggleToggler();\r\n    });\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateNotifySettings: (update) => {\r\n        this.savePeerSettings(update.peer._ === 'notifyPeer' ? appPeersManager.getPeerId(update.peer.peer) : update.peer._, update.notify_settings);\r\n        rootScope.broadcast('notify_settings', update);\r\n      }\r\n    });\r\n\r\n    /* rootScope.on('push_init', (tokenData) => {\r\n      this.pushInited = true\r\n      if(!this.settings.nodesktop && !this.settings.nopush) {\r\n        if(tokenData) {\r\n          this.registerDevice(tokenData);\r\n        } else {\r\n          WebPushApiManager.subscribe();\r\n        }\r\n      } else {\r\n        this.unregisterDevice(tokenData);\r\n      }\r\n    });\r\n    rootScope.on('push_subscribe', (tokenData) => {\r\n      this.registerDevice(tokenData);\r\n    });\r\n    rootScope.on('push_unsubscribe', (tokenData) => {\r\n      this.unregisterDevice(tokenData);\r\n    }); */\r\n\r\n    rootScope.addEventListener('dialogs_multiupdate', () => {\r\n      //unregisterTopMsgs()\r\n      this.topMessagesDeferred.resolve();\r\n    }, true);\r\n\r\n    /* rootScope.on('push_notification_click', (notificationData) => {\r\n      if(notificationData.action === 'push_settings') {\r\n        this.topMessagesDeferred.then(() => {\r\n          $modal.open({\r\n            templateUrl: templateUrl('settings_modal'),\r\n            controller: 'SettingsModalController',\r\n            windowClass: 'settings_modal_window mobile_modal',\r\n            backdrop: 'single'\r\n          })\r\n        });\r\n        return;\r\n      }\r\n\r\n      if(notificationData.action === 'mute1d') {\r\n        apiManager.invokeApi('account.updateDeviceLocked', {\r\n          period: 86400\r\n        }).then(() => {\r\n          // var toastData = toaster.pop({\r\n          //   type: 'info',\r\n          //   body: _('push_action_mute1d_success'),\r\n          //   bodyOutputType: 'trustedHtml',\r\n          //   clickHandler: () => {\r\n          //     toaster.clear(toastData)\r\n          //   },\r\n          //   showCloseButton: false\r\n          // })\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      const peerId = notificationData.custom && notificationData.custom.peerId;\r\n      console.log('click', notificationData, peerId);\r\n      if(peerId) {\r\n        this.topMessagesDeferred.then(() => {\r\n          if(notificationData.custom.channel_id &&\r\n              !appChatsManager.hasChat(notificationData.custom.channel_id)) {\r\n            return;\r\n          }\r\n\r\n          if(peerId > 0 && !appUsersManager.hasUser(peerId)) {\r\n            return;\r\n          }\r\n\r\n          // rootScope.broadcast('history_focus', {\r\n          //   peerString: appPeersManager.getPeerString(peerId)\r\n          // });\r\n        });\r\n      }\r\n    }); */\r\n  }\r\n\r\n  private toggleToggler(enable = rootScope.idle.isIDLE) {\r\n    if(isMobile) return;\r\n\r\n    const resetTitle = () => {\r\n      this.titleChanged = false;\r\n      document.title = this.titleBackup;\r\n      this.setFavicon();\r\n    };\r\n\r\n    window.clearInterval(this.titleInterval);\r\n    this.titleInterval = 0;\r\n\r\n    if(!enable) {\r\n      resetTitle();\r\n    } else {\r\n      this.titleInterval = window.setInterval(() => {\r\n        if(!this.notificationsCount) {\r\n          this.toggleToggler(false);\r\n        } else if(this.titleChanged) {\r\n          resetTitle();\r\n        } else {\r\n          this.titleChanged = true;\r\n          document.title = I18n.format('Notifications.Count', true, [this.notificationsCount]);\r\n          //this.setFavicon('assets/img/favicon_unread.ico');\r\n\r\n          // fetch('assets/img/favicon.ico')\r\n          // .then(res => res.blob())\r\n          // .then(blob => {\r\n            // const img = document.createElement('img');\r\n            // img.src = URL.createObjectURL(blob);\r\n\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = 32 * window.devicePixelRatio;\r\n            canvas.height = canvas.width;\r\n  \r\n            const ctx = canvas.getContext('2d');\r\n            ctx.beginPath();\r\n            ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = '#3390ec';\r\n            ctx.fill();\r\n\r\n            let fontSize = 24;\r\n            let str = '' + this.notificationsCount;\r\n            if(this.notificationsCount < 10) {\r\n              fontSize = 22;\r\n            } else if(this.notificationsCount < 100) {\r\n              fontSize = 20;\r\n            } else {\r\n              str = '99+';\r\n              fontSize = 16;\r\n            }\r\n\r\n            fontSize *= window.devicePixelRatio;\r\n            \r\n            ctx.font = `700 ${fontSize}px ${fontFamily}`;\r\n            ctx.textBaseline = 'middle';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillText(str, canvas.width / 2, canvas.height * .5625);\r\n\r\n            /* const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height); */\r\n  \r\n            this.setFavicon(canvas.toDataURL());\r\n          // });\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  public updateLocalSettings = () => {\r\n    Promise.all(['notify_nodesktop', 'notify_volume', 'notify_novibrate', 'notify_nopreview', 'notify_nopush'].map(k => sessionStorage.get(k as any)))\r\n    .then((updSettings) => {\r\n      this.settings.nodesktop = updSettings[0];\r\n      this.settings.volume = updSettings[1] === undefined ? 0.5 : updSettings[1];\r\n      this.settings.novibrate = updSettings[2];\r\n      this.settings.nopreview = updSettings[3];\r\n      this.settings.nopush = updSettings[4];\r\n\r\n      /* if(this.pushInited) {\r\n        const needPush = !this.settings.nopush && !this.settings.nodesktop && WebPushApiManager.isAvailable || false;\r\n        const hasPush = this.registeredDevice !== false;\r\n        if(needPush !== hasPush) {\r\n          if(needPush) {\r\n            WebPushApiManager.subscribe();\r\n          } else {\r\n            WebPushApiManager.unsubscribe();\r\n          }\r\n        }\r\n      }\r\n\r\n      WebPushApiManager.setSettings(this.settings); */\r\n    });\r\n\r\n    appStateManager.getState().then(state => {\r\n      this.settings.nosound = !state.settings.notifications.sound;\r\n    });\r\n  }\r\n\r\n  public getLocalSettings() {\r\n    return this.settings;\r\n  }\r\n\r\n  public getNotifySettings(peer: InputNotifyPeer): ImSadAboutIt {\r\n    let key: any = convertInputKeyToKey(peer._);\r\n    let obj: any = this.peerSettings[key as NotifyPeer['_']];\r\n\r\n    if(peer._ === 'inputNotifyPeer') {\r\n      key = appPeersManager.getPeerId(peer.peer);\r\n      obj = obj[key];\r\n    }\r\n\r\n    if(obj) {\r\n      return obj;\r\n    }\r\n\r\n    return (obj || this.peerSettings)[key] = apiManager.invokeApi('account.getNotifySettings', {peer})\r\n    .then(settings => {\r\n      this.savePeerSettings(key, settings);\r\n      return settings;\r\n    });\r\n  }\r\n\r\n  public getNotifyPeerTypeSettings() {\r\n    if(this.getNotifyPeerTypePromise) return this.getNotifyPeerTypePromise;\r\n\r\n    const promises = (['inputNotifyBroadcasts', 'inputNotifyUsers', 'inputNotifyChats'] as Exclude<InputNotifyPeer['_'], 'inputNotifyPeer'>[])\r\n    .map((inputKey) => {\r\n      return this.getNotifySettings({_: inputKey});\r\n    });\r\n\r\n    return this.getNotifyPeerTypePromise = Promise.all(promises);\r\n  }\r\n\r\n  public updateNotifySettings(peer: InputNotifyPeer, settings: InputPeerNotifySettings) {\r\n    //this.savePeerSettings(peerId, settings);\r\n\r\n    /* const inputSettings: InputPeerNotifySettings = copy(settings) as any;\r\n    inputSettings._ = 'inputPeerNotifySettings'; */\r\n\r\n    return apiManager.invokeApi('account.updateNotifySettings', {\r\n      peer,\r\n      settings\r\n    }).then(value => {\r\n      if(value) {\r\n        apiUpdatesManager.processUpdateMessage({\r\n          _: 'updateShort',\r\n          update: {\r\n            _: 'updateNotifySettings', \r\n            peer: {\r\n              ...peer,\r\n              _: convertInputKeyToKey(peer._)\r\n            }, \r\n            notify_settings: { // ! WOW, IT WORKS !\r\n              ...settings,\r\n              _: 'peerNotifySettings',\r\n            }\r\n          } as Update.updateNotifySettings\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public getNotifyExceptions() {\r\n    apiManager.invokeApi('account.getNotifyExceptions', {compare_sound: true})\r\n    .then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public getContactSignUpNotification() {\r\n    if(this.notifyContactsSignUp) return this.notifyContactsSignUp;\r\n    return this.notifyContactsSignUp = apiManager.invokeApi('account.getContactSignUpNotification');\r\n  }\r\n\r\n  public setContactSignUpNotification(silent: boolean) {\r\n    apiManager.invokeApi('account.setContactSignUpNotification', {silent})\r\n    .then(value => {\r\n      this.notifyContactsSignUp = Promise.resolve(!silent);\r\n    });\r\n  }\r\n\r\n  private setFavicon(href: string = 'assets/img/favicon.ico') {\r\n    if(this.prevFavicon === href) {\r\n      return;\r\n    }\r\n\r\n    const link = this.faviconEl.cloneNode() as HTMLLinkElement;\r\n    link.href = href;\r\n    this.faviconEl.parentNode.replaceChild(link, this.faviconEl);\r\n    this.faviconEl = link;\r\n\r\n    this.prevFavicon = href;\r\n  }\r\n\r\n  public savePeerSettings(key: number | Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings) {\r\n    let obj: any;\r\n    if(typeof(key) === 'number') {\r\n      obj = this.peerSettings['notifyPeer'];\r\n    }\r\n    \r\n    (obj || this.peerSettings)[key] = settings;\r\n\r\n    if(typeof(key) !== 'number') {\r\n      rootScope.broadcast('notify_peer_type_settings', {key, settings});\r\n    }\r\n\r\n    //rootScope.broadcast('notify_settings', {peerId: peerId});\r\n  }\r\n\r\n  public isMuted(peerNotifySettings: PeerNotifySettings) {\r\n    return peerNotifySettings._ === 'peerNotifySettings' &&\r\n      ((peerNotifySettings.mute_until * 1000) > tsNow() || peerNotifySettings.silent);\r\n  }\r\n\r\n  public getPeerMuted(peerId: number) {\r\n    const ret = this.getNotifySettings({_: 'inputNotifyPeer', peer: appPeersManager.getInputPeerById(peerId)});\r\n    return (ret instanceof Promise ? ret : Promise.resolve(ret))\r\n    .then((peerNotifySettings) => this.isMuted(peerNotifySettings));\r\n  }\r\n\r\n  public getPeerLocalSettings(peerId: number, respectType = true): PeerNotifySettings {\r\n    const n: PeerNotifySettings = {\r\n      _: 'peerNotifySettings'\r\n    };\r\n\r\n    const notifySettings = this.peerSettings['notifyPeer'][peerId];\r\n    //if(!notifySettings || (notifySettings instanceof Promise)) return false;\r\n    if(notifySettings && !(notifySettings instanceof Promise)) {\r\n      Object.assign(n, notifySettings);\r\n    }\r\n\r\n    if(respectType) {\r\n      const inputNotify = appPeersManager.getInputNotifyPeerById(peerId, true);\r\n      const key = convertInputKeyToKey(inputNotify._);\r\n      const typeNotifySettings = this.peerSettings[key as NotifyPeer['_']];\r\n      if(typeNotifySettings && !(typeNotifySettings instanceof Promise)) {\r\n        for(let i in typeNotifySettings) {\r\n          // @ts-ignore\r\n          if(n[i] === undefined) {\r\n            // @ts-ignore\r\n            n[i] = typeNotifySettings[i];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  public isPeerLocalMuted(peerId: number, respectType = true) {\r\n    if(peerId === rootScope.myId) return false;\r\n\r\n    const notifySettings = this.getPeerLocalSettings(peerId, respectType);\r\n    return this.isMuted(notifySettings);\r\n  }\r\n\r\n  public start() {\r\n    this.updateLocalSettings();\r\n    rootScope.on('settings_updated', this.updateLocalSettings);\r\n    //WebPushApiManager.start();\r\n\r\n    if(!this.notificationsUiSupport) {\r\n      return false;\r\n    }\r\n\r\n    if('Notification' in window && Notification.permission !== 'granted' && Notification.permission !== 'denied') {\r\n      window.addEventListener('click', this.requestPermission);\r\n    }\r\n\r\n    try {\r\n      if('onbeforeunload' in window) {\r\n        window.addEventListener('beforeunload', this.clear);\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  private stop() {\r\n    this.clear();\r\n    window.clearInterval(this.titleInterval);\r\n    this.titleInterval = 0;\r\n    this.setFavicon();\r\n    this.stopped = true;\r\n  }\r\n\r\n  private requestPermission = () => {\r\n    Notification.requestPermission();\r\n    window.removeEventListener('click', this.requestPermission);\r\n  };\r\n\r\n  public notify(data: NotifyOptions) {\r\n    //console.log('notify', data, rootScope.idle.isIDLE, this.notificationsUiSupport, this.stopped);\r\n    \r\n    if(this.stopped) {\r\n      return;\r\n    }\r\n\r\n    // FFOS Notification blob src bug workaround\r\n    /* if(Config.Navigator.ffos && !Config.Navigator.ffos2p) {\r\n      data.image = 'https://telegram.org/img/t_logo.png'\r\n    }\r\n    else if (data.image && !angular.isString(data.image)) {\r\n      if (Config.Navigator.ffos2p) {\r\n        FileManager.getDataUrl(data.image, 'image/jpeg').then(function (url) {\r\n          data.image = url\r\n          notify(data)\r\n        })\r\n        return false\r\n      } else {\r\n        data.image = FileManager.getUrl(data.image, 'image/jpeg')\r\n      }\r\n    }\r\n    else */ if(!data.image) {\r\n      data.image = 'assets/img/logo_filled_rounded.png';\r\n    }\r\n    // console.log('notify image', data.image)\r\n\r\n    this.notificationsCount++;\r\n    if(!this.titleInterval) {\r\n      this.toggleToggler();\r\n    }\r\n\r\n    const now = tsNow();\r\n    if(this.settings.volume > 0 && !this.settings.nosound/* &&\r\n      (\r\n        !data.tag ||\r\n        !this.soundsPlayed[data.tag] ||\r\n        now > this.soundsPlayed[data.tag] + 60000\r\n      ) */\r\n    ) {\r\n      this.testSound(this.settings.volume);\r\n      this.soundsPlayed[data.tag] = now;\r\n    }\r\n\r\n    if(!this.notificationsUiSupport ||\r\n      'Notification' in window && Notification.permission !== 'granted') {\r\n      return false;\r\n    }\r\n\r\n    if(this.settings.nodesktop) {\r\n      if(this.vibrateSupport && !this.settings.novibrate) {\r\n        navigator.vibrate([200, 100, 200]);\r\n        return;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const idx = ++this.notificationIndex;\r\n    const key = data.key || 'k' + idx;\r\n    let notification: MyNotification;\r\n\r\n    if('Notification' in window) {\r\n      try {\r\n        if(data.tag) {\r\n          for(let i in this.notificationsShown) {\r\n            const notification = this.notificationsShown[i];\r\n            if(notification &&\r\n                notification.tag === data.tag) {\r\n              notification.hidden = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        notification = new Notification(data.title, {\r\n          icon: data.image || '',\r\n          body: data.message || '',\r\n          tag: data.tag || '',\r\n          silent: data.silent || false\r\n        });\r\n\r\n        //console.log('notify constructed notification');\r\n      } catch(e) {\r\n        this.notificationsUiSupport = false;\r\n        //WebPushApiManager.setLocalNotificationsDisabled();\r\n        return;\r\n      }\r\n    } /* else if('mozNotification' in navigator) {\r\n      notification = navigator.mozNotification.createNotification(data.title, data.message || '', data.image || '')\r\n    } else if(notificationsMsSiteMode) {\r\n      window.external.msSiteModeClearIconOverlay()\r\n      window.external.msSiteModeSetIconOverlay('img/icons/icon16.png', data.title)\r\n      window.external.msSiteModeActivate()\r\n      notification = {\r\n        index: idx\r\n      }\r\n    } */ else {\r\n      return;\r\n    }\r\n\r\n    notification.onclick = () => {\r\n      notification.close();\r\n      //AppRuntimeManager.focus();\r\n      this.clear();\r\n      if(data.onclick) {\r\n        data.onclick();\r\n      }\r\n    };\r\n\r\n    notification.onclose = () => {\r\n      if(!notification.hidden) {\r\n        delete this.notificationsShown[key];\r\n        this.clear();\r\n      }\r\n    };\r\n\r\n    if(notification.show) {\r\n      notification.show();\r\n    }\r\n    this.notificationsShown[key] = notification;\r\n\r\n    if(!isMobile) {\r\n      setTimeout(() => {\r\n        this.hide(key);\r\n      }, 8000);\r\n    }\r\n  }\r\n\r\n  public testSound(volume: number) {\r\n    const now = tsNow();\r\n    if(this.nextSoundAt && now < this.nextSoundAt && this.prevSoundVolume === volume) {\r\n      return;\r\n    }\r\n\r\n    this.nextSoundAt = now + 1000;\r\n    this.prevSoundVolume = volume;\r\n    const filename = 'assets/audio/notification.mp3';\r\n    const audio = document.createElement('audio');\r\n    audio.autoplay = true;\r\n    audio.setAttribute('mozaudiochannel', 'notification');\r\n    audio.volume = volume;\r\n    audio.innerHTML = `\r\n      <source src=\"${filename}\" type=\"audio/mpeg\" />\r\n      <embed hidden=\"true\" autostart=\"true\" loop=\"false\" volume=\"${volume * 100}\" src=\"${filename}\" />\r\n    `;\r\n    this.notifySoundEl.append(audio);\r\n\r\n    audio.addEventListener('ended', () => {\r\n      audio.remove();\r\n    }, {once: true});\r\n  }\r\n\r\n  public cancel(key: string) {\r\n    const notification = this.notificationsShown[key];\r\n    if(notification) {\r\n      if(this.notificationsCount > 0) {\r\n        this.notificationsCount--;\r\n      }\r\n\r\n      try {\r\n        if(notification.close) {\r\n          notification.hidden = true;\r\n          notification.close();\r\n        }/*  else if(notificationsMsSiteMode &&\r\n          notification.index === notificationIndex) {\r\n          window.external.msSiteModeClearIconOverlay()\r\n        } */\r\n      } catch (e) {}\r\n\r\n      delete this.notificationsShown[key];\r\n    }\r\n  }\r\n\r\n  private hide(key: string) {\r\n    const notification = this.notificationsShown[key];\r\n    if(notification) {\r\n      try {\r\n        if(notification.close) {\r\n          notification.hidden = true;\r\n          notification.close();\r\n        }\r\n      } catch (e) {}\r\n    }\r\n  }\r\n\r\n  public soundReset(tag: string) {\r\n    delete this.soundsPlayed[tag];\r\n  }\r\n\r\n  public clear() {\r\n    /* if(notificationsMsSiteMode) {\r\n      window.external.msSiteModeClearIconOverlay()\r\n    } else { */\r\n      for(let i in this.notificationsShown) {\r\n        const notification = this.notificationsShown[i];\r\n        try {\r\n          if(notification.close) {\r\n            notification.close();\r\n          }\r\n        } catch (e) {}\r\n      }\r\n    /* } */\r\n    this.notificationsShown = {};\r\n    this.notificationsCount = 0;\r\n\r\n    //WebPushApiManager.hidePushNotifications();\r\n  }\r\n\r\n  private registerDevice(tokenData: any) {\r\n    if(this.registeredDevice &&\r\n        deepEqual(this.registeredDevice, tokenData)) {\r\n      return false;\r\n    }\r\n\r\n    apiManager.invokeApi('account.registerDevice', {\r\n      token_type: tokenData.tokenType,\r\n      token: tokenData.tokenValue,\r\n      other_uids: [],\r\n      app_sandbox: false,\r\n      secret: new Uint8Array()\r\n    }).then(() => {\r\n      this.registeredDevice = tokenData;\r\n    }, (error) => {\r\n      error.handled = true;\r\n    })\r\n  }\r\n\r\n  private unregisterDevice(tokenData: any) {\r\n    if(!this.registeredDevice) {\r\n      return false;\r\n    }\r\n\r\n    apiManager.invokeApi('account.unregisterDevice', {\r\n      token_type: tokenData.tokenType,\r\n      token: tokenData.tokenValue,\r\n      other_uids: []\r\n    }).then(() => {\r\n      this.registeredDevice = false\r\n    }, (error) => {\r\n      error.handled = true\r\n    })\r\n  }\r\n\r\n  public getVibrateSupport() {\r\n    return this.vibrateSupport\r\n  }\r\n}\r\n\r\nconst appNotificationsManager = new AppNotificationsManager();\r\nMOUNT_CLASS_TO.appNotificationsManager = appNotificationsManager;\r\nexport default appNotificationsManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { CancellablePromise } from \"../helpers/cancellablePromise\";\r\nimport SetTransition from \"./singleTransition\";\r\nimport { fastRaf } from \"../helpers/schedulers\";\r\nimport { safeAssign } from \"../helpers/object\";\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport { attachClickEvent } from \"../helpers/dom/clickEvent\";\r\nimport isInDOM from \"../helpers/dom/isInDOM\";\r\n\r\nconst TRANSITION_TIME = 200;\r\n\r\nexport default class ProgressivePreloader {\r\n  public preloader: HTMLDivElement;\r\n  private circle: SVGCircleElement;\r\n  private cancelSvg: SVGSVGElement;\r\n  private downloadSvg: HTMLElement;\r\n  \r\n  private tempId = 0;\r\n  private detached = true;\r\n\r\n  public promise: CancellablePromise<any> = null;\r\n\r\n  public isUpload = false;\r\n  private cancelable = true;\r\n  private streamable = false;\r\n  private tryAgainOnFail = true;\r\n  private attachMethod: 'append' | 'prepend' = 'append';\r\n\r\n  public loadFunc: () => {download: CancellablePromise<any>};\r\n\r\n  private totalLength: number;\r\n\r\n  constructor(options?: Partial<{\r\n    isUpload: ProgressivePreloader['isUpload'],\r\n    cancelable: ProgressivePreloader['cancelable'], \r\n    streamable: ProgressivePreloader['streamable'], \r\n    tryAgainOnFail: ProgressivePreloader['tryAgainOnFail'],\r\n    attachMethod: ProgressivePreloader['attachMethod']\r\n  }>) {\r\n    if(options) {\r\n      safeAssign(this, options);\r\n    }\r\n  }\r\n\r\n  public constructContainer(options: Partial<{\r\n    color: 'transparent',\r\n    bold: boolean\r\n  }> = {}) {\r\n    if(!this.preloader) {\r\n      this.preloader = document.createElement('div');\r\n      this.preloader.classList.add('preloader-container');\r\n\r\n      if(options.color) {\r\n        this.preloader.classList.add('preloader-' + options.color);\r\n      }\r\n\r\n      if(options.bold) {\r\n        this.preloader.classList.add('preloader-bold');\r\n      }\r\n  \r\n      if(this.streamable) {\r\n        this.preloader.classList.add('preloader-streamable');\r\n      }\r\n    }\r\n  }\r\n\r\n  public constructDownloadIcon() {\r\n    this.constructContainer();\r\n  }\r\n\r\n  public construct() {\r\n    this.construct = null;\r\n\r\n    this.constructContainer();\r\n    \r\n    this.preloader.innerHTML = `\r\n    <div class=\"you-spin-me-round\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"preloader-circular\" viewBox=\"${this.streamable ? '25 25 50 50' : '27 27 54 54'}\">\r\n    <circle class=\"preloader-path-new\" cx=\"${this.streamable ? '50' : '54'}\" cy=\"${this.streamable ? '50' : '54'}\" r=\"${this.streamable ? 19 : 24}\" fill=\"none\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n    </div>`;\r\n\r\n    if(this.cancelable) {\r\n      this.preloader.innerHTML += `\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"preloader-close\" viewBox=\"0 0 24 24\">\r\n        <g fill=\"none\" fill-rule=\"evenodd\">\r\n          <polygon points=\"0 0 24 0 24 24 0 24\"/>\r\n          <path fill=\"#000\" fill-rule=\"nonzero\" d=\"M5.20970461,5.38710056 L5.29289322,5.29289322 C5.65337718,4.93240926 6.22060824,4.90467972 6.61289944,5.20970461 L6.70710678,5.29289322 L12,10.585 L17.2928932,5.29289322 C17.6834175,4.90236893 18.3165825,4.90236893 18.7071068,5.29289322 C19.0976311,5.68341751 19.0976311,6.31658249 18.7071068,6.70710678 L13.415,12 L18.7071068,17.2928932 C19.0675907,17.6533772 19.0953203,18.2206082 18.7902954,18.6128994 L18.7071068,18.7071068 C18.3466228,19.0675907 17.7793918,19.0953203 17.3871006,18.7902954 L17.2928932,18.7071068 L12,13.415 L6.70710678,18.7071068 C6.31658249,19.0976311 5.68341751,19.0976311 5.29289322,18.7071068 C4.90236893,18.3165825 4.90236893,17.6834175 5.29289322,17.2928932 L10.585,12 L5.29289322,6.70710678 C4.93240926,6.34662282 4.90467972,5.77939176 5.20970461,5.38710056 L5.29289322,5.29289322 L5.20970461,5.38710056 Z\"/>\r\n        </g>\r\n      </svg>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"preloader-download\" viewBox=\"0 0 24 24\">\r\n        <g fill=\"none\" fill-rule=\"evenodd\">\r\n          <polygon points=\"0 0 24 0 24 24 0 24\"/>\r\n          <path fill=\"#000\" fill-rule=\"nonzero\" d=\"M5,19 L19,19 C19.5522847,19 20,19.4477153 20,20 C20,20.5128358 19.6139598,20.9355072 19.1166211,20.9932723 L19,21 L5,21 C4.44771525,21 4,20.5522847 4,20 C4,19.4871642 4.38604019,19.0644928 4.88337887,19.0067277 L5,19 L19,19 L5,19 Z M11.8833789,3.00672773 L12,3 C12.5128358,3 12.9355072,3.38604019 12.9932723,3.88337887 L13,4 L13,13.585 L16.2928932,10.2928932 C16.6533772,9.93240926 17.2206082,9.90467972 17.6128994,10.2097046 L17.7071068,10.2928932 C18.0675907,10.6533772 18.0953203,11.2206082 17.7902954,11.6128994 L17.7071068,11.7071068 L12.7071068,16.7071068 C12.3466228,17.0675907 11.7793918,17.0953203 11.3871006,16.7902954 L11.2928932,16.7071068 L6.29289322,11.7071068 C5.90236893,11.3165825 5.90236893,10.6834175 6.29289322,10.2928932 C6.65337718,9.93240926 7.22060824,9.90467972 7.61289944,10.2097046 L7.70710678,10.2928932 L11,13.585 L11,4 C11,3.48716416 11.3860402,3.06449284 11.8833789,3.00672773 L12,3 L11.8833789,3.00672773 Z\"/>\r\n        </g>\r\n      </svg>`;\r\n\r\n      this.downloadSvg = this.preloader.lastElementChild as HTMLElement;\r\n      this.cancelSvg = this.downloadSvg.previousElementSibling as any;\r\n    } else {\r\n      this.preloader.classList.add('preloader-swing');\r\n    }\r\n    \r\n    this.circle = this.preloader.firstElementChild.firstElementChild.firstElementChild as SVGCircleElement;\r\n\r\n    if(this.cancelable) {\r\n      attachClickEvent(this.preloader, this.onClick);\r\n    }\r\n  }\r\n\r\n  public onClick = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(this.preloader.classList.contains('manual')) {\r\n      if(this.loadFunc) {\r\n        this.loadFunc();\r\n      }\r\n    } else {\r\n      if(this.promise && this.promise.cancel) {\r\n        this.promise.cancel();\r\n      }\r\n    }\r\n  };\r\n\r\n  public setDownloadFunction(func: ProgressivePreloader['loadFunc']) {\r\n    this.loadFunc = func;\r\n  }\r\n\r\n  public setManual() {\r\n    this.preloader.classList.add('manual');\r\n    this.setProgress(0);\r\n  }\r\n\r\n  public attachPromise(promise: CancellablePromise<any>) {\r\n    if(this.isUpload && this.promise) return;\r\n\r\n    this.promise = promise;\r\n\r\n    const tempId = --this.tempId;\r\n    const startTime = Date.now();\r\n\r\n    const onEnd = (err: Error) => {\r\n      promise.notify = null;\r\n\r\n      if(tempId !== this.tempId) {\r\n        return;\r\n      }\r\n\r\n      const elapsedTime = Date.now() - startTime;\r\n\r\n      //console.log('[PP]: end', this.detached, performance.now());\r\n\r\n      if(!err && this.cancelable) {\r\n        this.setProgress(100);\r\n\r\n        const delay = TRANSITION_TIME * 0.75;\r\n\r\n        if(elapsedTime < delay) {\r\n          this.detach();\r\n        } else {\r\n          setTimeout(() => { // * wait for transition complete\r\n            if(tempId === this.tempId) {\r\n              this.detach();\r\n            }\r\n          }, delay);\r\n        }\r\n      } else {\r\n        if(this.tryAgainOnFail) {\r\n          SetTransition(this.preloader, '', true, TRANSITION_TIME);\r\n          fastRaf(() => {\r\n            this.setManual();\r\n          });\r\n        } else {\r\n          this.detach();\r\n        }\r\n      }\r\n      \r\n      this.promise = promise = null;\r\n    };\r\n    \r\n    promise\r\n    .then(() => onEnd(null))\r\n    .catch((err) => onEnd(err));\r\n\r\n    if(promise.addNotifyListener) {\r\n      promise.addNotifyListener((details: {done: number, total: number}) => {\r\n        /* if(details.done >= details.total) {\r\n          onEnd();\r\n        } */\r\n\r\n        if(tempId !== this.tempId) return;\r\n\r\n        //console.log('preloader download', promise, details);\r\n        const percents = details.done / details.total * 100;\r\n        this.setProgress(percents);\r\n      });\r\n    }\r\n  }\r\n\r\n  public attach(elem: Element, reset = false, promise?: CancellablePromise<any>) {\r\n    if(promise/*  && false */) {\r\n      this.attachPromise(promise);\r\n    }\r\n\r\n    //return;\r\n\r\n    this.detached = false;\r\n    /* fastRaf(() => {\r\n      if(this.detached) return;\r\n      this.detached = false; */\r\n\r\n      if(this.construct) {\r\n        this.construct();\r\n      }\r\n\r\n      if(this.preloader.parentElement) {\r\n        this.preloader.classList.remove('manual');\r\n      }\r\n\r\n      if(this.preloader.parentElement !== elem) {\r\n        elem[this.attachMethod](this.preloader);\r\n      }\r\n\r\n      fastRaf(() => {\r\n        //console.log('[PP]: attach after rAF', this.detached, performance.now());\r\n\r\n        if(this.detached) {\r\n          return;\r\n        }\r\n\r\n        SetTransition(this.preloader, 'is-visible', true, TRANSITION_TIME);\r\n      });\r\n\r\n      if(this.cancelable && reset) {\r\n        this.setProgress(0);\r\n      }\r\n    //});\r\n  }\r\n  \r\n  public detach() {\r\n    //return;\r\n\r\n    this.detached = true;\r\n\r\n    //return;\r\n    \r\n    if(this.preloader && this.preloader.parentElement) {\r\n      /* setTimeout(() =>  *///fastRaf(() => {\r\n        /* if(!this.detached) return;\r\n        this.detached = true; */\r\n\r\n        fastRaf(() => {\r\n          //console.log('[PP]: detach after rAF', this.detached, performance.now());\r\n\r\n          if(!this.detached || !this.preloader.parentElement) {\r\n            return;\r\n          }\r\n\r\n          SetTransition(this.preloader, 'is-visible', false, TRANSITION_TIME, () => {\r\n            this.preloader.remove();\r\n          });\r\n        });\r\n      //})/* , 5e3) */;\r\n    }\r\n  }\r\n  \r\n  public setProgress(percents: number) {\r\n    if(!isInDOM(this.circle)) {\r\n      return;\r\n    }\r\n    \r\n    if(percents === 0) {\r\n      this.circle.style.strokeDasharray = '';\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      if(!this.totalLength) {\r\n        this.totalLength = this.circle.getTotalLength();\r\n      }\r\n\r\n      //console.log('setProgress', (percents / 100 * totalLength));\r\n      this.circle.style.strokeDasharray = '' + Math.max(5, percents / 100 * this.totalLength) + ', ' + this.totalLength;\r\n    } catch(err) {}\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../lib/rootScope\";\r\n\r\nconst SetTransition = (element: HTMLElement, className: string, forwards: boolean, duration: number, onTransitionEnd?: () => void) => {\r\n  const timeout = element.dataset.timeout;\r\n  if(timeout !== undefined) {\r\n    clearTimeout(+timeout);\r\n  }\r\n\r\n  if(forwards && className) {\r\n    element.classList.add(className);\r\n  }\r\n\r\n  const afterTimeout = () => {\r\n    delete element.dataset.timeout;\r\n    if(!forwards && className) {\r\n      element.classList.remove('backwards', className);\r\n    }\r\n\r\n    element.classList.remove('animating');\r\n    \r\n    onTransitionEnd && onTransitionEnd();\r\n  };\r\n\r\n  if(!rootScope.settings.animationsEnabled) {\r\n    element.classList.remove('animating', 'backwards');\r\n    afterTimeout();\r\n    return;\r\n  }\r\n\r\n  element.classList.add('animating');\r\n\r\n  element.classList.toggle('backwards', !forwards);\r\n  element.dataset.timeout = '' + setTimeout(afterTimeout, duration);\r\n};\r\n\r\nexport default SetTransition;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { pause } from \"./schedulers\";\r\nimport { isAppleMobile } from \"./userAgent\";\r\n\r\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\r\n  return new Promise((resolve, reject) => {\r\n    const video = document.createElement('video');\r\n    video.volume = 0;\r\n    video.onloadedmetadata = () => resolve(video);\r\n    video.onerror = reject;\r\n    video.src = url;\r\n  });\r\n}\r\n\r\nexport function createPosterFromVideo(video: HTMLVideoElement): Promise<Blob> {\r\n  return new Promise((resolve, reject) => {\r\n    video.onseeked = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = Math.min(1280, video.videoWidth);\r\n      canvas.height = Math.min(720, video.videoHeight);\r\n      const ctx = canvas.getContext('2d')!;\r\n      ctx.drawImage(video, 0, 0);\r\n      canvas.toBlob(blob => {\r\n        resolve(blob);\r\n      }, 'image/jpeg', 1);\r\n    };\r\n\r\n    video.onerror = reject;\r\n    video.currentTime = Math.min(video.duration, 1);\r\n  });\r\n}\r\n\r\nexport async function createPosterForVideo(url: string): Promise<Blob | undefined> {\r\n  const video = await preloadVideo(url);\r\n\r\n  return Promise.race([\r\n    pause(2000) as Promise<undefined>,\r\n    createPosterFromVideo(video),\r\n  ]);\r\n}\r\n\r\nexport function onVideoLoad(video: HTMLVideoElement) {\r\n  return new Promise<void>((resolve) => {\r\n    if(video.readyState >= video.HAVE_METADATA) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    video.addEventListener(isAppleMobile ? 'loadeddata' : 'canplay', () => resolve(), {once: true});\r\n  });\r\n}\r\n\r\nexport async function getFilesFromEvent(e: ClipboardEvent | DragEvent, onlyTypes = false): Promise<any[]> {\r\n  const files: any[] = [];\r\n\r\n  const scanFiles = async(entry: any, item: DataTransferItem) => {\r\n    if(entry.isDirectory) {\r\n      const directoryReader = entry.createReader();\r\n      await new Promise<void>((resolve, reject) => {\r\n        directoryReader.readEntries(async(entries: any) => {\r\n          for(const entry of entries) {\r\n            await scanFiles(entry, item);\r\n          }\r\n\r\n          resolve();\r\n        });\r\n      });\r\n    } else if(entry) {\r\n      if(onlyTypes) {\r\n        files.push(entry.type);\r\n      } else {\r\n        const itemFile = item.getAsFile(); // * Safari can't handle entry.file with pasting\r\n        const file = entry instanceof File ? \r\n          entry : \r\n          (\r\n            entry instanceof DataTransferItem ? \r\n              entry.getAsFile() : \r\n              await new Promise((resolve, reject) => entry.file(resolve, (err: any) => resolve(itemFile)))\r\n          );\r\n\r\n        /* if(!onlyTypes) {\r\n          console.log('getFilesFromEvent: got file', item, file);\r\n        } */\r\n\r\n        if(!file) return;\r\n        files.push(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  if(e instanceof DragEvent && e.dataTransfer.files && !e.dataTransfer.items) {\r\n    for(let i = 0; i < e.dataTransfer.files.length; i++) {\r\n      const file = e.dataTransfer.files[i];\r\n      files.push(onlyTypes ? file.type : file);\r\n    }\r\n  } else {\r\n    // @ts-ignore\r\n    const items = (e.dataTransfer || e.clipboardData || e.originalEvent.clipboardData).items;\r\n\r\n    const promises: Promise<any>[] = [];\r\n    for(let i = 0; i < items.length; ++i) {\r\n      const item: DataTransferItem = items[i];\r\n      if(item.kind === 'file') {\r\n        const entry = (onlyTypes ? item : item.webkitGetAsEntry()) || item.getAsFile();\r\n        promises.push(scanFiles(entry, item));\r\n      }\r\n    }\r\n    \r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /* if(!onlyTypes) {\r\n    console.log('getFilesFromEvent: got files:', e, files);\r\n  } */\r\n  \r\n  return files;\r\n}\r\n\r\nexport function requestFile(accept?: string) {\r\n  const input = document.createElement('input');\r\n  input.type = 'file';\r\n  input.style.display = 'none';\r\n\r\n  if(accept) {\r\n    input.accept = accept;\r\n  }\r\n\r\n  document.body.append(input);\r\n\r\n  const promise = new Promise<File>((resolve, reject) => {\r\n    input.addEventListener('change', (e: any) => {\r\n      const file: File = e.target.files[0];\r\n      if(!file) {\r\n        reject('NO_FILE_SELECTED');\r\n        return;\r\n      }\r\n  \r\n      resolve(file);\r\n    }, {once: true});\r\n  }).finally(() => {\r\n    input.remove();\r\n  });\r\n\r\n  input.click();\r\n\r\n  return promise;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport type UserAuth = number;\r\n\r\nexport const REPLIES_PEER_ID = 1271266957;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { ServiceWorkerTask, ServiceWorkerTaskResponse } from \"./mtproto.service\";\r\nimport type { ApiError } from \"./apiManager\";\r\nimport appMessagesManager from \"../appManagers/appMessagesManager\";\r\nimport { Photo } from \"../../layer\";\r\nimport { bytesToHex } from \"../../helpers/bytes\";\r\nimport { deepEqual } from \"../../helpers/object\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport apiManager from \"./mtprotoworker\";\r\n\r\nexport type ReferenceContext = ReferenceContext.referenceContextProfilePhoto | ReferenceContext.referenceContextMessage;\r\nexport namespace ReferenceContext {\r\n  export type referenceContextProfilePhoto = {\r\n    type: 'profilePhoto',\r\n    peerId: number\r\n  };\r\n\r\n  export type referenceContextMessage = {\r\n    type: 'message',\r\n    peerId: number,\r\n    messageId: number\r\n  };\r\n}\r\n\r\nexport type ReferenceBytes = Photo.photo['file_reference'];\r\nexport type ReferenceContexts = Set<ReferenceContext>;\r\n\r\n//type ReferenceBytes = Uint8Array;\r\n\r\nclass ReferenceDatabase {\r\n  private contexts: Map<ReferenceBytes, ReferenceContexts> = new Map();\r\n  //private references: Map<ReferenceBytes, number[]> = new Map();\r\n  private links: {[hex: string]: ReferenceBytes} = {};\r\n\r\n  constructor() {\r\n    apiManager.addTaskListener('requestFilePart', (task: ServiceWorkerTaskResponse) => {\r\n      if(task.error) {\r\n        const onError = (error: ApiError) => {\r\n          if(error?.type === 'FILE_REFERENCE_EXPIRED') {\r\n            // @ts-ignore\r\n            const bytes = task.originalPayload[1].file_reference;\r\n            referenceDatabase.refreshReference(bytes).then(() => {\r\n              // @ts-ignore\r\n              task.originalPayload[1].file_reference = referenceDatabase.getReferenceByLink(bytes);\r\n              const newTask: ServiceWorkerTask = {\r\n                type: task.type,\r\n                id: task.id,\r\n                payload: task.originalPayload\r\n              };\r\n\r\n              apiManager.postMessage(newTask);\r\n            }).catch(onError);\r\n          } else {\r\n            navigator.serviceWorker.controller.postMessage(task);\r\n          }\r\n        };\r\n\r\n        onError(task.error);\r\n      } else {\r\n        navigator.serviceWorker.controller.postMessage(task);\r\n      }\r\n    });\r\n  }\r\n\r\n  public saveContext(reference: ReferenceBytes, context: ReferenceContext, contexts?: ReferenceContexts) {\r\n    [contexts, reference] = this.getContexts(reference);\r\n    if(!contexts) {\r\n      contexts = new Set();\r\n      this.contexts.set(reference, contexts);\r\n      this.links[bytesToHex(reference)] = reference;\r\n    }\r\n\r\n    for(const _context of contexts) {\r\n      if(deepEqual(_context, context)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    contexts.add(context);\r\n  }\r\n\r\n  public getReferenceByLink(reference: ReferenceBytes) {\r\n    return this.links[bytesToHex(reference)];\r\n  }\r\n\r\n  public getContexts(reference: ReferenceBytes): [ReferenceContexts, ReferenceBytes] {\r\n    const contexts = this.contexts.get(reference) || (reference = this.getReferenceByLink(reference) || reference, this.contexts.get(reference));\r\n    return [contexts, reference];\r\n  }\r\n\r\n  public getContext(reference: ReferenceBytes): [ReferenceContext, ReferenceBytes] {\r\n    const contexts = this.getContexts(reference);\r\n    return contexts ? [contexts[0].values().next().value, contexts[1]] : undefined;\r\n  }\r\n\r\n  public deleteContext(reference: ReferenceBytes, context: ReferenceContext, contexts?: ReferenceContexts) {\r\n    [contexts, reference] = this.getContexts(reference);\r\n    if(contexts) {\r\n      for(const _context of contexts) {\r\n        if(deepEqual(_context, context)) {\r\n          contexts.delete(_context);\r\n          if(!contexts.size) {\r\n            this.contexts.delete(reference);\r\n            delete this.links[bytesToHex(reference)];\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public refreshReference(reference: ReferenceBytes, context?: ReferenceContext): Promise<void> {\r\n    [context, reference] = this.getContext(reference);\r\n    switch(context?.type) {\r\n      case 'message': {\r\n        return appMessagesManager.wrapSingleMessage(context.peerId, context.messageId, true);\r\n        // .then(() => {\r\n        //   console.log('FILE_REFERENCE_EXPIRED: got message', context, appMessagesManager.getMessage((context as ReferenceContext.referenceContextMessage).messageId).media, reference);\r\n        // });\r\n      }\r\n\r\n      default: {\r\n        console.warn('FILE_REFERENCE_EXPIRED: not implemented context', context);\r\n        return Promise.reject();\r\n      }\r\n    }\r\n  }\r\n\r\n  /* handleReferenceError = (reference: ReferenceBytes, error: ApiError) => {\r\n    switch(error.type) {\r\n      case 'FILE_REFERENCE_EXPIRED': {\r\n        return this.refreshReference(reference);\r\n      }\r\n\r\n      default:\r\n        return Promise.reject(error);\r\n    }\r\n  }; */\r\n\r\n  /* public replaceReference(oldReference: ReferenceBytes, newReference: ReferenceBytes) {\r\n    const contexts = this.contexts.get(oldReference);\r\n    if(contexts) {\r\n      this.contexts.delete(oldReference);\r\n      this.contexts.set(newReference, contexts);\r\n    }\r\n  } */\r\n}\r\n\r\nconst referenceDatabase = new ReferenceDatabase();\r\nMOUNT_CLASS_TO.referenceDatabase = referenceDatabase;\r\nexport default referenceDatabase;","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\n\r\n/**\r\n * Descend sorted storage\r\n */\r\n\r\ntype ItemType = number;\r\n\r\nexport enum SliceEnd {\r\n  None = 0,\r\n  Top = 1,\r\n  Bottom = 2,\r\n  Both = SliceEnd.Top | SliceEnd.Bottom\r\n};\r\n\r\nexport interface Slice extends Array<ItemType> {\r\n  //slicedArray: SlicedArray;\r\n  end: SliceEnd;\r\n\r\n  isEnd: (side: SliceEnd) => boolean;\r\n  setEnd: (side: SliceEnd) => void;\r\n  unsetEnd: (side: SliceEnd) => void;\r\n\r\n  slice: (from?: number, to?: number) => Slice;\r\n  splice: (start: number, deleteCount: number, ...items: ItemType[]) => Slice;\r\n}\r\n\r\nexport interface SliceConstructor {\r\n  new(...items: ItemType[]): Slice;\r\n}\r\n\r\n// TODO: Clear empty arrays after deleting items\r\nexport default class SlicedArray {\r\n  private slices: Slice[]/*  = [[7,6,5],[4,3,2],[1,0,-1]] */;\r\n  private sliceConstructor: SliceConstructor;\r\n  \r\n  constructor() {\r\n    // @ts-ignore\r\n    this.sliceConstructor = SlicedArray.getSliceConstructor(this);\r\n\r\n    const first = this.constructSlice();\r\n    //first.setEnd(SliceEnd.Bottom);\r\n    this.slices = [first];\r\n  }\r\n\r\n  private static getSliceConstructor(slicedArray: SlicedArray) {\r\n    return class Slice extends Array<ItemType> implements Slice {\r\n      //slicedArray: SlicedArray;\r\n      end: SliceEnd = SliceEnd.None;\r\n  \r\n      /* constructor(...items: ItemType[]) {\r\n        super(...items);\r\n        //this.slicedArray = slicedArray;\r\n      } */\r\n  \r\n      isEnd(side: SliceEnd): boolean {\r\n        if((this.end & side) === side) {\r\n          return true;\r\n        }/*  else if(!this.slicedArray) {\r\n          return false;\r\n        } */\r\n  \r\n        let isEnd = false;\r\n        if(side === SliceEnd.Top) {\r\n          const slice = slicedArray.last;\r\n          isEnd = slice.end & side ? this.includes(slice[slice.length - 1])/*  || !slice.length */ : false;\r\n        } else if(side === SliceEnd.Bottom) {\r\n          const slice = slicedArray.first;\r\n          isEnd = slice.end & side ? this.includes(slice[0])/*  || !slice.length */ : false;\r\n        } else if(side === SliceEnd.Both) {\r\n          return this.isEnd(SliceEnd.Top) && this.isEnd(SliceEnd.Bottom);\r\n        }\r\n\r\n        if(isEnd) {\r\n          this.setEnd(side);\r\n        }\r\n  \r\n        return isEnd;\r\n      }\r\n  \r\n      setEnd(side: SliceEnd) {\r\n        this.end |= side;\r\n      }\r\n\r\n      unsetEnd(side: SliceEnd) {\r\n        this.end ^= side;\r\n      }\r\n\r\n      splice(start: number, deleteCount: number, ...items: ItemType[]) {\r\n        const ret = super.splice(start, deleteCount, ...items);\r\n\r\n        if(!this.length) {\r\n          const slices = slicedArray.slices as number[][];\r\n          const idx = slices.indexOf(this);\r\n          if(idx !== -1) {\r\n            if(slices.length === 1) { // left empty slice without ends\r\n              this.unsetEnd(SliceEnd.Both);\r\n            } else { // delete this slice\r\n              slices.splice(idx, 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  public constructSlice(...items: ItemType[]) {\r\n    //const slice = new Slice(this, ...items);\r\n    // can't pass items directly to constructor because first argument is length\r\n    const slice = new this.sliceConstructor(items.length);\r\n    for(let i = 0, length = items.length; i < length; ++i) {\r\n      slice[i] = items[i];\r\n    }\r\n    return slice;\r\n    \r\n    // ! code below will slow execution in 15 times\r\n    /* const self = this;\r\n    const p: Slice = new Proxy(slice, {\r\n      get: function(target, name: any) {\r\n        if(name === 'constructor') {\r\n          const p = new Proxy(Slice, {\r\n            construct: (target, args) => {\r\n              return self.constructSlice(...args);\r\n            }\r\n          });\r\n\r\n          return p;\r\n        }\r\n\r\n        return target[name];\r\n      }\r\n    });\r\n\r\n    return p; */\r\n\r\n    /*\r\n    var p = slicedArray.constructSlice();\r\n    p.length = 100000;\r\n    p.fill(255);\r\n\r\n    var a = new Array(100000);\r\n    a.fill(255);\r\n\r\n    var b = 0;\r\n    var perf = performance.now();\r\n    for(var i = 0; i < p.length; ++i) {\r\n        b += p[i];\r\n    }\r\n\r\n    console.log('perf 1', performance.now() - perf);\r\n\r\n    b = 0;\r\n    perf = performance.now();\r\n    for(var i = 0; i < a.length; ++i) {\r\n        b += a[i];\r\n    }\r\n\r\n    console.log('perf 2', performance.now() - perf);\r\n    */\r\n  }\r\n\r\n  public insertSlice(slice: ItemType[], flatten = true) {\r\n    if(!slice.length) {\r\n      return;\r\n    }\r\n\r\n    const first = this.slices[0];\r\n    if(!first.length) {\r\n      first.push(...slice);\r\n      return first;\r\n    }\r\n\r\n    const lowerBound = slice[slice.length - 1];\r\n    const upperBound = slice[0];\r\n\r\n    let foundSlice: Slice, lowerIndex = -1, upperIndex = -1, foundSliceIndex = 0;\r\n    for(; foundSliceIndex < this.slices.length; ++foundSliceIndex) {\r\n      foundSlice = this.slices[foundSliceIndex];\r\n      lowerIndex = foundSlice.indexOf(lowerBound);\r\n      upperIndex = foundSlice.indexOf(upperBound);\r\n      \r\n      if(upperIndex !== -1 && -1 !== lowerIndex) {\r\n        break;\r\n      } else if(upperIndex !== -1 || -1 !== lowerIndex) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(upperIndex !== -1 && -1 !== lowerIndex) {\r\n\r\n    } else if(upperIndex !== -1) {  // ([1, 2, 3] | [1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]\r\n      const sliced = slice.slice(foundSlice.length - upperIndex);\r\n      foundSlice.push(...sliced);\r\n    } else if(lowerIndex !== -1) {  // ([1, 2, 3] | [-1, 0, 1]) -> [-1, 0, 1, 2, 3]\r\n      const sliced = slice.slice(0, slice.length - lowerIndex - 1);\r\n      foundSlice.unshift(...sliced);\r\n    } else {\r\n      let insertIndex = 0;\r\n      for(const length = this.slices.length; insertIndex < length; ++insertIndex) { // * maybe should iterate from the end, could be faster ?\r\n        const s = this.slices[insertIndex];\r\n        if(slice[0] > s[0]) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.slices.splice(insertIndex, 0, this.constructSlice(...slice));\r\n      foundSliceIndex = insertIndex;\r\n    }\r\n\r\n    if(flatten) {\r\n      return this.flatten(foundSliceIndex);\r\n    }\r\n  }\r\n\r\n  private flatten(foundSliceIndex: number) {\r\n    if(this.slices.length >= 2) {\r\n      for(let i = 0, length = this.slices.length; i < (length - 1); ++i) {\r\n        const prevSlice = this.slices[i];\r\n        const nextSlice = this.slices[i + 1];\r\n  \r\n        const upperIndex = prevSlice.indexOf(nextSlice[0]);\r\n        if(upperIndex !== -1) {\r\n          prevSlice.setEnd(nextSlice.end);\r\n          this.slices.splice(i + 1, 1);\r\n\r\n          if(i < foundSliceIndex) {\r\n            --foundSliceIndex;\r\n          }\r\n\r\n          --length; // respect array bounds\r\n          --i;      // repeat from the same place\r\n  \r\n          this.insertSlice(nextSlice, false);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.slices[foundSliceIndex];\r\n  }\r\n\r\n  // * \r\n  \r\n  get first() {\r\n    return this.slices[0];\r\n  }\r\n  \r\n  get last() {\r\n    return this.slices[this.slices.length - 1];\r\n  }\r\n\r\n  get slice() {\r\n    return this.first;\r\n  }\r\n\r\n  get length() {\r\n    return this.slice.length;\r\n  }\r\n\r\n  public findSlice(item: ItemType) {\r\n    for(let i = 0, length = this.slices.length; i < length; ++i) {\r\n      const slice = this.slices[i];\r\n      const index = slice.indexOf(item);\r\n      if(index !== -1) {\r\n        return {slice, index};\r\n      }\r\n    }\r\n    \r\n    return undefined;\r\n  }\r\n\r\n  public findSliceOffset(maxId: number) {\r\n    let slice: Slice;\r\n    for(let i = 0; i < this.slices.length; ++i) {\r\n      let offset = 0;\r\n      slice = this.slices[i];\r\n      if(slice.length < 2) {\r\n        continue;\r\n      }\r\n      \r\n      for(; offset < slice.length; offset++) {\r\n        if(maxId >= slice[offset]) {\r\n          /* if(!offset) { // because can't find 3 in [[5,4], [2,1]]\r\n            return undefined;\r\n          } */\r\n\r\n          return {\r\n            slice, \r\n            offset: maxId === slice[offset] ? offset : offset - 1\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if(slice && slice.isEnd(SliceEnd.Top)) {\r\n      return {\r\n        slice,\r\n        offset: slice.length\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  // * https://core.telegram.org/api/offsets\r\n  public sliceMe(offsetId: number, add_offset: number, limit: number) {\r\n    let slice = this.slice;\r\n    let offset = 0;\r\n    let sliceOffset = 0;\r\n\r\n    if(offsetId) {\r\n      const pos = this.findSliceOffset(offsetId);\r\n      if(!pos) {\r\n        return undefined;\r\n      }\r\n\r\n      slice = pos.slice;\r\n      offset = sliceOffset = pos.offset;\r\n\r\n      if(slice.includes(offsetId)) {\r\n        sliceOffset += 1;\r\n      }\r\n\r\n      /* if(slice.includes(offsetId) && add_offset < 0) {\r\n        add_offset += 1;\r\n      } */\r\n    }\r\n\r\n    let sliceStart = Math.max(sliceOffset + add_offset, 0);\r\n    let sliceEnd = sliceOffset + add_offset + limit;\r\n    //const fixHalfBackLimit = add_offset && !(limit / add_offset % 2) && (sliceEnd % 2) ? 1 : 0;\r\n    //sliceEnd += fixHalfBackLimit;\r\n\r\n    const sliced = slice.slice(sliceStart, sliceEnd) as Slice;\r\n\r\n    const topWasMeantToLoad = add_offset < 0 ? limit + add_offset : limit;\r\n    const bottomWasMeantToLoad = Math.abs(add_offset);\r\n\r\n    // can use 'slice' here to check because if it's end, then 'sliced' is out of 'slice'\r\n    // useful when there is only 1 message in chat on its reopening\r\n    const topFulfilled = (slice.length - sliceOffset) >= topWasMeantToLoad || (slice.isEnd(SliceEnd.Top) ? (sliced.setEnd(SliceEnd.Top), true) : false);\r\n    const bottomFulfilled = (sliceOffset - bottomWasMeantToLoad) >= 0 || (slice.isEnd(SliceEnd.Bottom) ? (sliced.setEnd(SliceEnd.Bottom), true) : false);\r\n\r\n    //console.log('sliceMe', topFulfilled, bottomFulfilled);\r\n\r\n    return {\r\n      slice: sliced, \r\n      offsetIdOffset: offset,\r\n      fulfilled: SliceEnd.None | (topFulfilled && bottomFulfilled ? SliceEnd.Both : ((topFulfilled ? SliceEnd.Top : SliceEnd.None) | (bottomFulfilled ? SliceEnd.Bottom : SliceEnd.None)))\r\n    };\r\n  }\r\n\r\n  public unshift(...items: ItemType[]) {\r\n    let slice = this.first;\r\n    if(!slice.length) {\r\n      slice.setEnd(SliceEnd.Bottom);\r\n    } else if(!slice.isEnd(SliceEnd.Bottom)) {\r\n      slice = this.constructSlice();\r\n      slice.setEnd(SliceEnd.Bottom);\r\n      this.slices.unshift(slice);\r\n    }\r\n\r\n    slice.unshift(...items);\r\n  }\r\n\r\n  public push(...items: ItemType[]) {\r\n    let slice = this.last;\r\n    if(!slice.length) {\r\n      slice.setEnd(SliceEnd.Top);\r\n    } else if(!slice.isEnd(SliceEnd.Top)) {\r\n      slice = this.constructSlice();\r\n      slice.setEnd(SliceEnd.Top);\r\n      this.slices.push(slice);\r\n    }\r\n\r\n    slice.push(...items);\r\n  }\r\n\r\n  public delete(item: ItemType) {\r\n    const found = this.findSlice(item);\r\n    if(found) {\r\n      found.slice.splice(found.index, 1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.SlicedArray = SlicedArray);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { InputFileLocation, InputStickerSet } from \"../layer\";\r\nimport type { DownloadOptions } from \"../lib/mtproto/apiFileManager\";\r\n\r\nconst FILENAME_JOINER = '_';\r\n\r\nexport function getFileNameByLocation(location: InputFileLocation, options?: Partial<{\r\n  fileName: string\r\n}>) {\r\n  const fileName = '';//(options?.fileName || '').split('.');\r\n  const ext = fileName[fileName.length - 1] || '';\r\n\r\n  let str: string;\r\n  switch(location._) {\r\n    case 'inputPhotoFileLocation': {\r\n      str = ['photo', fileName[0], location.id, location.thumb_size].filter(Boolean).join(FILENAME_JOINER);\r\n      break;\r\n    }\r\n\r\n    case 'inputDocumentFileLocation': {\r\n      str = ['document', fileName[0], location.id, location.thumb_size].filter(Boolean).join(FILENAME_JOINER);\r\n      break;\r\n    }\r\n\r\n    case 'inputPeerPhotoFileLocation':\r\n      str = ['peerPhoto', location.photo_id, location.pFlags.big ? 'big' : 'small'].join(FILENAME_JOINER);\r\n      break;\r\n    \r\n    case 'inputStickerSetThumb': {\r\n      const id = (location.stickerset as InputStickerSet.inputStickerSetID).id || \r\n        (location.stickerset as InputStickerSet.inputStickerSetShortName).short_name || \r\n        (location.stickerset as InputStickerSet.inputStickerSetDice).emoticon || \r\n        location.stickerset._;\r\n      str = ['stickerSetThumb', id, location.thumb_version].join(FILENAME_JOINER);\r\n      break;\r\n    }\r\n\r\n    case 'inputFileLocation': {\r\n      str = location.volume_id + '_' + location.local_id;\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      console.error('Unrecognized location:', location);\r\n      str = '';\r\n      break;\r\n    }\r\n  }\r\n\r\n  return str + (ext ? '.' + ext : ext);\r\n}\r\n\r\nexport type FileURLType = 'photo' | 'thumb' | 'document' | 'stream' | 'download';\r\nexport function getFileURL(type: FileURLType, options: DownloadOptions) {\r\n  //console.log('getFileURL', location);\r\n  //const perf = performance.now();\r\n  const encoded = encodeURIComponent(JSON.stringify(options));\r\n  //console.log('getFileURL encode:', performance.now() - perf, encoded);\r\n\r\n  return '/' + type + '/' + encoded;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { copy } from \"../../helpers/object\";\r\nimport { InputMedia, MessageEntity } from \"../../layer\";\r\nimport { logger, LogTypes } from \"../logger\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appMessagesManager from './appMessagesManager';\r\nimport appPeersManager from './appPeersManager';\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\nexport type PollAnswer = {\r\n  _: 'pollAnswer',\r\n  text: string,\r\n  option: Uint8Array\r\n};\r\n\r\nexport type PollAnswerVoters = {\r\n  _: 'pollAnswerVoters',\r\n  flags: number,\r\n  option: Uint8Array,\r\n  voters: number,\r\n\r\n  pFlags: Partial<{\r\n    chosen: true,\r\n    correct: true\r\n  }>\r\n};\r\n\r\nexport type PollResult = {\r\n  _: 'pollAnswerVoters',\r\n  flags: number,\r\n  option: Uint8Array,\r\n  voters: number,\r\n\r\n  pFlags?: Partial<{chosen: true, correct: true}>\r\n};\r\n\r\nexport type PollResults = {\r\n  _: 'pollResults',\r\n  flags: number,\r\n  results?: Array<PollResult>,\r\n  total_voters?: number,\r\n  recent_voters?: number[],\r\n  solution?: string,\r\n  solution_entities?: any[],\r\n\r\n  pFlags: Partial<{\r\n    min: true\r\n  }>,\r\n};\r\n\r\nexport type Poll = {\r\n  _: 'poll',\r\n  question: string,\r\n  id: string,\r\n  answers: Array<PollAnswer>,\r\n  close_period?: number,\r\n  close_date?: number\r\n\r\n  pFlags?: Partial<{\r\n    closed: true,\r\n    public_voters: true,\r\n    multiple_choice: true,\r\n    quiz: true\r\n  }>,\r\n  rQuestion?: string,\r\n  rReply?: string,\r\n  chosenIndexes?: number[]\r\n};\r\n\r\nexport class AppPollsManager {\r\n  public polls: {[id: string]: Poll} = {};\r\n  public results: {[id: string]: PollResults} = {};\r\n\r\n  private log = logger('POLLS', LogTypes.Error);\r\n\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updateMessagePoll: (update) => {\r\n        this.log('updateMessagePoll:', update);\r\n\r\n        let poll: Poll = update.poll || this.polls[update.poll_id];\r\n        if(!poll) {\r\n          return;\r\n        }\r\n\r\n        poll = this.savePoll(poll, update.results as any);\r\n        rootScope.broadcast('poll_update', {poll, results: update.results as any});\r\n      }\r\n    });\r\n  }\r\n\r\n  public savePoll(poll: Poll, results: PollResults) {\r\n    const id = poll.id;\r\n    if(this.polls[id]) {\r\n      poll = Object.assign(this.polls[id], poll);\r\n      this.saveResults(poll, results);\r\n      return poll;\r\n    }\r\n\r\n    this.polls[id] = poll;\r\n\r\n    poll.rQuestion = RichTextProcessor.wrapEmojiText(poll.question);\r\n    poll.rReply = RichTextProcessor.wrapEmojiText('📊') + ' ' + (poll.rQuestion || 'poll');\r\n    poll.chosenIndexes = [];\r\n    this.saveResults(poll, results);\r\n    return poll;\r\n  }\r\n\r\n  public saveResults(poll: Poll, results: PollResults) {\r\n    if(this.results[poll.id]) {\r\n      results = Object.assign(this.results[poll.id], results);\r\n    } else {\r\n      this.results[poll.id] = results;\r\n    }\r\n\r\n    if(!results.pFlags.min) { // ! https://core.telegram.org/constructor/pollResults - min\r\n      poll.chosenIndexes.length = 0;\r\n      if(results?.results?.length) {\r\n        results.results.forEach((answer, idx) => {\r\n          if(answer.pFlags?.chosen) {\r\n            poll.chosenIndexes.push(idx);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public getPoll(pollId: string): {poll: Poll, results: PollResults} {\r\n    return {\r\n      poll: this.polls[pollId], \r\n      results: this.results[pollId]\r\n    };\r\n  }\r\n\r\n  public getInputMediaPoll(poll: Poll, correctAnswers?: Uint8Array[], solution?: string, solutionEntities?: MessageEntity[]): InputMedia.inputMediaPoll {\r\n    if(solution) {\r\n      if(!solutionEntities) {\r\n        solutionEntities = [];\r\n      }\r\n\r\n      solution = RichTextProcessor.parseMarkdown(solution, solutionEntities);\r\n    } else {\r\n      solution = undefined; // can be string here\r\n    }\r\n\r\n    return {\r\n      _: 'inputMediaPoll',\r\n      poll,\r\n      correct_answers: correctAnswers,\r\n      solution,\r\n      solution_entities: solution ? solutionEntities : undefined\r\n    };\r\n  }\r\n\r\n  public sendVote(message: any, optionIds: number[]): Promise<void> {\r\n    const poll: Poll = message.media.poll;\r\n\r\n    const options: Uint8Array[] = optionIds.map(index => {\r\n      return poll.answers[index].option;\r\n    });\r\n    \r\n    const messageId = message.mid;\r\n    const peerId = message.peerId;\r\n    const inputPeer = appPeersManager.getInputPeerById(peerId);\r\n\r\n    if(message.pFlags.is_outgoing) {\r\n      return appMessagesManager.invokeAfterMessageIsSent(messageId, 'sendVote', (message) => {\r\n        this.log('invoke sendVote callback');\r\n        return this.sendVote(message, optionIds);\r\n      });\r\n    }\r\n\r\n    return apiManager.invokeApi('messages.sendVote', {\r\n      peer: inputPeer,\r\n      msg_id: appMessagesManager.getServerMessageId(message.mid),\r\n      options\r\n    }).then(updates => {\r\n      this.log('sendVote updates:', updates);\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public getResults(message: any) {\r\n    const inputPeer = appPeersManager.getInputPeerById(message.peerId);\r\n\r\n    return apiManager.invokeApi('messages.getPollResults', {\r\n      peer: inputPeer,\r\n      msg_id: appMessagesManager.getServerMessageId(message.mid)\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n      this.log('getResults updates:', updates);\r\n    });\r\n  }\r\n\r\n  public getVotes(message: any, option?: Uint8Array, offset?: string, limit = 20) {\r\n    return apiManager.invokeApi('messages.getPollVotes', {\r\n      peer: appPeersManager.getInputPeerById(message.peerId),\r\n      id: appMessagesManager.getServerMessageId(message.mid),\r\n      option,\r\n      offset,\r\n      limit\r\n    }).then((votesList) => {\r\n      this.log('getPollVotes messages:', votesList);\r\n\r\n      appUsersManager.saveApiUsers(votesList.users);\r\n\r\n      return votesList;\r\n    });\r\n  }\r\n\r\n  public stopPoll(message: any) {\r\n    const poll: Poll = message.media.poll;\r\n    \r\n    if(poll.pFlags.closed) return Promise.resolve();\r\n\r\n    const newPoll = copy(poll);\r\n    newPoll.pFlags.closed = true;\r\n    return appMessagesManager.editMessage(message, undefined, {\r\n      newMedia: this.getInputMediaPoll(newPoll)\r\n    }).then(() => {\r\n      //console.log('stopped poll');\r\n    }, err => {\r\n      this.log.error('stopPoll error:', err);\r\n    });\r\n  }\r\n}\r\n\r\nconst appPollsManager = new AppPollsManager();\r\nMOUNT_CLASS_TO.appPollsManager = appPollsManager;\r\nexport default appPollsManager;\r\n"],"sourceRoot":""}