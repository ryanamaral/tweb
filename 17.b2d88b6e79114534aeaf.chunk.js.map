{"version":3,"sources":["webpack:///./src/components/inputField.ts","webpack:///./src/helpers/random.ts","webpack:///./src/pages/pageIm.ts","webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/lib/filemanager.ts","webpack:///./src/lib/cacheStorage.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/components/monkeys/password.ts"],"names":["init","document","addEventListener","e","target","hasAttribute","parentElement","preventDefault","text","originalEvent","clipboardData","getData","entities","parseEntities","filter","_","wrapRichText","noLinks","wrappingDraft","window","execCommand","checkAndSetRTL","input","char","HTMLInputElement","value","innerText","direction","style","InputState","options","this","container","createElement","classList","add","maxLength","showLengthOn","Math","round","placeholder","name","plainText","processInput","label","labelText","innerHTML","firstElementChild","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","wasInputFakeClientHeight","showScrollDebounced","remove","setAttribute","className","undefined","border","append","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","length","diff","isError","toggle","select","textContent","labelOptions","scrollHeight","clientHeight","height","setValueSilently","event","Event","bubbles","cancelable","dispatchEvent","fireFakeInput","originalValue","silent","wrapDraftText","state","Error","Valid","setState","nextRandomInt","maxValue","floor","random","randomLong","page","pushToState","then","m","default","broadcast","requestedServerLanguage","getCacheLangPack","langPack","local","getLangPack","lang_code","Promise","resolve","requestAnimationFrame","finally","passwordManager","invokeApi","result","settings","getState","currentHashPromise","newHashPromise","params","password","new_settings","hint","email","currentPassword","computeSRP","newAlgo","new_algo","salt1","Uint8Array","randomize","set","newPassword","all","hashes","new_password_hash","inputCheckPassword","auth","saveApiUser","user","setUserAuth","id","code","LoginPage","element","body","querySelector","imageDiv","title","titleLangKey","subtitle","subtitleLangKey","withInputWrapper","inputWrapper","PasswordInputField","super","passwordVisible","onVisibilityClick","toggleVisible","type","onVisibilityClickAdditional","autocomplete","stealthy","tabIndex","prepend","insertBefore","cloneNode","nextSibling","blobSupported","fileWriter","bytes","Blob","reject","fileReader","FileReader","onload","arrayBuffer","arr","write","readAsArrayBuffer","mimeType","saveFileCallback","blobParts","part","push","truncate","finalize","saveToStorage","blob","dbName","useStorage","test","openDatabase","STORAGES","openDbPromise","caches","open","entryName","timeoutOperation","cache","delete","response","put","fileName","save","Response","method","match","callback","rejected","timeout","setTimeout","res","err","clearTimeout","fakeWriter","getFakeFileWriter","saveFile","enabled","map","storage","deleteAll","passwordInput","btnNext","btnNextI18n","IntlElement","key","passwordInputField","getStateInterval","setInterval","_state","wrapEmojiText","onSubmit","update","preloader","check","clearInterval","mount","monkey","removeAttribute","catch","size","isMobile","load","focus","PasswordMonkey","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","width","noCache","_animation","animation","currentFrame","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame"],"mappings":"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","file":"17.b2d88b6e79114534aeaf.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { getRichValue, isInputEmpty } from \"../helpers/dom\";\r\nimport { debounce } from \"../helpers/schedulers\";\r\nimport { checkRTL } from \"../helpers/string\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!(e.target as HTMLElement).hasAttribute('contenteditable') && !(e.target as HTMLElement).parentElement.hasAttribute('contenteditable')) {\r\n      return;\r\n    }\r\n    //console.log('document paste');\r\n\r\n    //console.log('messageInput paste');\r\n\r\n    e.preventDefault();\r\n    // @ts-ignore\r\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n    let entities = RichTextProcessor.parseEntities(text);\r\n    //console.log('messageInput paste', text, entities);\r\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    //text = RichTextProcessor.wrapEmojiText(text);\r\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\r\n\r\n    // console.log('messageInput paste after', text);\r\n\r\n    // @ts-ignore\r\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\r\n\r\n    // @ts-ignore\r\n    //console.log('paste text', text, );\r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\nconst checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n};\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: true\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  protected wasInputFakeClientHeight: number;\r\n  protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    if(options.maxLength) {\r\n      options.showLengthOn = Math.round(options.maxLength / 3);\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        this.wasInputFakeClientHeight = 0;\r\n        this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input)].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if((this.input as HTMLInputElement).value) { // * avoid selecting whole empty field on iOS devices\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput() {\r\n    const {scrollHeight, clientHeight} = this.inputFake;\r\n    if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    }\r\n\r\n    this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.height = scrollHeight ? scrollHeight + 'px' : '';\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input);\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    const event = new Event('input', {bubbles: true, cancelable: true});\r\n    this.input.dispatchEvent(event);\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && this.value !== this.originalValue;\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport function nextRandomInt(maxValue: number) {\r\n  return Math.floor(Math.random() * maxValue);\r\n}\r\n\r\nexport function randomLong() {\r\n  return '' + nextRandomInt(0xFFFFFFFF) + nextRandomInt(0xFFFFFF);\r\n  //return '' + parseInt(nextRandomInt(0xFFFFFFFF).toString(16) + nextRandomInt(0xFFFFFFFF).toString(16), 16);\r\n}\r\n","//import {stackBlurImage} from '../lib/StackBlur';\r\n//import appStateManager from \"../lib/appManagers/appStateManager\";\r\n/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { blurActiveElement } from \"../helpers/dom\";\r\nimport appStateManager from \"../lib/appManagers/appStateManager\";\r\nimport I18n from \"../lib/langPack\";\r\nimport Page from \"./page\";\r\n\r\nlet onFirstMount = () => {\r\n  //return;\r\n  appStateManager.pushToState('authState', {_: 'authStateSignedIn'});\r\n  // ! TOO SLOW\r\n  /* appStateManager.saveState(); */\r\n\r\n  import('../lib/rootScope').then(m => {\r\n    m.default.broadcast('im_mount');\r\n  });\r\n\r\n  if(!I18n.requestedServerLanguage) {\r\n    I18n.getCacheLangPack().then(langPack => {\r\n      if(langPack.local) {\r\n        I18n.getLangPack(langPack.lang_code);\r\n      }\r\n    });\r\n  }\r\n\r\n  blurActiveElement();\r\n  return new Promise<void>((resolve) => {\r\n    window.requestAnimationFrame(() => {\r\n      const promise = import('../lib/appManagers/appDialogsManager');\r\n      promise.finally(async() => {\r\n        //alert('pageIm!');\r\n        resolve();\r\n    \r\n        //AudioContext && global.navigator && global.navigator.mediaDevices && global.navigator.mediaDevices.getUserMedia && global.WebAssembly;\r\n    \r\n        /* // @ts-ignore\r\n        var AudioContext = globalThis.AudioContext || globalThis.webkitAudioContext;\r\n        alert('AudioContext:' + typeof(AudioContext));\r\n        // @ts-ignore\r\n        alert('global.navigator:' + typeof(navigator));\r\n        alert('navigator.mediaDevices:' + typeof(navigator.mediaDevices));\r\n        alert('navigator.mediaDevices.getUserMedia:' + typeof(navigator.mediaDevices?.getUserMedia));\r\n        alert('global.WebAssembly:' + typeof(WebAssembly)); */\r\n    \r\n        //(Array.from(document.getElementsByClassName('rp')) as HTMLElement[]).forEach(el => ripple(el));\r\n      });\r\n    });\r\n  });\r\n\r\n  //let promise = /* Promise.resolve() */.then(() => {//import('../lib/services').then(services => {\r\n    /* fetch('assets/img/camomile.jpg')\r\n    .then(res => res.blob())\r\n    .then(blob => {\r\n      let img = new Image();\r\n      let url = URL.createObjectURL(blob);\r\n      img.src = url;\r\n      img.onload = () => {\r\n        let id = 'chat-background-canvas';\r\n        var canvas  = document.getElementById(id) as HTMLCanvasElement;\r\n        //URL.revokeObjectURL(url);\r\n  \r\n        let elements = ['.chat-container'].map(selector => {\r\n          return document.querySelector(selector) as HTMLDivElement;\r\n        });\r\n  \r\n        stackBlurImage(img, id, 15, 0);\r\n  \r\n        canvas.toBlob(blob => {\r\n          //let dataUrl = canvas.toDataURL('image/jpeg', 1);\r\n          let dataUrl = URL.createObjectURL(blob);\r\n  \r\n          elements.forEach(el => {\r\n            el.style.backgroundImage = 'url(' + dataUrl + ')';\r\n          });\r\n        }, 'image/jpeg', 1);\r\n      };\r\n    }); */\r\n  //});\r\n};\r\n\r\nconst page = new Page('page-chats', false, onFirstMount);\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountPasswordInputSettings, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport type CryptoWorkerMethods from '../crypto/crypto_methods';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport appUsersManager from '../appManagers/appUsersManager';\r\nimport apiManager from './mtprotoworker';\r\n//import { computeCheck } from \"../crypto/srp\";\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: ReturnType<CryptoWorkerMethods['computeSRP']>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.computeSRP(settings.currentPassword, state);\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.computeSRP(settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.computeSRP(password, state).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          appUsersManager.saveApiUser(auth.user);\r\n          apiManager.setUserAuth(auth.user.id);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { cancelEvent } from \"../helpers/dom\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.autocomplete = 'off';\r\n    /* input.readOnly = true;\r\n\r\n    input.addEventListener('focus', () => {\r\n      input.removeAttribute('readonly');\r\n    }, {once: true}); */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { blobConstruct } from \"../helpers/blob\";\r\n\r\nexport class FileManager {\r\n  public blobSupported = true;\r\n  \r\n  constructor() {\r\n    try {\r\n      blobConstruct([], '');\r\n    } catch(e) {\r\n      this.blobSupported = false;\r\n    }\r\n  }\r\n  \r\n  public isAvailable() {\r\n    return this.blobSupported;\r\n  }\r\n  \r\n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\r\n    if(bytes instanceof Blob) { // is file bytes\r\n      return new Promise((resolve, reject) => {\r\n        let fileReader = new FileReader();\r\n        fileReader.onload = function(event) {\r\n          let arrayBuffer = event.target.result as ArrayBuffer;\r\n          \r\n          let arr = new Uint8Array(arrayBuffer);\r\n          \r\n          fileWriter.write(arr).then(resolve, reject);\r\n        };\r\n        \r\n        fileReader.readAsArrayBuffer(bytes);\r\n      });\r\n    } else {\r\n      return fileWriter.write(bytes);\r\n    }\r\n  }\r\n\r\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\r\n    const blobParts: Array<Uint8Array | string> = [];\r\n    const fakeFileWriter = {\r\n      write: async(part: Uint8Array | string) => {\r\n        if(!this.blobSupported) {\r\n          throw false;\r\n        }\r\n        \r\n        blobParts.push(part);\r\n      },\r\n      truncate: () => {\r\n        blobParts.length = 0;\r\n      },\r\n      finalize: (saveToStorage = true) => {\r\n        const blob = blobConstruct(blobParts, mimeType);\r\n\r\n        if(saveToStorage && saveFileCallback) {\r\n          saveFileCallback(blob);\r\n        }\r\n        \r\n        return blob;\r\n      }\r\n    };\r\n    \r\n    return fakeFileWriter;\r\n  }\r\n}\r\n\r\nexport default new FileManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport FileManager from './filemanager';\r\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\r\n//import { logger } from './polyfill';\r\n\r\nexport default class CacheStorageController {\r\n  private static STORAGES: CacheStorageController[] = [];\r\n  //public dbName = 'cachedFiles';\r\n  private openDbPromise: Promise<Cache>;\r\n\r\n  private useStorage = true;\r\n\r\n  //private log: ReturnType<typeof logger> = logger('CS');\r\n\r\n  constructor(private dbName: string) {\r\n    if(Modes.test) {\r\n      this.dbName += '_test';\r\n    }\r\n    \r\n    this.openDatabase();\r\n    CacheStorageController.STORAGES.push(this);\r\n  }\r\n\r\n  private openDatabase(): Promise<Cache> {\r\n    if(this.openDbPromise) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    return this.openDbPromise = caches.open(this.dbName);\r\n  }\r\n\r\n  public delete(entryName: string) {\r\n    return this.timeoutOperation((cache) => {\r\n      return cache.delete('/' + entryName);\r\n    });\r\n  }\r\n\r\n  public deleteAll() {\r\n    return caches.delete(this.dbName);\r\n  }\r\n\r\n  public save(entryName: string, response: Response) {\r\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\r\n\r\n    return this.timeoutOperation((cache) => {\r\n      return cache.put('/' + entryName, response);\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\r\n\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct(blob) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, new Response(blob)).then(() => {\r\n      return blob as Blob;\r\n    });\r\n  }\r\n\r\n  /* public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\r\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\r\n\r\n    /* if(method === 'blob') {\r\n      return Promise.reject();\r\n    } */\r\n\r\n    // const str = `get fileName: ${fileName}`;\r\n    // console.time(str);\r\n    return this.timeoutOperation(async(cache) => {\r\n      const response = await cache.match('/' + fileName);\r\n\r\n      if(!response || !cache) {\r\n        //console.warn('getFile:', response, fileName);\r\n        throw 'NO_ENTRY_FOUND';\r\n      }\r\n   \r\n      const promise = response[method]();\r\n      // promise.then(() => {\r\n      //   console.timeEnd(str);\r\n      // });\r\n      return promise;\r\n    });\r\n  }\r\n\r\n  private timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\r\n    return new Promise<T>(async(resolve, reject) => {\r\n      let rejected = false;\r\n      const timeout = setTimeout(() => {\r\n        reject();\r\n        //console.warn('CACHESTORAGE TIMEOUT');\r\n        rejected = true;\r\n      }, 15e3);\r\n\r\n      try {\r\n        const cache = await this.openDatabase();\r\n        if(!cache) {\r\n          throw 'no cache?';\r\n        }\r\n\r\n        const res = await callback(cache);\r\n\r\n        if(rejected) return;\r\n        resolve(res);\r\n      } catch(err) {\r\n        reject(err);\r\n      }\r\n\r\n      clearTimeout(timeout);\r\n    });\r\n  }\r\n\r\n  public getFileWriter(fileName: string, mimeType: string) {\r\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        return storage.deleteAll();\r\n      }\r\n    }));\r\n  }\r\n}\r\n\r\n//const cacheStorage = new CacheStorageController(); \r\n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\r\n//export default cacheStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport pageIm from './pageIm';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { attachClickEvent, cancelEvent, htmlToSpan, replaceContent, toggleDisability } from '../helpers/dom';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          pageIm.mount();\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: Promise<void>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}