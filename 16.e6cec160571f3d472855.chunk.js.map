{"version":3,"sources":["webpack:///./src/components/inputField.ts","webpack:///./src/helpers/random.ts","webpack:///./src/pages/pageIm.ts","webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/lib/filemanager.ts","webpack:///./src/lib/cacheStorage.ts","webpack:///./src/components/monkeys/password.ts","webpack:///./src/pages/pagePassword.ts"],"names":["init","document","addEventListener","e","target","hasAttribute","parentElement","preventDefault","text","originalEvent","clipboardData","getData","entities","parseEntities","filter","_","wrapRichText","noLinks","wrappingDraft","window","execCommand","checkAndSetRTL","input","char","HTMLInputElement","value","innerText","direction","style","InputState","options","this","container","createElement","classList","add","maxLength","showLengthOn","Math","round","placeholder","name","plainText","processInput","label","labelText","innerHTML","firstElementChild","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","wasInputFakeClientHeight","showScrollDebounced","remove","setAttribute","className","undefined","border","append","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","length","diff","isError","toggle","select","textContent","labelOptions","scrollHeight","clientHeight","height","setValueSilently","event","Event","bubbles","cancelable","dispatchEvent","fireFakeInput","originalValue","silent","wrapDraftText","state","Error","Valid","setState","nextRandomInt","maxValue","floor","random","randomLong","page","pushToState","then","m","default","broadcast","requestedServerLanguage","getCacheLangPack","langPack","local","getLangPack","lang_code","Promise","resolve","requestAnimationFrame","finally","passwordManager","invokeApi","result","settings","getState","currentHashPromise","newHashPromise","params","password","new_settings","hint","email","currentPassword","computeSRP","newAlgo","new_algo","salt1","Uint8Array","randomize","set","newPassword","all","hashes","new_password_hash","inputCheckPassword","auth","saveApiUser","user","setUserAuth","id","code","LoginPage","element","body","querySelector","imageDiv","title","titleLangKey","subtitle","subtitleLangKey","withInputWrapper","inputWrapper","PasswordInputField","super","passwordVisible","onVisibilityClick","toggleVisible","type","onVisibilityClickAdditional","autocomplete","stealthy","tabIndex","prepend","insertBefore","cloneNode","nextSibling","blobSupported","fileWriter","bytes","Blob","reject","fileReader","FileReader","onload","arrayBuffer","arr","write","readAsArrayBuffer","mimeType","saveFileCallback","blobParts","part","push","truncate","finalize","saveToStorage","blob","dbName","useStorage","test","openDatabase","STORAGES","openDbPromise","caches","open","entryName","timeoutOperation","cache","delete","response","put","fileName","save","Response","method","match","callback","rejected","timeout","setTimeout","res","err","clearTimeout","fakeWriter","getFakeFileWriter","saveFile","enabled","map","storage","deleteAll","PasswordMonkey","passwordInputField","size","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","width","noCache","_animation","animation","currentFrame","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame","passwordInput","btnNext","btnNextI18n","IntlElement","key","getStateInterval","setInterval","_state","wrapEmojiText","onSubmit","update","preloader","check","clearInterval","mount","monkey","removeAttribute","catch","isMobile","load","focus"],"mappings":"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","file":"16.e6cec160571f3d472855.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { getRichValue, isInputEmpty } from \"../helpers/dom\";\nimport { debounce } from \"../helpers/schedulers\";\nimport { checkRTL } from \"../helpers/string\";\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\nimport RichTextProcessor from \"../lib/richtextprocessor\";\n\nlet init = () => {\n  document.addEventListener('paste', (e) => {\n    if(!(e.target as HTMLElement).hasAttribute('contenteditable') && !(e.target as HTMLElement).parentElement.hasAttribute('contenteditable')) {\n      return;\n    }\n    //console.log('document paste');\n\n    //console.log('messageInput paste');\n\n    e.preventDefault();\n    // @ts-ignore\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\n\n    let entities = RichTextProcessor.parseEntities(text);\n    //console.log('messageInput paste', text, entities);\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\n    //text = RichTextProcessor.wrapEmojiText(text);\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\n\n    // console.log('messageInput paste after', text);\n\n    // @ts-ignore\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\n\n    // @ts-ignore\n    //console.log('paste text', text, );\n    window.document.execCommand('insertHTML', false, text);\n  });\n\n  init = null;\n};\n\nconst checkAndSetRTL = (input: HTMLElement) => {\n  //const isEmpty = isInputEmpty(input);\n  //console.log('input', isEmpty);\n\n  //const char = [...getRichValue(input)][0];\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\n  let direction = 'ltr';\n  if(char && checkRTL(char)) {\n    direction = 'rtl';\n  }\n\n  //console.log('RTL', direction, char);\n\n  input.style.direction = direction;\n};\n\nexport enum InputState {\n  Neutral = 0,\n  Valid = 1,\n  Error = 2\n};\n\nexport type InputFieldOptions = {\n  placeholder?: LangPackKey, \n  label?: LangPackKey, \n  labelOptions?: any[],\n  labelText?: string,\n  name?: string, \n  maxLength?: number, \n  showLengthOn?: number,\n  plainText?: true,\n  animate?: true\n};\n\nclass InputField {\n  public container: HTMLElement;\n  public input: HTMLElement;\n  public inputFake: HTMLElement;\n  public label: HTMLLabelElement;\n\n  public originalValue: string;\n\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\n  protected wasInputFakeClientHeight: number;\n  protected showScrollDebounced: () => void;\n\n  constructor(public options: InputFieldOptions = {}) {\n    this.container = document.createElement('div');\n    this.container.classList.add('input-field');\n\n    if(options.maxLength) {\n      options.showLengthOn = Math.round(options.maxLength / 3);\n    }\n\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\n\n    let label = options.label || options.labelText;\n\n    let input: HTMLElement;\n    if(!plainText) {\n      if(init) {\n        init();\n      }\n\n      this.container.innerHTML = `\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\n      `;\n\n      input = this.container.firstElementChild as HTMLElement;\n      const observer = new MutationObserver(() => {\n        checkAndSetRTL(input);\n\n        if(processInput) {\n          processInput();\n        }\n      });\n\n      // * because if delete all characters there will br left\n      input.addEventListener('input', () => {\n        if(isInputEmpty(input)) {\n          input.innerHTML = '';\n        }\n\n        if(this.inputFake) {\n          this.inputFake.innerHTML = input.innerHTML;\n          this.onFakeInput();\n        }\n      });\n      \n      // ! childList for paste first symbol\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\n\n      if(options.animate) {\n        input.classList.add('scrollable', 'scrollable-y');\n        this.wasInputFakeClientHeight = 0;\n        this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\n        this.inputFake = document.createElement('div');\n        this.inputFake.setAttribute('contenteditable', 'true');\n        this.inputFake.className = input.className + ' input-field-input-fake';\n      }\n    } else {\n      this.container.innerHTML = `\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\n      `;\n\n      input = this.container.firstElementChild as HTMLElement;\n      input.addEventListener('input', () => checkAndSetRTL(input));\n    }\n\n    if(placeholder) {\n      _i18n(input, placeholder, undefined, 'placeholder');\n\n      if(this.inputFake) {\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\n      }\n    }\n\n    if(label || placeholder) {\n      const border = document.createElement('div');\n      border.classList.add('input-field-border');\n      this.container.append(border);\n    }\n\n    if(label) {\n      this.label = document.createElement('label');\n      this.setLabel();\n      this.container.append(this.label);\n    }\n\n    let processInput: () => void;\n    if(maxLength) {\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\n      let showingLength = false;\n\n      processInput = () => {\n        const wasError = input.classList.contains('error');\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input)].length;\n        const diff = maxLength - inputLength;\n        const isError = diff < 0;\n        input.classList.toggle('error', isError);\n\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\n\n        if(isError || diff <= showLengthOn) {\n          this.setLabel();\n          labelEl.append(` (${maxLength - inputLength})`);\n          if(!showingLength) showingLength = true;\n        } else if((wasError && !isError) || showingLength) {\n          this.setLabel();\n          showingLength = false;\n        }\n      };\n\n      input.addEventListener('input', processInput);\n    }\n\n    this.input = input;\n  }\n\n  public select() {\n    if((this.input as HTMLInputElement).value) { // * avoid selecting whole empty field on iOS devices\n      (this.input as HTMLInputElement).select(); // * select text\n    }\n  }\n\n  public setLabel() {\n    this.label.textContent = '';\n    if(this.options.labelText) {\n      this.label.innerHTML = this.options.labelText;\n    } else {\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\n    }\n  }\n\n  public onFakeInput() {\n    const {scrollHeight, clientHeight} = this.inputFake;\n    if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\n      this.showScrollDebounced();\n    }\n\n    this.wasInputFakeClientHeight = clientHeight;\n    this.input.style.height = scrollHeight ? scrollHeight + 'px' : '';\n  }\n\n  get value() {\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input);\n    //return getRichValue(this.input);\n  }\n\n  set value(value: string) {\n    this.setValueSilently(value, false);\n\n    const event = new Event('input', {bubbles: true, cancelable: true});\n    this.input.dispatchEvent(event);\n  }\n\n  public setValueSilently(value: string, fireFakeInput = true) {\n    if(this.options.plainText) {\n      (this.input as HTMLInputElement).value = value;\n    } else {\n      this.input.innerHTML = value;\n      \n      if(this.inputFake) {\n        this.inputFake.innerHTML = value;\n\n        if(fireFakeInput) {\n          this.onFakeInput();\n        }\n      }\n    }\n  }\n\n  public isValid() {\n    return !this.input.classList.contains('error') && this.value !== this.originalValue;\n  }\n\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\n    this.originalValue = value;\n\n    if(!this.options.plainText) {\n      value = RichTextProcessor.wrapDraftText(value);\n    }\n\n    if(silent) {\n      this.setValueSilently(value, false); \n    } else {\n      this.value = value;\n    }\n  }\n\n  public setState(state: InputState, label?: LangPackKey) {\n    if(label) {\n      this.label.textContent = '';\n      this.label.append(i18n(label, this.options.labelOptions));\n    }\n\n    this.input.classList.toggle('error', !!(state & InputState.Error));\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\n  }\n\n  public setError(label?: LangPackKey) {\n    this.setState(InputState.Error, label);\n  }\n}\n\nexport default InputField;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport function nextRandomInt(maxValue: number) {\n  return Math.floor(Math.random() * maxValue);\n}\n\nexport function randomLong() {\n  return '' + nextRandomInt(0xFFFFFFFF) + nextRandomInt(0xFFFFFF);\n  //return '' + parseInt(nextRandomInt(0xFFFFFFFF).toString(16) + nextRandomInt(0xFFFFFFFF).toString(16), 16);\n}\n","//import {stackBlurImage} from '../lib/StackBlur';\n//import appStateManager from \"../lib/appManagers/appStateManager\";\n/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { blurActiveElement } from \"../helpers/dom\";\nimport appStateManager from \"../lib/appManagers/appStateManager\";\nimport I18n from \"../lib/langPack\";\nimport Page from \"./page\";\n\nlet onFirstMount = () => {\n  //return;\n  appStateManager.pushToState('authState', {_: 'authStateSignedIn'});\n  // ! TOO SLOW\n  /* appStateManager.saveState(); */\n\n  import('../lib/rootScope').then(m => {\n    m.default.broadcast('im_mount');\n  });\n\n  if(!I18n.requestedServerLanguage) {\n    I18n.getCacheLangPack().then(langPack => {\n      if(langPack.local) {\n        I18n.getLangPack(langPack.lang_code);\n      }\n    });\n  }\n\n  blurActiveElement();\n  return new Promise<void>((resolve) => {\n    window.requestAnimationFrame(() => {\n      const promise = import('../lib/appManagers/appDialogsManager');\n      promise.finally(async() => {\n        //alert('pageIm!');\n        resolve();\n    \n        //AudioContext && global.navigator && global.navigator.mediaDevices && global.navigator.mediaDevices.getUserMedia && global.WebAssembly;\n    \n        /* // @ts-ignore\n        var AudioContext = globalThis.AudioContext || globalThis.webkitAudioContext;\n        alert('AudioContext:' + typeof(AudioContext));\n        // @ts-ignore\n        alert('global.navigator:' + typeof(navigator));\n        alert('navigator.mediaDevices:' + typeof(navigator.mediaDevices));\n        alert('navigator.mediaDevices.getUserMedia:' + typeof(navigator.mediaDevices?.getUserMedia));\n        alert('global.WebAssembly:' + typeof(WebAssembly)); */\n    \n        //(Array.from(document.getElementsByClassName('rp')) as HTMLElement[]).forEach(el => ripple(el));\n      });\n    });\n  });\n\n  //let promise = /* Promise.resolve() */.then(() => {//import('../lib/services').then(services => {\n    /* fetch('assets/img/camomile.jpg')\n    .then(res => res.blob())\n    .then(blob => {\n      let img = new Image();\n      let url = URL.createObjectURL(blob);\n      img.src = url;\n      img.onload = () => {\n        let id = 'chat-background-canvas';\n        var canvas  = document.getElementById(id) as HTMLCanvasElement;\n        //URL.revokeObjectURL(url);\n  \n        let elements = ['.chat-container'].map(selector => {\n          return document.querySelector(selector) as HTMLDivElement;\n        });\n  \n        stackBlurImage(img, id, 15, 0);\n  \n        canvas.toBlob(blob => {\n          //let dataUrl = canvas.toDataURL('image/jpeg', 1);\n          let dataUrl = URL.createObjectURL(blob);\n  \n          elements.forEach(el => {\n            el.style.backgroundImage = 'url(' + dataUrl + ')';\n          });\n        }, 'image/jpeg', 1);\n      };\n    }); */\n  //});\n};\n\nconst page = new Page('page-chats', false, onFirstMount);\nexport default page;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { AccountPassword, AccountPasswordInputSettings, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\nimport type CryptoWorkerMethods from '../crypto/crypto_methods';\nimport { MOUNT_CLASS_TO } from '../../config/debug';\nimport appUsersManager from '../appManagers/appUsersManager';\nimport apiManager from './mtprotoworker';\n//import { computeCheck } from \"../crypto/srp\";\n\nexport class PasswordManager {\n  public getState(): Promise<AccountPassword> {\n    return apiManager.invokeApi('account.getPassword').then((result) => {\n      return result;\n    });\n  }\n\n  public updateSettings(settings: {\n    hint?: string,\n    email?: string,\n    newPassword?: string,\n    currentPassword?: string\n  } = {}) {\n    //state = Object.assign({}, state);\n    //state.new_algo = Object.assign({}, state.new_algo);\n\n    return this.getState().then(state => {\n      let currentHashPromise: ReturnType<CryptoWorkerMethods['computeSRP']>;\n      let newHashPromise: Promise<Uint8Array>;\n      const params: AccountUpdatePasswordSettings = {\n        password: null,\n        new_settings: {\n          _: 'account.passwordInputSettings',\n          hint: settings.hint,\n          email: settings.email\n        }\n      };\n  \n      if(settings.currentPassword) {\n        currentHashPromise = apiManager.computeSRP(settings.currentPassword, state);\n      } else {\n        currentHashPromise = Promise.resolve({\n          _: 'inputCheckPasswordEmpty'\n        });\n      }\n  \n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\n      salt1.randomize();\n      salt1.set(newAlgo.salt1, 0);\n      newAlgo.salt1 = salt1;\n  \n      if(settings.newPassword) {\n        newHashPromise = apiManager.computeSRP(settings.newPassword, state, true) as any;\n      } else {\n        newHashPromise = Promise.resolve(new Uint8Array());\n      }\n  \n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\n        params.password = hashes[0];\n        params.new_settings.new_algo = newAlgo;\n        params.new_settings.new_password_hash = hashes[1];\n  \n        return apiManager.invokeApi('account.updatePasswordSettings', params);\n      });\n    });\n  }\n\n  public check(password: string, state: AccountPassword, options: any = {}) {\n    return apiManager.computeSRP(password, state).then((inputCheckPassword) => {\n      //console.log('SRP', inputCheckPassword);\n      return apiManager.invokeApi('auth.checkPassword', {\n        password: inputCheckPassword\n      }, options).then(auth => {\n        if(auth._ === 'auth.authorization') {\n          appUsersManager.saveApiUser(auth.user);\n          apiManager.setUserAuth(auth.user.id);\n        }\n\n        return auth;\n      });\n    });\n  }\n\n  public confirmPasswordEmail(code: string) {\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\n  }\n\n  public resendPasswordEmail() {\n    return apiManager.invokeApi('account.resendPasswordEmail');\n  }\n\n  public cancelPasswordEmail() {\n    return apiManager.invokeApi('account.cancelPasswordEmail');\n  }\n\n  /* public requestRecovery(options: any = {}) {\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\n  }\n\n  public recover(code: any, options: any = {}) {\n    return apiManager.invokeApi('auth.recoverPassword', {\n      code\n    }, options);\n  } */\n}\n\nconst passwordManager = new PasswordManager();\nMOUNT_CLASS_TO.passwordManager = passwordManager;\nexport default passwordManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { LangPackKey, i18n } from \"../lib/langPack\";\n\nexport default class LoginPage {\n  public element: HTMLElement;\n  public container: HTMLElement;\n  public imageDiv: HTMLElement;\n  public inputWrapper: HTMLElement;\n  public title: HTMLElement;\n  public subtitle: HTMLParagraphElement;\n\n  constructor(options: {\n    className: string,\n    withInputWrapper?: boolean,\n    titleLangKey?: LangPackKey,\n    subtitleLangKey?: LangPackKey,\n  }) {\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\n    //this.element = document.createElement('div');\n    //this.element.className = 'page-' + options.className;\n\n    this.container = document.createElement('div');\n    this.container.className = 'container center-align';\n\n    this.imageDiv = document.createElement('div');\n    this.imageDiv.className = 'auth-image';\n\n    this.title = document.createElement('h4');\n    if(options.titleLangKey) {\n      this.title.append(i18n(options.titleLangKey));\n    }\n\n    this.subtitle = document.createElement('p');\n    this.subtitle.className = 'subtitle';\n    if(options.subtitleLangKey) {\n      this.subtitle.append(i18n(options.subtitleLangKey));\n    }\n    \n    this.container.append(this.imageDiv, this.title, this.subtitle);\n\n    if(options.withInputWrapper) {\n      this.inputWrapper = document.createElement('div');\n      this.inputWrapper.className = 'input-wrapper';\n      this.container.append(this.inputWrapper);\n    }\n\n    this.element.append(this.container);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { cancelEvent } from \"../helpers/dom\";\nimport InputField, { InputFieldOptions } from \"./inputField\";\n\nexport default class PasswordInputField extends InputField {\n  public passwordVisible = false;\n  public toggleVisible: HTMLElement;\n  public onVisibilityClickAdditional: () => void;\n\n  constructor(options: InputFieldOptions = {}) {\n    super({\n      plainText: true,\n      ...options\n    });\n\n    const input = this.input as HTMLInputElement;\n    input.type = 'password';\n    input.setAttribute('required', '');\n    input.autocomplete = 'off';\n    /* input.readOnly = true;\n\n    input.addEventListener('focus', () => {\n      input.removeAttribute('readonly');\n    }, {once: true}); */\n\n    // * https://stackoverflow.com/a/35949954/6758968\n    const stealthy = document.createElement('input');\n    stealthy.classList.add('stealthy');\n    stealthy.tabIndex = -1;\n    stealthy.type = 'password';\n    input.parentElement.prepend(stealthy);\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\n\n    const toggleVisible = this.toggleVisible = document.createElement('span');\n    toggleVisible.classList.add('toggle-visible', 'tgico');\n\n    this.container.classList.add('input-field-password');\n    this.container.append(toggleVisible);\n\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\n  }\n\n  public onVisibilityClick = (e: Event) => {\n    cancelEvent(e);\n    this.passwordVisible = !this.passwordVisible;\n\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { blobConstruct } from \"../helpers/blob\";\n\nexport class FileManager {\n  public blobSupported = true;\n  \n  constructor() {\n    try {\n      blobConstruct([], '');\n    } catch(e) {\n      this.blobSupported = false;\n    }\n  }\n  \n  public isAvailable() {\n    return this.blobSupported;\n  }\n  \n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\n    if(bytes instanceof Blob) { // is file bytes\n      return new Promise((resolve, reject) => {\n        let fileReader = new FileReader();\n        fileReader.onload = function(event) {\n          let arrayBuffer = event.target.result as ArrayBuffer;\n          \n          let arr = new Uint8Array(arrayBuffer);\n          \n          fileWriter.write(arr).then(resolve, reject);\n        };\n        \n        fileReader.readAsArrayBuffer(bytes);\n      });\n    } else {\n      return fileWriter.write(bytes);\n    }\n  }\n\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\n    const blobParts: Array<Uint8Array | string> = [];\n    const fakeFileWriter = {\n      write: async(part: Uint8Array | string) => {\n        if(!this.blobSupported) {\n          throw false;\n        }\n        \n        blobParts.push(part);\n      },\n      truncate: () => {\n        blobParts.length = 0;\n      },\n      finalize: (saveToStorage = true) => {\n        const blob = blobConstruct(blobParts, mimeType);\n\n        if(saveToStorage && saveFileCallback) {\n          saveFileCallback(blob);\n        }\n        \n        return blob;\n      }\n    };\n    \n    return fakeFileWriter;\n  }\n}\n\nexport default new FileManager();\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport Modes from '../config/modes';\nimport { blobConstruct } from '../helpers/blob';\nimport FileManager from './filemanager';\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\n//import { logger } from './polyfill';\n\nexport default class CacheStorageController {\n  private static STORAGES: CacheStorageController[] = [];\n  //public dbName = 'cachedFiles';\n  private openDbPromise: Promise<Cache>;\n\n  private useStorage = true;\n\n  //private log: ReturnType<typeof logger> = logger('CS');\n\n  constructor(private dbName: string) {\n    if(Modes.test) {\n      this.dbName += '_test';\n    }\n    \n    this.openDatabase();\n    CacheStorageController.STORAGES.push(this);\n  }\n\n  private openDatabase(): Promise<Cache> {\n    if(this.openDbPromise) {\n      return this.openDbPromise;\n    }\n\n    return this.openDbPromise = caches.open(this.dbName);\n  }\n\n  public delete(entryName: string) {\n    return this.timeoutOperation((cache) => {\n      return cache.delete('/' + entryName);\n    });\n  }\n\n  public deleteAll() {\n    return caches.delete(this.dbName);\n  }\n\n  public save(entryName: string, response: Response) {\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\n\n    return this.timeoutOperation((cache) => {\n      return cache.put('/' + entryName, response);\n    });\n  }\n\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\n\n    //return Promise.resolve(blobConstruct([blob]));\n    if(!(blob instanceof Blob)) {\n      blob = blobConstruct(blob) as Blob;\n    }\n\n    return this.save(fileName, new Response(blob)).then(() => {\n      return blob as Blob;\n    });\n  }\n\n  /* public getBlobSize(blob: any) {\n    return blob.size || blob.byteLength || blob.length;\n  } */\n\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\n    if(!this.useStorage) return Promise.reject('STORAGE_OFFLINE');\n\n    /* if(method === 'blob') {\n      return Promise.reject();\n    } */\n\n    // const str = `get fileName: ${fileName}`;\n    // console.time(str);\n    return this.timeoutOperation(async(cache) => {\n      const response = await cache.match('/' + fileName);\n\n      if(!response || !cache) {\n        //console.warn('getFile:', response, fileName);\n        throw 'NO_ENTRY_FOUND';\n      }\n   \n      const promise = response[method]();\n      // promise.then(() => {\n      //   console.timeEnd(str);\n      // });\n      return promise;\n    });\n  }\n\n  private timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\n    return new Promise<T>(async(resolve, reject) => {\n      let rejected = false;\n      const timeout = setTimeout(() => {\n        reject();\n        //console.warn('CACHESTORAGE TIMEOUT');\n        rejected = true;\n      }, 15e3);\n\n      try {\n        const cache = await this.openDatabase();\n        if(!cache) {\n          throw 'no cache?';\n        }\n\n        const res = await callback(cache);\n\n        if(rejected) return;\n        resolve(res);\n      } catch(err) {\n        reject(err);\n      }\n\n      clearTimeout(timeout);\n    });\n  }\n\n  public getFileWriter(fileName: string, mimeType: string) {\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\n      return this.saveFile(fileName, blob);\n    });\n\n    return Promise.resolve(fakeWriter);\n  }\n\n  public static toggleStorage(enabled: boolean) {\n    return Promise.all(this.STORAGES.map(storage => {\n      storage.useStorage = enabled;\n      \n      if(!enabled) {\n        return storage.deleteAll();\n      }\n    }));\n  }\n}\n\n//const cacheStorage = new CacheStorageController(); \n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\n//export default cacheStorage;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\nimport PasswordInputField from \"../passwordInputField\";\n\nexport default class PasswordMonkey {\n  public container: HTMLElement;\n  public animation: RLottiePlayer;\n  public needFrame = 0;\n  protected loadPromise: Promise<void>;\n\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\n    this.container = document.createElement('div');\n    this.container.classList.add('media-sticker-wrapper');\n  }\n\n  public load() {\n    if(this.loadPromise) return this.loadPromise;\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\n      container: this.container,\n      loop: false,\n      autoplay: false,\n      width: this.size,\n      height: this.size,\n      noCache: true\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\n      //return;\n      this.animation = _animation;\n      this.animation.addEventListener('enterFrame', currentFrame => {\n        //console.log('enterFrame', currentFrame, this.needFrame);\n\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\n            this.animation.setSpeed(1);\n            this.animation.pause();\n        } \n      });\n\n      this.passwordInputField.onVisibilityClickAdditional = () => {\n        if(this.passwordInputField.passwordVisible) {\n          this.animation.setDirection(1);\n          this.animation.curFrame = 0;\n          this.needFrame = 16;\n          this.animation.play();\n        } else {\n          this.animation.setDirection(-1);\n          this.animation.curFrame = 16;\n          this.needFrame = 0;\n          this.animation.play();\n        }\n      };\n\n      return lottieLoader.waitForFirstFrame(_animation);\n    });\n  }\n\n  public remove() {\n    if(this.animation) {\n      this.animation.remove();\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { putPreloader } from '../components/misc';\nimport mediaSizes from '../helpers/mediaSizes';\nimport { AccountPassword } from '../layer';\nimport appStateManager from '../lib/appManagers/appStateManager';\nimport passwordManager from '../lib/mtproto/passwordManager';\nimport Page from './page';\nimport pageIm from './pageIm';\nimport Button from '../components/button';\nimport PasswordInputField from '../components/passwordInputField';\nimport PasswordMonkey from '../components/monkeys/password';\nimport RichTextProcessor from '../lib/richtextprocessor';\nimport I18n from '../lib/langPack';\nimport LoginPage from './loginPage';\nimport { attachClickEvent, cancelEvent, htmlToSpan, replaceContent, toggleDisability } from '../helpers/dom';\n\nconst TEST = false;\nlet passwordInput: HTMLInputElement;\n\nlet onFirstMount = (): Promise<any> => {\n  const page = new LoginPage({\n    className: 'page-password',\n    withInputWrapper: true,\n    titleLangKey: 'Login.Password.Title',\n    subtitleLangKey: 'Login.Password.Subtitle'\n  });\n\n  const btnNext = Button('btn-primary btn-color-primary');\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\n\n  btnNext.append(btnNextI18n.element);\n\n  const passwordInputField = new PasswordInputField({\n    label: 'LoginPassword',\n    name: 'password'\n  });\n\n  passwordInput = passwordInputField.input as HTMLInputElement;\n\n  page.inputWrapper.append(passwordInputField.container, btnNext);\n\n  let getStateInterval: number;\n\n  let getState = () => {\n    // * just to check session relevance\n    if(!getStateInterval) {\n      getStateInterval = window.setInterval(getState, 10e3);\n    }\n\n    return !TEST && passwordManager.getState().then(_state => {\n      state = _state;\n\n      if(state.hint) {\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\n      } else {\n        passwordInputField.setLabel();\n      }\n    });\n  };\n\n  let state: AccountPassword;\n  \n  const onSubmit = (e?: Event) => {\n    if(e) {\n      cancelEvent(e);\n    }\n\n    if(!passwordInput.value.length) {\n      passwordInput.classList.add('error');\n      return;\n    }\n\n    const toggle = toggleDisability([passwordInput, btnNext], true);\n    let value = passwordInput.value;\n\n    btnNextI18n.update({key: 'PleaseWait'});\n    const preloader = putPreloader(btnNext);\n\n    passwordManager.check(value, state).then((response) => {\n      //console.log('passwordManager response:', response);\n        \n      switch(response._) {\n        case 'auth.authorization':\n          clearInterval(getStateInterval);\n          pageIm.mount();\n          if(monkey) monkey.remove();\n          break;\n        default:\n          btnNext.removeAttribute('disabled');\n          btnNextI18n.update({key: response._ as any});\n          preloader.remove();\n          break;\n      }\n    }).catch((err: any) => {\n      toggle();\n      passwordInputField.input.classList.add('error');\n      \n      switch(err.type) {\n        default:\n          //btnNext.innerText = err.type;\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\n          passwordInput.select();\n          break;\n      }\n\n      preloader.remove();\n  \n      getState();\n    });\n  };\n  \n  attachClickEvent(btnNext, onSubmit);\n\n  passwordInput.addEventListener('keypress', function(this, e) {\n    this.classList.remove('error');\n    btnNextI18n.update({key: 'Login.Next'});\n\n    if(e.key === 'Enter') {\n      return onSubmit();\n    }\n  });\n\n  const size = mediaSizes.isMobile ? 100 : 166;\n  const monkey = new PasswordMonkey(passwordInputField, size);\n  page.imageDiv.append(monkey.container);\n  return Promise.all([\n    monkey.load(),\n    getState()\n  ]);\n};\n\nconst page = new Page('page-password', true, onFirstMount, null, () => {\n  //if(!isAppleMobile) {\n    passwordInput.focus();\n  //}\n\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\n});\n\nexport default page;\n"],"sourceRoot":""}