{"version":3,"sources":["webpack:///./src/components/button.ts","webpack:///./src/components/inputField.ts","webpack:///./src/components/ripple.ts","webpack:///./src/pages/pageIm.ts","webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/components/monkeys/password.ts","webpack:///./src/pages/pagePassword.ts"],"names":["className","options","button","document","createElement","icon","noRipple","rippleSquare","classList","add","onlyMobile","disabled","text","append","init","addEventListener","e","target","hasAttribute","parentElement","preventDefault","originalEvent","clipboardData","getData","entities","parseEntities","filter","_","wrapRichText","noLinks","wrappingDraft","window","execCommand","checkAndSetRTL","input","char","HTMLInputElement","value","innerText","direction","style","InputState","this","container","maxLength","showLengthOn","Math","round","placeholder","name","plainText","processInput","label","labelText","innerHTML","firstElementChild","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","wasInputFakeClientHeight","showScrollDebounced","remove","setAttribute","undefined","border","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","length","diff","isError","toggle","select","textContent","labelOptions","scrollHeight","clientHeight","height","setValueSilently","event","Event","bubbles","cancelable","dispatchEvent","fireFakeInput","originalValue","silent","wrapDraftText","state","Error","Valid","setState","rippleClickId","ripple","elem","callback","Promise","resolve","onEnd","prepend","querySelector","r","handler","drawRipple","clientX","clientY","startTime","Date","now","clickId","duration","getComputedStyle","getPropertyValue","replace","elapsedTime","cb","mutate","delay","max","setTimeout","removeEventListener","touchStartFired","requestAnimationFrame","rect","getBoundingClientRect","clickX","left","clickY","top","size","sqrt","abs","width","x","y","touchEnd","settings","animationsEnabled","touches","includes","tagName","once","cancelBubble","stopPropagation","passive","dataset","page","pushToState","then","m","default","broadcast","requestedServerLanguage","getCacheLangPack","langPack","local","getLangPack","lang_code","finally","passwordManager","invokeApi","result","getState","currentHashPromise","newHashPromise","params","password","new_settings","hint","email","currentPassword","computeSRP","newAlgo","new_algo","salt1","Uint8Array","randomize","set","newPassword","all","hashes","new_password_hash","inputCheckPassword","auth","saveApiUser","user","setUserAuth","id","code","LoginPage","element","body","imageDiv","title","titleLangKey","subtitle","subtitleLangKey","withInputWrapper","inputWrapper","PasswordInputField","super","passwordVisible","onVisibilityClick","toggleVisible","type","onVisibilityClickAdditional","autocomplete","stealthy","tabIndex","insertBefore","cloneNode","nextSibling","PasswordMonkey","passwordInputField","needFrame","loadPromise","loadAnimationFromURL","loop","autoplay","noCache","_animation","animation","currentFrame","setSpeed","pause","setDirection","curFrame","play","waitForFirstFrame","passwordInput","btnNext","btnNextI18n","IntlElement","key","getStateInterval","setInterval","_state","wrapEmojiText","onSubmit","update","preloader","check","response","clearInterval","mount","monkey","removeAttribute","catch","err","isMobile","load","focus","saveState"],"mappings":"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","file":"11.1ee9dce9f966036798a7.chunk.js","sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { i18n, LangPackKey } from \"../lib/langPack\";\nimport { ripple } from \"./ripple\";\n\nconst Button = (className: string, options: Partial<{noRipple: true, onlyMobile: true, icon: string, rippleSquare: true, text: LangPackKey, disabled: boolean}> = {}) => {\n  const button = document.createElement('button');\n  button.className = className + (options.icon ? ' tgico-' + options.icon : '');\n\n  if(!options.noRipple) {\n    if(options.rippleSquare) {\n      button.classList.add('rp-square');\n    }\n\n    ripple(button);\n  }\n\n  if(options.onlyMobile) {\n    button.classList.add('only-handhelds');\n  }\n\n  if(options.disabled) {\n    button.disabled = true;\n  }\n\n  if(options.text) {\n    button.append(i18n(options.text));\n  }\n\n  return button;\n};\n\nexport default Button;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { getRichValue, isInputEmpty } from \"../helpers/dom\";\nimport { debounce } from \"../helpers/schedulers\";\nimport { checkRTL } from \"../helpers/string\";\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\nimport RichTextProcessor from \"../lib/richtextprocessor\";\n\nlet init = () => {\n  document.addEventListener('paste', (e) => {\n    if(!(e.target as HTMLElement).hasAttribute('contenteditable') && !(e.target as HTMLElement).parentElement.hasAttribute('contenteditable')) {\n      return;\n    }\n    //console.log('document paste');\n\n    //console.log('messageInput paste');\n\n    e.preventDefault();\n    // @ts-ignore\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\n\n    let entities = RichTextProcessor.parseEntities(text);\n    //console.log('messageInput paste', text, entities);\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\n    //text = RichTextProcessor.wrapEmojiText(text);\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\n\n    // console.log('messageInput paste after', text);\n\n    // @ts-ignore\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\n\n    // @ts-ignore\n    //console.log('paste text', text, );\n    window.document.execCommand('insertHTML', false, text);\n  });\n\n  init = null;\n};\n\nconst checkAndSetRTL = (input: HTMLElement) => {\n  //const isEmpty = isInputEmpty(input);\n  //console.log('input', isEmpty);\n\n  //const char = [...getRichValue(input)][0];\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\n  let direction = 'ltr';\n  if(char && checkRTL(char)) {\n    direction = 'rtl';\n  }\n\n  //console.log('RTL', direction, char);\n\n  input.style.direction = direction;\n};\n\nexport enum InputState {\n  Neutral = 0,\n  Valid = 1,\n  Error = 2\n};\n\nexport type InputFieldOptions = {\n  placeholder?: LangPackKey, \n  label?: LangPackKey, \n  labelOptions?: any[],\n  labelText?: string,\n  name?: string, \n  maxLength?: number, \n  showLengthOn?: number,\n  plainText?: true,\n  animate?: true\n};\n\nclass InputField {\n  public container: HTMLElement;\n  public input: HTMLElement;\n  public inputFake: HTMLElement;\n  public label: HTMLLabelElement;\n\n  public originalValue: string;\n\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\n  protected wasInputFakeClientHeight: number;\n  protected showScrollDebounced: () => void;\n\n  constructor(public options: InputFieldOptions = {}) {\n    this.container = document.createElement('div');\n    this.container.classList.add('input-field');\n\n    if(options.maxLength) {\n      options.showLengthOn = Math.round(options.maxLength / 3);\n    }\n\n    const {placeholder, maxLength, showLengthOn, name, plainText} = options;\n\n    let label = options.label || options.labelText;\n\n    let input: HTMLElement;\n    if(!plainText) {\n      if(init) {\n        init();\n      }\n\n      this.container.innerHTML = `\n      <div contenteditable=\"true\" class=\"input-field-input\"></div>\n      `;\n\n      input = this.container.firstElementChild as HTMLElement;\n      const observer = new MutationObserver(() => {\n        checkAndSetRTL(input);\n\n        if(processInput) {\n          processInput();\n        }\n      });\n\n      // * because if delete all characters there will br left\n      input.addEventListener('input', () => {\n        if(isInputEmpty(input)) {\n          input.innerHTML = '';\n        }\n\n        if(this.inputFake) {\n          this.inputFake.innerHTML = input.innerHTML;\n          this.onFakeInput();\n        }\n      });\n      \n      // ! childList for paste first symbol\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\n\n      if(options.animate) {\n        input.classList.add('scrollable', 'scrollable-y');\n        this.wasInputFakeClientHeight = 0;\n        this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\n        this.inputFake = document.createElement('div');\n        this.inputFake.setAttribute('contenteditable', 'true');\n        this.inputFake.className = input.className + ' input-field-input-fake';\n      }\n    } else {\n      this.container.innerHTML = `\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\n      `;\n\n      input = this.container.firstElementChild as HTMLElement;\n      input.addEventListener('input', () => checkAndSetRTL(input));\n    }\n\n    if(placeholder) {\n      _i18n(input, placeholder, undefined, 'placeholder');\n\n      if(this.inputFake) {\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\n      }\n    }\n\n    if(label || placeholder) {\n      const border = document.createElement('div');\n      border.classList.add('input-field-border');\n      this.container.append(border);\n    }\n\n    if(label) {\n      this.label = document.createElement('label');\n      this.setLabel();\n      this.container.append(this.label);\n    }\n\n    let processInput: () => void;\n    if(maxLength) {\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\n      let showingLength = false;\n\n      processInput = () => {\n        const wasError = input.classList.contains('error');\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input)].length;\n        const diff = maxLength - inputLength;\n        const isError = diff < 0;\n        input.classList.toggle('error', isError);\n\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\n\n        if(isError || diff <= showLengthOn) {\n          this.setLabel();\n          labelEl.append(` (${maxLength - inputLength})`);\n          if(!showingLength) showingLength = true;\n        } else if((wasError && !isError) || showingLength) {\n          this.setLabel();\n          showingLength = false;\n        }\n      };\n\n      input.addEventListener('input', processInput);\n    }\n\n    this.input = input;\n  }\n\n  public select() {\n    if((this.input as HTMLInputElement).value) { // * avoid selecting whole empty field on iOS devices\n      (this.input as HTMLInputElement).select(); // * select text\n    }\n  }\n\n  public setLabel() {\n    this.label.textContent = '';\n    if(this.options.labelText) {\n      this.label.innerHTML = this.options.labelText;\n    } else {\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\n    }\n  }\n\n  public onFakeInput() {\n    const {scrollHeight, clientHeight} = this.inputFake;\n    if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\n      this.showScrollDebounced();\n    }\n\n    this.wasInputFakeClientHeight = clientHeight;\n    this.input.style.height = scrollHeight ? scrollHeight + 'px' : '';\n  }\n\n  get value() {\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input);\n    //return getRichValue(this.input);\n  }\n\n  set value(value: string) {\n    this.setValueSilently(value, false);\n\n    const event = new Event('input', {bubbles: true, cancelable: true});\n    this.input.dispatchEvent(event);\n  }\n\n  public setValueSilently(value: string, fireFakeInput = true) {\n    if(this.options.plainText) {\n      (this.input as HTMLInputElement).value = value;\n    } else {\n      this.input.innerHTML = value;\n      \n      if(this.inputFake) {\n        this.inputFake.innerHTML = value;\n\n        if(fireFakeInput) {\n          this.onFakeInput();\n        }\n      }\n    }\n  }\n\n  public isValid() {\n    return !this.input.classList.contains('error') && this.value !== this.originalValue;\n  }\n\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\n    this.originalValue = value;\n\n    if(!this.options.plainText) {\n      value = RichTextProcessor.wrapDraftText(value);\n    }\n\n    if(silent) {\n      this.setValueSilently(value, false); \n    } else {\n      this.value = value;\n    }\n  }\n\n  public setState(state: InputState, label?: LangPackKey) {\n    if(label) {\n      this.label.textContent = '';\n      this.label.append(i18n(label, this.options.labelOptions));\n    }\n\n    this.input.classList.toggle('error', !!(state & InputState.Error));\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\n  }\n\n  public setError(label?: LangPackKey) {\n    this.setState(InputState.Error, label);\n  }\n}\n\nexport default InputField;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport findUpClassName from \"../helpers/dom/findUpClassName\";\nimport sequentialDom from \"../helpers/sequentialDom\";\nimport {isTouchSupported} from \"../helpers/touchSupport\";\nimport rootScope from \"../lib/rootScope\";\n\nlet rippleClickId = 0;\nexport function ripple(elem: HTMLElement, callback: (id: number) => Promise<boolean | void> = () => Promise.resolve(), onEnd: (id: number) => void = null, prepend = false) {\n  //return;\n  if(elem.querySelector('.c-ripple')) return;\n  elem.classList.add('rp');\n  \n  let r = document.createElement('div');\n  r.classList.add('c-ripple');\n\n  const isSquare = elem.classList.contains('rp-square');\n  if(isSquare) {\n    r.classList.add('is-square');\n  }\n\n  elem[prepend ? 'prepend' : 'append'](r);\n\n  let handler: () => void;\n  //let animationEndPromise: Promise<number>;\n  const drawRipple = (clientX: number, clientY: number) => {\n    const startTime = Date.now();\n    const elem = document.createElement('div');\n\n    const clickId = rippleClickId++;\n    \n    //console.log('ripple drawRipple');\n    \n    const duration = +window.getComputedStyle(r).getPropertyValue('--ripple-duration').replace('s', '') * 1000;\n    //console.log('ripple duration', duration);\n\n    handler = () => {\n    //handler = () => animationEndPromise.then((duration) => {\n      //console.log('ripple animation was:', duration);\n\n      //const duration = isSquare || mediaSizes.isMobile ? 200 : 700;\n      //return;\n      let elapsedTime = Date.now() - startTime;\n      const cb = () => {\n        //console.log('ripple elapsedTime total pre-remove:', Date.now() - startTime);\n        sequentialDom.mutate(() => {\n          elem.remove();\n        });\n        \n        if(onEnd) onEnd(clickId);\n      };\n      if(elapsedTime < duration) {\n        let delay = Math.max(duration - elapsedTime, duration / 2);\n        setTimeout(() => elem.classList.add('hiding'), Math.max(delay - duration / 2, 0));\n\n        setTimeout(cb, delay);\n      } else {\n        elem.classList.add('hiding');\n        setTimeout(cb, duration / 2);\n      }\n\n      if(!isTouchSupported) {\n        window.removeEventListener('contextmenu', handler);\n      }\n\n      handler = null;\n      touchStartFired = false;\n    };\n    //});\n\n    callback && callback(clickId);\n\n    /* callback().then((bad) => {\n      if(bad) {\n        span.remove();\n        return;\n      } */\n      \n      //console.log('ripple after promise', Date.now() - startTime);\n      //console.log('ripple tooSlow:', tooSlow);\n      /* if(tooSlow) {\n        span.remove();\n        return;\n      } */\n\n      window.requestAnimationFrame(() => {\n        const rect = r.getBoundingClientRect();\n        elem.classList.add('c-ripple__circle');\n\n        const clickX = clientX - rect.left;\n        const clickY = clientY - rect.top;\n\n        const radius = Math.sqrt((Math.abs(clickY - rect.height / 2) + rect.height / 2) ** 2 + (Math.abs(clickX - rect.width / 2) + rect.width / 2) ** 2);\n        const size = radius;\n\n        // center of circle\n        const x = clickX - size / 2;\n        const y = clickY - size / 2;\n\n        //console.log('ripple click', offsetFromCenter, size, clickX, clickY);\n\n        elem.style.width = elem.style.height = size + 'px';\n        elem.style.left = x + 'px';\n        elem.style.top = y + 'px';\n\n        // нижний код выполняется с задержкой\n        /* animationEndPromise = new Promise((resolve) => {\n          span.addEventListener('animationend', () => {\n            // 713 -> 700\n            resolve(((Date.now() - startTime) / 100 | 0) * 100);\n          }, {once: true});\n        }); */\n        \n        // нижний код не всегда включает анимацию ПРИ КЛИКЕ НА ТАЧПАД БЕЗ ТАПТИК ЭНЖИНА\n        /* span.style.display = 'none';\n        r.append(span);\n        duration = +window.getComputedStyle(span).getPropertyValue('animation-duration').replace('s', '') * 1000;\n        span.style.display = ''; */\n\n        r.append(elem);\n\n        //r.classList.add('active');\n        //handler();\n      });\n    //});\n  };\n\n  // TODO: rename this variable\n  let touchStartFired = false;\n  if(isTouchSupported) {\n    let touchEnd = () => {\n      handler && handler();\n    };\n  \n    elem.addEventListener('touchstart', (e) => {\n      if(!rootScope.settings.animationsEnabled) {\n        return;\n      }\n\n      //console.log('ripple touchstart', e);\n      if(e.touches.length > 1 \n        || touchStartFired \n        || (['BUTTON', 'A'].includes((e.target as HTMLElement).tagName) && e.target !== elem) \n        || findUpClassName(e.target as HTMLElement, 'c-ripple') !== r) {\n        return;\n      }\n      \n      //console.log('touchstart', e);\n      touchStartFired = true;\n  \n      let {clientX, clientY} = e.touches[0];\n      drawRipple(clientX, clientY);\n      elem.addEventListener('touchend', touchEnd, {once: true});\n  \n      window.addEventListener('touchmove', (e) => {\n        e.cancelBubble = true;\n        e.stopPropagation();\n        touchEnd();\n        elem.removeEventListener('touchend', touchEnd);\n      }, {once: true});\n    }, {passive: true});\n  } else {\n    elem.addEventListener('mousedown', (e) => {\n      if(![0, 2].includes(e.button)) { // only left and right buttons\n        return;\n      }\n\n      if(!rootScope.settings.animationsEnabled) {\n        return;\n      }\n      //console.log('ripple mousedown', e, e.target, findUpClassName(e.target as HTMLElement, 'c-ripple') === r);\n\n      if(elem.dataset.ripple === '0' || findUpClassName(e.target as HTMLElement, 'c-ripple') !== r || (e.target as HTMLElement).tagName === 'A') {\n        return false;\n      } else if(touchStartFired) {\n        touchStartFired = false;\n        return false;\n      }\n  \n      let {clientX, clientY} = e;\n      drawRipple(clientX, clientY);\n      window.addEventListener('mouseup', handler, {once: true});\n      window.addEventListener('contextmenu', handler, {once: true});\n    });\n  }\n}\n","//import {stackBlurImage} from '../lib/StackBlur';\n//import appStateManager from \"../lib/appManagers/appStateManager\";\n/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { blurActiveElement } from \"../helpers/dom\";\nimport appStateManager from \"../lib/appManagers/appStateManager\";\nimport I18n from \"../lib/langPack\";\nimport Page from \"./page\";\n\nlet onFirstMount = () => {\n  //return;\n  appStateManager.pushToState('authState', {_: 'authStateSignedIn'});\n  // ! TOO SLOW\n  /* appStateManager.saveState(); */\n\n  import('../lib/rootScope').then(m => {\n    m.default.broadcast('im_mount');\n  });\n\n  if(!I18n.requestedServerLanguage) {\n    I18n.getCacheLangPack().then(langPack => {\n      if(langPack.local) {\n        I18n.getLangPack(langPack.lang_code);\n      }\n    });\n  }\n\n  blurActiveElement();\n  return new Promise<void>((resolve) => {\n    window.requestAnimationFrame(() => {\n      const promise = import('../lib/appManagers/appDialogsManager');\n      promise.finally(async() => {\n        //alert('pageIm!');\n        resolve();\n    \n        //AudioContext && global.navigator && global.navigator.mediaDevices && global.navigator.mediaDevices.getUserMedia && global.WebAssembly;\n    \n        /* // @ts-ignore\n        var AudioContext = globalThis.AudioContext || globalThis.webkitAudioContext;\n        alert('AudioContext:' + typeof(AudioContext));\n        // @ts-ignore\n        alert('global.navigator:' + typeof(navigator));\n        alert('navigator.mediaDevices:' + typeof(navigator.mediaDevices));\n        alert('navigator.mediaDevices.getUserMedia:' + typeof(navigator.mediaDevices?.getUserMedia));\n        alert('global.WebAssembly:' + typeof(WebAssembly)); */\n    \n        //(Array.from(document.getElementsByClassName('rp')) as HTMLElement[]).forEach(el => ripple(el));\n      });\n    });\n  });\n\n  //let promise = /* Promise.resolve() */.then(() => {//import('../lib/services').then(services => {\n    /* fetch('assets/img/camomile.jpg')\n    .then(res => res.blob())\n    .then(blob => {\n      let img = new Image();\n      let url = URL.createObjectURL(blob);\n      img.src = url;\n      img.onload = () => {\n        let id = 'chat-background-canvas';\n        var canvas  = document.getElementById(id) as HTMLCanvasElement;\n        //URL.revokeObjectURL(url);\n  \n        let elements = ['.chat-container'].map(selector => {\n          return document.querySelector(selector) as HTMLDivElement;\n        });\n  \n        stackBlurImage(img, id, 15, 0);\n  \n        canvas.toBlob(blob => {\n          //let dataUrl = canvas.toDataURL('image/jpeg', 1);\n          let dataUrl = URL.createObjectURL(blob);\n  \n          elements.forEach(el => {\n            el.style.backgroundImage = 'url(' + dataUrl + ')';\n          });\n        }, 'image/jpeg', 1);\n      };\n    }); */\n  //});\n};\n\nconst page = new Page('page-chats', false, onFirstMount);\nexport default page;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { AccountPassword, AccountPasswordInputSettings, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\nimport type CryptoWorkerMethods from '../crypto/crypto_methods';\nimport { MOUNT_CLASS_TO } from '../../config/debug';\nimport appUsersManager from '../appManagers/appUsersManager';\nimport apiManager from './mtprotoworker';\n//import { computeCheck } from \"../crypto/srp\";\n\nexport class PasswordManager {\n  public getState(): Promise<AccountPassword> {\n    return apiManager.invokeApi('account.getPassword').then((result) => {\n      return result;\n    });\n  }\n\n  public updateSettings(settings: {\n    hint?: string,\n    email?: string,\n    newPassword?: string,\n    currentPassword?: string\n  } = {}) {\n    //state = Object.assign({}, state);\n    //state.new_algo = Object.assign({}, state.new_algo);\n\n    return this.getState().then(state => {\n      let currentHashPromise: ReturnType<CryptoWorkerMethods['computeSRP']>;\n      let newHashPromise: Promise<Uint8Array>;\n      const params: AccountUpdatePasswordSettings = {\n        password: null,\n        new_settings: {\n          _: 'account.passwordInputSettings',\n          hint: settings.hint,\n          email: settings.email\n        }\n      };\n  \n      if(settings.currentPassword) {\n        currentHashPromise = apiManager.computeSRP(settings.currentPassword, state);\n      } else {\n        currentHashPromise = Promise.resolve({\n          _: 'inputCheckPasswordEmpty'\n        });\n      }\n  \n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\n      salt1.randomize();\n      salt1.set(newAlgo.salt1, 0);\n      newAlgo.salt1 = salt1;\n  \n      if(settings.newPassword) {\n        newHashPromise = apiManager.computeSRP(settings.newPassword, state, true) as any;\n      } else {\n        newHashPromise = Promise.resolve(new Uint8Array());\n      }\n  \n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\n        params.password = hashes[0];\n        params.new_settings.new_algo = newAlgo;\n        params.new_settings.new_password_hash = hashes[1];\n  \n        return apiManager.invokeApi('account.updatePasswordSettings', params);\n      });\n    });\n  }\n\n  public check(password: string, state: AccountPassword, options: any = {}) {\n    return apiManager.computeSRP(password, state).then((inputCheckPassword) => {\n      //console.log('SRP', inputCheckPassword);\n      return apiManager.invokeApi('auth.checkPassword', {\n        password: inputCheckPassword\n      }, options).then(auth => {\n        if(auth._ === 'auth.authorization') {\n          appUsersManager.saveApiUser(auth.user);\n          apiManager.setUserAuth(auth.user.id);\n        }\n\n        return auth;\n      });\n    });\n  }\n\n  public confirmPasswordEmail(code: string) {\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\n  }\n\n  public resendPasswordEmail() {\n    return apiManager.invokeApi('account.resendPasswordEmail');\n  }\n\n  public cancelPasswordEmail() {\n    return apiManager.invokeApi('account.cancelPasswordEmail');\n  }\n\n  /* public requestRecovery(options: any = {}) {\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\n  }\n\n  public recover(code: any, options: any = {}) {\n    return apiManager.invokeApi('auth.recoverPassword', {\n      code\n    }, options);\n  } */\n}\n\nconst passwordManager = new PasswordManager();\nMOUNT_CLASS_TO.passwordManager = passwordManager;\nexport default passwordManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { LangPackKey, i18n } from \"../lib/langPack\";\n\nexport default class LoginPage {\n  public element: HTMLElement;\n  public container: HTMLElement;\n  public imageDiv: HTMLElement;\n  public inputWrapper: HTMLElement;\n  public title: HTMLElement;\n  public subtitle: HTMLParagraphElement;\n\n  constructor(options: {\n    className: string,\n    withInputWrapper?: boolean,\n    titleLangKey?: LangPackKey,\n    subtitleLangKey?: LangPackKey,\n  }) {\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\n    //this.element = document.createElement('div');\n    //this.element.className = 'page-' + options.className;\n\n    this.container = document.createElement('div');\n    this.container.className = 'container center-align';\n\n    this.imageDiv = document.createElement('div');\n    this.imageDiv.className = 'auth-image';\n\n    this.title = document.createElement('h4');\n    if(options.titleLangKey) {\n      this.title.append(i18n(options.titleLangKey));\n    }\n\n    this.subtitle = document.createElement('p');\n    this.subtitle.className = 'subtitle';\n    if(options.subtitleLangKey) {\n      this.subtitle.append(i18n(options.subtitleLangKey));\n    }\n    \n    this.container.append(this.imageDiv, this.title, this.subtitle);\n\n    if(options.withInputWrapper) {\n      this.inputWrapper = document.createElement('div');\n      this.inputWrapper.className = 'input-wrapper';\n      this.container.append(this.inputWrapper);\n    }\n\n    this.element.append(this.container);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { cancelEvent } from \"../helpers/dom\";\nimport InputField, { InputFieldOptions } from \"./inputField\";\n\nexport default class PasswordInputField extends InputField {\n  public passwordVisible = false;\n  public toggleVisible: HTMLElement;\n  public onVisibilityClickAdditional: () => void;\n\n  constructor(options: InputFieldOptions = {}) {\n    super({\n      plainText: true,\n      ...options\n    });\n\n    const input = this.input as HTMLInputElement;\n    input.type = 'password';\n    input.setAttribute('required', '');\n    input.autocomplete = 'off';\n    /* input.readOnly = true;\n\n    input.addEventListener('focus', () => {\n      input.removeAttribute('readonly');\n    }, {once: true}); */\n\n    // * https://stackoverflow.com/a/35949954/6758968\n    const stealthy = document.createElement('input');\n    stealthy.classList.add('stealthy');\n    stealthy.tabIndex = -1;\n    stealthy.type = 'password';\n    input.parentElement.prepend(stealthy);\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\n\n    const toggleVisible = this.toggleVisible = document.createElement('span');\n    toggleVisible.classList.add('toggle-visible', 'tgico');\n\n    this.container.classList.add('input-field-password');\n    this.container.append(toggleVisible);\n\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\n  }\n\n  public onVisibilityClick = (e: Event) => {\n    cancelEvent(e);\n    this.passwordVisible = !this.passwordVisible;\n\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport lottieLoader, { RLottiePlayer } from \"../../lib/lottieLoader\";\nimport PasswordInputField from \"../passwordInputField\";\n\nexport default class PasswordMonkey {\n  public container: HTMLElement;\n  public animation: RLottiePlayer;\n  public needFrame = 0;\n  protected loadPromise: Promise<void>;\n\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\n    this.container = document.createElement('div');\n    this.container.classList.add('media-sticker-wrapper');\n  }\n\n  public load() {\n    if(this.loadPromise) return this.loadPromise;\n    return this.loadPromise = lottieLoader.loadAnimationFromURL({\n      container: this.container,\n      loop: false,\n      autoplay: false,\n      width: this.size,\n      height: this.size,\n      noCache: true\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\n    }, 'assets/img/TwoFactorSetupMonkeyPeek.tgs').then(_animation => {\n      //return;\n      this.animation = _animation;\n      this.animation.addEventListener('enterFrame', currentFrame => {\n        //console.log('enterFrame', currentFrame, this.needFrame);\n\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\n            this.animation.setSpeed(1);\n            this.animation.pause();\n        } \n      });\n\n      this.passwordInputField.onVisibilityClickAdditional = () => {\n        if(this.passwordInputField.passwordVisible) {\n          this.animation.setDirection(1);\n          this.animation.curFrame = 0;\n          this.needFrame = 16;\n          this.animation.play();\n        } else {\n          this.animation.setDirection(-1);\n          this.animation.curFrame = 16;\n          this.needFrame = 0;\n          this.animation.play();\n        }\n      };\n\n      return lottieLoader.waitForFirstFrame(_animation);\n    });\n  }\n\n  public remove() {\n    if(this.animation) {\n      this.animation.remove();\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { putPreloader } from '../components/misc';\nimport mediaSizes from '../helpers/mediaSizes';\nimport { AccountPassword } from '../layer';\nimport appStateManager from '../lib/appManagers/appStateManager';\nimport passwordManager from '../lib/mtproto/passwordManager';\nimport Page from './page';\nimport pageIm from './pageIm';\nimport Button from '../components/button';\nimport PasswordInputField from '../components/passwordInputField';\nimport PasswordMonkey from '../components/monkeys/password';\nimport RichTextProcessor from '../lib/richtextprocessor';\nimport I18n from '../lib/langPack';\nimport LoginPage from './loginPage';\nimport { attachClickEvent, cancelEvent, htmlToSpan, replaceContent, toggleDisability } from '../helpers/dom';\n\nconst TEST = false;\nlet passwordInput: HTMLInputElement;\n\nlet onFirstMount = (): Promise<any> => {\n  const page = new LoginPage({\n    className: 'page-password',\n    withInputWrapper: true,\n    titleLangKey: 'Login.Password.Title',\n    subtitleLangKey: 'Login.Password.Subtitle'\n  });\n\n  const btnNext = Button('btn-primary btn-color-primary');\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\n\n  btnNext.append(btnNextI18n.element);\n\n  const passwordInputField = new PasswordInputField({\n    label: 'LoginPassword',\n    name: 'password'\n  });\n\n  passwordInput = passwordInputField.input as HTMLInputElement;\n\n  page.inputWrapper.append(passwordInputField.container, btnNext);\n\n  let getStateInterval: number;\n\n  let getState = () => {\n    // * just to check session relevance\n    if(!getStateInterval) {\n      getStateInterval = window.setInterval(getState, 10e3);\n    }\n\n    return !TEST && passwordManager.getState().then(_state => {\n      state = _state;\n\n      if(state.hint) {\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\n      } else {\n        passwordInputField.setLabel();\n      }\n    });\n  };\n\n  let state: AccountPassword;\n  \n  const onSubmit = (e?: Event) => {\n    if(e) {\n      cancelEvent(e);\n    }\n\n    if(!passwordInput.value.length) {\n      passwordInput.classList.add('error');\n      return;\n    }\n\n    const toggle = toggleDisability([passwordInput, btnNext], true);\n    let value = passwordInput.value;\n\n    btnNextI18n.update({key: 'PleaseWait'});\n    const preloader = putPreloader(btnNext);\n\n    passwordManager.check(value, state).then((response) => {\n      //console.log('passwordManager response:', response);\n        \n      switch(response._) {\n        case 'auth.authorization':\n          clearInterval(getStateInterval);\n          pageIm.mount();\n          if(monkey) monkey.remove();\n          break;\n        default:\n          btnNext.removeAttribute('disabled');\n          btnNextI18n.update({key: response._ as any});\n          preloader.remove();\n          break;\n      }\n    }).catch((err: any) => {\n      toggle();\n      passwordInputField.input.classList.add('error');\n      \n      switch(err.type) {\n        default:\n          //btnNext.innerText = err.type;\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\n          passwordInput.select();\n          break;\n      }\n\n      preloader.remove();\n  \n      getState();\n    });\n  };\n  \n  attachClickEvent(btnNext, onSubmit);\n\n  passwordInput.addEventListener('keypress', function(this, e) {\n    this.classList.remove('error');\n    btnNextI18n.update({key: 'Login.Next'});\n\n    if(e.key === 'Enter') {\n      return onSubmit();\n    }\n  });\n\n  const size = mediaSizes.isMobile ? 100 : 166;\n  const monkey = new PasswordMonkey(passwordInputField, size);\n  page.imageDiv.append(monkey.container);\n  return Promise.all([\n    monkey.load(),\n    getState()\n  ]);\n};\n\nconst page = new Page('page-password', true, onFirstMount, null, () => {\n  //if(!isAppleMobile) {\n    passwordInput.focus();\n  //}\n\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\n  appStateManager.saveState();\n});\n\nexport default page;\n"],"sourceRoot":""}