{"version":3,"sources":["webpack:///./src/config/debug.ts","webpack:///./src/helpers/schedulers.ts","webpack:///./src/helpers/object.ts","webpack:///./src/helpers/cancellablePromise.ts","webpack:///./src/lib/logger.ts","webpack:///./src/helpers/eventListenerBase.ts","webpack:///./src/config/modes.ts","webpack:///./src/lib/sessionStorage.ts","webpack:///./src/helpers/blob.ts","webpack:///./src/config/database.ts","webpack:///./src/lib/idb.ts","webpack:///./src/lib/storage.ts","webpack:///./src/lib/rootScope.ts"],"names":["DEBUG","debug","MOUNT_CLASS_TO","window","self","debounce","fn","ms","shouldRunFirst","shouldRunLast","waitingTimeout","args","clearTimeout","setTimeout","throttle","isPending","interval","_args","setInterval","clearInterval","pause","Promise","resolve","fastRafCallbacks","fastRaf","callback","push","requestAnimationFrame","currentCallbacks","undefined","forEach","cb","doubleRaf","copy","obj","Date","getTime","Array","isArray","map","el","clonedObj","constructor","prop","hasOwnProperty","deepEqual","x","y","ok","Object","keys","tx","length","every","key","defineNotNumerableProperties","names","props","writable","configurable","out","name","defineProperties","getObjectKeysAndSort","object","sort","ids","i","a","b","safeReplaceObject","wasObject","newObject","safeReplaceArrayInObject","v","isObject","getDeepProperty","splitted","split","o","setDeepProperty","value","slice","join","pop","validateInitObject","initObject","currentObject","onReplace","previousKey","safeAssign","fromObject","deferredPromise","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","listeners","addNotifyListener","deferred","reject","finally","cancel","assign","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","now","dT","toFixed","logger","prefix","type","console","log","warn","info","error","trace","setPrefix","_prefix","setLevel","level","reduce","acc","EventListenerBase","reuseResults","this","_constructor","listenerResults","once","addEventListener","findAndSplice","l","arr","listener","findIndex","removeEventListener","Modes","test","location","search","indexOf","http","ssl","multipleConnections","asServiceWorker","sessionStorage","storeName","appStorage","readBlobAsText","blob","reader","FileReader","e","srcElement","result","readAsText","blobConstruct","blobParts","mimeType","safeMimeType","blobSafeMimeType","Blob","bb","BlobBuilder","blobPart","append","getBlob","version","stores","options","storageIsAvailable","openDatabase","createNew","openDbPromise","request","indexedDB","open","message","finished","onerror","onsuccess","event","db","calledNew","onclose","onabort","transaction","target","close","onversionchange","onupgradeneeded","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","concat","getObjectStore","objectStore","delete","clear","idx","put","fileName","save","get","mode","perf","performance","then","timeout","oncomplete","results","r","requests","getAll","storageOptions","cache","useStorage","getPromises","Map","keysToSet","Set","saveDeferred","storage","STORAGES","saveThrottled","size","from","values","getThrottled","includes","getFromCache","p","set","onlyLocal","setToCache","add","saveLocal","deleteAll","enabled","all","RootScope","super","_overlayIsActive","myId","idle","isIDLE","connectionStatus","peerId","broadcast","detail","dispatchEvent","on","off","status","darkModeMediaQuery","matchMedia","checkDarkMode","systemTheme","matches","setTheme","document","documentElement","classList","toggle","getTheme","settings","theme","themes","find","t","rootScope"],"mappings":"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","file":"0.fcbe03e980251c7eb898.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// * Jolly Cobra's schedulers\r\nimport { AnyToVoidFunction, NoneToVoidFunction } from \"../types\";\r\n\r\n//type Scheduler = typeof requestAnimationFrame | typeof onTickEnd | typeof runNow;\r\n\r\nexport function debounce<F extends AnyToVoidFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n  shouldRunLast = true,\r\n) {\r\n  let waitingTimeout: number | null = null;\r\n\r\n  return (...args: Parameters<F>) => {\r\n    if(waitingTimeout) {\r\n      clearTimeout(waitingTimeout);\r\n      waitingTimeout = null;\r\n    } else if(shouldRunFirst) {\r\n      // @ts-ignore\r\n      fn(...args);\r\n    }\r\n\r\n    waitingTimeout = setTimeout(() => {\r\n      if(shouldRunLast) {\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }\r\n\r\n      waitingTimeout = null;\r\n    }, ms) as any;\r\n  };\r\n}\r\n\r\nexport function throttle<F extends AnyToVoidFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n) {\r\n  let interval: number | null = null;\r\n  let isPending: boolean;\r\n  let args: Parameters<F>;\r\n\r\n  return (..._args: Parameters<F>) => {\r\n    isPending = true;\r\n    args = _args;\r\n\r\n    if(!interval) {\r\n      if(shouldRunFirst) {\r\n        isPending = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }\r\n\r\n      interval = setInterval(() => {\r\n        if (!isPending) {\r\n          clearInterval(interval!);\r\n          interval = null;\r\n          return;\r\n        }\r\n\r\n        isPending = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }, ms) as any;\r\n    }\r\n  };\r\n}\r\n\r\n/* export function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\r\n  return throttleWith(fastRaf, fn);\r\n}\r\n\r\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\r\n  return throttleWith(onTickEnd, fn);\r\n}\r\n\r\nexport function throttleWithNow<F extends AnyToVoidFunction>(fn: F) {\r\n  return throttleWith(runNow, fn);\r\n}\r\n\r\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\r\n  let waiting = false;\r\n  let args: Parameters<F>;\r\n\r\n  return (..._args: Parameters<F>) => {\r\n    args = _args;\r\n\r\n    if (!waiting) {\r\n      waiting = true;\r\n\r\n      schedulerFn(() => {\r\n        waiting = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function onTickEnd(cb: NoneToVoidFunction) {\r\n  Promise.resolve().then(cb);\r\n}\r\n\r\nfunction runNow(fn: NoneToVoidFunction) {\r\n  fn();\r\n} */\r\n\r\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\r\n  setTimeout(resolve, ms);\r\n});\r\n\r\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\r\nexport function fastRaf(callback: NoneToVoidFunction) {\r\n  if(!fastRafCallbacks) {\r\n    fastRafCallbacks = [callback];\r\n\r\n    requestAnimationFrame(() => {\r\n      const currentCallbacks = fastRafCallbacks!;\r\n      fastRafCallbacks = undefined;\r\n      currentCallbacks.forEach((cb) => cb());\r\n    });\r\n  } else {\r\n    fastRafCallbacks.push(callback);\r\n  }\r\n}\r\n\r\nexport function doubleRaf() {\r\n  return new Promise<void>((resolve) => {\r\n    fastRaf(() => {\r\n      fastRaf(resolve);\r\n    });\r\n  });\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function copy<T>(obj: T): T {\r\n  //in case of premitives\r\n  if(obj === null || typeof(obj) !== \"object\") {\r\n    return obj;\r\n  }\r\n \r\n  //date objects should be \r\n  if(obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n \r\n  //handle Array\r\n  if(Array.isArray(obj)) {\r\n    // @ts-ignore\r\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\r\n    return clonedArr;\r\n  }\r\n \r\n  //lastly, handle objects\r\n  // @ts-ignore\r\n  let clonedObj = new obj.constructor();\r\n  for(var prop in obj){\r\n    if(obj.hasOwnProperty(prop)) {\r\n      clonedObj[prop] = copy(obj[prop]);\r\n    }\r\n  }\r\n  return clonedObj;\r\n}\r\n\r\nexport function deepEqual(x: any, y: any): boolean {\r\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\r\n  return x && y && tx === 'object' && tx === ty ? (\r\n    ok(x).length === ok(y).length &&\r\n      ok(x).every(key => deepEqual(x[key], y[key]))\r\n  ) : (x === y);\r\n}\r\n\r\nexport function defineNotNumerableProperties(obj: {[key: string]: any}, names: string[]) {\r\n  //const perf = performance.now();\r\n  const props = {writable: true, configurable: true};\r\n  const out: {[name: string]: typeof props} = {};\r\n  names.forEach(name => {\r\n    if(obj[name] === undefined) {\r\n      out[name] = props;\r\n    }\r\n  });\r\n  Object.defineProperties(obj, out);\r\n  //console.log('defineNotNumerableProperties time:', performance.now() - perf);\r\n}\r\n\r\nexport function getObjectKeysAndSort(object: any, sort: 'asc' | 'desc' = 'asc') {\r\n  if(!object) return [];\r\n  const ids = Object.keys(object).map(i => +i);\r\n  if(sort === 'asc') return ids.sort((a, b) => a - b);\r\n  else return ids.sort((a, b) => b - a);\r\n}\r\n\r\nexport function safeReplaceObject(wasObject: any, newObject: any) {\r\n  if(!wasObject) {\r\n    return newObject;\r\n  }\r\n\r\n  for(var key in wasObject) {\r\n    if(!newObject.hasOwnProperty(key)) {\r\n      delete wasObject[key];\r\n    }\r\n  }\r\n\r\n  for(var key in newObject) {\r\n    //if (newObject.hasOwnProperty(key)) { // useless\r\n      wasObject[key] = newObject[key];\r\n    //}\r\n  }\r\n  \r\n  return wasObject;\r\n}\r\n\r\n/**\r\n * Will be used for FILE_REFERENCE_EXPIRED\r\n * @param key \r\n * @param wasObject \r\n * @param newObject \r\n */\r\nexport function safeReplaceArrayInObject<K>(key: K, wasObject: any, newObject: any) {\r\n  if('byteLength' in newObject[key]) { // Uint8Array\r\n    newObject[key] = [...newObject[key]];\r\n  }\r\n\r\n  if(wasObject && wasObject[key] !== newObject[key]) {\r\n    wasObject[key].length = newObject[key].length;\r\n    (newObject[key] as any[]).forEach((v, i) => {\r\n      wasObject[key][i] = v;\r\n    });\r\n\r\n    /* wasObject[key].set(newObject[key]); */\r\n    newObject[key] = wasObject[key];\r\n  }\r\n}\r\n\r\nexport function isObject(object: any) {\r\n  return typeof(object) === 'object' && object !== null;\r\n}\r\n\r\nexport function getDeepProperty(object: any, key: string) {\r\n  const splitted = key.split('.');\r\n  let o: any = object;\r\n  splitted.forEach(key => {\r\n    if(!key) {\r\n      return;\r\n    }\r\n    \r\n    // @ts-ignore\r\n    o = o[key];\r\n  });\r\n  \r\n  return o;\r\n}\r\n\r\nexport function setDeepProperty(object: any, key: string, value: any) {\r\n  const splitted = key.split('.');\r\n  getDeepProperty(object, splitted.slice(0, -1).join('.'))[splitted.pop()] = value;\r\n}\r\n\r\nexport function validateInitObject(initObject: any, currentObject: any, onReplace?: (key: string) => void, previousKey?: string) {\r\n  for(const key in initObject) {\r\n    if(typeof(currentObject[key]) !== typeof(initObject[key])) {\r\n      currentObject[key] = copy(initObject[key]);\r\n      onReplace && onReplace(previousKey || key);\r\n    } else if(isObject(initObject[key])) {\r\n      validateInitObject(initObject[key], currentObject[key], onReplace, previousKey || key);\r\n    }\r\n  }\r\n}\r\n\r\nexport function safeAssign(object: any, fromObject: any) {\r\n  if(!fromObject) return;\r\n  \r\n  for(let i in fromObject) {\r\n    if(fromObject[i] !== undefined) {\r\n      object[i] = fromObject[i];\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (...args: any[]) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: () => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport function deferredPromise<T>() {\r\n  let deferredHelper: any = {\r\n    isFulfilled: false, \r\n    isRejected: false,\r\n\r\n    notify: () => {}, \r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    }, \r\n\r\n    lastNotify: undefined,\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n    \r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected) return;\r\n      \r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n    \r\n  }; */\r\n\r\n  deferred.finally(() => {\r\n    deferred.notify = null;\r\n    deferred.listeners.length = 0;\r\n    deferred.lastNotify = null;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = () => {};\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport DEBUG from \"../config/debug\";\r\n\r\nexport enum LogTypes {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Log = 4,\r\n  Debug = 8\r\n};\r\n\r\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\r\n\r\nconst _logTimer = Date.now();\r\nfunction dT() {\r\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\r\n}\r\n\r\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error) {\r\n  if(!DEBUG/*  || true */) {\r\n    type = LogTypes.Error;\r\n  }\r\n\r\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\r\n\r\n  function Log(...args: any[]) {\r\n    return type & LogTypes.Log && console.log(dT(), prefix, ...args);\r\n  }\r\n  \r\n  Log.warn = function(...args: any[]) {\r\n    return type & LogTypes.Warn && console.warn(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.info = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.info(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.error = function(...args: any[]) {\r\n    return type & LogTypes.Error && console.error(dT(), prefix, ...args);\r\n  };\r\n  \r\n  Log.trace = function(...args: any[]) {\r\n    return type & LogTypes.Log && console.trace(dT(), prefix, ...args);\r\n  };\r\n\r\n  /* Log.debug = function(...args: any[]) {\r\n    return level & LogLevels.debug && console.log(dT(), prefix, ...args);\r\n  }; */\r\n\r\n  Log.debug = function(...args: any[]) {\r\n    return type & LogTypes.Debug && console.debug(dT(), prefix, ...args);\r\n  };\r\n\r\n  Log.setPrefix = function(_prefix: string) {\r\n    prefix = '[' + _prefix + ']:';\r\n  };\r\n\r\n  Log.setPrefix(prefix);\r\n\r\n  Log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\r\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\r\n  };\r\n  \r\n  return Log;\r\n};\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n//import { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport type { ArgumentTypes, SuperReturnType } from \"../types\";\r\n\r\n// class EventSystem {\r\n//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();\r\n\r\n//   add(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (listeners === undefined) {\r\n//         listeners = {};\r\n//     }\r\n//     let listenersForEvent = listeners[event];\r\n//     if (listenersForEvent === undefined) {\r\n//         listenersForEvent = new Set();\r\n//     }\r\n//     listenersForEvent.add(listener);\r\n//     listeners[event] = listenersForEvent;\r\n//     //target.addEventListener(event, listener);\r\n//     this.wm.set(target, listeners);\r\n//   };\r\n\r\n//   remove(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (!listeners) return;\r\n//     let listenersForEvent = listeners[event];\r\n//     if (!listenersForEvent) return;\r\n//     listenersForEvent.delete(listener);\r\n//   };\r\n  \r\n//   /* fire(target, event) {\r\n//      let listeners = this.wm.get(target);\r\n//      if (!listeners) return;\r\n//      let listenersForEvent = listeners[event];\r\n//      if (!listenersForEvent) return;\r\n//      for (let handler of handlers) {\r\n//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. \r\n//      }\r\n//   }; */\r\n// }\r\n\r\n// console.log = () => {};\r\n\r\n// const e = new EventSystem();\r\n// MOUNT_CLASS_TO.e = e;\r\n\r\n/**\r\n * Better not to remove listeners during setting\r\n * Should add listener callback only once\r\n */\r\nexport default class EventListenerBase<Listeners extends {[name: string]: Function}> {\r\n  protected listeners: Partial<{\r\n    [k in keyof Listeners]: Array<{callback: Listeners[k], once?: boolean}>\r\n  }>;\r\n  protected listenerResults: Partial<{\r\n    [k in keyof Listeners]: ArgumentTypes<Listeners[k]>\r\n  }>;\r\n\r\n  private reuseResults: boolean;\r\n\r\n  constructor(reuseResults?: boolean) {\r\n    this._constructor(reuseResults);\r\n  }\r\n\r\n  public _constructor(reuseResults = false): any {\r\n    this.reuseResults = reuseResults;\r\n    this.listeners = {};\r\n    this.listenerResults = {};\r\n  }\r\n\r\n  public addEventListener(name: keyof Listeners, callback: Listeners[typeof name], once?: boolean) {\r\n    if(this.listenerResults.hasOwnProperty(name)) {\r\n      callback(...this.listenerResults[name]);\r\n      \r\n      if(once) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    (this.listeners[name] ?? (this.listeners[name] = [])).push({callback, once});\r\n    //e.add(this, name, {callback, once});\r\n  }\r\n\r\n  public addMultipleEventsListeners(obj: {\r\n    [name in keyof Listeners]?: Listeners[name]\r\n  }) {\r\n    for(const i in obj) {\r\n      this.addEventListener(i, obj[i]);\r\n    }\r\n  }\r\n\r\n  public removeEventListener(name: keyof Listeners, callback: Listeners[typeof name]) {\r\n    if(this.listeners[name]) {\r\n      this.listeners[name].findAndSplice(l => l.callback === callback);\r\n    }\r\n    //e.remove(this, name, callback);\r\n  }\r\n\r\n  // * must be protected, but who cares\r\n  public dispatchEvent(name: keyof Listeners, ...args: ArgumentTypes<Listeners[typeof name]>) {\r\n    if(this.reuseResults) {\r\n      this.listenerResults[name] = args;\r\n    }\r\n\r\n    const arr: Array<SuperReturnType<Listeners[typeof name]>> = [];\r\n\r\n    /* let a = e.wm.get(this)[name];\r\n    if(!a) return arr;\r\n    const listeners = [...a]; */\r\n    const listeners = this.listeners[name];\r\n    if(listeners) {\r\n      // ! this one will guarantee execution even if delete another listener during setting\r\n      const left = listeners.slice();\r\n      left.forEach((listener: any) => {\r\n        const index = listeners.findIndex((l: any) => l.callback === listener.callback);\r\n        if(index === -1) {\r\n          return;\r\n        }\r\n\r\n        arr.push(listener.callback(...args));\r\n\r\n        if(listener.once) {\r\n          this.removeEventListener(name, listener.callback);\r\n        }\r\n      });\r\n\r\n      /* for(let i = 0, length = listeners.length; i < length; ++i) {\r\n        const listener = listeners[i];\r\n        arr.push(listener.callback(...args));\r\n\r\n        if(listener.once) {\r\n          listeners.splice(i, 1);\r\n          --i;\r\n          --length;\r\n        }\r\n      } */\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  public cleanup() {\r\n    this.listeners = {}; \r\n    this.listenerResults = {};\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nconst Modes = {\r\n  test: location.search.indexOf('test=1') > 0/*  || true */,\r\n  debug: location.search.indexOf('debug=1') > 0,\r\n  http: false, //location.search.indexOf('http=1') > 0,\r\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\r\n  multipleConnections: true,\r\n  asServiceWorker: false\r\n};\r\n\r\n//////////////////\r\n/////////////////////////////\r\n//////////\r\n\r\nexport default Modes;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatSavedPosition } from './appManagers/appImManager';\r\nimport type { State } from './appManagers/appStateManager';\r\nimport type { AppDraftsManager } from './appManagers/appDraftsManager';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport { LangPackDifference } from '../layer';\r\nimport AppStorage from './storage';\r\n\r\nconst sessionStorage = new AppStorage<{\r\n  dc: number,\r\n  user_auth: number,\r\n  dc1_auth_key: any,\r\n  dc2_auth_key: any,\r\n  dc3_auth_key: any,\r\n  dc4_auth_key: any,\r\n  dc5_auth_key: any,\r\n  max_seen_msg: number,\r\n  server_time_offset: number,\r\n\r\n  chatPositions: {\r\n    [peerId_threadId: string]: ChatSavedPosition\r\n  },\r\n  langPack: LangPackDifference,\r\n  drafts: AppDraftsManager['drafts']\r\n} & State>({\r\n  storeName: 'session'\r\n});\r\nMOUNT_CLASS_TO.appStorage = sessionStorage;\r\nexport default sessionStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport const readBlobAsText = (blob: Blob) => {\r\n  return new Promise<string>(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', (e) => {\r\n      // @ts-ignore\r\n      resolve(e.srcElement.result);\r\n    });\r\n    reader.readAsText(blob);\r\n  });\r\n};\r\n\r\nexport function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\r\n  let blob;\r\n  const safeMimeType = blobSafeMimeType(mimeType);\r\n  try {\r\n    blob = new Blob(blobParts, {type: safeMimeType});\r\n  } catch(e) {\r\n    // @ts-ignore\r\n    let bb = new BlobBuilder;\r\n    blobParts.forEach((blobPart: any) => {\r\n      bb.append(blobPart);\r\n    });\r\n    blob = bb.getBlob(safeMimeType);\r\n  }\r\n  return blob;\r\n}\r\n\r\nexport function blobSafeMimeType(mimeType: string) {\r\n  if([\r\n    'image/jpeg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/bmp',\r\n    'video/mp4',\r\n    'video/webm',\r\n    'video/quicktime',\r\n    'audio/ogg',\r\n    'audio/mpeg',\r\n    'audio/mp4',\r\n    'application/json'\r\n  ].indexOf(mimeType) === -1) {\r\n    return 'application/octet-stream';\r\n  }\r\n\r\n  return mimeType;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { IDBStore } from \"../lib/idb\";\r\nimport Modes from \"./modes\";\r\n\r\nexport type DatabaseStoreName = 'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs';\r\nexport type DatabaseStore = Omit<IDBStore, 'name'> & {name: DatabaseStoreName};\r\nconst Database = {\r\n  name: 'tweb' + (Modes.test ? '_test' : ''),\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }] as DatabaseStore[],\r\n};\r\n\r\nexport default Database;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Database from '../config/database';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport { safeAssign } from '../helpers/object';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage {\r\n  //private static STORAGES: IDBStorage[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string = Database.name;\r\n  private version: number = Database.version;\r\n  private stores: IDBStore[] = Database.stores;\r\n\r\n  private storeName: string;\r\n\r\n  constructor(options: IDBOptions) {\r\n    safeAssign(this, options);\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    //IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        throw new Error();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', error.message)\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public deleteAll() {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'deleteAll' : '');\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        const transaction = db.transaction([this.storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(this.storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { DatabaseStore, DatabaseStoreName } from \"../config/database\";\r\nimport { CancellablePromise, deferredPromise } from \"../helpers/cancellablePromise\";\r\nimport { throttle } from \"../helpers/schedulers\";\r\nimport IDBStorage, { IDBOptions } from \"./idb\";\r\n\r\nexport default class AppStorage<Storage extends Record<string, any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\r\n  private static STORAGES: AppStorage<any>[] = [];\r\n  private storage: IDBStorage;//new CacheStorageController('session');\r\n\r\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage = true;\r\n\r\n  private getPromises: Map<keyof Storage, CancellablePromise<Storage[keyof Storage]>> = new Map();\r\n  private getThrottled: () => void;\r\n\r\n  private keysToSet: Set<keyof Storage> = new Set();\r\n  private saveThrottled: () => void;\r\n  private saveDeferred = deferredPromise<void>();\r\n\r\n  constructor(storageOptions: Omit<IDBOptions, 'storeName' | 'stores'> & {stores?: DatabaseStore[], storeName: DatabaseStoreName}) {\r\n    this.storage = new IDBStorage(storageOptions);\r\n\r\n    AppStorage.STORAGES.push(this);\r\n\r\n    this.saveThrottled = throttle(async() => {\r\n      const deferred = this.saveDeferred;\r\n      this.saveDeferred = deferredPromise<void>();\r\n\r\n      if(this.keysToSet.size) {\r\n        const keys = Array.from(this.keysToSet.values()) as string[];\r\n        this.keysToSet.clear();\r\n\r\n        try {\r\n          //console.log('setItem: will set', key/* , value */);\r\n          //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\r\n          //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\r\n          await this.storage.save(keys, keys.map(key => this.cache[key]));\r\n          //console.log('setItem: have set', key/* , value */);\r\n        } catch(e) {\r\n          //this.useCS = false;\r\n          console.error('[AS]: set error:', e, keys/* , value */);\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n    }, 16, false);\r\n\r\n    this.getThrottled = throttle(async() => {\r\n      const keys = Array.from(this.getPromises.keys());\r\n\r\n      this.storage.get(keys as string[]).then(values => {\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            // @ts-ignore\r\n            deferred.resolve(this.cache[key] = values[i]);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      }, (error) => {\r\n        if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(error)) {\r\n          this.useStorage = false;\r\n          console.error('[AS]: get error:', error, keys);\r\n        }\r\n\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            deferred.reject(error);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      });\r\n    }, 16, false);\r\n  }\r\n\r\n  public getCache() {\r\n    return this.cache;\r\n  }\r\n\r\n  public getFromCache(key: keyof Storage) {\r\n    return this.cache[key];\r\n  }\r\n\r\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async get(key: keyof Storage): Promise<Storage[typeof key]> {\r\n    if(this.cache.hasOwnProperty(key)) {\r\n      return this.getFromCache(key);\r\n    } else if(this.useStorage) {\r\n      const r = this.getPromises.get(key);\r\n      if(r) return r;\r\n\r\n      const p = deferredPromise<Storage[typeof key]>();\r\n      this.getPromises.set(key, p);\r\n\r\n      this.getThrottled();\r\n\r\n      return p;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public getAll() {\r\n    return this.storage.getAll();\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal = false) {\r\n    //console.log('storageSetValue', obj, callback, arguments);\r\n\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.setToCache(key, value);\r\n\r\n        // let perf = /* DEBUG */false ? performance.now() : 0;\r\n        // value = JSON.stringify(value);\r\n\r\n        // if(perf) {\r\n        //   let elapsedTime = performance.now() - perf;\r\n        //   if(elapsedTime > 10) {\r\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\r\n        //   }\r\n        // }\r\n        \r\n        /* perf = performance.now();\r\n        value = stringify(value);\r\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\r\n\r\n        if(this.useStorage && !onlyLocal) {\r\n          this.keysToSet.add(key);\r\n          this.saveThrottled();\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.saveDeferred;\r\n  }\r\n\r\n  public async delete(key: keyof Storage, saveLocal = false) {\r\n    /* if(!this.cache.hasOwnProperty(key)) {\r\n      return;\r\n    } */\r\n\r\n    // ! it is needed here\r\n    key = '' + key;\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    if(this.useStorage) {\r\n      this.keysToSet.delete(key);\r\n      \r\n      try {\r\n        await this.storage.delete(key as string);\r\n      } catch(e) {\r\n        this.useStorage = false;\r\n        console.error('[AS]: remove error:', e);\r\n      }\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    return this.storage.deleteAll();\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        storage.keysToSet.clear();\r\n        storage.getPromises.forEach((deferred) => deferred.resolve());\r\n        storage.getPromises.clear();\r\n        return storage.clear();\r\n      } else {\r\n        return storage.set(storage.cache);\r\n      }\r\n    }));\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { Message, StickerSet, Update, NotifyPeer, PeerNotifySettings, ConstructorDeclMap } from \"../layer\";\r\nimport type { MyDocument } from \"./appManagers/appDocsManager\";\r\nimport type { AppMessagesManager, Dialog, MessagesStorage } from \"./appManagers/appMessagesManager\";\r\nimport type { Poll, PollResults } from \"./appManagers/appPollsManager\";\r\nimport type { MyDialogFilter } from \"./storages/filters\";\r\nimport type { ConnectionStatusChange } from \"../types\";\r\nimport type { UserTyping } from \"./appManagers/appChatsManager\";\r\nimport type Chat from \"../components/chat/chat\";\r\nimport type { UserAuth } from \"./mtproto/mtproto_config\";\r\nimport type { State, Theme } from \"./appManagers/appStateManager\";\r\nimport type { MyDraftMessage } from \"./appManagers/appDraftsManager\";\r\nimport EventListenerBase from \"../helpers/eventListenerBase\";\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\n\r\nexport type BroadcastEvents = {\r\n  'user_update': number,\r\n  'user_auth': UserAuth,\r\n  'peer_changed': number,\r\n  'peer_changing': Chat,\r\n  'peer_pinned_messages': {peerId: number, mids?: number[], pinned?: boolean, unpinAll?: true},\r\n  'peer_pinned_hidden': {peerId: number, maxId: number},\r\n  'peer_typings': {peerId: number, typings: UserTyping[]},\r\n  'peer_block': {peerId: number, blocked: boolean},\r\n  'peer_title_edit': number,\r\n  'peer_bio_edit': number,\r\n\r\n  'filter_delete': MyDialogFilter,\r\n  'filter_update': MyDialogFilter,\r\n  'filter_order': number[],\r\n  \r\n  'dialog_draft': {peerId: number, draft: MyDraftMessage | undefined, index: number},\r\n  'dialog_unread': {peerId: number},\r\n  'dialog_flush': {peerId: number},\r\n  'dialog_drop': {peerId: number, dialog?: Dialog},\r\n  'dialog_migrate': {migrateFrom: number, migrateTo: number},\r\n  //'dialog_top': Dialog,\r\n  'dialog_notify_settings': Dialog,\r\n  'dialogs_multiupdate': {[peerId: string]: Dialog},\r\n  'dialogs_archived_unread': {count: number},\r\n  \r\n  'history_append': {storage: MessagesStorage, peerId: number, mid: number},\r\n  'history_update': {storage: MessagesStorage, peerId: number, mid: number},\r\n  'history_reply_markup': {peerId: number},\r\n  'history_multiappend': AppMessagesManager['newMessagesToHandle'],\r\n  'history_delete': {peerId: number, msgs: {[mid: number]: true}},\r\n  'history_forbidden': number,\r\n  'history_reload': number,\r\n  'history_focus': {peerId: number, mid?: number},\r\n  //'history_request': void,\r\n  \r\n  'message_edit': {storage: MessagesStorage, peerId: number, mid: number},\r\n  'message_views': {mid: number, views: number},\r\n  'message_sent': {storage: MessagesStorage, tempId: number, tempMessage: any, mid: number},\r\n  'messages_pending': void,\r\n  'messages_read': void,\r\n  'messages_downloaded': {peerId: number, mids: number[]},\r\n  'messages_media_read': {peerId: number, mids: number[]},\r\n\r\n  'replies_updated': Message.message,\r\n\r\n  'scheduled_new': {peerId: number, mid: number},\r\n  'scheduled_delete': {peerId: number, mids: number[]},\r\n\r\n  'album_edit': {peerId: number, groupId: string, deletedMids: number[]},\r\n\r\n  'stickers_installed': StickerSet.stickerSet,\r\n  'stickers_deleted': StickerSet.stickerSet,\r\n\r\n  'audio_play': {doc: MyDocument, mid: number, peerId: number},\r\n  'audio_pause': void,\r\n  \r\n  'state_synchronized': number,\r\n  'state_synchronizing': number,\r\n  \r\n  'contacts_update': number,\r\n  'avatar_update': number,\r\n  'chat_full_update': number,\r\n  'poll_update': {poll: Poll, results: PollResults},\r\n  'chat_update': number,\r\n  'channel_settings': {channelId: number},\r\n  'webpage_updated': {id: string, msgs: number[]},\r\n\r\n  'download_progress': any,\r\n  'connection_status_change': ConnectionStatusChange,\r\n  'settings_updated': {key: string, value: any},\r\n  'draft_updated': {peerId: number, threadId: number, draft: MyDraftMessage | undefined},\r\n\r\n  'event-heavy-animation-start': void,\r\n  'event-heavy-animation-end': void,\r\n\r\n  'im_mount': void,\r\n  'im_tab_change': number,\r\n\r\n  'idle': boolean,\r\n\r\n  'overlay_toggle': boolean,\r\n\r\n  'background_change': void,\r\n\r\n  'privacy_update': Update.updatePrivacy,\r\n\r\n  'notify_settings': Update.updateNotifySettings,\r\n  'notify_peer_type_settings': {key: Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings},\r\n\r\n  'language_change': void,\r\n  \r\n  'theme_change': void,\r\n};\r\n\r\nexport class RootScope extends EventListenerBase<{\r\n  [name in Update['_']]: (update: ConstructorDeclMap[name]) => void\r\n} & {\r\n  [name in keyof BroadcastEvents]: (e: BroadcastEvents[name]) => void\r\n}> {\r\n  private _overlayIsActive: boolean = false;\r\n  public myId = 0;\r\n  public idle = {\r\n    isIDLE: true\r\n  };\r\n  public connectionStatus: {[name: string]: ConnectionStatusChange} = {};\r\n  public settings: State['settings'];\r\n  public peerId = 0;\r\n  public systemTheme: Theme['name'];\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.on('peer_changed', (peerId) => {\r\n      this.peerId = peerId;\r\n    });\r\n\r\n    this.on('user_auth', (e) => {\r\n      this.myId = e;\r\n    });\r\n\r\n    this.on('connection_status_change', (e) => {\r\n      const status = e;\r\n      this.connectionStatus[e.name] = status;\r\n    });\r\n  }\r\n\r\n  public setThemeListener() {\r\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const checkDarkMode = () => {\r\n      //const theme = this.getTheme();\r\n      this.systemTheme = darkModeMediaQuery.matches ? 'night' : 'day';\r\n      //const newTheme = this.getTheme();\r\n\r\n      if(this.myId) {\r\n        this.broadcast('theme_change');\r\n      } else {\r\n        this.setTheme();\r\n      }\r\n    };\r\n    darkModeMediaQuery.addEventListener('change', checkDarkMode);\r\n    checkDarkMode();\r\n  }\r\n\r\n  public setTheme() {\r\n    document.documentElement.classList.toggle('night', this.getTheme().name === 'night');\r\n  }\r\n\r\n  get overlayIsActive() {\r\n    return this._overlayIsActive;\r\n  }\r\n\r\n  set overlayIsActive(value: boolean) {\r\n    this._overlayIsActive = value;\r\n    this.broadcast('overlay_toggle', value);\r\n  }\r\n\r\n  public getTheme(name: Theme['name'] = this.settings.theme === 'system' ? this.systemTheme : this.settings.theme) {\r\n    return this.settings.themes.find(t => t.name === name);\r\n  }\r\n\r\n  public broadcast = <T extends keyof BroadcastEvents>(name: T, detail?: BroadcastEvents[T]) => {\r\n    /* //if(DEBUG) {\r\n      if(name !== 'user_update') {\r\n        console.debug('Broadcasting ' + name + ' event, with args:', detail);\r\n      }\r\n    //} */\r\n\r\n    this.dispatchEvent(name, detail);\r\n  };\r\n\r\n  public on = <T extends keyof BroadcastEvents>(name: T, callback: (e: BroadcastEvents[T]) => any, once?: true) => {\r\n    super.addEventListener(name, callback, once);\r\n  };\r\n\r\n  public addEventListener = this.on;\r\n\r\n  public off = <T extends keyof BroadcastEvents>(name: T, callback: (e: BroadcastEvents[T]) => any) => {\r\n    super.removeEventListener(name, callback);\r\n  };\r\n\r\n  public removeEventListener = this.off;\r\n}\r\n\r\nconst rootScope = new RootScope();\r\nMOUNT_CLASS_TO.rootScope = rootScope;\r\nexport default rootScope;\r\n\r\n/* rootScope.addEventListener('album_edit', (e) => {\r\n  \r\n});\r\n\r\nrootScope.addEventListener<'album_edit'>('album_edit', (e) => {\r\n  \r\n}); */\r\n"],"sourceRoot":""}